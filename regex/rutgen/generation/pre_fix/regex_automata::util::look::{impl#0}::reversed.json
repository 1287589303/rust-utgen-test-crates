{
  "name": "regex_automata::util::look::{impl#0}::reversed",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:144:5:165:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Look::WordEndHalfUnicode at line 145 is true\n",
        "expected return value/type: Look::WordStartHalfUnicode\n"
      ],
      "input_infer": "self matches Look::WordEndHalfUnicode at line 145 is true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Look::WordStartHalfUnicode at line 145 is true\n",
        "precondition: self matches Look::WordStartHalfUnicode at line 145 is true\n",
        "expected return value/type: Look::WordEndHalfUnicode\n"
      ],
      "input_infer": "self matches Look::WordStartHalfUnicode, expected to return Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self matches Look::WordEndHalfAscii at line 145 is true\n",
        "precondition: self matches Look::WordEndHalfAscii at line 145 is true\n",
        "expected return value/type: Look::WordStartHalfAscii\n"
      ],
      "input_infer": "self must be Look::WordEndHalfAscii\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: self matches Look::WordStartHalfAscii at line 145 is true\n",
        "precondition: self matches Look::WordStartHalfAscii at line 145 is true\n",
        "expected return value/type: Look::WordEndHalfAscii\n"
      ],
      "input_infer": "self = Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _ = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: self matches Look::WordEndUnicode at line 145 is true\n",
        "precondition: self matches Look::WordEndUnicode at line 145 is true\n",
        "expected return value/type: Look::WordStartUnicode\n"
      ],
      "input_infer": "self must match Look::WordEndUnicode (value: 1 << 13)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: self matches Look::WordStartUnicode at line 145 is true\n",
        "precondition: self matches Look::WordStartUnicode at line 145 is true\n",
        "expected return value/type: Look::WordEndUnicode\n"
      ],
      "input_infer": "self matches Look::WordStartUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _ = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _ = input.reversed();",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _ = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::WordStartUnicode;",
                "    let expected = Look::WordEndUnicode;",
                "    assert_eq!(input.reversed(), expected);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _ = input.reversed();",
                "    let input = Look::WordStartUnicode;",
                "    let expected = Look::WordEndUnicode;",
                "    assert_eq!(input.reversed(), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: self matches Look::WordEndAscii at line 145 is true\n",
        "precondition: self matches Look::WordEndAscii at line 145 is true\n",
        "expected return value/type: Look::WordStartAscii\n"
      ],
      "input_infer": "self must be Look::WordEndAscii\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::WordStartAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::WordStartAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: self matches Look::WordStartAscii at line 145 is true\n",
        "precondition: self matches Look::WordStartAscii at line 145 is true\n",
        "expected return value/type: Look::WordEndAscii\n"
      ],
      "input_infer": "self matches Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode; expected Look::WordEndAscii\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::WordStartAscii;",
                "    let expected = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let _result = input.reversed();",
                "    let input = Look::WordStartAscii;",
                "    let expected = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: self matches Look::WordUnicodeNegate at line 145 is true\n",
        "precondition: self matches Look::WordUnicodeNegate at line 145 is true\n",
        "expected return value/type: Look::WordUnicodeNegate\n"
      ],
      "input_infer": "self matches Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicode);",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::WordAscii;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::Start;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::StartLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::EndLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::WordStartAscii;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::WordAscii;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::Start;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::StartLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::EndLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::WordStartAscii;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 10,
      "prompt_conds": [
        "precondition: self matches Look::WordUnicode at line 145 is true\n",
        "precondition: self matches Look::WordUnicode at line 145 is true\n",
        "expected return value/type: Look::WordUnicode\n"
      ],
      "input_infer": "self matches Look::WordUnicode and self matches Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::WordUnicode; assert_eq!(input.reversed(), Look::WordUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let _result = input.reversed();",
                "    let input = Look::WordUnicode; assert_eq!(input.reversed(), Look::WordUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let _result = input.reversed();",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordUnicode;",
                "    assert_eq!(input.reversed(), Look::WordUnicode);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::Start;",
                "    assert_eq!(input.reversed(), Look::End);",
                "    input = Look::End;",
                "    assert_eq!(input.reversed(), Look::Start);",
                "    input = Look::StartLF;",
                "    assert_eq!(input.reversed(), Look::EndLF);",
                "    input = Look::EndLF;",
                "    assert_eq!(input.reversed(), Look::StartLF);",
                "    input = Look::StartCRLF;",
                "    assert_eq!(input.reversed(), Look::EndCRLF);",
                "    input = Look::EndCRLF;",
                "    assert_eq!(input.reversed(), Look::StartCRLF);",
                "    input = Look::WordStartAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordEndAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    input = Look::WordStartUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::WordEndUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    input = Look::WordStartHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    input = Look::WordEndHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    input = Look::WordStartHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordUnicode;",
                "    assert_eq!(input.reversed(), Look::WordUnicode);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::Start;",
                "    assert_eq!(input.reversed(), Look::End);",
                "    input = Look::End;",
                "    assert_eq!(input.reversed(), Look::Start);",
                "    input = Look::StartLF;",
                "    assert_eq!(input.reversed(), Look::EndLF);",
                "    input = Look::EndLF;",
                "    assert_eq!(input.reversed(), Look::StartLF);",
                "    input = Look::StartCRLF;",
                "    assert_eq!(input.reversed(), Look::EndCRLF);",
                "    input = Look::EndCRLF;",
                "    assert_eq!(input.reversed(), Look::StartCRLF);",
                "    input = Look::WordStartAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordEndAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    input = Look::WordStartUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::WordEndUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    input = Look::WordStartHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    input = Look::WordEndHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    input = Look::WordStartHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    _assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    _input = Look::WordStartUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    _input = Look::WordUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordUnicode);",
                "    _input = Look::WordAscii;",
                "    _assert_eq!(input.reversed(), Look::WordAscii);",
                "    _input = Look::WordAsciiNegate;",
                "    _assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    _input = Look::Start;",
                "    _assert_eq!(input.reversed(), Look::End);",
                "    _input = Look::End;",
                "    _assert_eq!(input.reversed(), Look::Start);",
                "    _input = Look::StartLF;",
                "    _assert_eq!(input.reversed(), Look::EndLF);",
                "    _input = Look::EndLF;",
                "    _assert_eq!(input.reversed(), Look::StartLF);",
                "    _input = Look::StartCRLF;",
                "    _assert_eq!(input.reversed(), Look::EndCRLF);",
                "    _input = Look::EndCRLF;",
                "    _assert_eq!(input.reversed(), Look::StartCRLF);",
                "    _input = Look::WordStartAscii;",
                "    _assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    _input = Look::WordEndAscii;",
                "    _assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    _input = Look::WordStartHalfAscii;",
                "    _assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    _input = Look::WordEndHalfAscii;",
                "    _assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    _input = Look::WordStartHalfUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    _input = Look::WordEndHalfUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let _result = input.reversed();",
                "    _assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    _input = Look::WordStartUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    _input = Look::WordUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordUnicode);",
                "    _input = Look::WordAscii;",
                "    _assert_eq!(input.reversed(), Look::WordAscii);",
                "    _input = Look::WordAsciiNegate;",
                "    _assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    _input = Look::Start;",
                "    _assert_eq!(input.reversed(), Look::End);",
                "    _input = Look::End;",
                "    _assert_eq!(input.reversed(), Look::Start);",
                "    _input = Look::StartLF;",
                "    _assert_eq!(input.reversed(), Look::EndLF);",
                "    _input = Look::EndLF;",
                "    _assert_eq!(input.reversed(), Look::StartLF);",
                "    _input = Look::StartCRLF;",
                "    _assert_eq!(input.reversed(), Look::EndCRLF);",
                "    _input = Look::EndCRLF;",
                "    _assert_eq!(input.reversed(), Look::StartCRLF);",
                "    _input = Look::WordStartAscii;",
                "    _assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    _input = Look::WordEndAscii;",
                "    _assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    _input = Look::WordStartHalfAscii;",
                "    _assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    _input = Look::WordEndHalfAscii;",
                "    _assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    _input = Look::WordStartHalfUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    _input = Look::WordEndHalfUnicode;",
                "    _assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "    input = Look::WordUnicode;",
                "    assert_eq!(input.reversed(), Look::WordUnicode);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::WordAsciiNegate;",
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "    input = Look::WordUnicode;",
                "    assert_eq!(input.reversed(), Look::WordUnicode);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::WordAsciiNegate;",
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let _result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let _result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 11,
      "prompt_conds": [
        "precondition: self matches Look::WordAsciiNegate at line 145 is true\n",
        "precondition: self matches Look::WordAsciiNegate at line 145 is true\n",
        "expected return value/type: Look::WordAsciiNegate\n"
      ],
      "input_infer": "self matches Look::WordAsciiNegate; expected return Look::WordAsciiNegate\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    look.reversed() == Look::End",
                "    let look = Look::End; let result = look.reversed(); result == Look::Start",
                "    let look = Look::StartLF; let result = look.reversed(); result == Look::EndLF",
                "    let look = Look::EndLF; let result = look.reversed(); result == Look::StartLF",
                "    let look = Look::StartCRLF; let result = look.reversed(); result == Look::EndCRLF",
                "    let look = Look::EndCRLF; let result = look.reversed(); result == Look::StartCRLF",
                "    let look = Look::WordAscii; let result = look.reversed(); result == Look::WordAscii",
                "    let look = Look::WordAsciiNegate; let result = look.reversed(); result == Look::WordAsciiNegate",
                "    let look = Look::WordUnicode; let result = look.reversed(); result == Look::WordUnicode",
                "    let look = Look::WordUnicodeNegate; let result = look.reversed(); result == Look::WordUnicodeNegate",
                "    let look = Look::WordStartAscii; let result = look.reversed(); result == Look::WordEndAscii",
                "    let look = Look::WordEndAscii; let result = look.reversed(); result == Look::WordStartAscii",
                "    let look = Look::WordStartUnicode; let result = look.reversed(); result == Look::WordEndUnicode",
                "    let look = Look::WordEndUnicode; let result = look.reversed(); result == Look::WordStartUnicode",
                "    let look = Look::WordStartHalfAscii; let result = look.reversed(); result == Look::WordEndHalfAscii",
                "    let look = Look::WordEndHalfAscii; let result = look.reversed(); result == Look::WordStartHalfAscii",
                "    let look = Look::WordStartHalfUnicode; let result = look.reversed(); result == Look::WordEndHalfUnicode",
                "    let look = Look::WordEndHalfUnicode; let result = look.reversed(); result == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    look.reversed() == Look::End",
                "    let look = Look::End; let result = look.reversed(); result == Look::Start",
                "    let look = Look::StartLF; let result = look.reversed(); result == Look::EndLF",
                "    let look = Look::EndLF; let result = look.reversed(); result == Look::StartLF",
                "    let look = Look::StartCRLF; let result = look.reversed(); result == Look::EndCRLF",
                "    let look = Look::EndCRLF; let result = look.reversed(); result == Look::StartCRLF",
                "    let look = Look::WordAscii; let result = look.reversed(); result == Look::WordAscii",
                "    let look = Look::WordAsciiNegate; let result = look.reversed(); result == Look::WordAsciiNegate",
                "    let look = Look::WordUnicode; let result = look.reversed(); result == Look::WordUnicode",
                "    let look = Look::WordUnicodeNegate; let result = look.reversed(); result == Look::WordUnicodeNegate",
                "    let look = Look::WordStartAscii; let result = look.reversed(); result == Look::WordEndAscii",
                "    let look = Look::WordEndAscii; let result = look.reversed(); result == Look::WordStartAscii",
                "    let look = Look::WordStartUnicode; let result = look.reversed(); result == Look::WordEndUnicode",
                "    let look = Look::WordEndUnicode; let result = look.reversed(); result == Look::WordStartUnicode",
                "    let look = Look::WordStartHalfAscii; let result = look.reversed(); result == Look::WordEndHalfAscii",
                "    let look = Look::WordEndHalfAscii; let result = look.reversed(); result == Look::WordStartHalfAscii",
                "    let look = Look::WordStartHalfUnicode; let result = look.reversed(); result == Look::WordEndHalfUnicode",
                "    let look = Look::WordEndHalfUnicode; let result = look.reversed(); result == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    look.reversed() == Look::WordStartAscii;",
                "    look.reversed() == Look::WordEndAscii;",
                "    look.reversed() == Look::WordEndHalfAscii;",
                "    look.reversed() == Look::WordStartHalfAscii;",
                "    look.reversed() == Look::WordAsciiNegate;",
                "    look.reversed() == Look::WordUnicode;",
                "    look.reversed() == Look::WordStartHalfUnicode;",
                "    look.reversed() == Look::WordEndHalfUnicode;"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    look.reversed() == Look::WordStartAscii;",
                "    look.reversed() == Look::WordEndAscii;",
                "    look.reversed() == Look::WordEndHalfAscii;",
                "    look.reversed() == Look::WordStartHalfAscii;",
                "    look.reversed() == Look::WordAsciiNegate;",
                "    look.reversed() == Look::WordUnicode;",
                "    look.reversed() == Look::WordStartHalfUnicode;",
                "    look.reversed() == Look::WordEndHalfUnicode;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    result == Look::WordStartHalfUnicode",
                "    look == Look::WordEndHalfUnicode",
                "    result == Look::WordAsciiNegate",
                "    look == Look::WordAsciiNegate"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    result == Look::WordStartHalfUnicode",
                "    look == Look::WordEndHalfUnicode",
                "    result == Look::WordAsciiNegate",
                "    look == Look::WordAsciiNegate",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 12,
      "prompt_conds": [
        "precondition: self matches Look::WordAscii at line 145 is true\n",
        "precondition: self matches Look::WordAscii at line 145 is true\n",
        "expected return value/type: Look::WordAscii\n"
      ],
      "input_infer": "self matches Look::WordAscii or Look::WordAsciiNegate or Look::WordUnicode or Look::WordUnicodeNegate for precondition satisfaction\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAscii);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: self matches Look::EndCRLF at line 145 is true\n",
        "precondition: self matches Look::EndCRLF at line 145 is true\n",
        "expected return value/type: Look::StartCRLF\n"
      ],
      "input_infer": "self matches Look::EndCRLF or Look::StartCRLF or Look::End or Look::Start, returning Look::StartCRLF in all cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 14,
      "prompt_conds": [
        "precondition: self matches Look::StartCRLF at line 145 is true\n",
        "precondition: self matches Look::StartCRLF at line 145 is true\n",
        "expected return value/type: Look::EndCRLF\n"
      ],
      "input_infer": "self must be one of the variants from the Look enum: {Start, End, StartLF, EndLF, StartCRLF, EndCRLF, WordAscii, WordAsciiNegate, WordUnicode, WordUnicodeNegate, WordStartAscii, WordEndAscii, WordStartUnicode, WordEndUnicode, WordStartHalfAscii, WordEndHalfAscii, WordStartHalfUnicode, WordEndHalfUnicode}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::StartCRLF;",
                "    let expected_output = Look::EndCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, expected_output);"
              ],
              "code": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let output = input.reversed();",
                "    let input = Look::StartCRLF;",
                "    let expected_output = Look::EndCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, expected_output);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::Start;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End)",
                "    assert_eq!(Look::End.reversed(), Look::Start)",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF)",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF)",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF)",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF)",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii)",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate)",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode)",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate)",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii)",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii)",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode)",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode)",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii)",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii)",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode)",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode)"
              ],
              "code": [
                "{",
                "    let input = Look::Start;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End)",
                "    assert_eq!(Look::End.reversed(), Look::Start)",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF)",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF)",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF)",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF)",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii)",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate)",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode)",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate)",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii)",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii)",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode)",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode)",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii)",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii)",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode)",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::End;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::End;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);"
              ],
              "code": [
                "{",
                "    let input = Look::StartLF;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndLF;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::EndLF;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let output = input.reversed();",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    ",
                "    let input_crlf = Look::StartCRLF;",
                "    let output_crlf = input_crlf.reversed();",
                "    assert_eq!(output_crlf, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    ",
                "    let input_crlf = Look::StartCRLF;",
                "    let output_crlf = input_crlf.reversed();",
                "    assert_eq!(output_crlf, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let output = input.reversed();",
                "    let input = Look::StartCRLF;",
                "    let output = input.reversed();",
                "    assert_eq!(output, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::StartCRLF;",
                "    assert_eq!(input.reversed(), Look::EndCRLF);",
                "    input = Look::WordStartAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordStartUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::EndLF;",
                "    assert_eq!(input.reversed(), Look::StartLF);",
                "    input = Look::End;",
                "    assert_eq!(input.reversed(), Look::Start);",
                "    input = Look::Start;",
                "    assert_eq!(input.reversed(), Look::End);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::WordAsciiNegate;",
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    input = Look::WordUnicodeNegate;",
                "    assert_eq!(input.reversed(), Look::WordUnicodeNegate);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "    input = Look::WordStartHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::StartCRLF;",
                "    assert_eq!(input.reversed(), Look::EndCRLF);",
                "    input = Look::WordStartAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordStartUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::EndLF;",
                "    assert_eq!(input.reversed(), Look::StartLF);",
                "    input = Look::End;",
                "    assert_eq!(input.reversed(), Look::Start);",
                "    input = Look::Start;",
                "    assert_eq!(input.reversed(), Look::End);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::WordAsciiNegate;",
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    input = Look::WordUnicodeNegate;",
                "    assert_eq!(input.reversed(), Look::WordUnicodeNegate);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "    input = Look::WordStartHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let output = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let output = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 15,
      "prompt_conds": [
        "precondition: self matches Look::EndLF at line 145 is true\n",
        "precondition: self matches Look::EndLF at line 145 is true\n",
        "expected return value/type: Look::StartLF\n"
      ],
      "input_infer": "self matches Look::EndLF, valid Look values are Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordAscii, Look::WordAsciiNegate, Look::WordUnicode, Look::WordUnicodeNegate, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let _ = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::Start);"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let _ = look.reversed();",
                "    assert_eq!(look.reversed(), Look::Start);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    let _ = result; // Expected: Look::StartLF",
                "}"
              ],
              "oracle": [
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    let _ = result; // Expected: Look::StartLF",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let _ = look.reversed();",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let _ = look.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let _ = look.reversed();",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let _ = look.reversed();",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let _ = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let _ = look.reversed();",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 16,
      "prompt_conds": [
        "precondition: self matches Look::StartLF at line 145 is true\n",
        "precondition: self matches Look::StartLF at line 145 is true\n",
        "expected return value/type: Look::EndLF\n"
      ],
      "input_infer": "self can be any variant of Look: Start, End, StartLF, EndLF, StartCRLF, EndCRLF, WordAscii, WordAsciiNegate, WordUnicode, WordUnicodeNegate, WordStartAscii, WordEndAscii, WordStartUnicode, WordEndUnicode, WordStartHalfAscii, WordEndHalfAscii, WordStartHalfUnicode, WordEndHalfUnicode; expected return values for self as Look::StartLF should equal Look::EndLF.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate"
              ],
              "code": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let result = input.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    input = Look::StartLF;",
                "    assert_eq!(input.reversed(), Look::EndLF);",
                "    input = Look::EndLF;",
                "    assert_eq!(input.reversed(), Look::StartLF);",
                "    input = Look::Start;",
                "    assert_eq!(input.reversed(), Look::End);",
                "    input = Look::End;",
                "    assert_eq!(input.reversed(), Look::Start);",
                "    input = Look::StartCRLF;",
                "    assert_eq!(input.reversed(), Look::EndCRLF);",
                "    input = Look::EndCRLF;",
                "    assert_eq!(input.reversed(), Look::StartCRLF);",
                "    input = Look::WordStartAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordEndAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    input = Look::WordStartUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::WordEndUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    input = Look::WordStartHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    input = Look::WordEndHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    input = Look::WordStartHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::WordAsciiNegate;",
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    input = Look::WordUnicode;",
                "    assert_eq!(input.reversed(), Look::WordUnicode);",
                "    input = Look::WordUnicodeNegate;",
                "    assert_eq!(input.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let result = input.reversed();",
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    input = Look::StartLF;",
                "    assert_eq!(input.reversed(), Look::EndLF);",
                "    input = Look::EndLF;",
                "    assert_eq!(input.reversed(), Look::StartLF);",
                "    input = Look::Start;",
                "    assert_eq!(input.reversed(), Look::End);",
                "    input = Look::End;",
                "    assert_eq!(input.reversed(), Look::Start);",
                "    input = Look::StartCRLF;",
                "    assert_eq!(input.reversed(), Look::EndCRLF);",
                "    input = Look::EndCRLF;",
                "    assert_eq!(input.reversed(), Look::StartCRLF);",
                "    input = Look::WordStartAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    input = Look::WordEndAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    input = Look::WordStartUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    input = Look::WordEndUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    input = Look::WordStartHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    input = Look::WordEndHalfAscii;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    input = Look::WordStartHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    input = Look::WordEndHalfUnicode;",
                "    assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "    input = Look::WordAscii;",
                "    assert_eq!(input.reversed(), Look::WordAscii);",
                "    input = Look::WordAsciiNegate;",
                "    assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    input = Look::WordUnicode;",
                "    assert_eq!(input.reversed(), Look::WordUnicode);",
                "    input = Look::WordUnicodeNegate;",
                "    assert_eq!(input.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let result = input.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::StartLF; assert_eq!(input.reversed(), Look::EndLF);",
                "    let input = Look::EndLF; assert_eq!(input.reversed(), Look::StartLF);",
                "    let input = Look::Start; assert_eq!(input.reversed(), Look::End);",
                "    let input = Look::End; assert_eq!(input.reversed(), Look::Start);",
                "    let input = Look::StartCRLF; assert_eq!(input.reversed(), Look::EndCRLF);",
                "    let input = Look::EndCRLF; assert_eq!(input.reversed(), Look::StartCRLF);",
                "    let input = Look::WordAscii; assert_eq!(input.reversed(), Look::WordAscii);",
                "    let input = Look::WordAsciiNegate; assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    let input = Look::WordUnicode; assert_eq!(input.reversed(), Look::WordUnicode);",
                "    let input = Look::WordUnicodeNegate; assert_eq!(input.reversed(), Look::WordUnicodeNegate);",
                "    let input = Look::WordStartAscii; assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    let input = Look::WordEndAscii; assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    let input = Look::WordStartUnicode; assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    let input = Look::WordEndUnicode; assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    let input = Look::WordStartHalfAscii; assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfAscii; assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    let input = Look::WordStartHalfUnicode; assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    let input = Look::WordEndHalfUnicode; assert_eq!(input.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    let input = Look::StartLF; assert_eq!(input.reversed(), Look::EndLF);",
                "    let input = Look::EndLF; assert_eq!(input.reversed(), Look::StartLF);",
                "    let input = Look::Start; assert_eq!(input.reversed(), Look::End);",
                "    let input = Look::End; assert_eq!(input.reversed(), Look::Start);",
                "    let input = Look::StartCRLF; assert_eq!(input.reversed(), Look::EndCRLF);",
                "    let input = Look::EndCRLF; assert_eq!(input.reversed(), Look::StartCRLF);",
                "    let input = Look::WordAscii; assert_eq!(input.reversed(), Look::WordAscii);",
                "    let input = Look::WordAsciiNegate; assert_eq!(input.reversed(), Look::WordAsciiNegate);",
                "    let input = Look::WordUnicode; assert_eq!(input.reversed(), Look::WordUnicode);",
                "    let input = Look::WordUnicodeNegate; assert_eq!(input.reversed(), Look::WordUnicodeNegate);",
                "    let input = Look::WordStartAscii; assert_eq!(input.reversed(), Look::WordEndAscii);",
                "    let input = Look::WordEndAscii; assert_eq!(input.reversed(), Look::WordStartAscii);",
                "    let input = Look::WordStartUnicode; assert_eq!(input.reversed(), Look::WordEndUnicode);",
                "    let input = Look::WordEndUnicode; assert_eq!(input.reversed(), Look::WordStartUnicode);",
                "    let input = Look::WordStartHalfAscii; assert_eq!(input.reversed(), Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfAscii; assert_eq!(input.reversed(), Look::WordStartHalfAscii);",
                "    let input = Look::WordStartHalfUnicode; assert_eq!(input.reversed(), Look::WordEndHalfUnicode);",
                "    let input = Look::WordEndHalfUnicode; assert_eq!(input.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordUnicode);",
                "    assert!(result == Look::WordUnicode);",
                "    assert!(result != Look::WordEndUnicode);",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    assert!(result == Look::EndLF);",
                "    assert!(result != Look::StartLF);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    assert!(result == Look::WordUnicode);",
                "    assert!(result != Look::WordEndUnicode);",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    assert!(result == Look::EndLF);",
                "    assert!(result != Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let input = Look::WordAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let input = Look::WordAsciiNegate;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let input = Look::WordUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    let input = Look::WordUnicodeNegate;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let input = Look::WordAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordAscii);",
                "    let input = Look::WordAsciiNegate;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordAsciiNegate);",
                "    let input = Look::WordUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordUnicode);",
                "    let input = Look::WordUnicodeNegate;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 17,
      "prompt_conds": [
        "precondition: self matches Look::End at line 145 is true\n",
        "precondition: self matches Look::End at line 145 is true\n",
        "expected return value/type: Look::Start\n"
      ],
      "input_infer": "self is one of the variants from the Look enum: Start, End, StartLF, EndLF, StartCRLF, EndCRLF, WordAscii, WordAsciiNegate, WordUnicode, WordUnicodeNegate, WordStartAscii, WordEndAscii, WordStartUnicode, WordEndUnicode, WordStartHalfAscii, WordEndHalfAscii, WordStartHalfUnicode, WordEndHalfUnicode\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::Start);"
              ],
              "code": [
                "{",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::Start);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::End);"
              ],
              "code": [
                "{",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::End);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartLF);"
              ],
              "code": [
                "{",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::End.reversed() == Look::Start",
                "    Look::Start.reversed() == Look::End",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::End.reversed() == Look::Start",
                "    Look::Start.reversed() == Look::End",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(result, Look::reversed(Look::EndCRLF));",
                "    assert!(matches!(result, Look::StartCRLF));",
                "    assert!(matches!(input.reversed(), Look::StartCRLF));"
              ],
              "code": [
                "{",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    assert_eq!(result, Look::reversed(Look::EndCRLF));",
                "    assert!(matches!(result, Look::StartCRLF));",
                "    assert!(matches!(input.reversed(), Look::StartCRLF));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::EndCRLF);"
              ],
              "code": [
                "{",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start == Look::WordAscii.reversed()",
                "    Look::End == Look::End.reversed()",
                "    Look::StartLF == Look::StartLF.reversed()",
                "    Look::EndLF == Look::EndLF.reversed()",
                "    Look::WordAsciiNegate == Look::WordAsciiNegate.reversed()",
                "    Look::WordUnicode == Look::WordUnicode.reversed()",
                "    Look::WordUnicodeNegate == Look::WordUnicodeNegate.reversed()",
                "    Look::WordStartAscii == Look::WordEndAscii.reversed()",
                "    Look::WordEndAscii == Look::WordStartAscii.reversed()",
                "    Look::WordStartUnicode == Look::WordEndUnicode.reversed()",
                "    Look::WordEndUnicode == Look::WordStartUnicode.reversed()",
                "    Look::WordStartHalfAscii == Look::WordEndHalfAscii.reversed()",
                "    Look::WordEndHalfAscii == Look::WordStartHalfAscii.reversed()",
                "    Look::WordStartHalfUnicode == Look::WordEndHalfUnicode.reversed()",
                "    Look::WordEndHalfUnicode == Look::WordStartHalfUnicode.reversed()"
              ],
              "code": [
                "{",
                "    let input = Look::WordAscii;",
                "    let result = input.reversed();",
                "    Look::Start == Look::WordAscii.reversed()",
                "    Look::End == Look::End.reversed()",
                "    Look::StartLF == Look::StartLF.reversed()",
                "    Look::EndLF == Look::EndLF.reversed()",
                "    Look::WordAsciiNegate == Look::WordAsciiNegate.reversed()",
                "    Look::WordUnicode == Look::WordUnicode.reversed()",
                "    Look::WordUnicodeNegate == Look::WordUnicodeNegate.reversed()",
                "    Look::WordStartAscii == Look::WordEndAscii.reversed()",
                "    Look::WordEndAscii == Look::WordStartAscii.reversed()",
                "    Look::WordStartUnicode == Look::WordEndUnicode.reversed()",
                "    Look::WordEndUnicode == Look::WordStartUnicode.reversed()",
                "    Look::WordStartHalfAscii == Look::WordEndHalfAscii.reversed()",
                "    Look::WordEndHalfAscii == Look::WordStartHalfAscii.reversed()",
                "    Look::WordStartHalfUnicode == Look::WordEndHalfUnicode.reversed()",
                "    Look::WordEndHalfUnicode == Look::WordStartHalfUnicode.reversed()",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start == result",
                "    Look::End == input.reversed()",
                "    Look::StartLF == Look::EndLF.reversed()",
                "    Look::EndLF == Look::StartLF.reversed()",
                "    Look::StartCRLF == Look::EndCRLF.reversed()",
                "    Look::EndCRLF == Look::StartCRLF.reversed()",
                "    Look::WordAscii == Look::WordAscii.reversed()",
                "    Look::WordAsciiNegate == Look::WordAsciiNegate.reversed()",
                "    Look::WordUnicode == Look::WordUnicode.reversed()",
                "    Look::WordUnicodeNegate == Look::WordUnicodeNegate.reversed()",
                "    Look::WordStartAscii == Look::WordEndAscii.reversed()",
                "    Look::WordEndAscii == Look::WordStartAscii.reversed()",
                "    Look::WordStartUnicode == Look::WordEndUnicode.reversed()",
                "    Look::WordEndUnicode == Look::WordStartUnicode.reversed()",
                "    Look::WordStartHalfAscii == Look::WordEndHalfAscii.reversed()",
                "    Look::WordEndHalfAscii == Look::WordStartHalfAscii.reversed()",
                "    Look::WordStartHalfUnicode == Look::WordEndHalfUnicode.reversed()",
                "    Look::WordEndHalfUnicode == Look::WordStartHalfUnicode.reversed()"
              ],
              "code": [
                "{",
                "    let input = Look::WordAsciiNegate;",
                "    let result = input.reversed();",
                "    Look::Start == result",
                "    Look::End == input.reversed()",
                "    Look::StartLF == Look::EndLF.reversed()",
                "    Look::EndLF == Look::StartLF.reversed()",
                "    Look::StartCRLF == Look::EndCRLF.reversed()",
                "    Look::EndCRLF == Look::StartCRLF.reversed()",
                "    Look::WordAscii == Look::WordAscii.reversed()",
                "    Look::WordAsciiNegate == Look::WordAsciiNegate.reversed()",
                "    Look::WordUnicode == Look::WordUnicode.reversed()",
                "    Look::WordUnicodeNegate == Look::WordUnicodeNegate.reversed()",
                "    Look::WordStartAscii == Look::WordEndAscii.reversed()",
                "    Look::WordEndAscii == Look::WordStartAscii.reversed()",
                "    Look::WordStartUnicode == Look::WordEndUnicode.reversed()",
                "    Look::WordEndUnicode == Look::WordStartUnicode.reversed()",
                "    Look::WordStartHalfAscii == Look::WordEndHalfAscii.reversed()",
                "    Look::WordEndHalfAscii == Look::WordStartHalfAscii.reversed()",
                "    Look::WordStartHalfUnicode == Look::WordEndHalfUnicode.reversed()",
                "    Look::WordEndHalfUnicode == Look::WordStartHalfUnicode.reversed()",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start == Look::WordUnicode.reversed()",
                "    Look::End == Look::WordStartAscii.reversed()",
                "    Look::StartLF == Look::EndLF.reversed()",
                "    Look::EndCRLF == Look::StartCRLF.reversed()",
                "    Look::WordAsciiNegate == Look::WordAsciiNegate.reversed()",
                "    Look::WordStartHalfUnicode == Look::WordEndHalfUnicode.reversed()",
                "    Look::WordEndAscii == Look::WordStartAscii.reversed()",
                "    Look::WordUnicodeNegate == Look::WordUnicodeNegate.reversed()"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicode;",
                "    let result = input.reversed();",
                "    Look::Start == Look::WordUnicode.reversed()",
                "    Look::End == Look::WordStartAscii.reversed()",
                "    Look::StartLF == Look::EndLF.reversed()",
                "    Look::EndCRLF == Look::StartCRLF.reversed()",
                "    Look::WordAsciiNegate == Look::WordAsciiNegate.reversed()",
                "    Look::WordStartHalfUnicode == Look::WordEndHalfUnicode.reversed()",
                "    Look::WordEndAscii == Look::WordStartAscii.reversed()",
                "    Look::WordUnicodeNegate == Look::WordUnicodeNegate.reversed()",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::End.reversed() == Look::Start",
                "    Look::Start.reversed() == Look::End",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let input = Look::WordUnicodeNegate;",
                "    let result = input.reversed();",
                "    Look::End.reversed() == Look::Start",
                "    Look::Start.reversed() == Look::End",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    result == Look::Start",
                "    input == Look::WordEndAscii",
                "    result == Look::WordStartAscii",
                "    input == Look::End",
                "    result == Look::Start",
                "    input == Look::EndLF",
                "    result == Look::StartLF",
                "    input == Look::EndCRLF",
                "    result == Look::StartCRLF",
                "    input == Look::WordStartUnicode",
                "    result == Look::WordEndUnicode",
                "    input == Look::WordAsciiNegate",
                "    result == Look::WordAsciiNegate",
                "    input == Look::WordUnicode",
                "    result == Look::WordUnicode",
                "    input == Look::Start",
                "    result == Look::End"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    result == Look::Start",
                "    input == Look::WordEndAscii",
                "    result == Look::WordStartAscii",
                "    input == Look::End",
                "    result == Look::Start",
                "    input == Look::EndLF",
                "    result == Look::StartLF",
                "    input == Look::EndCRLF",
                "    result == Look::StartCRLF",
                "    input == Look::WordStartUnicode",
                "    result == Look::WordEndUnicode",
                "    input == Look::WordAsciiNegate",
                "    result == Look::WordAsciiNegate",
                "    input == Look::WordUnicode",
                "    result == Look::WordUnicode",
                "    input == Look::Start",
                "    result == Look::End",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::End.reversed() == Look::Start",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::Start.reversed() == Look::End",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::End.reversed() == Look::Start",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::Start.reversed() == Look::End",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let input = Look::End;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::Start);",
                "    let input = Look::Start;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::End);",
                "    let input = Look::StartLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndLF);",
                "    let input = Look::EndLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartLF);",
                "    let input = Look::StartCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::EndCRLF);",
                "    let input = Look::EndCRLF;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::StartCRLF);",
                "    let input = Look::WordEndAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartAscii);",
                "    let input = Look::WordStartAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndAscii);",
                "    let input = Look::WordEndUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartUnicode);",
                "    let input = Look::WordStartUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndUnicode);",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfAscii);",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordEndHalfAscii);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfAscii;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordEndHalfAscii);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    let input = Look::Start; let expected = Look::End; assert_eq!(input.reversed(), expected);",
                "    let input = Look::End; let expected = Look::Start; assert_eq!(input.reversed(), expected);",
                "    let input = Look::StartLF; let expected = Look::EndLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::EndLF; let expected = Look::StartLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::StartCRLF; let expected = Look::EndCRLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::EndCRLF; let expected = Look::StartCRLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordAscii; let expected = Look::WordAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordAsciiNegate; let expected = Look::WordAsciiNegate; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordUnicode; let expected = Look::WordUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordUnicodeNegate; let expected = Look::WordUnicodeNegate; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartAscii; let expected = Look::WordEndAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndAscii; let expected = Look::WordStartAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartUnicode; let expected = Look::WordEndUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndUnicode; let expected = Look::WordStartUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartHalfAscii; let expected = Look::WordEndHalfAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndHalfAscii; let expected = Look::WordStartHalfAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartHalfUnicode; let expected = Look::WordEndHalfUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndHalfUnicode; let expected = Look::WordStartHalfUnicode; assert_eq!(input.reversed(), expected);"
              ],
              "code": [
                "{",
                "    let input = Look::WordStartHalfUnicode;",
                "    let result = input.reversed();",
                "    let input = Look::Start; let expected = Look::End; assert_eq!(input.reversed(), expected);",
                "    let input = Look::End; let expected = Look::Start; assert_eq!(input.reversed(), expected);",
                "    let input = Look::StartLF; let expected = Look::EndLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::EndLF; let expected = Look::StartLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::StartCRLF; let expected = Look::EndCRLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::EndCRLF; let expected = Look::StartCRLF; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordAscii; let expected = Look::WordAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordAsciiNegate; let expected = Look::WordAsciiNegate; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordUnicode; let expected = Look::WordUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordUnicodeNegate; let expected = Look::WordUnicodeNegate; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartAscii; let expected = Look::WordEndAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndAscii; let expected = Look::WordStartAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartUnicode; let expected = Look::WordEndUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndUnicode; let expected = Look::WordStartUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartHalfAscii; let expected = Look::WordEndHalfAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndHalfAscii; let expected = Look::WordStartHalfAscii; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordStartHalfUnicode; let expected = Look::WordEndHalfUnicode; assert_eq!(input.reversed(), expected);",
                "    let input = Look::WordEndHalfUnicode; let expected = Look::WordStartHalfUnicode; assert_eq!(input.reversed(), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let input = Look::WordEndHalfUnicode;",
                "    let result = input.reversed();",
                "    assert_eq!(result, Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 18,
      "prompt_conds": [
        "precondition: self matches Look::Start at line 145 is true\n",
        "precondition: self matches Look::Start at line 145 is true\n",
        "expected return value/type: Look::End\n"
      ],
      "input_infer": "self matches any combination of Look variants in the range 1 to 1 << 17, inclusive, with specific checks for Look::Start, Look::End, Look::StartLF, Look::EndLF, Look::StartCRLF, Look::EndCRLF, Look::WordStartAscii, Look::WordEndAscii, Look::WordStartUnicode, Look::WordEndUnicode, Look::WordStartHalfAscii, Look::WordEndHalfAscii, Look::WordStartHalfUnicode, Look::WordEndHalfUnicode for expected outputs.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Look::End);"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = look.reversed();",
                "    assert_eq!(result, Look::End);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF;",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii;",
                "    assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF;",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii;",
                "    assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = look.reversed();",
                "    let look = Look::Start; assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End; assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF; assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF; assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF; assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF; assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordAscii; assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate; assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode; assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate; assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "    let look = Look::WordStartAscii; assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii; assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode; assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode; assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii; assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii; assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode; assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode; assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordAscii;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordAsciiNegate;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicode;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordUnicodeNegate;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartUnicode;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndUnicode;",
                "    let result = look.reversed();",
                "    assert_eq!(Look::Start.reversed(), Look::End);",
                "    assert_eq!(Look::End.reversed(), Look::Start);",
                "    assert_eq!(Look::StartLF.reversed(), Look::EndLF);",
                "    assert_eq!(Look::EndLF.reversed(), Look::StartLF);",
                "    assert_eq!(Look::StartCRLF.reversed(), Look::EndCRLF);",
                "    assert_eq!(Look::EndCRLF.reversed(), Look::StartCRLF);",
                "    assert_eq!(Look::WordAscii.reversed(), Look::WordAscii);",
                "    assert_eq!(Look::WordAsciiNegate.reversed(), Look::WordAsciiNegate);",
                "    assert_eq!(Look::WordUnicode.reversed(), Look::WordUnicode);",
                "    assert_eq!(Look::WordUnicodeNegate.reversed(), Look::WordUnicodeNegate);",
                "    assert_eq!(Look::WordStartAscii.reversed(), Look::WordEndAscii);",
                "    assert_eq!(Look::WordEndAscii.reversed(), Look::WordStartAscii);",
                "    assert_eq!(Look::WordStartUnicode.reversed(), Look::WordEndUnicode);",
                "    assert_eq!(Look::WordEndUnicode.reversed(), Look::WordStartUnicode);",
                "    assert_eq!(Look::WordStartHalfAscii.reversed(), Look::WordEndHalfAscii);",
                "    assert_eq!(Look::WordEndHalfAscii.reversed(), Look::WordStartHalfAscii);",
                "    assert_eq!(Look::WordStartHalfUnicode.reversed(), Look::WordEndHalfUnicode);",
                "    assert_eq!(Look::WordEndHalfUnicode.reversed(), Look::WordStartHalfUnicode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfAscii;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF;",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordAscii;",
                "    assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), Look::WordUnicodeNegate);"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = look.reversed();",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::Start;",
                "    assert_eq!(look.reversed(), Look::End);",
                "    let look = Look::End;",
                "    assert_eq!(look.reversed(), Look::Start);",
                "    let look = Look::StartLF;",
                "    assert_eq!(look.reversed(), Look::EndLF);",
                "    let look = Look::EndLF;",
                "    assert_eq!(look.reversed(), Look::StartLF);",
                "    let look = Look::StartCRLF;",
                "    assert_eq!(look.reversed(), Look::EndCRLF);",
                "    let look = Look::EndCRLF;",
                "    assert_eq!(look.reversed(), Look::StartCRLF);",
                "    let look = Look::WordStartAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndAscii);",
                "    let look = Look::WordEndAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartAscii);",
                "    let look = Look::WordStartUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndUnicode);",
                "    let look = Look::WordEndUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartUnicode);",
                "    let look = Look::WordStartHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfAscii);",
                "    let look = Look::WordEndHalfAscii;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfAscii);",
                "    let look = Look::WordStartHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordEndHalfUnicode);",
                "    let look = Look::WordEndHalfUnicode;",
                "    assert_eq!(look.reversed(), Look::WordStartHalfUnicode);",
                "    let look = Look::WordAscii;",
                "    assert_eq!(look.reversed(), Look::WordAscii);",
                "    let look = Look::WordAsciiNegate;",
                "    assert_eq!(look.reversed(), Look::WordAsciiNegate);",
                "    let look = Look::WordUnicode;",
                "    assert_eq!(look.reversed(), Look::WordUnicode);",
                "    let look = Look::WordUnicodeNegate;",
                "    assert_eq!(look.reversed(), Look::WordUnicodeNegate);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalfUnicode;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "}"
              ],
              "oracle": [
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalfUnicode;",
                "    let result = look.reversed();",
                "    Look::Start.reversed() == Look::End",
                "    Look::End.reversed() == Look::Start",
                "    Look::StartLF.reversed() == Look::EndLF",
                "    Look::EndLF.reversed() == Look::StartLF",
                "    Look::StartCRLF.reversed() == Look::EndCRLF",
                "    Look::EndCRLF.reversed() == Look::StartCRLF",
                "    Look::WordAscii.reversed() == Look::WordAscii",
                "    Look::WordAsciiNegate.reversed() == Look::WordAsciiNegate",
                "    Look::WordUnicode.reversed() == Look::WordUnicode",
                "    Look::WordUnicodeNegate.reversed() == Look::WordUnicodeNegate",
                "    Look::WordStartAscii.reversed() == Look::WordEndAscii",
                "    Look::WordEndAscii.reversed() == Look::WordStartAscii",
                "    Look::WordStartUnicode.reversed() == Look::WordEndUnicode",
                "    Look::WordEndUnicode.reversed() == Look::WordStartUnicode",
                "    Look::WordStartHalfAscii.reversed() == Look::WordEndHalfAscii",
                "    Look::WordEndHalfAscii.reversed() == Look::WordStartHalfAscii",
                "    Look::WordStartHalfUnicode.reversed() == Look::WordEndHalfUnicode",
                "    Look::WordEndHalfUnicode.reversed() == Look::WordStartHalfUnicode",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}