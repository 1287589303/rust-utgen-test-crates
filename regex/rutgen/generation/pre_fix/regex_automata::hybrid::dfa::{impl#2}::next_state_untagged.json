{
  "name": "regex_automata::hybrid::dfa::{impl#2}::next_state_untagged",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:1343:5:1353:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: current.is_tagged() at line 1349 is true\n"
      ],
      "input_infer": "current must be an untagged LazyStateID, input must be a valid byte (0-255), and cache must be a valid Cache instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [0; 256] },",
                "        classes: ByteClasses([0; 256]),",
                "        quitset: ByteSet([false; 256]),",
                "        cache_capacity: 0,",
                "    };",
                "    ",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); SENTINEL_STATES],",
                "        starts: vec![LazyStateID(0); SENTINEL_STATES],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "",
                "    let current = LazyStateID(1); // tagged state ID",
                "    let input: u8 = 65; // valid byte",
                "",
                "    let _result = dfa.next_state_untagged(&cache, current, input);",
                "}"
              ],
              "oracle": [
                "    assert!(current.is_tagged());",
                "    assert_eq!(_result, cache.trans[current.as_usize_unchecked() + usize::from(dfa.classes.get(input))]);"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [0; 256] },",
                "        classes: ByteClasses([0; 256]),",
                "        quitset: ByteSet([false; 256]),",
                "        cache_capacity: 0,",
                "    };",
                "    ",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); SENTINEL_STATES],",
                "        starts: vec![LazyStateID(0); SENTINEL_STATES],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "",
                "    let current = LazyStateID(1); // tagged state ID",
                "    let input: u8 = 65; // valid byte",
                "",
                "    let _result = dfa.next_state_untagged(&cache, current, input);",
                "    assert!(current.is_tagged());",
                "    assert_eq!(_result, cache.trans[current.as_usize_unchecked() + usize::from(dfa.classes.get(input))]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [0; 256] },",
                "        classes: ByteClasses([0; 256]),",
                "        quitset: ByteSet([false; 256]),",
                "        cache_capacity: 0,",
                "    };",
                "    ",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); SENTINEL_STATES],",
                "        starts: vec![LazyStateID(0); SENTINEL_STATES],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "",
                "    let current = LazyStateID(2); // invalid as assumed untagged",
                "    let input: u8 = 100; // valid byte",
                "",
                "    let _result = dfa.next_state_untagged(&cache, current, input);",
                "}"
              ],
              "oracle": [
                "    assert!(LazyStateID(2).is_tagged());",
                "    let result = dfa.next_state_untagged(&cache, LazyStateID(2), 100);",
                "    assert!(result.is_tagged());"
              ],
              "code": [
                "{",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [0; 256] },",
                "        classes: ByteClasses([0; 256]),",
                "        quitset: ByteSet([false; 256]),",
                "        cache_capacity: 0,",
                "    };",
                "    ",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); SENTINEL_STATES],",
                "        starts: vec![LazyStateID(0); SENTINEL_STATES],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "",
                "    let current = LazyStateID(2); // invalid as assumed untagged",
                "    let input: u8 = 100; // valid byte",
                "",
                "    let _result = dfa.next_state_untagged(&cache, current, input);",
                "    assert!(LazyStateID(2).is_tagged());",
                "    let result = dfa.next_state_untagged(&cache, LazyStateID(2), 100);",
                "    assert!(result.is_tagged());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: current.is_tagged() at line 1349 is false\n",
        "expected return value/type: cache.trans[offset]\n"
      ],
      "input_infer": "valid LazyStateID where is_tagged() is false, input is any u8 value within 0-255, cache.trans must be populated and accessible with size sufficient for the offset calculated by current.as_usize_unchecked() + class\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let current = LazyStateID::new_unchecked(0);",
                "    let input = 0_u8;",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID::new_unchecked(1); 2], // Fill sufficient size",
                "        starts: vec![],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 0,",
                "    };",
                "    dfa.next_state_untagged(&cache, current, input);",
                "}"
              ],
              "oracle": [
                "    assert!(dfa.next_state_untagged(&cache, current, input).as_usize_unchecked() == 1);",
                "    assert!(!current.is_tagged());",
                "    assert!(cache.trans.len() >= 2);",
                "    assert!(cache.trans[0].as_usize_unchecked() == 1);",
                "    assert!(cache.trans[1].as_usize_unchecked() == 1);"
              ],
              "code": [
                "{",
                "    let current = LazyStateID::new_unchecked(0);",
                "    let input = 0_u8;",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID::new_unchecked(1); 2], // Fill sufficient size",
                "        starts: vec![],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 0,",
                "    };",
                "    dfa.next_state_untagged(&cache, current, input);",
                "    assert!(dfa.next_state_untagged(&cache, current, input).as_usize_unchecked() == 1);",
                "    assert!(!current.is_tagged());",
                "    assert!(cache.trans.len() >= 2);",
                "    assert!(cache.trans[0].as_usize_unchecked() == 1);",
                "    assert!(cache.trans[1].as_usize_unchecked() == 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let current = LazyStateID::new_unchecked(1);",
                "    let input = 1_u8;",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID::new_unchecked(2); 3], // Fill sufficient size",
                "        starts: vec![],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 0,",
                "    };",
                "    dfa.next_state_untagged(&cache, current, input);",
                "}"
              ],
              "oracle": [
                "    let current = LazyStateID::new_unchecked(1);",
                "    let input = 1_u8;",
                "    let mut cache = Cache { trans: vec![LazyStateID::new_unchecked(2); 3], ..Default::default() };",
                "    let offset = current.as_usize_unchecked() + usize::from(dfa.classes.get(input));",
                "    assert_eq!(dfa.next_state_untagged(&cache, current, input), cache.trans[offset]);",
                "    assert!(!current.is_tagged());"
              ],
              "code": [
                "{",
                "    let current = LazyStateID::new_unchecked(1);",
                "    let input = 1_u8;",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID::new_unchecked(2); 3], // Fill sufficient size",
                "        starts: vec![],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 0,",
                "    };",
                "    dfa.next_state_untagged(&cache, current, input);",
                "    let current = LazyStateID::new_unchecked(1);",
                "    let input = 1_u8;",
                "    let mut cache = Cache { trans: vec![LazyStateID::new_unchecked(2); 3], ..Default::default() };",
                "    let offset = current.as_usize_unchecked() + usize::from(dfa.classes.get(input));",
                "    assert_eq!(dfa.next_state_untagged(&cache, current, input), cache.trans[offset]);",
                "    assert!(!current.is_tagged());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let current = LazyStateID::new_unchecked(1);",
                "    let input = 255_u8;",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID::new_unchecked(3); 4], // Fill sufficient size",
                "        starts: vec![],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 0,",
                "    };",
                "    dfa.next_state_untagged(&cache, current, input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.next_state_untagged(&cache, current, input), LazyStateID::new_unchecked(3));"
              ],
              "code": [
                "{",
                "    let current = LazyStateID::new_unchecked(1);",
                "    let input = 255_u8;",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID::new_unchecked(3); 4], // Fill sufficient size",
                "        starts: vec![],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::default(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty::default(),",
                "        state_saver: StateSaver::default(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 0,",
                "    };",
                "    dfa.next_state_untagged(&cache, current, input);",
                "    assert_eq!(dfa.next_state_untagged(&cache, current, input), LazyStateID::new_unchecked(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}