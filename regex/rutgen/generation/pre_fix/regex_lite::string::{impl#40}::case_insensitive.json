{
  "name": "regex_lite::string::{impl#40}::case_insensitive",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2689:5:2692:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "pattern: non-empty string, yes: boolean (true or false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(\"foo(?-i:bar)quux\");",
                "    builder.case_insensitive(true);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.flags.case_insensitive, true);",
                "    assert_eq!(builder.hir_config.pattern, \"foo(?-i:bar)quux\");",
                "    assert!(builder.build().is_ok());",
                "    builder.case_insensitive(false);",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, false);",
                "    assert!(builder.build().is_ok());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(\"foo(?-i:bar)quux\");",
                "    builder.case_insensitive(true);",
                "    let _ = builder.build().unwrap();",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, true);",
                "    assert_eq!(builder.hir_config.pattern, \"foo(?-i:bar)quux\");",
                "    assert!(builder.build().is_ok());",
                "    builder.case_insensitive(false);",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, false);",
                "    assert!(builder.build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(\"foo(?-i:bar)quux\");",
                "    builder.case_insensitive(false);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut builder = RegexBuilder::new(\"foo(?-i:bar)quux\");",
                "    assert_eq!(builder.case_insensitive(false), &mut builder);",
                "    let regex = builder.build().unwrap();",
                "    assert!(!regex.is_match(\"FoObarQuUx\"));",
                "    assert!(regex.is_match(\"foobarquux\"));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(\"foo(?-i:bar)quux\");",
                "    builder.case_insensitive(false);",
                "    let _ = builder.build().unwrap();",
                "    let mut builder = RegexBuilder::new(\"foo(?-i:bar)quux\");",
                "    assert_eq!(builder.case_insensitive(false), &mut builder);",
                "    let regex = builder.build().unwrap();",
                "    assert!(!regex.is_match(\"FoObarQuUx\"));",
                "    assert!(regex.is_match(\"foobarquux\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(\"\");",
                "    builder.case_insensitive(true);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.flags.case_insensitive, true);",
                "    builder.case_insensitive(false);",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, false);",
                "    builder.case_insensitive(true);",
                "    let regex = builder.build().unwrap();",
                "    assert!(regex.is_match(\"FoObarQuUx\"));",
                "    assert!(!regex.is_match(\"fooBARquux\"));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(\"\");",
                "    builder.case_insensitive(true);",
                "    let _ = builder.build().unwrap();",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, true);",
                "    builder.case_insensitive(false);",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, false);",
                "    builder.case_insensitive(true);",
                "    let regex = builder.build().unwrap();",
                "    assert!(regex.is_match(\"FoObarQuUx\"));",
                "    assert!(!regex.is_match(\"fooBARquux\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(\"custom_pattern\");",
                "    builder.case_insensitive(false);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.flags.case_insensitive, false);",
                "    builder.case_insensitive(true);",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, true);",
                "    let re_case_insensitive = builder.build().unwrap();",
                "    assert!(re_case_insensitive.is_match(\"FOO\"));",
                "    assert!(!re_case_insensitive.is_match(\"bar\"));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(\"custom_pattern\");",
                "    builder.case_insensitive(false);",
                "    let _ = builder.build().unwrap();",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, false);",
                "    builder.case_insensitive(true);",
                "    assert_eq!(builder.hir_config.flags.case_insensitive, true);",
                "    let re_case_insensitive = builder.build().unwrap();",
                "    assert!(re_case_insensitive.is_match(\"FOO\"));",
                "    assert!(!re_case_insensitive.is_match(\"bar\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}