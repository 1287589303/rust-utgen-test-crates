{
  "name": "regex_automata::nfa::thompson::error::{impl#0}::size_limit",
  "mod_info": {
    "name": "nfa::thompson::error",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:61:1:61:11"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/error.rs:84:5:89:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.kind matches BuildErrorKind::ExceededSizeLimit { limit } at line 86 is false\n",
        "precondition: self.kind matches _ at line 87 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.kind should be any variant of BuildErrorKind except for ExceededSizeLimit, such as NFA, Word, TooManyStates, etc.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::NFA(crate::nfa::thompson::BuildError),",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    error.size_limit(); assert_eq!(error.size_limit(), None);"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::NFA(crate::nfa::thompson::BuildError),",
                "    };",
                "    error.size_limit();",
                "    error.size_limit(); assert_eq!(error.size_limit(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::Word(look::UnicodeWordBoundaryError),",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.size_limit(), None);"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::Word(look::UnicodeWordBoundaryError),",
                "    };",
                "    error.size_limit();",
                "    assert_eq!(error.size_limit(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::TooManyStates { limit: 10, given: 12 },",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    error.size_limit() == None"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::TooManyStates { limit: 10, given: 12 },",
                "    };",
                "    error.size_limit();",
                "    error.size_limit() == None",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::TooManyPatterns { given: 15, limit: 10 },",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    error.size_limit() == None"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::TooManyPatterns { given: 15, limit: 10 },",
                "    };",
                "    error.size_limit();",
                "    error.size_limit() == None",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    error.size_limit(); assert_eq!(error.size_limit(), None);"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::Unsupported(\"unsupported feature\"),",
                "    };",
                "    error.size_limit();",
                "    error.size_limit(); assert_eq!(error.size_limit(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::InvalidCaptureIndex { index: u32::MAX },",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    error.size_limit(); assert_eq!(error.size_limit(), None);"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::InvalidCaptureIndex { index: u32::MAX },",
                "    };",
                "    error.size_limit();",
                "    error.size_limit(); assert_eq!(error.size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.kind matches BuildErrorKind::ExceededSizeLimit { limit } at line 85 is true\n",
        "precondition: self.kind matches BuildErrorKind::ExceededSizeLimit { limit } at line 85 is true\n",
        "expected return value/type: Some(limit)\n"
      ],
      "input_infer": "self.kind must be BuildErrorKind::ExceededSizeLimit where limit is a valid usize value within the range of 0 to usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::ExceededSizeLimit { limit: 0 },",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.size_limit(), Some(0));"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::ExceededSizeLimit { limit: 0 },",
                "    };",
                "    error.size_limit();",
                "    assert_eq!(error.size_limit(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1 },",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.size_limit(), Some(1));"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::ExceededSizeLimit { limit: 1 },",
                "    };",
                "    error.size_limit();",
                "    assert_eq!(error.size_limit(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::ExceededSizeLimit { limit: usize::MAX },",
                "    };",
                "    error.size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.size_limit(), Some(usize::MAX));"
              ],
              "code": [
                "{",
                "    let error = BuildError {",
                "        kind: BuildErrorKind::ExceededSizeLimit { limit: usize::MAX },",
                "    };",
                "    error.size_limit();",
                "    assert_eq!(error.size_limit(), Some(usize::MAX));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}