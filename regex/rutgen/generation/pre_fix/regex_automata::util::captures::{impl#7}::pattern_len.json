{
  "name": "regex_automata::util::captures::{impl#7}::pattern_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1948:5:1950:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid ranges for `PatternID` values from 0 to `PatternID::LIMIT`, and names to include empty strings and valid non-empty strings under conditions of group indices from 0 to the maximum number of groups specified within `PatternID::LIMIT`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::empty();",
                "    let length = group_info.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\"), Some(\"pattern2\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 2);",
                "    let group_info = GroupInfo::new(vec![None, None]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 0);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 1);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\"), Some(\"pattern2\"), Some(\"pattern3\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 3);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\"), Some(\"pattern2\"), None]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 2);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::empty();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 0);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\"), Some(\"pattern2\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 2);",
                "    let group_info = GroupInfo::new(vec![None, None]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 0);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 1);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\"), Some(\"pattern2\"), Some(\"pattern3\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 3);",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern1\"), Some(\"pattern2\"), None]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern_1\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1);",
                "    let group_info_empty = GroupInfo::new(vec![]).unwrap();",
                "    let length_empty = group_info_empty.pattern_len();",
                "    assert_eq!(length_empty, 0);",
                "    let group_info_always_match = GroupInfo::new(vec![Some(\"always_match\")]).unwrap();",
                "    let length_always_match = group_info_always_match.pattern_len();",
                "    assert_eq!(length_always_match, 1);",
                "    let group_info_multiple = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\")]).unwrap();",
                "    let length_multiple = group_info_multiple.pattern_len();",
                "    assert_eq!(length_multiple, 3);",
                "    let group_info_invalid = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\"), Some(\"pattern_4\")]).unwrap();",
                "    let length_invalid = group_info_invalid.pattern_len();",
                "    assert!(length_invalid <= PatternID::LIMIT);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern_1\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 1);",
                "    let group_info_empty = GroupInfo::new(vec![]).unwrap();",
                "    let length_empty = group_info_empty.pattern_len();",
                "    assert_eq!(length_empty, 0);",
                "    let group_info_always_match = GroupInfo::new(vec![Some(\"always_match\")]).unwrap();",
                "    let length_always_match = group_info_always_match.pattern_len();",
                "    assert_eq!(length_always_match, 1);",
                "    let group_info_multiple = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\")]).unwrap();",
                "    let length_multiple = group_info_multiple.pattern_len();",
                "    assert_eq!(length_multiple, 3);",
                "    let group_info_invalid = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\"), Some(\"pattern_4\")]).unwrap();",
                "    let length_invalid = group_info_invalid.pattern_len();",
                "    assert!(length_invalid <= PatternID::LIMIT);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 3);",
                "    let empty_group_info = GroupInfo::empty();",
                "    assert_eq!(empty_group_info.pattern_len(), 0);",
                "    let single_pattern_group_info = GroupInfo::new(vec![Some(\"single_pattern\")]).unwrap();",
                "    assert_eq!(single_pattern_group_info.pattern_len(), 1);",
                "    let no_patterns_group_info = GroupInfo::new::<Vec<()>, Option<&str>, &str>(vec![]).unwrap();",
                "    assert_eq!(no_patterns_group_info.pattern_len(), 0);",
                "    let exceeding_patterns_group_info_result = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\"), Some(\"pattern_4\"), Some(\"pattern_5\"), Some(\"pattern_6\"), Some(\"pattern_7\"), Some(\"pattern_8\"), Some(\"pattern_9\"), Some(\"pattern_10\"), Some(\"pattern_11\")]);",
                "    assert!(exceeding_patterns_group_info_result.is_err());"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 3);",
                "    let empty_group_info = GroupInfo::empty();",
                "    assert_eq!(empty_group_info.pattern_len(), 0);",
                "    let single_pattern_group_info = GroupInfo::new(vec![Some(\"single_pattern\")]).unwrap();",
                "    assert_eq!(single_pattern_group_info.pattern_len(), 1);",
                "    let no_patterns_group_info = GroupInfo::new::<Vec<()>, Option<&str>, &str>(vec![]).unwrap();",
                "    assert_eq!(no_patterns_group_info.pattern_len(), 0);",
                "    let exceeding_patterns_group_info_result = GroupInfo::new(vec![Some(\"pattern_1\"), Some(\"pattern_2\"), Some(\"pattern_3\"), Some(\"pattern_4\"), Some(\"pattern_5\"), Some(\"pattern_6\"), Some(\"pattern_7\"), Some(\"pattern_8\"), Some(\"pattern_9\"), Some(\"pattern_10\"), Some(\"pattern_11\")]);",
                "    assert!(exceeding_patterns_group_info_result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"\"), Some(\"pattern_2\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 2);",
                "    let empty_group_info = GroupInfo::empty();",
                "    let empty_length = empty_group_info.pattern_len();",
                "    assert_eq!(empty_length, 0);",
                "    let single_pattern_group_info = GroupInfo::new(vec![Some(\"only_pattern\")]).unwrap();",
                "    let single_length = single_pattern_group_info.pattern_len();",
                "    assert_eq!(single_length, 1);",
                "    let max_pattern_group_info = GroupInfo::new((0..PatternID::LIMIT).map(|i| Some(&format!(\"pattern_{}\", i)))).unwrap();",
                "    let max_length = max_pattern_group_info.pattern_len();",
                "    assert_eq!(max_length, PatternID::LIMIT);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"\"), Some(\"pattern_2\")]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 2);",
                "    let empty_group_info = GroupInfo::empty();",
                "    let empty_length = empty_group_info.pattern_len();",
                "    assert_eq!(empty_length, 0);",
                "    let single_pattern_group_info = GroupInfo::new(vec![Some(\"only_pattern\")]).unwrap();",
                "    let single_length = single_pattern_group_info.pattern_len();",
                "    assert_eq!(single_length, 1);",
                "    let max_pattern_group_info = GroupInfo::new((0..PatternID::LIMIT).map(|i| Some(&format!(\"pattern_{}\", i)))).unwrap();",
                "    let max_length = max_pattern_group_info.pattern_len();",
                "    assert_eq!(max_length, PatternID::LIMIT);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_patterns = PatternID::LIMIT;",
                "    let patterns: Vec<Option<&str>> = (0..max_patterns).map(|i| Some(&format!(\"pattern_{}\", i))).collect();",
                "    let group_info = GroupInfo::new(patterns).unwrap();",
                "    let length = group_info.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, max_patterns);",
                "    assert_eq!(GroupInfo::empty().pattern_len(), 0);",
                "    assert_eq!(NFA::never_match().group_info().pattern_len(), 0);",
                "    assert_eq!(NFA::always_match().group_info().pattern_len(), 1);"
              ],
              "code": [
                "{",
                "    let max_patterns = PatternID::LIMIT;",
                "    let patterns: Vec<Option<&str>> = (0..max_patterns).map(|i| Some(&format!(\"pattern_{}\", i))).collect();",
                "    let group_info = GroupInfo::new(patterns).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, max_patterns);",
                "    assert_eq!(GroupInfo::empty().pattern_len(), 0);",
                "    assert_eq!(NFA::never_match().group_info().pattern_len(), 0);",
                "    assert_eq!(NFA::always_match().group_info().pattern_len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let patterns: Vec<Option<&str>> = vec![Some(\"pattern_1\"), Some(\"pattern_2\")];",
                "    let group_info = GroupInfo::new(patterns).unwrap();",
                "    let length = group_info.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 2);",
                "    let patterns_empty: Vec<Option<&str>> = vec![];",
                "    let group_info_empty = GroupInfo::new(patterns_empty).unwrap();",
                "    let length_empty = group_info_empty.pattern_len();",
                "    assert_eq!(length_empty, 0);",
                "    let patterns_single: Vec<Option<&str>> = vec![Some(\"single_pattern\")];",
                "    let group_info_single = GroupInfo::new(patterns_single).unwrap();",
                "    let length_single = group_info_single.pattern_len();",
                "    assert_eq!(length_single, 1);",
                "    let patterns_exceed_limit: Vec<Option<&str>> = (0..PatternID::LIMIT + 1).map(|i| Some(format!(\"pattern_{}\", i).as_str())).collect();",
                "    let result_exceed_limit = GroupInfo::new(patterns_exceed_limit);",
                "    assert!(result_exceed_limit.is_err());",
                "    let patterns_with_none: Vec<Option<&str>> = vec![Some(\"pattern_1\"), None];",
                "    let group_info_with_none = GroupInfo::new(patterns_with_none).unwrap();",
                "    let length_with_none = group_info_with_none.pattern_len();",
                "    assert_eq!(length_with_none, 2);"
              ],
              "code": [
                "{",
                "    let patterns: Vec<Option<&str>> = vec![Some(\"pattern_1\"), Some(\"pattern_2\")];",
                "    let group_info = GroupInfo::new(patterns).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 2);",
                "    let patterns_empty: Vec<Option<&str>> = vec![];",
                "    let group_info_empty = GroupInfo::new(patterns_empty).unwrap();",
                "    let length_empty = group_info_empty.pattern_len();",
                "    assert_eq!(length_empty, 0);",
                "    let patterns_single: Vec<Option<&str>> = vec![Some(\"single_pattern\")];",
                "    let group_info_single = GroupInfo::new(patterns_single).unwrap();",
                "    let length_single = group_info_single.pattern_len();",
                "    assert_eq!(length_single, 1);",
                "    let patterns_exceed_limit: Vec<Option<&str>> = (0..PatternID::LIMIT + 1).map(|i| Some(format!(\"pattern_{}\", i).as_str())).collect();",
                "    let result_exceed_limit = GroupInfo::new(patterns_exceed_limit);",
                "    assert!(result_exceed_limit.is_err());",
                "    let patterns_with_none: Vec<Option<&str>> = vec![Some(\"pattern_1\"), None];",
                "    let group_info_with_none = GroupInfo::new(patterns_with_none).unwrap();",
                "    let length_with_none = group_info_with_none.pattern_len();",
                "    assert_eq!(length_with_none, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"name_1\"), Some(\"name_2\"), None]).unwrap();",
                "    let length = group_info.pattern_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 2);",
                "    let empty_group_info = GroupInfo::empty();",
                "    let empty_length = empty_group_info.pattern_len();",
                "    assert_eq!(empty_length, 0);",
                "    let single_pattern_group_info = GroupInfo::new(vec![Some(\"single_pattern\")]).unwrap();",
                "    let single_length = single_pattern_group_info.pattern_len();",
                "    assert_eq!(single_length, 1);",
                "    let group_info_with_none = GroupInfo::new(vec![Some(\"name_1\"), None]).unwrap();",
                "    let none_length = group_info_with_none.pattern_len();",
                "    assert_eq!(none_length, 1);",
                "    let pattern_id_limit_group_info = GroupInfo::new(vec![Some(\"name_1\"); PatternID::LIMIT]).unwrap();",
                "    let limit_length = pattern_id_limit_group_info.pattern_len();",
                "    assert_eq!(limit_length, PatternID::LIMIT);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::new(vec![Some(\"name_1\"), Some(\"name_2\"), None]).unwrap();",
                "    let length = group_info.pattern_len();",
                "    assert_eq!(length, 2);",
                "    let empty_group_info = GroupInfo::empty();",
                "    let empty_length = empty_group_info.pattern_len();",
                "    assert_eq!(empty_length, 0);",
                "    let single_pattern_group_info = GroupInfo::new(vec![Some(\"single_pattern\")]).unwrap();",
                "    let single_length = single_pattern_group_info.pattern_len();",
                "    assert_eq!(single_length, 1);",
                "    let group_info_with_none = GroupInfo::new(vec![Some(\"name_1\"), None]).unwrap();",
                "    let none_length = group_info_with_none.pattern_len();",
                "    assert_eq!(none_length, 1);",
                "    let pattern_id_limit_group_info = GroupInfo::new(vec![Some(\"name_1\"); PatternID::LIMIT]).unwrap();",
                "    let limit_length = pattern_id_limit_group_info.pattern_len();",
                "    assert_eq!(limit_length, PatternID::LIMIT);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}