{
  "name": "regex_syntax::ast::parse::{impl#2}::empty_min_range",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/parse.rs:235:5:238:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "boolean values for the `yes` parameter (true, false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.empty_min_range(true);",
                "}"
              ],
              "oracle": [
                "    assert!(builder.empty_min_range(true) as *const _ == &builder as *const _);",
                "    assert_eq!(builder.empty_min_range(false).empty_min_range, false);",
                "    assert_eq!(builder.empty_min_range(true).empty_min_range, true);",
                "    assert!(builder.empty_min_range(false) as *const _ == &builder as *const _);",
                "    assert!(builder.empty_min_range(true).empty_min_range(true) as *const _ == &builder as *const _);"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.empty_min_range(true);",
                "    assert!(builder.empty_min_range(true) as *const _ == &builder as *const _);",
                "    assert_eq!(builder.empty_min_range(false).empty_min_range, false);",
                "    assert_eq!(builder.empty_min_range(true).empty_min_range, true);",
                "    assert!(builder.empty_min_range(false) as *const _ == &builder as *const _);",
                "    assert!(builder.empty_min_range(true).empty_min_range(true) as *const _ == &builder as *const _);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.empty_min_range(false);",
                "}"
              ],
              "oracle": [
                "    let mut builder = ParserBuilder::new();",
                "    let result = builder.empty_min_range(false);",
                "    assert_eq!(result.empty_min_range, false);",
                "    let builder_after = builder.empty_min_range(true);",
                "    assert_eq!(builder_after.empty_min_range, true);",
                "    assert!(std::ptr::eq(&builder, builder_after));"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.empty_min_range(false);",
                "    let mut builder = ParserBuilder::new();",
                "    let result = builder.empty_min_range(false);",
                "    assert_eq!(result.empty_min_range, false);",
                "    let builder_after = builder.empty_min_range(true);",
                "    assert_eq!(builder_after.empty_min_range, true);",
                "    assert!(std::ptr::eq(&builder, builder_after));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}