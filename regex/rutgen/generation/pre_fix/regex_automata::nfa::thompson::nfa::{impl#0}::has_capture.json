{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::has_capture",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:743:5:745:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.has_capture\n"
      ],
      "input_infer": "test input conditions or ranges: patterns with no capture groups, patterns with at least one capture group, patterns stripped of captures via configuration, patterns containing multiple capture groups, edge cases of empty patterns, and patterns with complex nested capturing groups.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    nfa.has_capture();",
                "}"
              ],
              "oracle": [
                "    assert!(nfa.has_capture());",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
                "    assert!(!nfa.has_capture());"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    nfa.has_capture();",
                "    assert!(nfa.has_capture());",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
                "    assert!(!nfa.has_capture());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    nfa.has_capture();",
                "}"
              ],
              "oracle": [
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == false);"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    nfa.has_capture();",
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::compiler()",
                "        .configure(NFA::config().which_captures(WhichCaptures::None))",
                "        .build(\"(a)\").unwrap();",
                "    nfa.has_capture();",
                "}"
              ],
              "oracle": [
                "    assert!(!nfa.has_capture());",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture());",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture());"
              ],
              "code": [
                "{",
                "    let nfa = NFA::compiler()",
                "        .configure(NFA::config().which_captures(WhichCaptures::None))",
                "        .build(\"(a)\").unwrap();",
                "    nfa.has_capture();",
                "    assert!(!nfa.has_capture());",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture());",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"((a)(b))\").unwrap();",
                "    nfa.has_capture();",
                "}"
              ],
              "oracle": [
                "    assert!(nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), true);",
                "    ",
                "    let nfa = NFA::new(\"abc\").unwrap();",
                "    assert!(!nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), false);",
                "    ",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), true);",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)\").unwrap();",
                "    assert!(!nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), false);"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"((a)(b))\").unwrap();",
                "    nfa.has_capture();",
                "    assert!(nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), true);",
                "    ",
                "    let nfa = NFA::new(\"abc\").unwrap();",
                "    assert!(!nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), false);",
                "    ",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), true);",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)\").unwrap();",
                "    assert!(!nfa.has_capture());",
                "    assert_eq!(nfa.has_capture(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"\").unwrap();",
                "    nfa.has_capture();",
                "}"
              ],
              "oracle": [
                "    assert!(nfa.has_capture() == false);",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == false);"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"\").unwrap();",
                "    nfa.has_capture();",
                "    assert!(nfa.has_capture() == false);",
                "    let nfa = NFA::new(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"((a(bc)d)ef)\").unwrap();",
                "    nfa.has_capture();",
                "}"
              ],
              "oracle": [
                "    assert!(nfa.has_capture() == true);",
                "    ",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == false);",
                "    ",
                "    let nfa = NFA::never_match();",
                "    assert!(nfa.has_capture() == false);",
                "    ",
                "    let nfa = NFA::always_match();",
                "    assert!(nfa.has_capture() == false);"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"((a(bc)d)ef)\").unwrap();",
                "    nfa.has_capture();",
                "    assert!(nfa.has_capture() == true);",
                "    ",
                "    let nfa = NFA::new(\"a\").unwrap();",
                "    assert!(nfa.has_capture() == true);",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)\").unwrap();",
                "    assert!(nfa.has_capture() == false);",
                "    ",
                "    let nfa = NFA::never_match();",
                "    assert!(nfa.has_capture() == false);",
                "    ",
                "    let nfa = NFA::always_match();",
                "    assert!(nfa.has_capture() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}