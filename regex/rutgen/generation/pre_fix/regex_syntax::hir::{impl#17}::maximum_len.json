{
  "name": "regex_syntax::hir::{impl#17}::maximum_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1460:5:1466:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.ranges().is_empty() at line 1461 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.ranges() should be an empty interval set (i.e., ClassBytes with no ClassBytesRange elements)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::empty();",
                "    let result = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::empty();",
                "    let result = class_bytes.maximum_len();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![]);",
                "    let result = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let class_bytes = ClassBytes::new(vec![]);",
                "    let result = class_bytes.maximum_len();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_bytes = ClassBytes::empty();",
                "    class_bytes.push(ClassBytesRange { start: 0, end: 0 });",
                "    class_bytes.push(ClassBytesRange { start: 1, end: 1 });",
                "    class_bytes = ClassBytes::empty();",
                "    let result = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut class_bytes = ClassBytes::empty();",
                "    class_bytes.push(ClassBytesRange { start: 0, end: 0 });",
                "    class_bytes.push(ClassBytesRange { start: 1, end: 1 });",
                "    class_bytes = ClassBytes::empty();",
                "    let result = class_bytes.maximum_len();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.ranges().is_empty() at line 1461 is false\n",
        "expected return value/type: Some(1)\n"
      ],
      "input_infer": "self.ranges() must contain at least one ClassBytesRange where start <= end with valid u8 values, specifically (0, 255) for edge cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 255 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.maximum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 255 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "    assert_eq!(class_bytes.maximum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 100, end: 200 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.maximum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 100, end: 200 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "    assert_eq!(class_bytes.maximum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 50, end: 50 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_ , Some(1));"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 50, end: 50 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "    assert_eq!(_ , Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range_a = ClassBytesRange { start: 10, end: 20 };",
                "    let range_b = ClassBytesRange { start: 30, end: 40 };",
                "    let class_bytes = ClassBytes::new(vec![range_a, range_b]);",
                "    let _ = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.maximum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let range_a = ClassBytesRange { start: 10, end: 20 };",
                "    let range_b = ClassBytesRange { start: 30, end: 40 };",
                "    let class_bytes = ClassBytes::new(vec![range_a, range_b]);",
                "    let _ = class_bytes.maximum_len();",
                "    assert_eq!(class_bytes.maximum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 1, end: 255 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.maximum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 1, end: 255 };",
                "    let class_bytes = ClassBytes::new(vec![range]);",
                "    let _ = class_bytes.maximum_len();",
                "    assert_eq!(class_bytes.maximum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}