{
  "name": "regex_syntax::hir::{impl#25}::static_explicit_captures_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2204:5:2206:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.static_explicit_captures_len\n"
      ],
      "input_infer": "Test input conditions or ranges: valid regex patterns including: \"a\", \"(a)\", \"(a)|(b)\", \"(a)(b)|(c)(d)\", \"(b)+\", and invalid/static patterns like \"(a)|b\", \"a|(b)\", \"(b)*\", testing both cases with single and multiple captures as well as varying complexities in grouping.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: Some(0),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(0), properties.static_explicit_captures_len());",
                "    ",
                "    let properties_with_one_capture = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: Some(1),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(Some(1), properties_with_one_capture.static_explicit_captures_len());",
                "    ",
                "    let properties_with_two_captures = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: Some(2),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(Some(2), properties_with_two_captures.static_explicit_captures_len());",
                "    ",
                "    let properties_with_none_capture = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(None, properties_with_none_capture.static_explicit_captures_len());"
              ],
              "code": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: Some(0),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(Some(0), properties.static_explicit_captures_len());",
                "    ",
                "    let properties_with_one_capture = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: Some(1),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(Some(1), properties_with_one_capture.static_explicit_captures_len());",
                "    ",
                "    let properties_with_two_captures = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: Some(2),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(Some(2), properties_with_two_captures.static_explicit_captures_len());",
                "    ",
                "    let properties_with_none_capture = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(None, properties_with_none_capture.static_explicit_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(1),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1));",
                "    properties.static_explicit_captures_len();"
              ],
              "code": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(1),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(1),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(properties.static_explicit_captures_len(), None);",
                "    let properties_none = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties_none.static_explicit_captures_len(), None);",
                "    assert_eq!(Some(2), Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: Some(2),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    })).static_explicit_captures_len());",
                "    assert_eq!(Some(0), Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    })).static_explicit_captures_len());"
              ],
              "code": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: Some(1),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(properties.static_explicit_captures_len(), None);",
                "    let properties_none = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties_none.static_explicit_captures_len(), None);",
                "    assert_eq!(Some(2), Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: Some(2),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    })).static_explicit_captures_len());",
                "    assert_eq!(Some(0), Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    })).static_explicit_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: Some(2),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.static_explicit_captures_len(), Some(2));",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: None, ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), None);",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: Some(0), ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(0));",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: Some(1), ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1));",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: Some(3), ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(3));"
              ],
              "code": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: Some(2),",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(2));",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: None, ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), None);",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: Some(0), ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(0));",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: Some(1), ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1));",
                "    let properties = Properties(Box::new(PropertiesI { static_explicit_captures_len: Some(3), ..default_properties() }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.static_explicit_captures_len(), None);",
                "    ",
                "    let properties2 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: Some(1),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties2.static_explicit_captures_len(), Some(1));",
                "    ",
                "    let properties3 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: Some(2),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties3.static_explicit_captures_len(), Some(2));",
                "    ",
                "    let properties4 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties4.static_explicit_captures_len(), Some(0));",
                "    ",
                "    let properties5 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties5.static_explicit_captures_len(), None);"
              ],
              "code": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(properties.static_explicit_captures_len(), None);",
                "    ",
                "    let properties2 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: Some(1),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties2.static_explicit_captures_len(), Some(1));",
                "    ",
                "    let properties3 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: Some(2),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties3.static_explicit_captures_len(), Some(2));",
                "    ",
                "    let properties4 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties4.static_explicit_captures_len(), Some(0));",
                "    ",
                "    let properties5 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(properties5.static_explicit_captures_len(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(properties.static_explicit_captures_len(), None)",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: Some(0),",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(0))",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: Some(1),",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1))",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: Some(2),",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(2))",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: None,",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), None)",
                "    ",
                "    fn default_properties() -> PropertiesI {",
                "    PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }",
                "    }"
              ],
              "code": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(properties.static_explicit_captures_len(), None)",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: Some(0),",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(0))",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: Some(1),",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(1))",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: Some(2),",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), Some(2))",
                "    ",
                "    let properties = Properties(Box::new(PropertiesI {",
                "    static_explicit_captures_len: None,",
                "    ..default_properties()",
                "    }));",
                "    assert_eq!(properties.static_explicit_captures_len(), None)",
                "    ",
                "    fn default_properties() -> PropertiesI {",
                "    PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::new(),",
                "    look_set_prefix: LookSet::new(),",
                "    look_set_suffix: LookSet::new(),",
                "    look_set_prefix_any: LookSet::new(),",
                "    look_set_suffix_any: LookSet::new(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(None, properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = Some(0);",
                "    assert_eq!(Some(0), properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = Some(1);",
                "    assert_eq!(Some(1), properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = Some(2);",
                "    assert_eq!(Some(2), properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = None;",
                "    assert_eq!(None, properties.static_explicit_captures_len());"
              ],
              "code": [
                "{",
                "    let properties = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::new(),",
                "        look_set_prefix: LookSet::new(),",
                "        look_set_suffix: LookSet::new(),",
                "        look_set_prefix_any: LookSet::new(),",
                "        look_set_suffix_any: LookSet::new(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: true,",
                "    }));",
                "    properties.static_explicit_captures_len();",
                "    assert_eq!(None, properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = Some(0);",
                "    assert_eq!(Some(0), properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = Some(1);",
                "    assert_eq!(Some(1), properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = Some(2);",
                "    assert_eq!(Some(2), properties.static_explicit_captures_len());",
                "    properties.0.static_explicit_captures_len = None;",
                "    assert_eq!(None, properties.static_explicit_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}