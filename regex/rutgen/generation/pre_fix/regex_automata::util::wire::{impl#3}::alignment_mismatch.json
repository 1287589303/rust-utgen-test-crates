{
  "name": "regex_automata::util::wire::{impl#3}::alignment_mismatch",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": false,
  "loc": "regex-automata/src/util/wire.rs:181:5:189:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: DeserializeError(DeserializeErrorKind::AlignmentMismatch {\n            alignment,\n            address,\n        })\n"
      ],
      "input_infer": "alignment: 1 to 4096; address: 0 to 8192\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let alignment = 1;",
                "    let address = 0;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "}"
              ],
              "oracle": [
                "    let alignment = 1;",
                "    let address = 0;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = 16;",
                "    let address = 8;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = 4;",
                "    let address = 12;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = 0;",
                "    let address = 0;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = usize::MAX;",
                "    let address = usize::MAX;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let alignment = 1;",
                "    let address = 0;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    let alignment = 1;",
                "    let address = 0;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = 16;",
                "    let address = 8;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = 4;",
                "    let address = 12;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = 0;",
                "    let address = 0;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "    ",
                "    let alignment = usize::MAX;",
                "    let address = usize::MAX;",
                "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let alignment = 2048;",
                "    let address = 4096;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "}"
              ],
              "oracle": [
                "    let alignment = 2048;",
                "    let address = 4096;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    assert_eq!(result.0, DeserializeErrorKind::AlignmentMismatch { alignment: 2048, address: 4096 });"
              ],
              "code": [
                "{",
                "    let alignment = 2048;",
                "    let address = 4096;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    let alignment = 2048;",
                "    let address = 4096;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    assert_eq!(result.0, DeserializeErrorKind::AlignmentMismatch { alignment: 2048, address: 4096 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let alignment = 4096;",
                "    let address = 8192;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4096, address: 8192 }));"
              ],
              "code": [
                "{",
                "    let alignment = 4096;",
                "    let address = 8192;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4096, address: 8192 }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let alignment = 2;",
                "    let address = 1;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "}"
              ],
              "oracle": [
                "    let alignment = 2;",
                "    let address = 1;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 2, address: 1 })));"
              ],
              "code": [
                "{",
                "    let alignment = 2;",
                "    let address = 1;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    let alignment = 2;",
                "    let address = 1;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 2, address: 1 })));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let alignment = 4095;",
                "    let address = 8191;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "}"
              ],
              "oracle": [
                "    let alignment = 4095;",
                "    let address = 8191;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4095, address: 8191 }));"
              ],
              "code": [
                "{",
                "    let alignment = 4095;",
                "    let address = 8191;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    let alignment = 4095;",
                "    let address = 8191;",
                "    let result = DeserializeError::alignment_mismatch(alignment, address);",
                "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4095, address: 8191 }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}