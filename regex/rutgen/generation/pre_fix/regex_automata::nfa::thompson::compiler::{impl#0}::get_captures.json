{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::get_captures",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:492:5:494:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "utf8: true/false, reverse: true/false, nfa_size_limit: None/0/1 to 2^32-1, shrink: true/false, which_captures: All/Implicit/None, look_matcher: valid LookMatcher, unanchored_prefix: true/false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None)",
                "    .which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::Implicit)",
                "    .with_captures(true);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None)",
                "    .with_captures(false);",
                "    assert_eq!(config.get_captures(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None)",
                "    .which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::Implicit)",
                "    .with_captures(true);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None)",
                "    .with_captures(false);",
                "    assert_eq!(config.get_captures(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::Implicit);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::Implicit);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::None);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::None);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(None);",
                "    assert_eq!(config.get_captures(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .utf8(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new()",
                "    .which_captures(None);",
                "    assert_eq!(config.get_captures(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .utf8(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .utf8(false)",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .utf8(false)",
                "    .which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .utf8(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .utf8(false)",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new()",
                "    .utf8(false)",
                "    .which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .reverse(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(None);",
                "    assert_eq!(config.get_captures(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .reverse(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(None);",
                "    assert_eq!(config.get_captures(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .reverse(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(None);",
                "    assert_eq!(config.get_captures(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .reverse(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(None);",
                "    assert_eq!(config.get_captures(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(1024))",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(Some(1024))",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(Some(1024))",
                "    .which_captures(WhichCaptures::None);",
                "    assert!(config.get_captures() == false);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(None)",
                "    .which_captures(WhichCaptures::All);",
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(None)",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(None)",
                "    .which_captures(WhichCaptures::None);",
                "    assert!(config.get_captures() == false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(1024))",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(Some(1024))",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(Some(1024))",
                "    .which_captures(WhichCaptures::None);",
                "    assert!(config.get_captures() == false);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(None)",
                "    .which_captures(WhichCaptures::All);",
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(None)",
                "    .which_captures(WhichCaptures::Implicit);",
                "    assert!(config.get_captures() == true);",
                "    ",
                "    let config = Config::new()",
                "    .nfa_size_limit(None)",
                "    .which_captures(WhichCaptures::None);",
                "    assert!(config.get_captures() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::Implicit);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::Implicit); assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::All); assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::None); assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::All); assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit); assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::None); assert_eq!(config.get_captures(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .shrink(true)",
                "        .which_captures(WhichCaptures::Implicit);",
                "    let _ = config.get_captures();",
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::Implicit); assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::All); assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::None); assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::All); assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit); assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::None); assert_eq!(config.get_captures(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .shrink(false)",
                "        .which_captures(WhichCaptures::Implicit);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .shrink(false)",
                "        .which_captures(WhichCaptures::Implicit);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_captures(), true);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_matcher = LookMatcher { lineterm: DebugByte::default() };",
                "    let config = Config::new()",
                "        .look_matcher(look_matcher)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);"
              ],
              "code": [
                "{",
                "    let look_matcher = LookMatcher { lineterm: DebugByte::default() };",
                "    let config = Config::new()",
                "        .look_matcher(look_matcher)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .unanchored_prefix(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new().which_captures(None);",
                "    assert_eq!(config.get_captures(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .unanchored_prefix(true)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "    ",
                "    let config = Config::new().which_captures(None);",
                "    assert_eq!(config.get_captures(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .unanchored_prefix(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .unanchored_prefix(false)",
                "        .which_captures(WhichCaptures::All);",
                "    let _ = config.get_captures();",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_captures(), true);",
                "    ",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_captures(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}