{
  "name": "regex_automata::util::sparse_set::{impl#0}::clear",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:64:5:67:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Testing the `clear` function should include: 1. `SparseSets` with non-empty `set1` and `set2`, 2. `SparseSets` with empty `set1` and `set2`, 3. `SparseSets` with varying capacities (e.g., 0, 1, 10), 4. Ensure no panic occurs when called on an instance of `SparseSets` in any state.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(10);",
                "    sparse_sets.set1.insert(0);",
                "    sparse_sets.set1.insert(1);",
                "    sparse_sets.set2.insert(2);",
                "    sparse_sets.set2.insert(3);",
                "    sparse_sets.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    assert!(!sparse_sets.set1.contains(0));",
                "    assert!(!sparse_sets.set1.contains(1));",
                "    assert!(!sparse_sets.set2.contains(2));",
                "    assert!(!sparse_sets.set2.contains(3));"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(10);",
                "    sparse_sets.set1.insert(0);",
                "    sparse_sets.set1.insert(1);",
                "    sparse_sets.set2.insert(2);",
                "    sparse_sets.set2.insert(3);",
                "    sparse_sets.clear();",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    assert!(!sparse_sets.set1.contains(0));",
                "    assert!(!sparse_sets.set1.contains(1));",
                "    assert!(!sparse_sets.set2.contains(2));",
                "    assert!(!sparse_sets.set2.contains(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(0);",
                "    sparse_sets.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(0);",
                "    sparse_sets.clear();",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(1);",
                "    sparse_sets.set1.insert(0);",
                "    sparse_sets.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set2.is_empty());"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(1);",
                "    sparse_sets.set1.insert(0);",
                "    sparse_sets.clear();",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set2.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_sets = SparseSets::new(10);",
                "    sparse_sets.set1.insert(0);",
                "    sparse_sets.set1.insert(5);",
                "    sparse_sets.set2.insert(1);",
                "    sparse_sets.set2.insert(7);",
                "    sparse_sets.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    assert!(!sparse_sets.set1.contains(0));",
                "    assert!(!sparse_sets.set1.contains(5));",
                "    assert!(!sparse_sets.set2.contains(1));",
                "    assert!(!sparse_sets.set2.contains(7));"
              ],
              "code": [
                "{",
                "    let mut sparse_sets = SparseSets::new(10);",
                "    sparse_sets.set1.insert(0);",
                "    sparse_sets.set1.insert(5);",
                "    sparse_sets.set2.insert(1);",
                "    sparse_sets.set2.insert(7);",
                "    sparse_sets.clear();",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    assert!(!sparse_sets.set1.contains(0));",
                "    assert!(!sparse_sets.set1.contains(5));",
                "    assert!(!sparse_sets.set2.contains(1));",
                "    assert!(!sparse_sets.set2.contains(7));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut sparse_sets: SparseSets = SparseSets::new(0);",
                "    sparse_sets.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    assert_eq!(sparse_sets.set1.capacity(), 0);",
                "    assert_eq!(sparse_sets.set2.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let mut sparse_sets: SparseSets = SparseSets::new(0);",
                "    sparse_sets.clear();",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "    assert_eq!(sparse_sets.set1.capacity(), 0);",
                "    assert_eq!(sparse_sets.set2.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}