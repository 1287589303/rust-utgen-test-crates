{
  "name": "regex_automata::util::search::{impl#0}::is_char_boundary",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:767:5:769:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "haystack: valid UTF-8 byte array; offset: 0 to length of haystack (inclusive) for boundary checks, should include positions at character boundaries and within characters, as well as offset at length for out-of-bounds test.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(0);",
                "}"
              ],
              "oracle": [
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));"
              ],
              "code": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(0);",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(1);",
                "}"
              ],
              "oracle": [
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));"
              ],
              "code": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(1);",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(3);",
                "}"
              ],
              "oracle": [
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));"
              ],
              "code": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(3);",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(4);",
                "}"
              ],
              "oracle": [
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));"
              ],
              "code": [
                "{",
                "    let input = Input::new(\"☃\");",
                "    input.is_char_boundary(4);",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(4));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(\"こんにちは\");",
                "    input.is_char_boundary(0);",
                "    input.is_char_boundary(3);",
                "    input.is_char_boundary(6);",
                "    input.is_char_boundary(15);",
                "}"
              ],
              "oracle": [
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(input.is_char_boundary(6));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(!input.is_char_boundary(4));",
                "    assert!(!input.is_char_boundary(5));",
                "    assert!(!input.is_char_boundary(7));",
                "    assert!(!input.is_char_boundary(8));",
                "    assert!(!input.is_char_boundary(9));",
                "    assert!(!input.is_char_boundary(10));",
                "    assert!(!input.is_char_boundary(11));",
                "    assert!(!input.is_char_boundary(12));",
                "    assert!(!input.is_char_boundary(13));",
                "    assert!(!input.is_char_boundary(14));",
                "    assert!(!input.is_char_boundary(15));",
                "    assert!(input.is_char_boundary(15));"
              ],
              "code": [
                "{",
                "    let input = Input::new(\"こんにちは\");",
                "    input.is_char_boundary(0);",
                "    input.is_char_boundary(3);",
                "    input.is_char_boundary(6);",
                "    input.is_char_boundary(15);",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(3));",
                "    assert!(input.is_char_boundary(6));",
                "    assert!(!input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(!input.is_char_boundary(4));",
                "    assert!(!input.is_char_boundary(5));",
                "    assert!(!input.is_char_boundary(7));",
                "    assert!(!input.is_char_boundary(8));",
                "    assert!(!input.is_char_boundary(9));",
                "    assert!(!input.is_char_boundary(10));",
                "    assert!(!input.is_char_boundary(11));",
                "    assert!(!input.is_char_boundary(12));",
                "    assert!(!input.is_char_boundary(13));",
                "    assert!(!input.is_char_boundary(14));",
                "    assert!(!input.is_char_boundary(15));",
                "    assert!(input.is_char_boundary(15));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Input::new(&[0, 159, 146, 150]); // Invalid UTF-8 sequence",
                "    input.is_char_boundary(0);",
                "    input.is_char_boundary(1);",
                "    input.is_char_boundary(2);",
                "    input.is_char_boundary(3);",
                "}"
              ],
              "oracle": [
                "    assert!(!input.is_char_boundary(0)); // Invalid UTF-8 sequence, offset 0",
                "    assert!(!input.is_char_boundary(1)); // Invalid UTF-8 sequence, offset 1",
                "    assert!(!input.is_char_boundary(2)); // Invalid UTF-8 sequence, offset 2",
                "    assert!(!input.is_char_boundary(3)); // Invalid UTF-8 sequence, offset 3"
              ],
              "code": [
                "{",
                "    let input = Input::new(&[0, 159, 146, 150]); // Invalid UTF-8 sequence",
                "    input.is_char_boundary(0);",
                "    input.is_char_boundary(1);",
                "    input.is_char_boundary(2);",
                "    input.is_char_boundary(3);",
                "    assert!(!input.is_char_boundary(0)); // Invalid UTF-8 sequence, offset 0",
                "    assert!(!input.is_char_boundary(1)); // Invalid UTF-8 sequence, offset 1",
                "    assert!(!input.is_char_boundary(2)); // Invalid UTF-8 sequence, offset 2",
                "    assert!(!input.is_char_boundary(3)); // Invalid UTF-8 sequence, offset 3",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}