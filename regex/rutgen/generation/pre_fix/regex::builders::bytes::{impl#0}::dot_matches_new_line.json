{
  "name": "regex::builders::bytes::{impl#0}::dot_matches_new_line",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:1562:9:1568:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "Pattern as a string (valid regex) and boolean values for dot_matches_new_line (true/false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    regex_builder.dot_matches_new_line(true);",
                "}"
              ],
              "oracle": [
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(regex_builder.dot_matches_new_line(true), &mut regex_builder);"
              ],
              "code": [
                "{",
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    regex_builder.dot_matches_new_line(true);",
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(regex_builder.dot_matches_new_line(true), &mut regex_builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    regex_builder.dot_matches_new_line(false);",
                "}"
              ],
              "oracle": [
                "    let regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(regex_builder.dot_matches_new_line(false), &mut regex_builder);",
                "    let regex_builder_after_enabled = regex_builder.dot_matches_new_line(true);",
                "    assert_eq!(regex_builder_after_enabled, &mut regex_builder);",
                "    let result_enabled = regex_builder.build().unwrap();",
                "    let hay_enabled = b\"foo\\nbar\";",
                "    assert_eq!(Some(&b\"foo\\nbar\"[..]), result_enabled.find(hay_enabled).map(|m| m.as_bytes()));",
                "    let result_disabled = regex_builder.dot_matches_new_line(false).build().unwrap();",
                "    let hay_disabled = b\"foo\\nbar\";",
                "    assert_eq!(None, result_disabled.find(hay_disabled));"
              ],
              "code": [
                "{",
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    regex_builder.dot_matches_new_line(false);",
                "    let regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(regex_builder.dot_matches_new_line(false), &mut regex_builder);",
                "    let regex_builder_after_enabled = regex_builder.dot_matches_new_line(true);",
                "    assert_eq!(regex_builder_after_enabled, &mut regex_builder);",
                "    let result_enabled = regex_builder.build().unwrap();",
                "    let hay_enabled = b\"foo\\nbar\";",
                "    assert_eq!(Some(&b\"foo\\nbar\"[..]), result_enabled.find(hay_enabled).map(|m| m.as_bytes()));",
                "    let result_disabled = regex_builder.dot_matches_new_line(false).build().unwrap();",
                "    let hay_disabled = b\"foo\\nbar\";",
                "    assert_eq!(None, result_disabled.find(hay_disabled));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    regex_builder.dot_matches_new_line(true);",
                "    regex_builder.dot_matches_new_line(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_builder.dot_matches_new_line(true), &mut regex_builder);",
                "    assert_eq!(regex_builder.dot_matches_new_line(false), &mut regex_builder);",
                "    assert_eq!(regex_builder.builder.pats.len(), 1);",
                "    assert_eq!(regex_builder.builder.metac.dot_matches_new_line, false);"
              ],
              "code": [
                "{",
                "    let mut regex_builder = RegexBuilder::new(r\"foo.bar\");",
                "    regex_builder.dot_matches_new_line(true);",
                "    regex_builder.dot_matches_new_line(false);",
                "    assert_eq!(regex_builder.dot_matches_new_line(true), &mut regex_builder);",
                "    assert_eq!(regex_builder.dot_matches_new_line(false), &mut regex_builder);",
                "    assert_eq!(regex_builder.builder.pats.len(), 1);",
                "    assert_eq!(regex_builder.builder.metac.dot_matches_new_line, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}