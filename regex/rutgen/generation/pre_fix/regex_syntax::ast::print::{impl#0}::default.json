{
  "name": "regex_syntax::ast::print::{impl#0}::default",
  "mod_info": {
    "name": "ast::print",
    "loc": "regex-syntax/src/ast/mod.rs:12:1:12:15"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/print.rs:23:5:25:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions: No input parameters needed, expected return value is a PrinterBuilder instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = PrinterBuilder::default();",
                "    let _printer = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(PrinterBuilder::default()._priv, ());",
                "    assert!(matches!(PrinterBuilder::default(), PrinterBuilder { _priv: () }));"
              ],
              "code": [
                "{",
                "    let builder = PrinterBuilder::default();",
                "    let _printer = builder.build();",
                "    assert_eq!(PrinterBuilder::default()._priv, ());",
                "    assert!(matches!(PrinterBuilder::default(), PrinterBuilder { _priv: () }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let _printer = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(PrinterBuilder::default(), PrinterBuilder::new());",
                "    assert!(PrinterBuilder::new()._priv.is_some());",
                "    assert_ne!(PrinterBuilder::default(), PrinterBuilder::new());",
                "    assert!(PrinterBuilder::new() != PrinterBuilder::new());",
                "    assert!(std::mem::size_of::<PrinterBuilder>() > 0);"
              ],
              "code": [
                "{",
                "    let builder = PrinterBuilder::new();",
                "    let _printer = builder.build();",
                "    assert_eq!(PrinterBuilder::default(), PrinterBuilder::new());",
                "    assert!(PrinterBuilder::new()._priv.is_some());",
                "    assert_ne!(PrinterBuilder::default(), PrinterBuilder::new());",
                "    assert!(PrinterBuilder::new() != PrinterBuilder::new());",
                "    assert!(std::mem::size_of::<PrinterBuilder>() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}