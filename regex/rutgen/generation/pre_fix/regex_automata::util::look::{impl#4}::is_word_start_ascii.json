{
  "name": "regex_automata::util::look::{impl#4}::is_word_start_ascii",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1099:5:1104:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: at > 0 at line 1100 is true\n",
        "precondition: at < haystack.len() at line 1102 is true\n",
        "precondition: word_before at line 1103 is true\n",
        "expected return value/type: !word_before && word_after\n"
      ],
      "input_infer": "at in range [1, haystack.len() - 1] where word_before is true and word_after is true; haystack must contain valid ASCII word characters at indices at-1 and at.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = b\"hello_world_this\";",
                "    let at = 5; // at > 0 and at < haystack.len()",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_start_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let haystack = b\"hello_world_this\";",
                "    let at = 5;",
                "    let matcher = LookMatcher::new();",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let haystack = b\"hello_world_this\";",
                "    let at = 5; // at > 0 and at < haystack.len()",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_start_ascii(haystack, at);",
                "    let haystack = b\"hello_world_this\";",
                "    let at = 5;",
                "    let matcher = LookMatcher::new();",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = b\"1two_three\";",
                "    let at = 3; // at > 0 and at < haystack.len()",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_start_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let haystack = b\"1two_three\";",
                "    let at = 3;",
                "    let matcher = LookMatcher::new();",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let haystack = b\"1two_three\";",
                "    let at = 3; // at > 0 and at < haystack.len()",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_start_ascii(haystack, at);",
                "    let haystack = b\"1two_three\";",
                "    let at = 3;",
                "    let matcher = LookMatcher::new();",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = b\"abc_def\";",
                "    let at = 3; // at > 0 and at < haystack.len()",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_start_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);  // word_before is true, word_after is true",
                "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);          // confirms word_before is true",
                "    assert_eq!(utf8::is_word_byte(haystack[at]), true);              // confirms word_after is true"
              ],
              "code": [
                "{",
                "    let haystack = b\"abc_def\";",
                "    let at = 3; // at > 0 and at < haystack.len()",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_start_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);  // word_before is true, word_after is true",
                "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);          // confirms word_before is true",
                "    assert_eq!(utf8::is_word_byte(haystack[at]), true);              // confirms word_after is true",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: at > 0 at line 1100 is false, with bound at == 0\n",
        "precondition: at < haystack.len() at line 1102 is false, with bound at == haystack.len()\n",
        "precondition: word_before at line 1103 is false\n",
        "expected return value/type: word_after\n"
      ],
      "input_infer": "at in the range [0, haystack.len()] and haystack being a byte array with at least one character; at should be 0 to ensure word_before is false and at should equal haystack.len() to validate all conditions.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
                "    let at = 0; // at == 0, should validate that word_before is false",
                "    matcher.is_word_start_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), true); // at == 0, word_after should be true for a word byte  'a'",
                "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is false",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // no character at index equal to haystack.len() to check",
                "    let at = 1; // at > 0, haystack[at - 1] is 'a'",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // word_before is true, word_after should be false for 'b' which is preceded by 'a'"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
                "    let at = 0; // at == 0, should validate that word_before is false",
                "    matcher.is_word_start_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), true); // at == 0, word_after should be true for a word byte  'a'",
                "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is false",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // no character at index equal to haystack.len() to check",
                "    let at = 1; // at > 0, haystack[at - 1] is 'a'",
                "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // word_before is true, word_after should be false for 'b' which is preceded by 'a'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
                "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
                "    matcher.is_word_start_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    plaintext",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc\";",
                "    let at = 0; // at == 0, should validate that word_before is false",
                "    assert!(!matcher.is_word_start_ascii(haystack, at));",
                "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
                "    assert!(matcher.is_word_start_ascii(haystack, at));"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
                "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
                "    matcher.is_word_start_ascii(haystack, at);",
                "    plaintext",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"abc\";",
                "    let at = 0; // at == 0, should validate that word_before is false",
                "    assert!(!matcher.is_word_start_ascii(haystack, at));",
                "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
                "    assert!(matcher.is_word_start_ascii(haystack, at));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}