{
  "name": "regex_syntax::unicode::symbolic_name_normalize",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:879:1:890:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: Strings of varying lengths, including empty strings, single characters, strings that start with \"is\" in different cases, strings containing uppercase and lowercase letters, strings with spaces, underscores, hyphens, and invalid UTF-8 sequences.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"\");",
                "    assert_eq!(result.len(), 0);",
                "    ",
                "    let input = \"ISexample\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"IS_Example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"IS-example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"IS___Test___\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"test\");",
                "    ",
                "    let input = \"ISc\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"isc\");",
                "    ",
                "    let input = \"c\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"c\");",
                "    ",
                "    let input = \"IS\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"\");",
                "    ",
                "    let input = \"I\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"i\");"
              ],
              "code": [
                "{",
                "    let input = \"\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"\");",
                "    assert_eq!(result.len(), 0);",
                "    ",
                "    let input = \"ISexample\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"IS_Example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"IS-example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    ",
                "    let input = \"IS___Test___\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"test\");",
                "    ",
                "    let input = \"ISc\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"isc\");",
                "    ",
                "    let input = \"c\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"c\");",
                "    ",
                "    let input = \"IS\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"\");",
                "    ",
                "    let input = \"I\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"i\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"a\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"a\");",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.chars().all(|c| c.is_lowercase() || c == 'a'));",
                "    assert_eq!(symbolic_name_normalize(\"ISupper\"), \"isupper\");",
                "    assert_eq!(symbolic_name_normalize(\"input-var\"), \"inputvar\");",
                "    assert_eq!(symbolic_name_normalize(\"IS_c\"), \"isc\");",
                "    assert_eq!(symbolic_name_normalize(\"_dash-\"), \"dash\");",
                "    assert_eq!(symbolic_name_normalize(\"is -\"), \"is\");",
                "    assert_eq!(symbolic_name_normalize(\"ISTHIS\"), \"isthis\");",
                "    assert_eq!(symbolic_name_normalize(\"IS\"), \"is\");",
                "    assert_eq!(symbolic_name_normalize(\"IS_\"), \"is\");",
                "    assert_eq!(symbolic_name_normalize(\"test_input\"), \"testinput\");",
                "    assert_eq!(symbolic_name_normalize(\"123\"), \"123\");",
                "    assert_eq!(symbolic_name_normalize(\"!@#\"), \"!@#\");",
                "    assert_eq!(symbolic_name_normalize(\"\"), \"\");"
              ],
              "code": [
                "{",
                "    let input = \"a\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"a\");",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.chars().all(|c| c.is_lowercase() || c == 'a'));",
                "    assert_eq!(symbolic_name_normalize(\"ISupper\"), \"isupper\");",
                "    assert_eq!(symbolic_name_normalize(\"input-var\"), \"inputvar\");",
                "    assert_eq!(symbolic_name_normalize(\"IS_c\"), \"isc\");",
                "    assert_eq!(symbolic_name_normalize(\"_dash-\"), \"dash\");",
                "    assert_eq!(symbolic_name_normalize(\"is -\"), \"is\");",
                "    assert_eq!(symbolic_name_normalize(\"ISTHIS\"), \"isthis\");",
                "    assert_eq!(symbolic_name_normalize(\"IS\"), \"is\");",
                "    assert_eq!(symbolic_name_normalize(\"IS_\"), \"is\");",
                "    assert_eq!(symbolic_name_normalize(\"test_input\"), \"testinput\");",
                "    assert_eq!(symbolic_name_normalize(\"123\"), \"123\");",
                "    assert_eq!(symbolic_name_normalize(\"!@#\"), \"!@#\");",
                "    assert_eq!(symbolic_name_normalize(\"\"), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"A\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"a\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 1);",
                "    ",
                "    let input = \"IS_EXAMPLE\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 7);",
                "    ",
                "    let input = \"is_an_example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"anexample\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 10);",
                "    ",
                "    let input = \"IS-EXAMPLE\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 7);",
                "    ",
                "    let input = \"is__example_\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 7);",
                "    ",
                "    let input = \"  is test  \";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"test\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 4);",
                "    ",
                "    let input = \"IS-CamelCase_Test\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"camelcasetest\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 16);",
                "    ",
                "    let input = \"isC\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"isc\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 3);",
                "    ",
                "    let input = \"ISc\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"isc\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 3);",
                "    ",
                "    let input = \"iS\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"is\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 2);",
                "    ",
                "    let input = \"  IS  \";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"is\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 2);"
              ],
              "code": [
                "{",
                "    let input = \"A\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"a\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 1);",
                "    ",
                "    let input = \"IS_EXAMPLE\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 7);",
                "    ",
                "    let input = \"is_an_example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"anexample\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 10);",
                "    ",
                "    let input = \"IS-EXAMPLE\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 7);",
                "    ",
                "    let input = \"is__example_\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 7);",
                "    ",
                "    let input = \"  is test  \";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"test\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 4);",
                "    ",
                "    let input = \"IS-CamelCase_Test\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"camelcasetest\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 16);",
                "    ",
                "    let input = \"isC\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"isc\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 3);",
                "    ",
                "    let input = \"ISc\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"isc\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 3);",
                "    ",
                "    let input = \"iS\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"is\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 2);",
                "    ",
                "    let input = \"  IS  \";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"is\");",
                "    assert!(result.is_ascii());",
                "    assert_eq!(result.len(), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"is example\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"example\");",
                "    assert_eq!(result.chars().next().unwrap().is_lowercase(), true);",
                "    assert!(result.len() == input.len() - 3);",
                "    assert_eq!(result, \"example\".to_string());",
                "    assert!(result.contains(\"example\"));"
              ],
              "code": [
                "{",
                "    let input = \"is example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert_eq!(result.chars().next().unwrap().is_lowercase(), true);",
                "    assert!(result.len() == input.len() - 3);",
                "    assert_eq!(result, \"example\".to_string());",
                "    assert!(result.contains(\"example\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"is_example\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"example\");"
              ],
              "code": [
                "{",
                "    let input = \"is_example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"is-example\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"example\");",
                "    assert_eq!(result.len(), 7);",
                "    assert!(result.chars().all(|c| c.is_lowercase() || c == '-'));",
                "    assert!(result.starts_with(\"example\"));",
                "    assert!(result.contains('-') == false);"
              ],
              "code": [
                "{",
                "    let input = \"is-example\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"example\");",
                "    assert_eq!(result.len(), 7);",
                "    assert!(result.chars().all(|c| c.is_lowercase() || c == '-'));",
                "    assert!(result.starts_with(\"example\"));",
                "    assert!(result.contains('-') == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"isCamelCase\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"iscamelcase\");"
              ],
              "code": [
                "{",
                "    let input = \"isCamelCase\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"iscamelcase\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"ISCamelCase\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"iscamelcase\");"
              ],
              "code": [
                "{",
                "    let input = \"ISCamelCase\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"iscamelcase\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"iSCamelCase\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    let input = \"iSCamelCase\";",
                "    let expected_result = \"iscamelcase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"is_Snake_Case\";",
                "    let expected_result = \"issnakecase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"IS-AnotherCase\";",
                "    let expected_result = \"isanothercase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"NotCamelCase\";",
                "    let expected_result = \"notcamelcase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"IS\";",
                "    let expected_result = \"is\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"i\";",
                "    let expected_result = \"i\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"\";",
                "    let expected_result = \"\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"iSC_Case\";",
                "    let expected_result = \"isc_case\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"is-_hyphen_case\";",
                "    let expected_result = \"ishyphencase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"iS0nly0_LettersA\";",
                "    let expected_result = \"isonly0lettersa\";",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let input = \"iSCamelCase\";",
                "    let result = symbolic_name_normalize(input);",
                "    let input = \"iSCamelCase\";",
                "    let expected_result = \"iscamelcase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"is_Snake_Case\";",
                "    let expected_result = \"issnakecase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"IS-AnotherCase\";",
                "    let expected_result = \"isanothercase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"NotCamelCase\";",
                "    let expected_result = \"notcamelcase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"IS\";",
                "    let expected_result = \"is\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"i\";",
                "    let expected_result = \"i\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"\";",
                "    let expected_result = \"\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"iSC_Case\";",
                "    let expected_result = \"isc_case\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"is-_hyphen_case\";",
                "    let expected_result = \"ishyphencase\";",
                "    assert_eq!(result, expected_result);",
                "    ",
                "    let input = \"iS0nly0_LettersA\";",
                "    let expected_result = \"isonly0lettersa\";",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    // Creating an invalid UTF-8 sequence",
                "    let input: &[u8] = &[0xFF, 0xFE, 0xFD];",
                "    let result = symbolic_name_normalize(std::str::from_utf8(input).unwrap_or(\"invalid\"));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(symbolic_name_normalize(\"invalid\"), \"invalid\");",
                "    assert_eq!(symbolic_name_normalize(\"is_valid\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"IS_VALID\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"iS_VALID\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"Is_VALID\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"is_valid_value\"), \"isvalidvalue\");",
                "    assert_eq!(symbolic_name_normalize(\"_is_valid_\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"valid-name\"), \"validname\");",
                "    assert_eq!(symbolic_name_normalize(\"valid_name\"), \"validname\");",
                "    assert_eq!(symbolic_name_normalize(\"VALID NAME\"), \"validname\");",
                "    assert_eq!(symbolic_name_normalize(\"c\"), \"c\");",
                "    assert_eq!(symbolic_name_normalize(\"c-\"), \"c\");",
                "    assert_eq!(symbolic_name_normalize(\"Is_c\"), \"isc\");",
                "    assert_eq!(symbolic_name_normalize(\"Is _c\"), \"isc\");",
                "    assert_eq!(symbolic_name_normalize(\"Is- c\"), \"isc\");"
              ],
              "code": [
                "{",
                "    // Creating an invalid UTF-8 sequence",
                "    let input: &[u8] = &[0xFF, 0xFE, 0xFD];",
                "    let result = symbolic_name_normalize(std::str::from_utf8(input).unwrap_or(\"invalid\"));",
                "    assert_eq!(symbolic_name_normalize(\"invalid\"), \"invalid\");",
                "    assert_eq!(symbolic_name_normalize(\"is_valid\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"IS_VALID\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"iS_VALID\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"Is_VALID\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"is_valid_value\"), \"isvalidvalue\");",
                "    assert_eq!(symbolic_name_normalize(\"_is_valid_\"), \"isvalid\");",
                "    assert_eq!(symbolic_name_normalize(\"valid-name\"), \"validname\");",
                "    assert_eq!(symbolic_name_normalize(\"valid_name\"), \"validname\");",
                "    assert_eq!(symbolic_name_normalize(\"VALID NAME\"), \"validname\");",
                "    assert_eq!(symbolic_name_normalize(\"c\"), \"c\");",
                "    assert_eq!(symbolic_name_normalize(\"c-\"), \"c\");",
                "    assert_eq!(symbolic_name_normalize(\"Is_c\"), \"isc\");",
                "    assert_eq!(symbolic_name_normalize(\"Is _c\"), \"isc\");",
                "    assert_eq!(symbolic_name_normalize(\"Is- c\"), \"isc\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"is_Special-Case\";",
                "    let result = symbolic_name_normalize(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"specialcase\");"
              ],
              "code": [
                "{",
                "    let input = \"is_Special-Case\";",
                "    let result = symbolic_name_normalize(input);",
                "    assert_eq!(result, \"specialcase\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}