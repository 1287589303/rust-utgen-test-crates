{
  "name": "regex_lite::string::{impl#40}::multi_line",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2724:5:2727:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "string: any valid regex pattern, bool: true or false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^foo$\");",
                "    builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    assert_eq!(builder.multi_line(false), &mut builder);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    assert!(builder.hir_config.flags.multi_line);",
                "    assert_eq!(builder.multi_line(true), &mut builder);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^foo$\");",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    assert_eq!(builder.multi_line(false), &mut builder);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    assert!(builder.hir_config.flags.multi_line);",
                "    assert_eq!(builder.multi_line(true), &mut builder);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^foo$\");",
                "    builder.multi_line(false);",
                "}"
              ],
              "oracle": [
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(re.find(\"\\nfoo\\n\"), None);",
                "    builder.multi_line(false);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(re.find(\"\\nfoo\\n\").map(|m| m.range()), Some(1..4));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^foo$\");",
                "    builder.multi_line(false);",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(re.find(\"\\nfoo\\n\"), None);",
                "    builder.multi_line(false);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(re.find(\"\\nfoo\\n\").map(|m| m.range()), Some(1..4));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^bar$\");",
                "    builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    let mut builder = RegexBuilder::new(r\"^bar$\");",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(Some(0..4), re.find(\"\\nbar\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"bar\").map(|m| m.range()));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^bar$\");",
                "    builder.multi_line(true);",
                "    let mut builder = RegexBuilder::new(r\"^bar$\");",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    builder.multi_line(true);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(Some(0..4), re.find(\"\\nbar\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"bar\").map(|m| m.range()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\");",
                "    builder.multi_line(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    let mut builder = RegexBuilder::new(r\"^foo$\");",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\");",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    let mut builder = RegexBuilder::new(r\"^foo$\");",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    builder.multi_line(false);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^(foo|bar)$\");",
                "    builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"foo\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"bar\").map(|m| m.range()));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"^(foo|bar)$\");",
                "    builder.multi_line(true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, true);",
                "    assert_eq!(builder.hir_config.flags.multi_line, false);",
                "    let re = builder.build().unwrap();",
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"foo\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"bar\").map(|m| m.range()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}