{
  "name": "regex::builders::string::{impl#1}::unicode",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:872:9:875:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid boolean value for 'yes' (true or false) when calling unicode() method on RegexSetBuilder instance\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    builder.unicode(true);",
                "}"
              ],
              "oracle": [
                "    builder.unicode(true);",
                "    assert_eq!(builder.builder.syntaxc.is_unicode(), true);",
                "    ",
                "    let mut builder_disabled = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    builder_disabled.unicode(false);",
                "    assert_eq!(builder_disabled.builder.syntaxc.is_unicode(), false);",
                "    ",
                "    let mut builder_case_insensitive = RegexSetBuilder::new(vec![r\"s\"]);",
                "    builder_case_insensitive.case_insensitive(true).unicode(false);",
                "    assert_eq!(builder_case_insensitive.builder.metac.case_insensitive, true);",
                "    ",
                "    let mut builder_invalid_utf8 = RegexSetBuilder::new(vec![r\"[^\\w]\"]);",
                "    builder_invalid_utf8.unicode(false);",
                "    let result = builder_invalid_utf8.build();",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    builder.unicode(true);",
                "    builder.unicode(true);",
                "    assert_eq!(builder.builder.syntaxc.is_unicode(), true);",
                "    ",
                "    let mut builder_disabled = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    builder_disabled.unicode(false);",
                "    assert_eq!(builder_disabled.builder.syntaxc.is_unicode(), false);",
                "    ",
                "    let mut builder_case_insensitive = RegexSetBuilder::new(vec![r\"s\"]);",
                "    builder_case_insensitive.case_insensitive(true).unicode(false);",
                "    assert_eq!(builder_case_insensitive.builder.metac.case_insensitive, true);",
                "    ",
                "    let mut builder_invalid_utf8 = RegexSetBuilder::new(vec![r\"[^\\w]\"]);",
                "    builder_invalid_utf8.unicode(false);",
                "    let result = builder_invalid_utf8.build();",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    builder.unicode(false);",
                "}"
              ],
              "oracle": [
                "    let builder = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    assert_eq!(builder.unicode(false), &mut builder);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    builder.unicode(false);",
                "    let builder = RegexSetBuilder::new(vec![r\"\\w\"]);",
                "    assert_eq!(builder.unicode(false), &mut builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}