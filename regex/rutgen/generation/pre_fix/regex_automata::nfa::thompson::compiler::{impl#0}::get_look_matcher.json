{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::get_look_matcher",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:502:5:504:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.look_matcher must be None or Some(LookMatcher) and must validate behavior with and without provided LookMatcher; expect LookMatcher type return.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let matcher = config.get_look_matcher();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher, LookMatcher::default());",
                "    let config_with_look_matcher = Config { look_matcher: Some(LookMatcher { lineterm: DebugByte::new() }), ..Config::default() };",
                "    let matcher_with_set = config_with_look_matcher.get_look_matcher();",
                "    assert_eq!(matcher_with_set, config_with_look_matcher.look_matcher.clone().unwrap_or(LookMatcher::default()));",
                "    let config_empty_look_matcher = Config { look_matcher: None, ..Config::default() };",
                "    let matcher_empty = config_empty_look_matcher.get_look_matcher();",
                "    assert_eq!(matcher_empty, LookMatcher::default());"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let matcher = config.get_look_matcher();",
                "    assert_eq!(matcher, LookMatcher::default());",
                "    let config_with_look_matcher = Config { look_matcher: Some(LookMatcher { lineterm: DebugByte::new() }), ..Config::default() };",
                "    let matcher_with_set = config_with_look_matcher.get_look_matcher();",
                "    assert_eq!(matcher_with_set, config_with_look_matcher.look_matcher.clone().unwrap_or(LookMatcher::default()));",
                "    let config_empty_look_matcher = Config { look_matcher: None, ..Config::default() };",
                "    let matcher_empty = config_empty_look_matcher.get_look_matcher();",
                "    assert_eq!(matcher_empty, LookMatcher::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().look_matcher(LookMatcher::default());",
                "    let matcher = config.get_look_matcher();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher, LookMatcher::default());",
                "    assert!(matcher.lineterm == DebugByte::default());",
                "    assert!(config.look_matcher.is_none());",
                "    assert!(config.get_look_matcher().lineterm == matcher.lineterm);",
                "    assert_eq!(config.get_look_matcher(), LookMatcher::default());"
              ],
              "code": [
                "{",
                "    let config = Config::default().look_matcher(LookMatcher::default());",
                "    let matcher = config.get_look_matcher();",
                "    assert_eq!(matcher, LookMatcher::default());",
                "    assert!(matcher.lineterm == DebugByte::default());",
                "    assert!(config.look_matcher.is_none());",
                "    assert!(config.get_look_matcher().lineterm == matcher.lineterm);",
                "    assert_eq!(config.get_look_matcher(), LookMatcher::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}