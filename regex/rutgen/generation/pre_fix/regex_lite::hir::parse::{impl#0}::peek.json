{
  "name": "regex_lite::hir::parse::{impl#0}::peek",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:300:5:305:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_done() at line 301 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.pattern is an empty string or self.pos() is equal to the length of self.pattern\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"\");",
                "    parser.pos.set(0);",
                "    let result = parser.peek();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"\");",
                "    parser.pos.set(0);",
                "    let result = parser.peek();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"abc\");",
                "    parser.pos.set(3);",
                "    let result = parser.peek();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let parser = Parser::new(config, \"abc\");",
                "    parser.pos.set(3);",
                "    let result = parser.peek();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_done() at line 301 is false\n"
      ],
      "input_infer": "valid pattern strings of varying lengths (including edge cases like empty strings, single character patterns, and maximum length patterns just below size limit) where `self.pos()` is less than `self.pattern.len()` and `self.char()` points to a valid character in the pattern\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(0);",
                "    parser.char.set(Some('a'));",
                "    let result = parser.peek();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('a'));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"a\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(0);",
                "    parser.char.set(Some('a'));",
                "    let result = parser.peek();",
                "    assert_eq!(result, Some('a'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"abc\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(1);",
                "    parser.char.set(Some('b'));",
                "    let result = parser.peek();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('c'));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"abc\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(1);",
                "    parser.char.set(Some('b'));",
                "    let result = parser.peek();",
                "    assert_eq!(result, Some('c'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(0);",
                "    parser.char.set(None);",
                "    let result = parser.peek();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(0);",
                "    parser.char.set(None);",
                "    let result = parser.peek();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"abc\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(3);",
                "    parser.char.set(None);",
                "    let result = parser.peek();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"abc\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(3);",
                "    parser.char.set(None);",
                "    let result = parser.peek();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"abcxyz\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(5);",
                "    parser.char.set(Some('z'));",
                "    let result = parser.peek();",
                "}"
              ],
              "oracle": [
                "    let expected_result = Some('y');",
                "    assert_eq!(result, expected_result);",
                "    assert!(!parser.is_done());",
                "    assert_eq!(parser.pos(), 5);",
                "    assert_eq!(parser.char(), 'z');"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"abcxyz\";",
                "    let parser = Parser::new(config, pattern);",
                "    parser.pos.set(5);",
                "    parser.char.set(Some('z'));",
                "    let result = parser.peek();",
                "    let expected_result = Some('y');",
                "    assert_eq!(result, expected_result);",
                "    assert!(!parser.is_done());",
                "    assert_eq!(parser.pos(), 5);",
                "    assert_eq!(parser.char(), 'z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}