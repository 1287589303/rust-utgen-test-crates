{
  "name": "regex_automata::util::search::{impl#0}::set_range",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:467:5:486:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: range.start_bound() matches Bound::Unbounded at line 474 is true\n",
        "precondition: range.end_bound() matches Bound::Unbounded at line 480 is true\n"
      ],
      "input_infer": "Input ranges for the `set_range` function: 0..usize::MAX, 0..(self.haystack.len()), or any range where start is valid regardless of end validity with self.haystack.len() being the limit.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"test input\"[..]);",
                "    input.set_range(..);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 0..11);",
                "    assert_eq!(input.get_span().start, 0);",
                "    assert_eq!(input.get_span().end, 11);",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(5));",
                "    assert!(input.is_char_boundary(10));"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"test input\"[..]);",
                "    input.set_range(..);",
                "    assert_eq!(input.get_range(), 0..11);",
                "    assert_eq!(input.get_span().start, 0);",
                "    assert_eq!(input.get_span().end, 11);",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(5));",
                "    assert!(input.is_char_boundary(10));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"hello\"[..]);",
                "    input.set_range(..5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert_eq!(input.start(), 0);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"hello\"[..]);",
                "    input.set_range(..5);",
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert_eq!(input.start(), 0);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"world\"[..]);",
                "    input.set_range(..usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert!(input.is_done());",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(4));",
                "    assert!(!input.is_char_boundary(5));",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
                "    assert_eq!(input.get_anchored(), Anchored::No);"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"world\"[..]);",
                "    input.set_range(..usize::MAX);",
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert!(input.is_done());",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(4));",
                "    assert!(!input.is_char_boundary(5));",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
                "    assert_eq!(input.get_anchored(), Anchored::No);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: range.start_bound() matches Bound::Excluded(&i) at line 474 is true\n",
        "precondition: range.start_bound() matches Bound::Excluded(&i) at line 474 is true\n",
        "precondition: range.end_bound() matches Bound::Excluded(&i) at line 480 is true\n",
        "precondition: range.end_bound() matches Bound::Excluded(&i) at line 480 is true\n"
      ],
      "input_infer": "range is any of the types (1..=5, 3..=7, 0..=usize::MAX) where 1 and 3 are excluded from the range and 5 and 7 are included as the end of the range; haystack must be a non-empty slice with at least as many elements as the end index of the range.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(b\"abcdef\");",
                "    input.set_range(1..=5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 1..5);",
                "    assert_eq!(input.start(), 1);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.get_span(), Span { start: 1, end: 5 });",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(5));"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(b\"abcdef\");",
                "    input.set_range(1..=5);",
                "    assert_eq!(input.get_range(), 1..5);",
                "    assert_eq!(input.start(), 1);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.get_span(), Span { start: 1, end: 5 });",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(2));",
                "    assert!(input.is_char_boundary(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(b\"abcdefg\");",
                "    input.set_range(3..=7);",
                "}"
              ],
              "oracle": [
                "    let mut input = Input::new(b\"abcdefg\");",
                "    input.set_range(3..=7);",
                "    assert_eq!(input.get_range(), 3..=7);",
                "    assert!(input.is_char_boundary(4));",
                "    assert!(input.is_char_boundary(5));",
                "    assert!(input.is_char_boundary(6));",
                "    assert!(!input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(7));",
                "    assert_eq!(input.get_span(), Span { start: 3, end: 7 });"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(b\"abcdefg\");",
                "    input.set_range(3..=7);",
                "    let mut input = Input::new(b\"abcdefg\");",
                "    input.set_range(3..=7);",
                "    assert_eq!(input.get_range(), 3..=7);",
                "    assert!(input.is_char_boundary(4));",
                "    assert!(input.is_char_boundary(5));",
                "    assert!(input.is_char_boundary(6));",
                "    assert!(!input.is_char_boundary(3));",
                "    assert!(!input.is_char_boundary(7));",
                "    assert_eq!(input.get_span(), Span { start: 3, end: 7 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut input = Input::new(b\"abc\");",
                "    input.set_range(0..=usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 0..=usize::MAX);",
                "    assert!(std::panic::catch_unwind(|| input.set_range(0..=usize::MAX)).is_err());",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 3 });",
                "    assert!(input.is_done());",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(3));"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(b\"abc\");",
                "    input.set_range(0..=usize::MAX);",
                "    assert_eq!(input.get_range(), 0..=usize::MAX);",
                "    assert!(std::panic::catch_unwind(|| input.set_range(0..=usize::MAX)).is_err());",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 3 });",
                "    assert!(input.is_done());",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(!input.is_char_boundary(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: range.start_bound() matches Bound::Included(&i) at line 474 is true\n",
        "precondition: range.start_bound() matches Bound::Included(&i) at line 474 is true\n",
        "precondition: range.end_bound() matches Bound::Included(&i) at line 480 is true\n",
        "precondition: range.end_bound() matches Bound::Included(&i) at line 480 is true\n"
      ],
      "input_infer": "0 <= i <= 5, 0 <= j <= 5 where i is the start index and j is the end index in the range 0..=5\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(0..=5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
                "    assert!(!input.is_done());",
                "    assert_eq!(input.start(), 0);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(5));"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(0..=5);",
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
                "    assert!(!input.is_done());",
                "    assert_eq!(input.start(), 0);",
                "    assert_eq!(input.end(), 5);",
                "    assert_eq!(input.haystack(), b\"foobar\");",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(1..=4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 1..5);",
                "    assert_eq!(input.get_span().start, 1);",
                "    assert_eq!(input.get_span().end, 5);",
                "    assert!(input.haystack() == b\"foobar\");",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(input.is_char_boundary(4));"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(1..=4);",
                "    assert_eq!(input.get_range(), 1..5);",
                "    assert_eq!(input.get_span().start, 1);",
                "    assert_eq!(input.get_span().end, 5);",
                "    assert!(input.haystack() == b\"foobar\");",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(1));",
                "    assert!(input.is_char_boundary(4));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(0..=0);",
                "}"
              ],
              "oracle": [
                "    input.set_range(0..=0);",
                "    assert_eq!(input.get_range(), 0..1);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 1 });",
                "    input.set_range(0..=1);",
                "    assert_eq!(input.get_range(), 0..2);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 2 });",
                "    input.set_range(1..=1);",
                "    assert_eq!(input.get_range(), 1..2);",
                "    assert_eq!(input.get_span(), Span { start: 1, end: 2 });",
                "    input.set_range(2..=4);",
                "    assert_eq!(input.get_range(), 2..5);",
                "    assert_eq!(input.get_span(), Span { start: 2, end: 5 });",
                "    input.set_range(0..=6);  // This will panic since 6 is out of bounds.",
                "    input.set_range(4..=4);",
                "    assert_eq!(input.get_range(), 4..5);",
                "    assert_eq!(input.get_span(), Span { start: 4, end: 5 });"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(0..=0);",
                "    input.set_range(0..=0);",
                "    assert_eq!(input.get_range(), 0..1);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 1 });",
                "    input.set_range(0..=1);",
                "    assert_eq!(input.get_range(), 0..2);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 2 });",
                "    input.set_range(1..=1);",
                "    assert_eq!(input.get_range(), 1..2);",
                "    assert_eq!(input.get_span(), Span { start: 1, end: 2 });",
                "    input.set_range(2..=4);",
                "    assert_eq!(input.get_range(), 2..5);",
                "    assert_eq!(input.get_span(), Span { start: 2, end: 5 });",
                "    input.set_range(0..=6);  // This will panic since 6 is out of bounds.",
                "    input.set_range(4..=4);",
                "    assert_eq!(input.get_range(), 4..5);",
                "    assert_eq!(input.get_span(), Span { start: 4, end: 5 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(3..=5);",
                "}"
              ],
              "oracle": [
                "    input.set_range(3..=5);",
                "    assert_eq!(input.get_range(), 3..=5);",
                "    assert_eq!(input.get_span(), Span { start: 3, end: 6 });",
                "    input.set_range(0..=2);",
                "    assert_eq!(input.get_range(), 0..=2);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 3 });",
                "    input.set_range(1..=4);",
                "    assert_eq!(input.get_range(), 1..=4);",
                "    assert_eq!(input.get_span(), Span { start: 1, end: 5 });"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(3..=5);",
                "    input.set_range(3..=5);",
                "    assert_eq!(input.get_range(), 3..=5);",
                "    assert_eq!(input.get_span(), Span { start: 3, end: 6 });",
                "    input.set_range(0..=2);",
                "    assert_eq!(input.get_range(), 0..=2);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 3 });",
                "    input.set_range(1..=4);",
                "    assert_eq!(input.get_range(), 1..=4);",
                "    assert_eq!(input.get_span(), Span { start: 1, end: 5 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(0..=5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(5));"
              ],
              "code": [
                "{",
                "    let mut input = Input::new(&b\"foobar\"[..]);",
                "    input.set_range(0..=5);",
                "    assert_eq!(input.get_range(), 0..5);",
                "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
                "    assert!(!input.is_done());",
                "    assert!(input.is_char_boundary(0));",
                "    assert!(input.is_char_boundary(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}