{
  "name": "regex_automata::dfa::sparse::{impl#12}::to_owned",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2052:5:2062:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StartTable {\n            table: self.table().to_vec(),\n            kind: self.kind,\n            start_map: self.start_map.clone(),\n            stride: self.stride,\n            pattern_len: self.pattern_len,\n            universal_start_unanchored: self.universal_start_unanchored,\n            universal_start_anchored: self.universal_start_anchored,\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: T must be either Vec<u8> or &[u8], kind must be one of StartKind variants (Both, Unanchored, Anchored), stride must be a non-negative integer (0 or greater), pattern_len must be either Some(usize) or None, universal_start_unanchored and universal_start_anchored must be either Some(StateID) or None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        stride: 2,",
                "        pattern_len: Some(3),",
                "        universal_start_unanchored: Some(StateID(1)),",
                "        universal_start_anchored: Some(StateID(2)),",
                "    };",
                "",
                "    let _owned_table = start_table.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_owned_table.table, vec![1, 2, 3, 4, 5, 6, 7, 8]);",
                "    assert_eq!(_owned_table.kind, StartKind::Both);",
                "    assert_eq!(_owned_table.start_map, start_table.start_map.clone());",
                "    assert_eq!(_owned_table.stride, 2);",
                "    assert_eq!(_owned_table.pattern_len, Some(3));",
                "    assert_eq!(_owned_table.universal_start_unanchored, Some(StateID(1)));",
                "    assert_eq!(_owned_table.universal_start_anchored, Some(StateID(2)));"
              ],
              "code": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
                "        kind: StartKind::Both,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        stride: 2,",
                "        pattern_len: Some(3),",
                "        universal_start_unanchored: Some(StateID(1)),",
                "        universal_start_anchored: Some(StateID(2)),",
                "    };",
                "",
                "    let _owned_table = start_table.to_owned();",
                "    assert_eq!(_owned_table.table, vec![1, 2, 3, 4, 5, 6, 7, 8]);",
                "    assert_eq!(_owned_table.kind, StartKind::Both);",
                "    assert_eq!(_owned_table.start_map, start_table.start_map.clone());",
                "    assert_eq!(_owned_table.stride, 2);",
                "    assert_eq!(_owned_table.pattern_len, Some(3));",
                "    assert_eq!(_owned_table.universal_start_unanchored, Some(StateID(1)));",
                "    assert_eq!(_owned_table.universal_start_anchored, Some(StateID(2)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_table = StartTable {",
                "        table: &[1, 2, 3, 4, 5, 6, 7, 8],",
                "        kind: StartKind::Unanchored,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        stride: 1,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: Some(StateID(2)),",
                "    };",
                "",
                "    let _owned_table = start_table.to_owned();",
                "}"
              ],
              "oracle": [
                "    let expected_table = StartTable {",
                "    table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
                "    kind: StartKind::Unanchored,",
                "    start_map: StartByteMap { map: [Start::default(); 256] },",
                "    stride: 1,",
                "    pattern_len: None,",
                "    universal_start_unanchored: None,",
                "    universal_start_anchored: Some(StateID(2)),",
                "    };",
                "    ",
                "    assert_eq!(_owned_table.table, expected_table.table);",
                "    assert_eq!(_owned_table.kind, expected_table.kind);",
                "    assert_eq!(_owned_table.start_map, expected_table.start_map);",
                "    assert_eq!(_owned_table.stride, expected_table.stride);",
                "    assert_eq!(_owned_table.pattern_len, expected_table.pattern_len);",
                "    assert_eq!(_owned_table.universal_start_unanchored, expected_table.universal_start_unanchored);",
                "    assert_eq!(_owned_table.universal_start_anchored, expected_table.universal_start_anchored);"
              ],
              "code": [
                "{",
                "    let start_table = StartTable {",
                "        table: &[1, 2, 3, 4, 5, 6, 7, 8],",
                "        kind: StartKind::Unanchored,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        stride: 1,",
                "        pattern_len: None,",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: Some(StateID(2)),",
                "    };",
                "",
                "    let _owned_table = start_table.to_owned();",
                "    let expected_table = StartTable {",
                "    table: vec![1, 2, 3, 4, 5, 6, 7, 8],",
                "    kind: StartKind::Unanchored,",
                "    start_map: StartByteMap { map: [Start::default(); 256] },",
                "    stride: 1,",
                "    pattern_len: None,",
                "    universal_start_unanchored: None,",
                "    universal_start_anchored: Some(StateID(2)),",
                "    };",
                "    ",
                "    assert_eq!(_owned_table.table, expected_table.table);",
                "    assert_eq!(_owned_table.kind, expected_table.kind);",
                "    assert_eq!(_owned_table.start_map, expected_table.start_map);",
                "    assert_eq!(_owned_table.stride, expected_table.stride);",
                "    assert_eq!(_owned_table.pattern_len, expected_table.pattern_len);",
                "    assert_eq!(_owned_table.universal_start_unanchored, expected_table.universal_start_unanchored);",
                "    assert_eq!(_owned_table.universal_start_anchored, expected_table.universal_start_anchored);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Anchored,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        stride: 0,",
                "        pattern_len: Some(0),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let _owned_table = start_table.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_owned_table.table, vec![]);",
                "    assert_eq!(_owned_table.kind, StartKind::Anchored);",
                "    assert_eq!(_owned_table.start_map, StartByteMap { map: [Start::default(); 256] });",
                "    assert_eq!(_owned_table.stride, 0);",
                "    assert_eq!(_owned_table.pattern_len, Some(0));",
                "    assert_eq!(_owned_table.universal_start_unanchored, None);",
                "    assert_eq!(_owned_table.universal_start_anchored, None);"
              ],
              "code": [
                "{",
                "    let start_table = StartTable {",
                "        table: vec![],",
                "        kind: StartKind::Anchored,",
                "        start_map: StartByteMap { map: [Start::default(); 256] },",
                "        stride: 0,",
                "        pattern_len: Some(0),",
                "        universal_start_unanchored: None,",
                "        universal_start_anchored: None,",
                "    };",
                "",
                "    let _owned_table = start_table.to_owned();",
                "    assert_eq!(_owned_table.table, vec![]);",
                "    assert_eq!(_owned_table.kind, StartKind::Anchored);",
                "    assert_eq!(_owned_table.start_map, StartByteMap { map: [Start::default(); 256] });",
                "    assert_eq!(_owned_table.stride, 0);",
                "    assert_eq!(_owned_table.pattern_len, Some(0));",
                "    assert_eq!(_owned_table.universal_start_unanchored, None);",
                "    assert_eq!(_owned_table.universal_start_anchored, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}