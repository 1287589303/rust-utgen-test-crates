{
  "name": "regex_automata::dfa::onepass::{impl#6}::prev_state_id",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2306:5:2314:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: id == DEAD at line 2307 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "id = DEAD; id < 1 (to test the boundary condition where id is the first DFA state)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = DEAD;",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let id = DEAD;",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(id);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = StateID::new_unchecked(0);",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let id = StateID::new_unchecked(0);",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(id);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: id == DEAD at line 2307 is false\n",
        "expected return value/type: Some(StateID::new_unchecked(id.as_usize().checked_sub(1).unwrap()))\n"
      ],
      "input_infer": "id values in the range [1, MAX_STATE_ID] where MAX_STATE_ID is the maximum valid StateID value that does not equal DEAD\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let valid_id = StateID::new_unchecked(1);",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(valid_id);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(StateID::new_unchecked(0)));"
              ],
              "code": [
                "{",
                "    let valid_id = StateID::new_unchecked(1);",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(valid_id);",
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(StateID::new_unchecked(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_valid_id = StateID::new_unchecked(u64::MAX); // Assuming this is the MAX_STATE_ID.",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(max_valid_id);",
                "}"
              ],
              "oracle": [
                "    let max_valid_id = StateID::new_unchecked(u64::MAX);",
                "    let result = dfa.prev_state_id(max_valid_id);",
                "    assert!(result.is_some());",
                "    let expected_id = StateID::new_unchecked(u64::MAX.checked_sub(1).unwrap());",
                "    assert_eq!(result, Some(expected_id));"
              ],
              "code": [
                "{",
                "    let max_valid_id = StateID::new_unchecked(u64::MAX); // Assuming this is the MAX_STATE_ID.",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(max_valid_id);",
                "    let max_valid_id = StateID::new_unchecked(u64::MAX);",
                "    let result = dfa.prev_state_id(max_valid_id);",
                "    assert!(result.is_some());",
                "    let expected_id = StateID::new_unchecked(u64::MAX.checked_sub(1).unwrap());",
                "    assert_eq!(result, Some(expected_id));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mid_id = StateID::new_unchecked(2);",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(mid_id);",
                "}"
              ],
              "oracle": [
                "    let mid_id = StateID::new_unchecked(2);",
                "    let expected_result = Some(StateID::new_unchecked(1));",
                "    let result = dfa.prev_state_id(mid_id);",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let mid_id = StateID::new_unchecked(2);",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(mid_id);",
                "    let mid_id = StateID::new_unchecked(2);",
                "    let expected_result = Some(StateID::new_unchecked(1));",
                "    let result = dfa.prev_state_id(mid_id);",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let large_id = StateID::new_unchecked(u32::MAX as u64); // Example of a large valid StateID.",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(large_id);",
                "}"
              ],
              "oracle": [
                "    let large_id = StateID::new_unchecked(u32::MAX as u64);",
                "    let result = dfa.prev_state_id(large_id);",
                "    assert!(result.is_some(), \"Expected Some(StateID), got None\");",
                "    let expected_id = StateID::new_unchecked(u32::MAX as u64 - 1);",
                "    assert_eq!(result, Some(expected_id), \"Expected Some(StateID::new_unchecked(u32::MAX as u64 - 1)), got {:?}\", result);"
              ],
              "code": [
                "{",
                "    let large_id = StateID::new_unchecked(u32::MAX as u64); // Example of a large valid StateID.",
                "    let dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "        table: vec![],",
                "        starts: vec![],",
                "        min_match_id: StateID::new_unchecked(0),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 0,",
                "        stride2: 0,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    let result = dfa.prev_state_id(large_id);",
                "    let large_id = StateID::new_unchecked(u32::MAX as u64);",
                "    let result = dfa.prev_state_id(large_id);",
                "    assert!(result.is_some(), \"Expected Some(StateID), got None\");",
                "    let expected_id = StateID::new_unchecked(u32::MAX as u64 - 1);",
                "    assert_eq!(result, Some(expected_id), \"Expected Some(StateID::new_unchecked(u32::MAX as u64 - 1)), got {:?}\", result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}