{
  "name": "regex_lite::nfa::{impl#4}::iter_splits",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": true,
  "loc": "regex-lite/src/nfa.rs:194:5:202:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "splits: &[0, 1, 2, 3, 4, 5] with reverse: true or false; splits: empty slice; splits: slice with one element; splits: slice with two elements; splits: slice with maximum possible length for StateID (u32::MAX) in both reverse true and false scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let splits: &[StateID] = &[];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "}"
              ],
              "oracle": [
                "    let splits: &[StateID] = &[];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![]);",
                "    let splits: &[StateID] = &[1, 2, 3];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![3, 2, 1]);",
                "    let splits: &[StateID] = &[10];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![10]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![10]);",
                "    let splits: &[StateID] = &[4, 5, 6, 7];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![4, 5, 6, 7]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![7, 6, 5, 4]);"
              ],
              "code": [
                "{",
                "    let splits: &[StateID] = &[];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "    let splits: &[StateID] = &[];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![]);",
                "    let splits: &[StateID] = &[1, 2, 3];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![3, 2, 1]);",
                "    let splits: &[StateID] = &[10];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![10]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![10]);",
                "    let splits: &[StateID] = &[4, 5, 6, 7];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![4, 5, 6, 7]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![7, 6, 5, 4]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let splits: &[StateID] = &[1];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(splits, true).collect::<Vec<_>>();",
                "}"
              ],
              "oracle": [
                "    let splits: &[StateID] = &[1];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![1]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![1]);",
                "    ",
                "    let splits: &[StateID] = &[1, 2, 3];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![3, 2, 1]);",
                "    ",
                "    let splits: &[StateID] = &[];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![]);"
              ],
              "code": [
                "{",
                "    let splits: &[StateID] = &[1];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(splits, true).collect::<Vec<_>>();",
                "    let splits: &[StateID] = &[1];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![1]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![1]);",
                "    ",
                "    let splits: &[StateID] = &[1, 2, 3];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![3, 2, 1]);",
                "    ",
                "    let splits: &[StateID] = &[];",
                "    assert_eq!(State::iter_splits(splits, false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(splits, true).collect::<Vec<_>>(), vec![]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let splits: &[StateID] = &[1, 2];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(splits, true).collect::<Vec<_>>();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(State::iter_splits(&[1, 2], false).collect::<Vec<_>>(), vec![1, 2]);",
                "    assert_eq!(State::iter_splits(&[1, 2], true).collect::<Vec<_>>(), vec![2, 1]);",
                "    assert_eq!(State::iter_splits(&[], false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&[], true).collect::<Vec<_>>(), vec![]);"
              ],
              "code": [
                "{",
                "    let splits: &[StateID] = &[1, 2];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(splits, true).collect::<Vec<_>>();",
                "    assert_eq!(State::iter_splits(&[1, 2], false).collect::<Vec<_>>(), vec![1, 2]);",
                "    assert_eq!(State::iter_splits(&[1, 2], true).collect::<Vec<_>>(), vec![2, 1]);",
                "    assert_eq!(State::iter_splits(&[], false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&[], true).collect::<Vec<_>>(), vec![]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let splits: &[StateID] = &[0, 1, 2, 3, 4, 5];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(splits, true).collect::<Vec<_>>();",
                "}"
              ],
              "oracle": [
                "    let result_normal = State::iter_splits(splits, false).collect::<Vec<_>>(); assert_eq!(result_normal, vec![0, 1, 2, 3, 4, 5]);",
                "    let result_reverse = State::iter_splits(splits, true).collect::<Vec<_>>(); assert_eq!(result_reverse, vec![5, 4, 3, 2, 1, 0]);",
                "    assert_eq!(State::iter_splits(&[], false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&[], true).collect::<Vec<_>>(), vec![]);",
                "    let single_element_splits: &[StateID] = &[42];",
                "    assert_eq!(State::iter_splits(single_element_splits, false).collect::<Vec<_>>(), vec![42]);",
                "    assert_eq!(State::iter_splits(single_element_splits, true).collect::<Vec<_>>(), vec![42]);",
                "    let multiple_elements_splits: &[StateID] = &[10, 20, 30];",
                "    assert_eq!(State::iter_splits(multiple_elements_splits, false).collect::<Vec<_>>(), vec![10, 20, 30]);",
                "    assert_eq!(State::iter_splits(multiple_elements_splits, true).collect::<Vec<_>>(), vec![30, 20, 10]);"
              ],
              "code": [
                "{",
                "    let splits: &[StateID] = &[0, 1, 2, 3, 4, 5];",
                "    let _ = State::iter_splits(splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(splits, true).collect::<Vec<_>>();",
                "    let result_normal = State::iter_splits(splits, false).collect::<Vec<_>>(); assert_eq!(result_normal, vec![0, 1, 2, 3, 4, 5]);",
                "    let result_reverse = State::iter_splits(splits, true).collect::<Vec<_>>(); assert_eq!(result_reverse, vec![5, 4, 3, 2, 1, 0]);",
                "    assert_eq!(State::iter_splits(&[], false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&[], true).collect::<Vec<_>>(), vec![]);",
                "    let single_element_splits: &[StateID] = &[42];",
                "    assert_eq!(State::iter_splits(single_element_splits, false).collect::<Vec<_>>(), vec![42]);",
                "    assert_eq!(State::iter_splits(single_element_splits, true).collect::<Vec<_>>(), vec![42]);",
                "    let multiple_elements_splits: &[StateID] = &[10, 20, 30];",
                "    assert_eq!(State::iter_splits(multiple_elements_splits, false).collect::<Vec<_>>(), vec![10, 20, 30]);",
                "    assert_eq!(State::iter_splits(multiple_elements_splits, true).collect::<Vec<_>>(), vec![30, 20, 10]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let splits: Vec<StateID> = (0..u32::MAX).collect();",
                "    let _ = State::iter_splits(&splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(&splits, true).collect::<Vec<_>>();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(State::iter_splits(&vec![1, 2, 3], false).collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert_eq!(State::iter_splits(&vec![1, 2, 3], true).collect::<Vec<_>>(), vec![3, 2, 1]);",
                "    assert_eq!(State::iter_splits(&vec![], false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&vec![], true).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&vec![5], false).collect::<Vec<_>>(), vec![5]);",
                "    assert_eq!(State::iter_splits(&vec![5], true).collect::<Vec<_>>(), vec![5]);",
                "    assert_eq!(State::iter_splits(&vec![10, 20, 30, 40], false).collect::<Vec<_>>(), vec![10, 20, 30, 40]);",
                "    assert_eq!(State::iter_splits(&vec![10, 20, 30, 40], true).collect::<Vec<_>>(), vec![40, 30, 20, 10]);"
              ],
              "code": [
                "{",
                "    let splits: Vec<StateID> = (0..u32::MAX).collect();",
                "    let _ = State::iter_splits(&splits, false).collect::<Vec<_>>();",
                "    let _ = State::iter_splits(&splits, true).collect::<Vec<_>>();",
                "    assert_eq!(State::iter_splits(&vec![1, 2, 3], false).collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert_eq!(State::iter_splits(&vec![1, 2, 3], true).collect::<Vec<_>>(), vec![3, 2, 1]);",
                "    assert_eq!(State::iter_splits(&vec![], false).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&vec![], true).collect::<Vec<_>>(), vec![]);",
                "    assert_eq!(State::iter_splits(&vec![5], false).collect::<Vec<_>>(), vec![5]);",
                "    assert_eq!(State::iter_splits(&vec![5], true).collect::<Vec<_>>(), vec![5]);",
                "    assert_eq!(State::iter_splits(&vec![10, 20, 30, 40], false).collect::<Vec<_>>(), vec![10, 20, 30, 40]);",
                "    assert_eq!(State::iter_splits(&vec![10, 20, 30, 40], true).collect::<Vec<_>>(), vec![40, 30, 20, 10]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}