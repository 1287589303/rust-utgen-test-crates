{
  "name": "regex_syntax::hir::{impl#19}::case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1549:5:1564:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ClassBytesRange::new(b'a', b'z').is_intersection_empty(self) at line 1553 is true\n",
        "precondition: ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self) at line 1558 is true\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "ClassBytesRange::new(start, end) where start < b'a' or end < b'a' or start > b'z' and start < b'A' or end < b'A' or start > b'Z'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'\\0', b'@');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ranges.len(), 0);",
                "    let range = ClassBytesRange::new(b'!', b'@');",
                "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
                "    assert_eq!(ranges.len(), 0);",
                "    let range = ClassBytesRange::new(b'0', b'9');",
                "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
                "    assert_eq!(ranges.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'\\0', b'@');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    assert_eq!(ranges.len(), 0);",
                "    let range = ClassBytesRange::new(b'!', b'@');",
                "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
                "    assert_eq!(ranges.len(), 0);",
                "    let range = ClassBytesRange::new(b'0', b'9');",
                "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
                "    assert_eq!(ranges.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
                "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
                "    assert!(ranges.is_empty());"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'|', b'\\xFF');",
                "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
                "    assert!(ranges.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'[', b'`');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'[', b'`');",
                "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
                "    assert!(ranges.is_empty());"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'[', b'`');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'[', b'`');",
                "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
                "    assert!(ranges.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'Z', b'Z');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ranges.len(), 0);",
                "    assert_eq!(ranges.capacity(), 0);",
                "    assert!(ClassBytesRange::new(b'a', b'z').is_intersection_empty(&range));",
                "    assert!(ClassBytesRange::new(b'A', b'Z').is_intersection_empty(&range));",
                "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(b'Z', b'Z');",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    assert_eq!(ranges.len(), 0);",
                "    assert_eq!(ranges.capacity(), 0);",
                "    assert!(ClassBytesRange::new(b'a', b'z').is_intersection_empty(&range));",
                "    assert!(ClassBytesRange::new(b'A', b'Z').is_intersection_empty(&range));",
                "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: ClassBytesRange::new(b'a', b'z').is_intersection_empty(self) at line 1553 is false\n",
        "precondition: ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self) at line 1558 is false\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "Self must cover byte ranges that overlap with both b'a' to b'z' and b'A' to b'Z'; thus, test inputs should range from (lower bound of 97 to upper bound of 122 for lowercase) and (lower bound of 65 to upper bound of 90 for uppercase), allowing for overlapping in spans, such as start=65 and end=122, and inclusive boundaries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(65, 122);",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(!ClassBytesRange::new(b'a', b'z').is_intersection_empty(range));",
                "    assert!(!ClassBytesRange::new(b'A', b'Z').is_intersection_empty(range));",
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0], ClassBytesRange::new(33, 90));",
                "    assert_eq!(ranges[1], ClassBytesRange::new(97, 122));"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(65, 122);",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    assert!(!ClassBytesRange::new(b'a', b'z').is_intersection_empty(range));",
                "    assert!(!ClassBytesRange::new(b'A', b'Z').is_intersection_empty(range));",
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0], ClassBytesRange::new(33, 90));",
                "    assert_eq!(ranges[1], ClassBytesRange::new(97, 122));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(97, 122);",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0].start(), 65);",
                "    assert_eq!(ranges[0].end(), 90);",
                "    assert_eq!(ranges[1].start(), 97);",
                "    assert_eq!(ranges[1].end(), 122);",
                "    assert!(ranges.iter().all(|r| r.start() >= 65 && r.end() <= 122));"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(97, 122);",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0].start(), 65);",
                "    assert_eq!(ranges[0].end(), 90);",
                "    assert_eq!(ranges[1].start(), 97);",
                "    assert_eq!(ranges[1].end(), 122);",
                "    assert!(ranges.iter().all(|r| r.start() >= 65 && r.end() <= 122));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(65, 90);",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0].start(), 33);",
                "    assert_eq!(ranges[0].end(), 58);",
                "    assert_eq!(ranges[1].start(), 97);",
                "    assert_eq!(ranges[1].end(), 122);",
                "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(_)));"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(65, 90);",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0].start(), 33);",
                "    assert_eq!(ranges[0].end(), 58);",
                "    assert_eq!(ranges[1].start(), 97);",
                "    assert_eq!(ranges[1].end(), 122);",
                "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(98, 98); // 'b'",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0], ClassBytesRange::new(66, 66)); // 'B'",
                "    assert_eq!(ranges[1], ClassBytesRange::new(98, 98)); // 'b'",
                "    assert!(ClassBytesRange::new(98, 98).is_intersection_empty(&ranges[0]) == false);",
                "    assert!(ClassBytesRange::new(98, 98).is_intersection_empty(&ranges[1]) == false);",
                "    assert!(ranges[0].len() == 1);",
                "    assert!(ranges[1].len() == 1);"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(98, 98); // 'b'",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0], ClassBytesRange::new(66, 66)); // 'B'",
                "    assert_eq!(ranges[1], ClassBytesRange::new(98, 98)); // 'b'",
                "    assert!(ClassBytesRange::new(98, 98).is_intersection_empty(&ranges[0]) == false);",
                "    assert!(ClassBytesRange::new(98, 98).is_intersection_empty(&ranges[1]) == false);",
                "    assert!(ranges[0].len() == 1);",
                "    assert!(ranges[1].len() == 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(67, 67); // 'C'",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0].start(), 35); // 'C' -> 'c'",
                "    assert_eq!(ranges[0].end(), 35);   // 'C' -> 'c'",
                "    assert_eq!(ranges[1].start(), 99);  // 'C' -> 'C'",
                "    assert_eq!(ranges[1].end(), 99);    // 'C' -> 'C'",
                "    assert_eq!(ranges[0].len(), 1);",
                "    assert_eq!(ranges[1].len(), 1);"
              ],
              "code": [
                "{",
                "    let mut ranges = Vec::new();",
                "    let range = ClassBytesRange::new(67, 67); // 'C'",
                "    range.case_fold_simple(&mut ranges).unwrap();",
                "    assert_eq!(ranges.len(), 2);",
                "    assert_eq!(ranges[0].start(), 35); // 'C' -> 'c'",
                "    assert_eq!(ranges[0].end(), 35);   // 'C' -> 'c'",
                "    assert_eq!(ranges[1].start(), 99);  // 'C' -> 'C'",
                "    assert_eq!(ranges[1].end(), 99);    // 'C' -> 'C'",
                "    assert_eq!(ranges[0].len(), 1);",
                "    assert_eq!(ranges[1].len(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}