{
  "name": "regex_syntax::ast::{impl#18}::from_name",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:862:5:881:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is true\n",
        "precondition: name matches \"alnum\" at line 864 is true\n",
        "expected return value/type: Some(Alnum)\n"
      ],
      "input_infer": "name = \"alnum\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"alnum\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    let name = \"alnum\";",
                "    let expected = Some(ClassAsciiKind::Alnum);",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let name = \"alnum\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    let name = \"alnum\";",
                "    let expected = Some(ClassAsciiKind::Alnum);",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is true\n",
        "precondition: name matches \"alpha\" at line 864 is true\n",
        "expected return value/type: Some(Alpha)\n"
      ],
      "input_infer": "name = \"alpha\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"alpha\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Alpha));"
              ],
              "code": [
                "{",
                "    let name = \"alpha\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Alpha));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"alpha\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Alpha));"
              ],
              "code": [
                "{",
                "    let name = \"alpha\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Alpha));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is true\n",
        "precondition: name matches \"ascii\" at line 864 is true\n",
        "expected return value/type: Some(Ascii)\n"
      ],
      "input_infer": "name input must be \"ascii\" to match the expected return value Some(Ascii) while ensuring \"alnum\" and \"alpha\" do not match.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"ascii\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Ascii));"
              ],
              "code": [
                "{",
                "    let name = \"ascii\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Ascii));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let name = \"ALNUM\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    let name = \"ascii\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Ascii));"
              ],
              "code": [
                "{",
                "    let name = \"ALNUM\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    let name = \"ascii\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Ascii));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let name = \"ALPHA\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    let name = \"ascii\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Ascii));"
              ],
              "code": [
                "{",
                "    let name = \"ALPHA\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    let name = \"ascii\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Ascii));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is true\n",
        "precondition: name matches \"blank\" at line 864 is true\n",
        "expected return value/type: Some(Blank)\n"
      ],
      "input_infer": "name = \"blank\" or any other string that does not match \"alnum\", \"alpha\", or \"ascii\" while matching \"blank\" as true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Blank));"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Blank));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result1 = ClassAsciiKind::from_name(\"not-a-match\");",
                "    let result2 = ClassAsciiKind::from_name(\"alpha_test\");",
                "    let result3 = ClassAsciiKind::from_name(\"alnum_test\");",
                "    let result4 = ClassAsciiKind::from_name(\"ascii_test\");",
                "}"
              ],
              "oracle": [
                "    ClassAsciiKind::from_name(\"blank\") == Some(ClassAsciiKind::Blank)",
                "    ClassAsciiKind::from_name(\"not-a-match\") == None",
                "    ClassAsciiKind::from_name(\"alpha_test\") == None",
                "    ClassAsciiKind::from_name(\"alnum_test\") == None",
                "    ClassAsciiKind::from_name(\"ascii_test\") == None"
              ],
              "code": [
                "{",
                "    let result1 = ClassAsciiKind::from_name(\"not-a-match\");",
                "    let result2 = ClassAsciiKind::from_name(\"alpha_test\");",
                "    let result3 = ClassAsciiKind::from_name(\"alnum_test\");",
                "    let result4 = ClassAsciiKind::from_name(\"ascii_test\");",
                "    ClassAsciiKind::from_name(\"blank\") == Some(ClassAsciiKind::Blank)",
                "    ClassAsciiKind::from_name(\"not-a-match\") == None",
                "    ClassAsciiKind::from_name(\"alpha_test\") == None",
                "    ClassAsciiKind::from_name(\"alnum_test\") == None",
                "    ClassAsciiKind::from_name(\"ascii_test\") == None",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is true\n",
        "precondition: name matches \"cntrl\" at line 864 is true\n",
        "expected return value/type: Some(Cntrl)\n"
      ],
      "input_infer": "name = \"cntrl\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"cntrl\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Cntrl));"
              ],
              "code": [
                "{",
                "    let name = \"cntrl\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Cntrl));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is true\n",
        "precondition: name matches \"digit\" at line 864 is true\n",
        "expected return value/type: Some(Digit)\n"
      ],
      "input_infer": "name input condition: \"digit\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"digit\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    // The returned result is: result",
                "}"
              ],
              "oracle": [
                "    let name = \"digit\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Digit));"
              ],
              "code": [
                "{",
                "    let name = \"digit\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    // The returned result is: result",
                "    let name = \"digit\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Digit));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is true\n",
        "precondition: name matches \"graph\" at line 864 is true\n",
        "expected return value/type: Some(Graph)\n"
      ],
      "input_infer": "name = \"graph\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"graph\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    // The result can be printed or logged if needed, but no assertions are required.",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    let name = \"graph\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Graph));"
              ],
              "code": [
                "{",
                "    let name = \"graph\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    // The result can be printed or logged if needed, but no assertions are required.",
                "    let _ = result;",
                "    let name = \"graph\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Graph));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is true\n",
        "precondition: name matches \"lower\" at line 864 is true\n",
        "expected return value/type: Some(Lower)\n"
      ],
      "input_infer": "name = \"lower\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    // The expected return value is Some(ClassAsciiKind::Lower)",
                "    let _ = result;",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Lower));"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    // The expected return value is Some(ClassAsciiKind::Lower)",
                "    let _ = result;",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Lower));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let names = [",
                "        \"alnum\",",
                "        \"alpha\",",
                "        \"ascii\",",
                "        \"blank\",",
                "        \"cntrl\",",
                "        \"digit\",",
                "        \"graph\",",
                "    ];",
                "    for &name in &names {",
                "        let result = ClassAsciiKind::from_name(name);",
                "        // The expected return value is None",
                "        let _ = result;",
                "    }",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"lower\"); assert_eq!(result, Some(ClassAsciiKind::Lower));"
              ],
              "code": [
                "{",
                "    let names = [",
                "        \"alnum\",",
                "        \"alpha\",",
                "        \"ascii\",",
                "        \"blank\",",
                "        \"cntrl\",",
                "        \"digit\",",
                "        \"graph\",",
                "    ];",
                "    for &name in &names {",
                "        let result = ClassAsciiKind::from_name(name);",
                "        // The expected return value is None",
                "        let _ = result;",
                "    }",
                "    let result = ClassAsciiKind::from_name(\"lower\"); assert_eq!(result, Some(ClassAsciiKind::Lower));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is false\n",
        "precondition: name matches \"print\" at line 873 is true\n",
        "precondition: name matches \"print\" at line 864 is true\n",
        "expected return value/type: Some(Print)\n"
      ],
      "input_infer": "name = \"print\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"print\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Print));"
              ],
              "code": [
                "{",
                "    let name = \"print\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Print));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 10,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is false\n",
        "precondition: name matches \"print\" at line 873 is false\n",
        "precondition: name matches \"punct\" at line 874 is true\n",
        "precondition: name matches \"punct\" at line 864 is true\n",
        "expected return value/type: Some(Punct)\n"
      ],
      "input_infer": "name is \"punct\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"punct\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Punct));"
              ],
              "code": [
                "{",
                "    let name = \"punct\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Punct));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 11,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is false\n",
        "precondition: name matches \"print\" at line 873 is false\n",
        "precondition: name matches \"punct\" at line 874 is false\n",
        "precondition: name matches \"space\" at line 875 is true\n",
        "precondition: name matches \"space\" at line 864 is true\n",
        "expected return value/type: Some(Space)\n"
      ],
      "input_infer": "name = \"space\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"space\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Space));"
              ],
              "code": [
                "{",
                "    let name = \"space\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Space));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 12,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is false\n",
        "precondition: name matches \"print\" at line 873 is false\n",
        "precondition: name matches \"punct\" at line 874 is false\n",
        "precondition: name matches \"space\" at line 875 is false\n",
        "precondition: name matches \"upper\" at line 876 is true\n",
        "precondition: name matches \"upper\" at line 864 is true\n",
        "expected return value/type: Some(Upper)\n"
      ],
      "input_infer": "name = \"upper\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"upper\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Upper));"
              ],
              "code": [
                "{",
                "    let name = \"upper\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Upper));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is false\n",
        "precondition: name matches \"print\" at line 873 is false\n",
        "precondition: name matches \"punct\" at line 874 is false\n",
        "precondition: name matches \"space\" at line 875 is false\n",
        "precondition: name matches \"upper\" at line 876 is false\n",
        "precondition: name matches \"word\" at line 877 is true\n",
        "precondition: name matches \"word\" at line 864 is true\n",
        "expected return value/type: Some(Word)\n"
      ],
      "input_infer": "name should be \"word\" or other inputs not matching common ClassAsciiKind names, including edge cases like an empty string, numeric strings, or special characters\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"\");",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"alnum\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alpha\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ascii\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"digit\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"graph\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"print\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"space\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"upper\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"\");",
                "    let result = ClassAsciiKind::from_name(\"alnum\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alpha\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ascii\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"digit\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"graph\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"print\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"space\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"upper\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alnum\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alpha\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ascii\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"digit\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"graph\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"print\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"space\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"upper\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"xdigit\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alnum\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alpha\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ascii\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"digit\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"graph\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"print\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"space\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"upper\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"xdigit\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"!@#\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_a_variant\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"!@#\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_a_variant\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\" \");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"alnum\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"alpha\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"ascii\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"cntrl\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"digit\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"graph\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"print\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"punct\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"space\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"upper\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));",
                "    let result = ClassAsciiKind::from_name(\"xdigit\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\" \");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"alnum\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"alpha\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"ascii\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"blank\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"cntrl\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"digit\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"graph\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"lower\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"print\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"punct\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"space\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"upper\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"word\");",
                "    assert_eq!(result, Some(ClassAsciiKind::Word));",
                "    let result = ClassAsciiKind::from_name(\"xdigit\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 14,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is false\n",
        "precondition: name matches \"print\" at line 873 is false\n",
        "precondition: name matches \"punct\" at line 874 is false\n",
        "precondition: name matches \"space\" at line 875 is false\n",
        "precondition: name matches \"upper\" at line 876 is false\n",
        "precondition: name matches \"word\" at line 877 is false\n",
        "precondition: name matches \"xdigit\" at line 878 is true\n",
        "precondition: name matches \"xdigit\" at line 864 is true\n",
        "expected return value/type: Some(Xdigit)\n"
      ],
      "input_infer": "name = \"xdigit\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let name = \"xdigit\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassAsciiKind::Xdigit));"
              ],
              "code": [
                "{",
                "    let name = \"xdigit\";",
                "    let result = ClassAsciiKind::from_name(name);",
                "    assert_eq!(result, Some(ClassAsciiKind::Xdigit));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 15,
      "prompt_conds": [
        "precondition: name matches \"alnum\" at line 865 is false\n",
        "precondition: name matches \"alpha\" at line 866 is false\n",
        "precondition: name matches \"ascii\" at line 867 is false\n",
        "precondition: name matches \"blank\" at line 868 is false\n",
        "precondition: name matches \"cntrl\" at line 869 is false\n",
        "precondition: name matches \"digit\" at line 870 is false\n",
        "precondition: name matches \"graph\" at line 871 is false\n",
        "precondition: name matches \"lower\" at line 872 is false\n",
        "precondition: name matches \"print\" at line 873 is false\n",
        "precondition: name matches \"punct\" at line 874 is false\n",
        "precondition: name matches \"space\" at line 875 is false\n",
        "precondition: name matches \"upper\" at line 876 is false\n",
        "precondition: name matches \"word\" at line 877 is false\n",
        "precondition: name matches \"xdigit\" at line 878 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "name is any string other than \"alnum\", \"alpha\", \"ascii\", \"blank\", \"cntrl\", \"digit\", \"graph\", \"lower\", \"print\", \"punct\", \"space\", \"upper\", \"word\", or \"xdigit\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"NOT_ALPHA\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"foo\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"blankish\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"control\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"8\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"graphite\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"lowercase\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"printable\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"punctuation\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"spacebar\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"upper_case\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"wordy\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"hexadecimal\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"NOT_ALPHA\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"foo\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"blankish\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"control\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"8\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"graphite\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"lowercase\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"printable\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"punctuation\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"spacebar\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"upper_case\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"wordy\");",
                "    assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"hexadecimal\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_blank\");",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"not_blank\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"random\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"wrong\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"12345\"); assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_blank\");",
                "    let result = ClassAsciiKind::from_name(\"not_blank\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"random\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"wrong\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"\"); assert_eq!(result, None);",
                "    let result = ClassAsciiKind::from_name(\"12345\"); assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"non_existent\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ALPHA\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"!!punct!!\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
                "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"non_existent\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ALPHA\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"!!punct!!\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_digit\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_digit\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_graph\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_graph\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_lower\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_lower\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_print\");",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"not_print\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_blank\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_digit\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_graph\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_lower\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_space\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_upper\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_word\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_print\");",
                "    let result = ClassAsciiKind::from_name(\"not_print\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_blank\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_digit\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_graph\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_lower\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_space\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_upper\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_word\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_punct\");",
                "}"
              ],
              "oracle": [
                "    let result = ClassAsciiKind::from_name(\"not_punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"INVALID\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"empty\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ALNUM\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alpha!\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"special&char\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\" \");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"newline\\n\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"tab\\t\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_punct\");",
                "    let result = ClassAsciiKind::from_name(\"not_punct\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"INVALID\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"empty\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"ALNUM\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"alpha!\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"123\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"special&char\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\" \");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"newline\\n\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = ClassAsciiKind::from_name(\"tab\\t\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_space\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_space\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_upper\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_upper\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_word\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_word\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}