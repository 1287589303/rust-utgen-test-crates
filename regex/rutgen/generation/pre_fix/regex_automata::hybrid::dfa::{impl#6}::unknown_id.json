{
  "name": "regex_automata::hybrid::dfa::{impl#6}::unknown_id",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2727:5:2730:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid LazyStateID with ID value equal to 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestDFA;",
                "    impl TestDFA {",
                "        fn unknown_id(&self) -> LazyStateID {",
                "            LazyStateID::new(0).unwrap().to_unknown()",
                "        }",
                "    }",
                "    let dfa = TestDFA;",
                "    let _ = dfa.unknown_id();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.unknown_id().is_unknown(), true);",
                "    assert_eq!(dfa.unknown_id().as_usize_untagged() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);"
              ],
              "code": [
                "{",
                "    struct TestDFA;",
                "    impl TestDFA {",
                "        fn unknown_id(&self) -> LazyStateID {",
                "            LazyStateID::new(0).unwrap().to_unknown()",
                "        }",
                "    }",
                "    let dfa = TestDFA;",
                "    let _ = dfa.unknown_id();",
                "    assert_eq!(dfa.unknown_id().is_unknown(), true);",
                "    assert_eq!(dfa.unknown_id().as_usize_untagged() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}