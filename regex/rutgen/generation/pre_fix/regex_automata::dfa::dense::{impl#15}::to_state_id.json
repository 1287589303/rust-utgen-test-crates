{
  "name": "regex_automata::dfa::dense::{impl#15}::to_state_id",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:3698:5:3702:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "index: 0 to (len() - 1) with edge cases at 0, len() and reached capacity limits of usize; ensure panic or error handling for out-of-bounds indices (e.g., less than 0 or greater than or equal to len()).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table = TransitionTable {",
                "        table: vec![0; 10],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let state_id = table.to_state_id(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_id, StateID::new_unchecked(0 << table.stride2));",
                "    let state_id_1 = table.to_state_id(1);",
                "    assert_eq!(state_id_1, StateID::new_unchecked(1 << table.stride2));",
                "    let state_id_9 = table.to_state_id(9);",
                "    assert_eq!(state_id_9, StateID::new_unchecked(9 << table.stride2));",
                "    assert_panics!(table.to_state_id(10));"
              ],
              "code": [
                "{",
                "    let table = TransitionTable {",
                "        table: vec![0; 10],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let state_id = table.to_state_id(0);",
                "    assert_eq!(state_id, StateID::new_unchecked(0 << table.stride2));",
                "    let state_id_1 = table.to_state_id(1);",
                "    assert_eq!(state_id_1, StateID::new_unchecked(1 << table.stride2));",
                "    let state_id_9 = table.to_state_id(9);",
                "    assert_eq!(state_id_9, StateID::new_unchecked(9 << table.stride2));",
                "    assert_panics!(table.to_state_id(10));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "        table: vec![0; len],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let state_id = table.to_state_id(len - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state_id.0 >> table.stride2, len - 1);",
                "    assert!(table.to_state_id(len).0 == 0);",
                "    assert!(table.to_state_id(len + 1).0 == 0);",
                "    assert!(table.to_state_id(0).0 >> table.stride2 == 0);",
                "    assert!(table.to_state_id(1).0 >> table.stride2 == 1);",
                "    assert!(table.to_state_id(len - 1).0 >> table.stride2 == len - 1);",
                "    assert!(table.to_state_id(len - 2).0 >> table.stride2 == len - 2);"
              ],
              "code": [
                "{",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "        table: vec![0; len],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let state_id = table.to_state_id(len - 1);",
                "    assert_eq!(state_id.0 >> table.stride2, len - 1);",
                "    assert!(table.to_state_id(len).0 == 0);",
                "    assert!(table.to_state_id(len + 1).0 == 0);",
                "    assert!(table.to_state_id(0).0 >> table.stride2 == 0);",
                "    assert!(table.to_state_id(1).0 >> table.stride2 == 1);",
                "    assert!(table.to_state_id(len - 1).0 >> table.stride2 == len - 1);",
                "    assert!(table.to_state_id(len - 2).0 >> table.stride2 == len - 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "        table: vec![0; len],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let _state_id = table.to_state_id(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 10);",
                "    assert!(table.is_valid(StateID::new_unchecked(len << table.stride2)) == false);",
                "    assert!(std::panic::catch_unwind(|| { table.to_state_id(len); }).is_err());",
                "    assert!(table.to_state_id(len).0.0 & (1 << table.stride2) == 0);",
                "    assert_eq!(table.stride2, 1);"
              ],
              "code": [
                "{",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "        table: vec![0; len],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let _state_id = table.to_state_id(len);",
                "    assert_eq!(table.len(), 10);",
                "    assert!(table.is_valid(StateID::new_unchecked(len << table.stride2)) == false);",
                "    assert!(std::panic::catch_unwind(|| { table.to_state_id(len); }).is_err());",
                "    assert!(table.to_state_id(len).0.0 & (1 << table.stride2) == 0);",
                "    assert_eq!(table.stride2, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "        table: vec![0; len],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let _state_id = table.to_state_id((usize::MAX) - 1);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "    table: vec![0; len],",
                "    classes: ByteClasses([0; 256]),",
                "    stride2: 1,",
                "    };",
                "    let _state_id = table.to_state_id((usize::MAX) - 1);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "        table: vec![0; len],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let _state_id = table.to_state_id((usize::MAX) - 1);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let len = 10;",
                "    let table = TransitionTable {",
                "    table: vec![0; len],",
                "    classes: ByteClasses([0; 256]),",
                "    stride2: 1,",
                "    };",
                "    let _state_id = table.to_state_id((usize::MAX) - 1);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table = TransitionTable {",
                "        table: vec![0; 1 << 30], // Large size to reach capacity limits of usize",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let state_id = table.to_state_id(0);",
                "    let state_id_edge = table.to_state_id((1 << 30) - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.to_state_id(0), StateID::new_unchecked(0));",
                "    assert_eq!(table.to_state_id((1 << 30) - 1), StateID::new_unchecked(((1 << 30) - 1) << table.stride2));",
                "    assert!(std::panic::catch_unwind(|| table.to_state_id(1 << 30)).is_err());",
                "    assert!(std::panic::catch_unwind(|| table.to_state_id(usize::MAX)).is_err());",
                "    assert_eq!(table.stride2, 1);",
                "    assert_eq!(table.len(), (1 << 30));",
                "    assert!(table.is_valid(StateID::new_unchecked(0)));",
                "    assert!(table.is_valid(StateID::new_unchecked(((1 << 30) - 1) << table.stride2)));",
                "    assert!(!table.is_valid(StateID::new_unchecked(2 << table.stride2)));"
              ],
              "code": [
                "{",
                "    let table = TransitionTable {",
                "        table: vec![0; 1 << 30], // Large size to reach capacity limits of usize",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let state_id = table.to_state_id(0);",
                "    let state_id_edge = table.to_state_id((1 << 30) - 1);",
                "    assert_eq!(table.to_state_id(0), StateID::new_unchecked(0));",
                "    assert_eq!(table.to_state_id((1 << 30) - 1), StateID::new_unchecked(((1 << 30) - 1) << table.stride2));",
                "    assert!(std::panic::catch_unwind(|| table.to_state_id(1 << 30)).is_err());",
                "    assert!(std::panic::catch_unwind(|| table.to_state_id(usize::MAX)).is_err());",
                "    assert_eq!(table.stride2, 1);",
                "    assert_eq!(table.len(), (1 << 30));",
                "    assert!(table.is_valid(StateID::new_unchecked(0)));",
                "    assert!(table.is_valid(StateID::new_unchecked(((1 << 30) - 1) << table.stride2)));",
                "    assert!(!table.is_valid(StateID::new_unchecked(2 << table.stride2)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}