{
  "name": "regex_syntax::hir::translate::{impl#1}::utf8",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/translate.rs:67:5:70:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "yes: true, yes: false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.utf8(true);",
                "}"
              ],
              "oracle": [
                "    let mut builder = TranslatorBuilder::new();",
                "    assert_eq!(builder.utf8(true).utf8, true);",
                "    let result = builder.utf8(false);",
                "    assert_eq!(result.utf8, false);"
              ],
              "code": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.utf8(true);",
                "    let mut builder = TranslatorBuilder::new();",
                "    assert_eq!(builder.utf8(true).utf8, true);",
                "    let result = builder.utf8(false);",
                "    assert_eq!(result.utf8, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.utf8(false);",
                "}"
              ],
              "oracle": [
                "    let mut builder = TranslatorBuilder::new();",
                "    assert_eq!(builder.utf8(false), &mut builder);",
                "    assert_eq!(builder.utf8, false);",
                "    let result = builder.utf8(true);",
                "    assert_eq!(result, &mut builder);",
                "    assert_eq!(builder.utf8, true);"
              ],
              "code": [
                "{",
                "    let mut builder = TranslatorBuilder::new();",
                "    let result = builder.utf8(false);",
                "    let mut builder = TranslatorBuilder::new();",
                "    assert_eq!(builder.utf8(false), &mut builder);",
                "    assert_eq!(builder.utf8, false);",
                "    let result = builder.utf8(true);",
                "    assert_eq!(result, &mut builder);",
                "    assert_eq!(builder.utf8, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}