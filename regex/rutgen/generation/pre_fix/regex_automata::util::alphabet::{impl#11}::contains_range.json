{
  "name": "regex_automata::util::alphabet::{impl#11}::contains_range",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:784:5:786:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "start: 0 to 255, end: 0 to 255, start <= end, ByteSet should include, exclude, or be empty for edge cases, test with minimum (0,0), single element (5,5), inclusive range with all elements (0, 255), overlapping ranges (250, 255), and empty set, ensure both values are equal (100,100) and boundary at extremes (255, 255).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set = ByteSet::empty();",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(set.contains_range(0, 255));",
                "    assert!(set.contains_range(200, 250));",
                "    assert!(set.contains_range(255, 255));",
                "}"
              ],
              "oracle": [
                "    assert!(!set.contains_range(1, 1));",
                "    assert!(!set.contains_range(1, 255));",
                "    assert!(!set.contains_range(200, 199));",
                "    assert!(!set.contains_range(0, 256));",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(!set.contains_range(256, 256));"
              ],
              "code": [
                "{",
                "    let set = ByteSet::empty();",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(set.contains_range(0, 255));",
                "    assert!(set.contains_range(200, 250));",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(1, 1));",
                "    assert!(!set.contains_range(1, 255));",
                "    assert!(!set.contains_range(200, 199));",
                "    assert!(!set.contains_range(0, 256));",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(!set.contains_range(256, 256));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    set.add(5);",
                "    assert!(set.contains_range(5, 5));",
                "    assert!(!set.contains_range(0, 0));",
                "    assert!(!set.contains_range(10, 10));",
                "}"
              ],
              "oracle": [
                "    assert!(set.contains_range(5, 5));",
                "    assert!(!set.contains_range(0, 0));",
                "    assert!(!set.contains_range(10, 10));",
                "    assert!(set.contains_range(5, 6));",
                "    set.add(6);",
                "    assert!(set.contains_range(5, 6));",
                "    set.remove(5);",
                "    assert!(!set.contains_range(5, 6));",
                "    assert!(set.contains_range(6, 6));",
                "    assert!(!set.contains_range(7, 8));"
              ],
              "code": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    set.add(5);",
                "    assert!(set.contains_range(5, 5));",
                "    assert!(!set.contains_range(0, 0));",
                "    assert!(!set.contains_range(10, 10));",
                "    assert!(set.contains_range(5, 5));",
                "    assert!(!set.contains_range(0, 0));",
                "    assert!(!set.contains_range(10, 10));",
                "    assert!(set.contains_range(5, 6));",
                "    set.add(6);",
                "    assert!(set.contains_range(5, 6));",
                "    set.remove(5);",
                "    assert!(!set.contains_range(5, 6));",
                "    assert!(set.contains_range(6, 6));",
                "    assert!(!set.contains_range(7, 8));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    for byte in 0..=255 {",
                "        set.add(byte);",
                "    }",
                "    assert!(set.contains_range(0, 255));",
                "}"
              ],
              "oracle": [
                "    assert!(set.contains_range(0, 0));",
                "    assert!(set.contains_range(1, 1));",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 256));",
                "    assert!(!set.contains_range(256, 255));",
                "    assert!(!set.contains_range(100, 99));",
                "    assert!(set.contains_range(0, 100));",
                "    assert!(set.contains_range(200, 255));",
                "    assert!(set.contains_range(100, 200));",
                "    assert!(!set.contains_range(50, 50));  // Before adding range",
                "    set.add(50);",
                "    assert!(set.contains_range(50, 50));  // After adding range"
              ],
              "code": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    for byte in 0..=255 {",
                "        set.add(byte);",
                "    }",
                "    assert!(set.contains_range(0, 255));",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(set.contains_range(1, 1));",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 256));",
                "    assert!(!set.contains_range(256, 255));",
                "    assert!(!set.contains_range(100, 99));",
                "    assert!(set.contains_range(0, 100));",
                "    assert!(set.contains_range(200, 255));",
                "    assert!(set.contains_range(100, 200));",
                "    assert!(!set.contains_range(50, 50));  // Before adding range",
                "    set.add(50);",
                "    assert!(set.contains_range(50, 50));  // After adding range",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    for byte in 250..=255 {",
                "        set.add(byte);",
                "    }",
                "    assert!(set.contains_range(250, 255));",
                "    assert!(!set.contains_range(0, 10));",
                "}"
              ],
              "oracle": [
                "    assert!(set.contains_range(250, 255));",
                "    assert!(set.contains_range(250, 250));",
                "    assert!(!set.contains_range(255, 255));",
                "    assert!(!set.contains_range(251, 254));",
                "    assert!(set.contains_range(250, 254));",
                "    assert!(!set.contains_range(249, 255));",
                "    assert!(!set.contains_range(250, 256));",
                "    assert!(!set.contains_range(255, 256));",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 10));",
                "    assert!(!set.contains_range(10, 20));",
                "    assert!(!set.contains_range(1, 255));",
                "    assert!(set.contains_range(250, 250));",
                "    assert!(set.contains_range(254, 255));",
                "    assert!(set.contains_range(250, 253));",
                "    assert!(!set.contains_range(0, 255));",
                "    assert!(!set.contains_range(10, 255));",
                "    assert!(!set.contains_range(200, 255));",
                "    assert!(!set.contains_range(240, 250));",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(!set.contains_range(1, 1));"
              ],
              "code": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    for byte in 250..=255 {",
                "        set.add(byte);",
                "    }",
                "    assert!(set.contains_range(250, 255));",
                "    assert!(!set.contains_range(0, 10));",
                "    assert!(set.contains_range(250, 255));",
                "    assert!(set.contains_range(250, 250));",
                "    assert!(!set.contains_range(255, 255));",
                "    assert!(!set.contains_range(251, 254));",
                "    assert!(set.contains_range(250, 254));",
                "    assert!(!set.contains_range(249, 255));",
                "    assert!(!set.contains_range(250, 256));",
                "    assert!(!set.contains_range(255, 256));",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 10));",
                "    assert!(!set.contains_range(10, 20));",
                "    assert!(!set.contains_range(1, 255));",
                "    assert!(set.contains_range(250, 250));",
                "    assert!(set.contains_range(254, 255));",
                "    assert!(set.contains_range(250, 253));",
                "    assert!(!set.contains_range(0, 255));",
                "    assert!(!set.contains_range(10, 255));",
                "    assert!(!set.contains_range(200, 255));",
                "    assert!(!set.contains_range(240, 250));",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(!set.contains_range(1, 1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    set.add(100);",
                "    assert!(set.contains_range(100, 100));",
                "    assert!(!set.contains_range(99, 99));",
                "}"
              ],
              "oracle": [
                "    assert!(set.contains_range(100, 100));",
                "    assert!(!set.contains_range(99, 99));",
                "    assert!(!set.contains_range(101, 101));",
                "    assert!(set.contains_range(100, 100));",
                "    assert!(set.contains_range(100, 101));",
                "    set.add(101);",
                "    assert!(set.contains_range(100, 101));",
                "    assert!(!set.contains_range(0, 10));",
                "    set.remove(100);",
                "    assert!(!set.contains_range(100, 100));",
                "    set.add(99);",
                "    assert!(set.contains_range(99, 100));",
                "    set.remove(99);",
                "    assert!(!set.contains_range(99, 100));"
              ],
              "code": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    set.add(100);",
                "    assert!(set.contains_range(100, 100));",
                "    assert!(!set.contains_range(99, 99));",
                "    assert!(set.contains_range(100, 100));",
                "    assert!(!set.contains_range(99, 99));",
                "    assert!(!set.contains_range(101, 101));",
                "    assert!(set.contains_range(100, 100));",
                "    assert!(set.contains_range(100, 101));",
                "    set.add(101);",
                "    assert!(set.contains_range(100, 101));",
                "    assert!(!set.contains_range(0, 10));",
                "    set.remove(100);",
                "    assert!(!set.contains_range(100, 100));",
                "    set.add(99);",
                "    assert!(set.contains_range(99, 100));",
                "    set.remove(99);",
                "    assert!(!set.contains_range(99, 100));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    set.add(0);",
                "    set.add(255);",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 255));",
                "}"
              ],
              "oracle": [
                "    let mut set = ByteSet::empty();",
                "    set.add(0);",
                "    assert!(set.contains_range(0, 0));",
                "    set.add(255);",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 255));",
                "    assert!(set.contains_range(0, 255));  // Test with an empty set",
                "    set.remove(0);",
                "    assert!(!set.contains_range(0, 0));  // Check range after removing 0",
                "    assert!(!set.contains_range(0, 255));  // Check range after removing 0"
              ],
              "code": [
                "{",
                "    let mut set = ByteSet::empty();",
                "    set.add(0);",
                "    set.add(255);",
                "    assert!(set.contains_range(0, 0));",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 255));",
                "    let mut set = ByteSet::empty();",
                "    set.add(0);",
                "    assert!(set.contains_range(0, 0));",
                "    set.add(255);",
                "    assert!(set.contains_range(255, 255));",
                "    assert!(!set.contains_range(0, 255));",
                "    assert!(set.contains_range(0, 255));  // Test with an empty set",
                "    set.remove(0);",
                "    assert!(!set.contains_range(0, 0));  // Check range after removing 0",
                "    assert!(!set.contains_range(0, 255));  // Check range after removing 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}