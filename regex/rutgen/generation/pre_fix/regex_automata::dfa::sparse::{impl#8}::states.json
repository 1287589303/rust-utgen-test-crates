{
  "name": "regex_automata::dfa::sparse::{impl#8}::states",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1693:5:1695:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StateIter { trans: self, id: DEAD.as_usize() }\n"
      ],
      "input_infer": "state count >= 1, id in range [0, state count), pattern length >= 0, equivalence classes size in range [0, 256], sparse length > 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]),",
                "        state_len: 1, // at least one state",
                "        pattern_len: 0, // can be zero",
                "    };",
                "    let _iter = transitions.states();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transitions.states().id, DEAD.as_usize());",
                "    assert_eq!(transitions.states().trans.sparse.len(), 1);",
                "    assert_eq!(transitions.states().trans.classes, ByteClasses([0; 256]));",
                "    assert_eq!(transitions.states().trans.state_len, 1);",
                "    assert_eq!(transitions.states().trans.pattern_len, 0);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]),",
                "        state_len: 1, // at least one state",
                "        pattern_len: 0, // can be zero",
                "    };",
                "    let _iter = transitions.states();",
                "    assert_eq!(transitions.states().id, DEAD.as_usize());",
                "    assert_eq!(transitions.states().trans.sparse.len(), 1);",
                "    assert_eq!(transitions.states().trans.classes, ByteClasses([0; 256]));",
                "    assert_eq!(transitions.states().trans.state_len, 1);",
                "    assert_eq!(transitions.states().trans.pattern_len, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]),",
                "        state_len: 3, // three states",
                "        pattern_len: 1, // at least one pattern",
                "    };",
                "    let _iter = transitions.states();",
                "}"
              ],
              "oracle": [
                "    _iter.trans.sparse == transitions.sparse",
                "    _iter.id == DEAD.as_usize()",
                "    _iter.trans.state_len == transitions.state_len",
                "    _iter.trans.pattern_len == transitions.pattern_len"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]),",
                "        state_len: 3, // three states",
                "        pattern_len: 1, // at least one pattern",
                "    };",
                "    let _iter = transitions.states();",
                "    _iter.trans.sparse == transitions.sparse",
                "    _iter.id == DEAD.as_usize()",
                "    _iter.trans.state_len == transitions.state_len",
                "    _iter.trans.pattern_len == transitions.pattern_len",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3], // sparse must be greater than 0",
                "        classes: ByteClasses([1; 256]), // full occupancy of equivalence classes",
                "        state_len: 3, // three states",
                "        pattern_len: 0, // can be zero",
                "    };",
                "    let _iter = transitions.states();",
                "}"
              ],
              "oracle": [
                "    let transitions = Transitions { sparse: vec![1, 2, 3], classes: ByteClasses([1; 256]), state_len: 3, pattern_len: 0 };",
                "    let iter = transitions.states();",
                "    assert_eq!(iter.trans, &transitions);",
                "    assert_eq!(iter.id, DEAD.as_usize());",
                "    assert!(iter.state_len == transitions.state_len);",
                "    assert!(iter.pattern_len == transitions.pattern_len);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3], // sparse must be greater than 0",
                "        classes: ByteClasses([1; 256]), // full occupancy of equivalence classes",
                "        state_len: 3, // three states",
                "        pattern_len: 0, // can be zero",
                "    };",
                "    let _iter = transitions.states();",
                "    let transitions = Transitions { sparse: vec![1, 2, 3], classes: ByteClasses([1; 256]), state_len: 3, pattern_len: 0 };",
                "    let iter = transitions.states();",
                "    assert_eq!(iter.trans, &transitions);",
                "    assert_eq!(iter.id, DEAD.as_usize());",
                "    assert!(iter.state_len == transitions.state_len);",
                "    assert!(iter.pattern_len == transitions.pattern_len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]), // no equivalence classes",
                "        state_len: 3, // three states",
                "        pattern_len: 2, // at least one pattern",
                "    };",
                "    let _iter = transitions.states();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.trans.sparse.len(), 3);",
                "    assert_eq!(_iter.trans.state_len, 3);",
                "    assert_eq!(_iter.trans.pattern_len, 2);",
                "    assert_eq!(_iter.id, DEAD.as_usize());",
                "    assert!(_iter.trans.classes.0.iter().all(|&x| x == 0));",
                "    assert!(std::mem::size_of_val(&_iter) > 0);"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![1, 2, 3], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]), // no equivalence classes",
                "        state_len: 3, // three states",
                "        pattern_len: 2, // at least one pattern",
                "    };",
                "    let _iter = transitions.states();",
                "    assert_eq!(_iter.trans.sparse.len(), 3);",
                "    assert_eq!(_iter.trans.state_len, 3);",
                "    assert_eq!(_iter.trans.pattern_len, 2);",
                "    assert_eq!(_iter.id, DEAD.as_usize());",
                "    assert!(_iter.trans.classes.0.iter().all(|&x| x == 0));",
                "    assert!(std::mem::size_of_val(&_iter) > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]),",
                "        state_len: 0, // invalid state count",
                "        pattern_len: 0, // can be zero",
                "    };",
                "    let _iter = transitions.states();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let transitions = Transitions {",
                "    sparse: vec![],",
                "    classes: ByteClasses([0; 256]),",
                "    state_len: 0,",
                "    pattern_len: 0,",
                "    };",
                "    transitions.states();",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let transitions = Transitions {",
                "        sparse: vec![], // sparse must be greater than 0",
                "        classes: ByteClasses([0; 256]),",
                "        state_len: 0, // invalid state count",
                "        pattern_len: 0, // can be zero",
                "    };",
                "    let _iter = transitions.states();",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let transitions = Transitions {",
                "    sparse: vec![],",
                "    classes: ByteClasses([0; 256]),",
                "    state_len: 0,",
                "    pattern_len: 0,",
                "    };",
                "    transitions.states();",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}