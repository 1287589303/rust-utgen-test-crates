{
  "name": "regex_automata::hybrid::id::{impl#0}::to_unknown",
  "mod_info": {
    "name": "hybrid::id",
    "loc": "regex-automata/src/hybrid/mod.rs:142:1:142:8"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/id.rs:228:5:232:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "0 to LazyStateID::MAX, where LazyStateID::MAX is 0x7FFFFFFF (max for 32-bit systems) or 0x7FFF (max for 16-bit systems) including the boundary cases for each.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::new_unchecked(0);",
                "    let _result = id.to_unknown();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);",
                "    assert_eq!(_result.as_usize_unchecked() & !LazyStateID::MASK_UNKNOWN, 0);",
                "    assert_eq!(_result.as_usize_unchecked(), id.as_usize_unchecked() | LazyStateID::MASK_UNKNOWN);"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::new_unchecked(0);",
                "    let _result = id.to_unknown();",
                "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);",
                "    assert_eq!(_result.as_usize_unchecked() & !LazyStateID::MASK_UNKNOWN, 0);",
                "    assert_eq!(_result.as_usize_unchecked(), id.as_usize_unchecked() | LazyStateID::MASK_UNKNOWN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize);",
                "    let _result = id.to_unknown();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);",
                "    assert!(id.is_unknown());",
                "    assert_eq!(_result.as_usize_unchecked() & !LazyStateID::MASK_UNKNOWN, id.as_usize_unchecked());",
                "    assert_eq!(_result.as_usize_unchecked(), id.as_usize_unchecked() | LazyStateID::MASK_UNKNOWN);"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize);",
                "    let _result = id.to_unknown();",
                "    assert_eq!(_result.as_usize_unchecked() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);",
                "    assert!(id.is_unknown());",
                "    assert_eq!(_result.as_usize_unchecked() & !LazyStateID::MASK_UNKNOWN, id.as_usize_unchecked());",
                "    assert_eq!(_result.as_usize_unchecked(), id.as_usize_unchecked() | LazyStateID::MASK_UNKNOWN);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize / 2);",
                "    let _result = id.to_unknown();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(id.to_unknown().as_usize_unchecked() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);",
                "    assert!(id.to_unknown().is_tagged());",
                "    assert_eq!(id.to_unknown().as_usize_unchecked() >> 31, 1);",
                "    assert_eq!(id.to_unknown().as_usize_unchecked() & LazyStateID::MAX, LazyStateID::MAX as usize / 2);",
                "    assert!(id.to_unknown().is_unknown());"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize / 2);",
                "    let _result = id.to_unknown();",
                "    assert_eq!(id.to_unknown().as_usize_unchecked() & LazyStateID::MASK_UNKNOWN, LazyStateID::MASK_UNKNOWN);",
                "    assert!(id.to_unknown().is_tagged());",
                "    assert_eq!(id.to_unknown().as_usize_unchecked() >> 31, 1);",
                "    assert_eq!(id.to_unknown().as_usize_unchecked() & LazyStateID::MAX, LazyStateID::MAX as usize / 2);",
                "    assert!(id.to_unknown().is_unknown());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::new_unchecked(1);",
                "    let _result = id.to_unknown();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(id.as_usize_unchecked(), 1);",
                "    assert_eq!(id.to_unknown().as_usize_unchecked(), 1 | LazyStateID::MASK_UNKNOWN);",
                "    assert!(id.to_unknown().is_tagged());",
                "    assert!(id.to_unknown().is_unknown());",
                "    assert!(!id.to_unknown().is_dead());",
                "    assert!(!id.to_unknown().is_quit());",
                "    assert!(!id.to_unknown().is_start());",
                "    assert!(!id.to_unknown().is_match());"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::new_unchecked(1);",
                "    let _result = id.to_unknown();",
                "    assert_eq!(id.as_usize_unchecked(), 1);",
                "    assert_eq!(id.to_unknown().as_usize_unchecked(), 1 | LazyStateID::MASK_UNKNOWN);",
                "    assert!(id.to_unknown().is_tagged());",
                "    assert!(id.to_unknown().is_unknown());",
                "    assert!(!id.to_unknown().is_dead());",
                "    assert!(!id.to_unknown().is_quit());",
                "    assert!(!id.to_unknown().is_start());",
                "    assert!(!id.to_unknown().is_match());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize - 1);",
                "    let _result = id.to_unknown();",
                "}"
              ],
              "oracle": [
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize - 1);",
                "    let result = id.to_unknown();",
                "    assert_eq!(result.as_usize_unchecked(), (LazyStateID::MAX as usize - 1) | LazyStateID::MASK_UNKNOWN);",
                "    assert!(result.is_unknown());",
                "    assert!(!result.is_dead());",
                "    assert!(!result.is_quit());",
                "    assert!(!result.is_start());",
                "    assert!(!result.is_match());"
              ],
              "code": [
                "{",
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize - 1);",
                "    let _result = id.to_unknown();",
                "    let id = LazyStateID::new_unchecked(LazyStateID::MAX as usize - 1);",
                "    let result = id.to_unknown();",
                "    assert_eq!(result.as_usize_unchecked(), (LazyStateID::MAX as usize - 1) | LazyStateID::MASK_UNKNOWN);",
                "    assert!(result.is_unknown());",
                "    assert!(!result.is_dead());",
                "    assert!(!result.is_quit());",
                "    assert!(!result.is_start());",
                "    assert!(!result.is_match());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}