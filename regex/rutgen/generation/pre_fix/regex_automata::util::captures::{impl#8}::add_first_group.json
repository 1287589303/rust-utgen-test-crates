{
  "name": "regex_automata::util::captures::{impl#8}::add_first_group",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": false,
  "loc": "regex-automata/src/util/captures.rs:2192:5:2206:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (*left_val == *right_val) at line 40 is true\n",
        "precondition: (*left_val == *right_val) at line 40 is true\n",
        "precondition: (*left_val == *right_val) at line 40 is true\n"
      ],
      "input_infer": "pid: 0 for the first call; pid: {n | n > 0 and n = previous_pid + 1} for subsequent calls, ensuring total slot_ranges, name_to_index, and index_to_name lengths match pid\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.slot_ranges.len(), 1);",
                "    assert_eq!(group_info.name_to_index.len(), 1);",
                "    assert_eq!(group_info.index_to_name.len(), 1);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
                "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
                "    assert!(group_info.slot_ranges[0].0 == group_info.slot_ranges[0].1);",
                "    assert!(group_info.name_to_index[0].is_empty());",
                "    assert!(group_info.index_to_name[0][0].is_none());"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid);",
                "    assert_eq!(group_info.slot_ranges.len(), 1);",
                "    assert_eq!(group_info.name_to_index.len(), 1);",
                "    assert_eq!(group_info.index_to_name.len(), 1);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
                "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
                "    assert!(group_info.slot_ranges[0].0 == group_info.slot_ranges[0].1);",
                "    assert!(group_info.name_to_index[0].is_empty());",
                "    assert!(group_info.index_to_name[0][0].is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid);",
                "    group_info.add_first_group(pid);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(std::panic::catch_unwind(|| group_info.add_first_group(pid)), Err(_)));",
                "    assert_eq!(group_info.slot_ranges.len(), 1);",
                "    assert_eq!(group_info.name_to_index.len(), 1);",
                "    assert_eq!(group_info.index_to_name.len(), 1);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid);",
                "    group_info.add_first_group(pid);",
                "    assert!(matches!(std::panic::catch_unwind(|| group_info.add_first_group(pid)), Err(_)));",
                "    assert_eq!(group_info.slot_ranges.len(), 1);",
                "    assert_eq!(group_info.name_to_index.len(), 1);",
                "    assert_eq!(group_info.index_to_name.len(), 1);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid1 = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid1);",
                "    let pid2 = PatternID(SmallIndex(1));",
                "    group_info.add_first_group(pid2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.slot_ranges.len(), 2);",
                "    assert_eq!(group_info.name_to_index.len(), 2);",
                "    assert_eq!(group_info.index_to_name.len(), 2);",
                "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
                "    assert_eq!(group_info.slot_ranges[1], (SmallIndex(1), SmallIndex(1)));",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(1));"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid1 = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid1);",
                "    let pid2 = PatternID(SmallIndex(1));",
                "    group_info.add_first_group(pid2);",
                "    assert_eq!(group_info.slot_ranges.len(), 2);",
                "    assert_eq!(group_info.name_to_index.len(), 2);",
                "    assert_eq!(group_info.index_to_name.len(), 2);",
                "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
                "    assert_eq!(group_info.slot_ranges[1], (SmallIndex(1), SmallIndex(1)));",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid1 = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid1);",
                "    let pid3 = PatternID(SmallIndex(2)); // This should panic",
                "    group_info.add_first_group(pid3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pid1.as_usize(), group_info.slot_ranges.len());",
                "    assert_eq!(pid1.as_usize(), group_info.name_to_index.len());",
                "    assert_eq!(pid1.as_usize(), group_info.index_to_name.len());",
                "    let slot_start = group_info.small_slot_len();",
                "    assert_eq!(slot_start, SmallIndex(0));"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    let pid1 = PatternID(SmallIndex(0));",
                "    group_info.add_first_group(pid1);",
                "    let pid3 = PatternID(SmallIndex(2)); // This should panic",
                "    group_info.add_first_group(pid3);",
                "    assert_eq!(pid1.as_usize(), group_info.slot_ranges.len());",
                "    assert_eq!(pid1.as_usize(), group_info.name_to_index.len());",
                "    assert_eq!(pid1.as_usize(), group_info.index_to_name.len());",
                "    let slot_start = group_info.small_slot_len();",
                "    assert_eq!(slot_start, SmallIndex(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: (*left_val == *right_val) at line 40 is false\n"
      ],
      "input_infer": "pid should be 0 (for the first call), or it should be equal to the current length of slot_ranges, name_to_index, and index_to_name when incrementing, with a maximum upper limit for SmallIndex of 2^32-1.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0)));",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // This should panic",
                "}"
              ],
              "oracle": [
                "    assert_panics!(group_info.add_first_group(PatternID(SmallIndex(0))));"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0)));",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // This should panic",
                "    assert_panics!(group_info.add_first_group(PatternID(SmallIndex(0))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0)));",
                "    group_info.add_first_group(PatternID(SmallIndex(1)));",
                "    group_info.add_first_group(PatternID(SmallIndex(2))); // This should panic",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.slot_ranges.len(), 2);",
                "    assert_eq!(group_info.name_to_index.len(), 2);",
                "    assert_eq!(group_info.index_to_name.len(), 2);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>() * 2);",
                "    assert!(std::panic::catch_unwind(|| group_info.add_first_group(PatternID(SmallIndex(2))).unwrap_err()).is_err());"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0)));",
                "    group_info.add_first_group(PatternID(SmallIndex(1)));",
                "    group_info.add_first_group(PatternID(SmallIndex(2))); // This should panic",
                "    assert_eq!(group_info.slot_ranges.len(), 2);",
                "    assert_eq!(group_info.name_to_index.len(), 2);",
                "    assert_eq!(group_info.index_to_name.len(), 2);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>() * 2);",
                "    assert!(std::panic::catch_unwind(|| group_info.add_first_group(PatternID(SmallIndex(2))).unwrap_err()).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // Valid",
                "    group_info.add_first_group(PatternID(SmallIndex(1))); // Valid",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.slot_ranges.len(), 2);",
                "    assert_eq!(group_info.name_to_index.len(), 2);",
                "    assert_eq!(group_info.index_to_name.len(), 2);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>() * 2);"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // Valid",
                "    group_info.add_first_group(PatternID(SmallIndex(1))); // Valid",
                "    assert_eq!(group_info.slot_ranges.len(), 2);",
                "    assert_eq!(group_info.name_to_index.len(), 2);",
                "    assert_eq!(group_info.index_to_name.len(), 2);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>() * 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // Valid",
                "    group_info.slot_ranges.push((SmallIndex(0), SmallIndex(1))); // Manipulate to cause inconsistency",
                "    group_info.add_first_group(PatternID(SmallIndex(1))); // This should panic",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.slot_ranges.len(), 1); // Verifying initial length after first group addition",
                "    assert_eq!(group_info.name_to_index.len(), 1); // Verifying name_to_index length after first group addition",
                "    assert_eq!(group_info.index_to_name.len(), 1); // Verifying index_to_name length after first group addition",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>()); // Checking memory_extra after first group addition",
                "    assert!(std::panic::catch_unwind(|| group_info.add_first_group(PatternID(SmallIndex(1)))).is_err()); // Ensuring panic occurs on second group addition"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // Valid",
                "    group_info.slot_ranges.push((SmallIndex(0), SmallIndex(1))); // Manipulate to cause inconsistency",
                "    group_info.add_first_group(PatternID(SmallIndex(1))); // This should panic",
                "    assert_eq!(group_info.slot_ranges.len(), 1); // Verifying initial length after first group addition",
                "    assert_eq!(group_info.name_to_index.len(), 1); // Verifying name_to_index length after first group addition",
                "    assert_eq!(group_info.index_to_name.len(), 1); // Verifying index_to_name length after first group addition",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>()); // Checking memory_extra after first group addition",
                "    assert!(std::panic::catch_unwind(|| group_info.add_first_group(PatternID(SmallIndex(1)))).is_err()); // Ensuring panic occurs on second group addition",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // Valid",
                "    group_info.add_first_group(PatternID(SmallIndex(1))); // Valid",
                "    group_info.add_first_group(PatternID(SmallIndex(2))); // Valid, pushing to small slot limit",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.slot_ranges.len(), 3);",
                "    assert_eq!(group_info.name_to_index.len(), 3);",
                "    assert_eq!(group_info.index_to_name.len(), 3);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>() * 3);",
                "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
                "    assert_eq!(group_info.slot_ranges[1], (SmallIndex(1), SmallIndex(1)));",
                "    assert_eq!(group_info.slot_ranges[2], (SmallIndex(2), SmallIndex(2)));"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfoInner::default();",
                "    group_info.add_first_group(PatternID(SmallIndex(0))); // Valid",
                "    group_info.add_first_group(PatternID(SmallIndex(1))); // Valid",
                "    group_info.add_first_group(PatternID(SmallIndex(2))); // Valid, pushing to small slot limit",
                "    assert_eq!(group_info.slot_ranges.len(), 3);",
                "    assert_eq!(group_info.name_to_index.len(), 3);",
                "    assert_eq!(group_info.index_to_name.len(), 3);",
                "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>() * 3);",
                "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
                "    assert_eq!(group_info.slot_ranges[1], (SmallIndex(1), SmallIndex(1)));",
                "    assert_eq!(group_info.slot_ranges[2], (SmallIndex(2), SmallIndex(2)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}