{
  "name": "regex_automata::meta::regex::{impl#20}::byte_classes",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2938:5:2940:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config { byte_classes: Some(yes), ..self }\n"
      ],
      "input_infer": "self: Config instance with default values; yes: bool (true or false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let updated_config = config.byte_classes(true);",
                "}"
              ],
              "oracle": [
                "    assert!(updated_config.byte_classes == Some(true));",
                "    assert_eq!(updated_config.get_byte_classes(), true);",
                "    assert_eq!(updated_config.get_line_terminator(), config.get_line_terminator());",
                "    assert_eq!(updated_config.get_hybrid(), config.get_hybrid());",
                "    assert_eq!(updated_config.get_dfa(), config.get_dfa());",
                "    assert_eq!(updated_config.get_onepass(), config.get_onepass());",
                "    assert_eq!(updated_config.get_backtrack(), config.get_backtrack());",
                "    assert_eq!(updated_config.get_nfa_size_limit(), config.get_nfa_size_limit());",
                "    assert_eq!(updated_config.get_onepass_size_limit(), config.get_onepass_size_limit());",
                "    assert_eq!(updated_config.get_dfa_size_limit(), config.get_dfa_size_limit());",
                "    assert_eq!(updated_config.get_dfa_state_limit(), config.get_dfa_state_limit());",
                "    assert_eq!(updated_config.get_which_captures(), config.get_which_captures());",
                "    assert_eq!(updated_config.get_auto_prefilter(), config.get_auto_prefilter());",
                "    assert_eq!(updated_config.get_prefilter(), config.get_prefilter());",
                "    assert_eq!(updated_config.get_hybrid_cache_capacity(), config.get_hybrid_cache_capacity());"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let updated_config = config.byte_classes(true);",
                "    assert!(updated_config.byte_classes == Some(true));",
                "    assert_eq!(updated_config.get_byte_classes(), true);",
                "    assert_eq!(updated_config.get_line_terminator(), config.get_line_terminator());",
                "    assert_eq!(updated_config.get_hybrid(), config.get_hybrid());",
                "    assert_eq!(updated_config.get_dfa(), config.get_dfa());",
                "    assert_eq!(updated_config.get_onepass(), config.get_onepass());",
                "    assert_eq!(updated_config.get_backtrack(), config.get_backtrack());",
                "    assert_eq!(updated_config.get_nfa_size_limit(), config.get_nfa_size_limit());",
                "    assert_eq!(updated_config.get_onepass_size_limit(), config.get_onepass_size_limit());",
                "    assert_eq!(updated_config.get_dfa_size_limit(), config.get_dfa_size_limit());",
                "    assert_eq!(updated_config.get_dfa_state_limit(), config.get_dfa_state_limit());",
                "    assert_eq!(updated_config.get_which_captures(), config.get_which_captures());",
                "    assert_eq!(updated_config.get_auto_prefilter(), config.get_auto_prefilter());",
                "    assert_eq!(updated_config.get_prefilter(), config.get_prefilter());",
                "    assert_eq!(updated_config.get_hybrid_cache_capacity(), config.get_hybrid_cache_capacity());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let updated_config = config.byte_classes(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(updated_config.byte_classes, Some(false));"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let updated_config = config.byte_classes(false);",
                "    assert_eq!(updated_config.byte_classes, Some(false));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}