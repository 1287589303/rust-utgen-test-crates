{
  "name": "regex_automata::hybrid::regex::{impl#6}::build_from_dfas",
  "mod_info": {
    "name": "hybrid::regex",
    "loc": "regex-automata/src/hybrid/mod.rs:143:1:143:15"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/regex.rs:851:5:853:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Regex { forward, reverse }\n"
      ],
      "input_infer": "forward: DFA with valid configuration, reverse: DFA with MatchKind::All, reverse: DFA must match in reverse, configurations of forward and reverse DFAs must match\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::All,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.forward.stride2, 1);",
                "    assert_eq!(regex.reverse.stride2, 1);",
                "    assert_eq!(regex.forward.cache_capacity, 10);",
                "    assert_eq!(regex.reverse.cache_capacity, 10);",
                "    assert!(regex.reverse.nfa.match_kind == MatchKind::All);",
                "    assert!(regex.reverse.reverse == true);",
                "    assert!(regex.forward.nfa != regex.reverse.nfa);"
              ],
              "code": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::All,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.forward.stride2, 1);",
                "    assert_eq!(regex.reverse.stride2, 1);",
                "    assert_eq!(regex.forward.cache_capacity, 10);",
                "    assert_eq!(regex.reverse.cache_capacity, 10);",
                "    assert!(regex.reverse.nfa.match_kind == MatchKind::All);",
                "    assert!(regex.reverse.reverse == true);",
                "    assert!(regex.forward.nfa != regex.reverse.nfa);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::All,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.forward.stride2, 1);",
                "    assert_eq!(regex.reverse.stride2, 1);",
                "    assert!(regex.forward.nfa.is_empty());",
                "    assert!(regex.reverse.nfa.is_empty());",
                "    assert_eq!(regex.forward.cache_capacity, 10);",
                "    assert_eq!(regex.reverse.cache_capacity, 10);",
                "    assert_eq!(regex.forward.start_map, StartByteMap::default());",
                "    assert_eq!(regex.reverse.start_map, StartByteMap::default());",
                "    assert_eq!(regex.forward.classes, ByteClasses::default());",
                "    assert_eq!(regex.reverse.classes, ByteClasses::default());",
                "    assert_eq!(regex.forward.quitset, ByteSet::default());",
                "    assert_eq!(regex.reverse.quitset, ByteSet::default());"
              ],
              "code": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::All,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.forward.stride2, 1);",
                "    assert_eq!(regex.reverse.stride2, 1);",
                "    assert!(regex.forward.nfa.is_empty());",
                "    assert!(regex.reverse.nfa.is_empty());",
                "    assert_eq!(regex.forward.cache_capacity, 10);",
                "    assert_eq!(regex.reverse.cache_capacity, 10);",
                "    assert_eq!(regex.forward.start_map, StartByteMap::default());",
                "    assert_eq!(regex.reverse.start_map, StartByteMap::default());",
                "    assert_eq!(regex.forward.classes, ByteClasses::default());",
                "    assert_eq!(regex.reverse.classes, ByteClasses::default());",
                "    assert_eq!(regex.forward.quitset, ByteSet::default());",
                "    assert_eq!(regex.reverse.quitset, ByteSet::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 0,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::All,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 0,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.forward, fwd);",
                "    assert_eq!(regex.reverse, rev);",
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert!(regex.reverse.reverse);",
                "    assert_eq!(regex.forward.stride2, rev.stride2);",
                "    assert_eq!(regex.forward.start_map, rev.start_map);",
                "    assert_eq!(regex.forward.classes, rev.classes);",
                "    assert_eq!(regex.forward.quitset, rev.quitset);",
                "    assert_eq!(regex.forward.cache_capacity, rev.cache_capacity);",
                "    assert!(regex.forward.nfa.is_initial_state());",
                "    assert!(regex.reverse.nfa.is_reverse_state());"
              ],
              "code": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 0,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::All,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 0,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "    assert_eq!(regex.forward, fwd);",
                "    assert_eq!(regex.reverse, rev);",
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert!(regex.reverse.reverse);",
                "    assert_eq!(regex.forward.stride2, rev.stride2);",
                "    assert_eq!(regex.forward.start_map, rev.start_map);",
                "    assert_eq!(regex.forward.classes, rev.classes);",
                "    assert_eq!(regex.forward.quitset, rev.quitset);",
                "    assert_eq!(regex.forward.cache_capacity, rev.cache_capacity);",
                "    assert!(regex.forward.nfa.is_initial_state());",
                "    assert!(regex.reverse.nfa.is_reverse_state());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::Any,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert!(regex.reverse.reverse);",
                "    assert!(regex.forward.cache_capacity == 10);",
                "    assert!(regex.reverse.cache_capacity == 10);",
                "    assert!(regex forward.nfa == regex.reverse.nfa);",
                "    assert!(regex.forward.stride2 == regex.reverse.stride2);",
                "    assert!(regex.forward.start_map == regex.reverse.start_map);"
              ],
              "code": [
                "{",
                "    let fwd = DFA {",
                "        config: dfa::Config::default(),",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let rev = DFA {",
                "        config: dfa::Config {",
                "            match_kind: MatchKind::Any,",
                "            ..dfa::Config::default()",
                "        },",
                "        nfa: thompson::NFA::new(),",
                "        stride2: 1,",
                "        start_map: StartByteMap::default(),",
                "        classes: ByteClasses::default(),",
                "        quitset: ByteSet::default(),",
                "        cache_capacity: 10,",
                "    };",
                "    let regex = Builder::new().build_from_dfas(fwd, rev);",
                "    assert_eq!(regex.forward.config.match_kind, MatchKind::All);",
                "    assert_eq!(regex.reverse.config.match_kind, MatchKind::All);",
                "    assert!(regex.reverse.reverse);",
                "    assert!(regex.forward.cache_capacity == 10);",
                "    assert!(regex.reverse.cache_capacity == 10);",
                "    assert!(regex forward.nfa == regex.reverse.nfa);",
                "    assert!(regex.forward.stride2 == regex.reverse.stride2);",
                "    assert!(regex.forward.start_map == regex.reverse.start_map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}