{
  "name": "regex_lite::hir::parse::{impl#1}::parse_perl_class",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:1212:5:1225:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ch matches 'w' at line 1218 is true\n",
        "precondition: ch matches 'W' at line 1218 is true\n",
        "precondition: ch matches 'S' at line 1217 is true\n",
        "precondition: ch matches 's' at line 1217 is true\n",
        "precondition: ch matches 'd' at line 1216 is true\n",
        "precondition: ch matches 'D' at line 1216 is true\n"
      ],
      "input_infer": "Valid input character for `ch` should be one of the following: 'd', 'D', 's', 'S', 'w', 'W'.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\d\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('d')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('d'));",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(parser.depth.get(), 0);",
                "    assert!(parser.parse_perl_class().is_ok());",
                "    assert_eq!(parser.pattern, \"\\\\d\");",
                "    assert!(matches!(parser.parse_perl_class(), Hir::class(_)));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\d\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('d')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('d'));",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(parser.depth.get(), 0);",
                "    assert!(parser.parse_perl_class().is_ok());",
                "    assert_eq!(parser.pattern, \"\\\\d\");",
                "    assert!(matches!(parser.parse_perl_class(), Hir::class(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\D\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('D')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('D'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert_eq!(parser.depth.get(), 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\D\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('D')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('D'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert_eq!(parser.depth.get(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\s\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('s')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('s'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.flags.borrow(), &Flags::default());",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert_ne!(parser.depth.get(), 1);",
                "    assert_eq!(parser.parse_perl_class().kind(), &HirKind::Class(hir::Class { ranges: vec![ClassRange { start: ' ', end: ' ' }] }));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\s\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('s')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('s'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.flags.borrow(), &Flags::default());",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert_ne!(parser.depth.get(), 1);",
                "    assert_eq!(parser.parse_perl_class().kind(), &HirKind::Class(hir::Class { ranges: vec![ClassRange { start: ' ', end: ' ' }] }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\S\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('S')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('S'));",
                "    assert!(matches!(parser.parse_perl_class(), Hir { kind: HirKind::Class(_), .. }));",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.depth.get() == 0);",
                "    assert!(parser.flags.borrow().ignore_whitespace == false);",
                "    assert!(parser.flags.borrow().multi_line == false);",
                "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
                "    assert!(parser.flags.borrow().swap_greed == false);",
                "    assert!(parser.flags.borrow().crlf == false);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\S\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('S')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('S'));",
                "    assert!(matches!(parser.parse_perl_class(), Hir { kind: HirKind::Class(_), .. }));",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.depth.get() == 0);",
                "    assert!(parser.flags.borrow().ignore_whitespace == false);",
                "    assert!(parser.flags.borrow().multi_line == false);",
                "    assert!(parser.flags.borrow().dot_matches_new_line == false);",
                "    assert!(parser.flags.borrow().swap_greed == false);",
                "    assert!(parser.flags.borrow().crlf == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\w\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('w')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('w'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.capture_index.get() == 0);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert!(parser.depth.get() == 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\w\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('w')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('w'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.capture_index.get() == 0);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert!(parser.depth.get() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\W\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('W')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\W\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\w\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('w')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\S\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('S')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\s\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\D\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('D')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\d\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\W\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('W')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\W\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('W')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\w\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('w')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\S\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('S')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\s\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('s')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\D\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('D')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "    ",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\d\";",
                "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('d')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.parse_perl_class();",
                "    assert!(matches!(result.kind(), &HirKind::Class(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: ch matches 'w' at line 1218 is true\n",
        "precondition: ch matches 'w' or 'W' at line 1215 is true\n",
        "precondition: ch.is_ascii_uppercase() at line 1221 is false\n"
      ],
      "input_infer": "ch should be 'w' at line 1215, the parser should be at this character without advancing and no other characters present before this class.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags::default(),",
                "    };",
                "    let pattern = \"\\\\w\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('w')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('w'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);",
                "    assert!(matches!(parser.parse_perl_class().kind(), HirKind::Class(_)));",
                "    assert!(parser.parse_perl_class().is_match_empty() == false);",
                "    assert!(parser.parse_perl_class().is_start_anchored() == false);",
                "    assert!(parser.parse_perl_class().static_explicit_captures_len().is_some());"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags::default(),",
                "    };",
                "    let pattern = \"\\\\w\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('w')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('w'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);",
                "    assert!(matches!(parser.parse_perl_class().kind(), HirKind::Class(_)));",
                "    assert!(parser.parse_perl_class().is_match_empty() == false);",
                "    assert!(parser.parse_perl_class().is_start_anchored() == false);",
                "    assert!(parser.parse_perl_class().static_explicit_captures_len().is_some());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags::default(),",
                "    };",
                "    let pattern = \"\\\\W\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('W')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('W'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert!(parser.capture_index.get() == 0);",
                "    assert!(parser.depth.get() == 0);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert!(parser.parse_perl_class().kind() == HirKind::Class(hir::Class::new(posix_class(\"word\").unwrap())));",
                "    assert!(parser.parse_perl_class().is_start_anchored() == false);",
                "    assert!(parser.parse_perl_class().is_match_empty() == false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags::default(),",
                "    };",
                "    let pattern = \"\\\\W\";",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('W')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('W'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert!(parser.capture_index.get() == 0);",
                "    assert!(parser.depth.get() == 0);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert!(parser.parse_perl_class().kind() == HirKind::Class(hir::Class::new(posix_class(\"word\").unwrap())));",
                "    assert!(parser.parse_perl_class().is_start_anchored() == false);",
                "    assert!(parser.parse_perl_class().is_match_empty() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: ch matches 's' at line 1217 is true\n",
        "precondition: ch matches 'S' or 's' at line 1215 is true\n",
        "precondition: ch.is_ascii_uppercase() at line 1221 is true\n"
      ],
      "input_infer": "ch must be either 'S' or 's' and the parser state must indicate a valid character class context where this ch is the next character after the class name.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            multi_line: false,",
                "            dot_matches_new_line: false,",
                "            swap_greed: false,",
                "            crlf: false,",
                "            ignore_whitespace: false,",
                "        },",
                "    };",
                "    let pattern = \"\\\\S\"; // Input pattern with uppercase 'S'",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('S')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class(); // Call under test",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('S'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert!(matches!(parser.capture_names.borrow().len(), 0));",
                "    assert!(parser.parse_perl_class().is_ok());",
                "    let hir_result = parser.parse_perl_class().unwrap();",
                "    assert_eq!(hir_result.kind(), &HirKind::Class(hir::Class::new(vec![hir::ClassRange { start: '0', end: '9' }])));",
                "    assert!(hir_result.is_start_anchored());",
                "    assert!(!hir_result.is_match_empty());",
                "    assert_eq!(hir_result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            multi_line: false,",
                "            dot_matches_new_line: false,",
                "            swap_greed: false,",
                "            crlf: false,",
                "            ignore_whitespace: false,",
                "        },",
                "    };",
                "    let pattern = \"\\\\S\"; // Input pattern with uppercase 'S'",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('S')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class(); // Call under test",
                "    assert_eq!(parser.char.get(), Some('S'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
                "    assert_eq!(parser.flags.borrow().multi_line, false);",
                "    assert_eq!(parser.flags.borrow().dot_matches_new_line, false);",
                "    assert_eq!(parser.flags.borrow().swap_greed, false);",
                "    assert_eq!(parser.flags.borrow().crlf, false);",
                "    assert_eq!(parser.flags.borrow().ignore_whitespace, false);",
                "    assert_eq!(parser.capture_index.get(), 0);",
                "    assert!(matches!(parser.capture_names.borrow().len(), 0));",
                "    assert!(parser.parse_perl_class().is_ok());",
                "    let hir_result = parser.parse_perl_class().unwrap();",
                "    assert_eq!(hir_result.kind(), &HirKind::Class(hir::Class::new(vec![hir::ClassRange { start: '0', end: '9' }])));",
                "    assert!(hir_result.is_start_anchored());",
                "    assert!(!hir_result.is_match_empty());",
                "    assert_eq!(hir_result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            multi_line: false,",
                "            dot_matches_new_line: false,",
                "            swap_greed: false,",
                "            crlf: false,",
                "            ignore_whitespace: false,",
                "        },",
                "    };",
                "    let pattern = \"\\\\s\"; // Input pattern with lowercase 's'",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('s')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class(); // Call under test",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('s')); // Verify char is 's'",
                "    assert_eq!(parser.pos.get(), 1); // Verify position is incremented after bump",
                "    assert!(parser.capture_index.get() == 0); // Ensure capture index remains unchanged",
                "    assert!(parser.flags.borrow().case_insensitive == false); // Confirm flags are unchanged",
                "    let class = parser.parse_perl_class(); // Execute parse_perl_class",
                "    assert_eq!(class.kind(), &HirKind::Class(hir::Class { ranges: vec![hir::ClassRange { start: ' ', end: ' ' }] })); // Validate class ranges for '\\s'",
                "    assert!(matches!(class.is_start_anchored(), false)); // Confirm starting anchor is false",
                "    assert!(matches!(class.is_match_empty(), false)); // Confirm match empty is false",
                "    assert_eq!(class.static_explicit_captures_len(), Some(0)); // Validate static explicit captures length is 0",
                "    assert!(parser.char.get().is_none()); // Confirm char is None after parsing completion",
                "    assert!(parser.capture_names.borrow().is_empty()); // Validate capture names remain empty after parsing",
                "    parser.bump(); // Advance position to account for parsing",
                "    assert_eq!(parser.pos.get(), 1); // Validate position after bumping",
                "    assert!(class.is_canonical()); // Ensure the class is canonical after parsing",
                "    assert!(class.ascii_case_fold().is_ok()); // Validate case folding is successful",
                "    assert!(class.negate().is_ok()); // Verify negate operation works correctly"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            multi_line: false,",
                "            dot_matches_new_line: false,",
                "            swap_greed: false,",
                "            crlf: false,",
                "            ignore_whitespace: false,",
                "        },",
                "    };",
                "    let pattern = \"\\\\s\"; // Input pattern with lowercase 's'",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('s')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class(); // Call under test",
                "    assert_eq!(parser.char.get(), Some('s')); // Verify char is 's'",
                "    assert_eq!(parser.pos.get(), 1); // Verify position is incremented after bump",
                "    assert!(parser.capture_index.get() == 0); // Ensure capture index remains unchanged",
                "    assert!(parser.flags.borrow().case_insensitive == false); // Confirm flags are unchanged",
                "    let class = parser.parse_perl_class(); // Execute parse_perl_class",
                "    assert_eq!(class.kind(), &HirKind::Class(hir::Class { ranges: vec![hir::ClassRange { start: ' ', end: ' ' }] })); // Validate class ranges for '\\s'",
                "    assert!(matches!(class.is_start_anchored(), false)); // Confirm starting anchor is false",
                "    assert!(matches!(class.is_match_empty(), false)); // Confirm match empty is false",
                "    assert_eq!(class.static_explicit_captures_len(), Some(0)); // Validate static explicit captures length is 0",
                "    assert!(parser.char.get().is_none()); // Confirm char is None after parsing completion",
                "    assert!(parser.capture_names.borrow().is_empty()); // Validate capture names remain empty after parsing",
                "    parser.bump(); // Advance position to account for parsing",
                "    assert_eq!(parser.pos.get(), 1); // Validate position after bumping",
                "    assert!(class.is_canonical()); // Ensure the class is canonical after parsing",
                "    assert!(class.ascii_case_fold().is_ok()); // Validate case folding is successful",
                "    assert!(class.negate().is_ok()); // Verify negate operation works correctly",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: ch matches 'd' at line 1216 is true\n",
        "precondition: ch matches 'd' or 'D' at line 1215 is true\n",
        "precondition: ch.is_ascii_uppercase() at line 1221 is false\n"
      ],
      "input_infer": "ch = 'd' or ch = 's' or ch = 'w' with any character following it after class name\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\dabc\"; // `\\d` followed by other characters",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('d')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\dabc\";",
                "    let parser = Parser {",
                "    config,",
                "    pattern,",
                "    depth: Cell::new(0),",
                "    pos: Cell::new(0),",
                "    char: Cell::new(Some('d')),",
                "    capture_index: Cell::new(0),",
                "    flags: RefCell::new(Flags::default()),",
                "    capture_names: RefCell::new(vec![]),",
                "    };",
                "    let result = parser.parse_perl_class();",
                "    assert!(result.is_ok());",
                "    let hir = result.unwrap();",
                "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: '0', end: '9' }] }));",
                "    assert!(!hir.is_start_anchored());",
                "    assert!(!hir.is_match_empty());",
                "    assert_eq!(hir.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\dabc\"; // `\\d` followed by other characters",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('d')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\dabc\";",
                "    let parser = Parser {",
                "    config,",
                "    pattern,",
                "    depth: Cell::new(0),",
                "    pos: Cell::new(0),",
                "    char: Cell::new(Some('d')),",
                "    capture_index: Cell::new(0),",
                "    flags: RefCell::new(Flags::default()),",
                "    capture_names: RefCell::new(vec![]),",
                "    };",
                "    let result = parser.parse_perl_class();",
                "    assert!(result.is_ok());",
                "    let hir = result.unwrap();",
                "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: '0', end: '9' }] }));",
                "    assert!(!hir.is_start_anchored());",
                "    assert!(!hir.is_match_empty());",
                "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\sxyz\"; // `\\s` followed by other characters",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('s')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('s'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    let hir = parser.parse_perl_class();",
                "    assert!(hir.kind() == &HirKind::Class(hir::Class{..}));",
                "    assert!(hir.is_start_anchored() == false);",
                "    assert!(hir.is_match_empty() == false);",
                "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
                "    assert!(parser.capture_index.get() == 0);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\sxyz\"; // `\\s` followed by other characters",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('s')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('s'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    let hir = parser.parse_perl_class();",
                "    assert!(hir.kind() == &HirKind::Class(hir::Class{..}));",
                "    assert!(hir.is_start_anchored() == false);",
                "    assert!(hir.is_match_empty() == false);",
                "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
                "    assert!(parser.capture_index.get() == 0);",
                "    assert_eq!(parser.capture_names.borrow().len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\w123\"; // `\\w` followed by other characters",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('w')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.char.get(), Some('w'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert!(parser.depth.get() == 0);"
              ],
              "code": [
                "{",
                "    let config = Config { nest_limit: 10, flags: Flags::default() };",
                "    let pattern = \"\\\\w123\"; // `\\w` followed by other characters",
                "    let parser = Parser {",
                "        config,",
                "        pattern,",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('w')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    parser.parse_perl_class();",
                "    assert_eq!(parser.char.get(), Some('w'));",
                "    assert_eq!(parser.pos.get(), 1);",
                "    assert!(parser.flags.borrow().case_insensitive == false);",
                "    assert!(parser.capture_names.borrow().is_empty());",
                "    assert!(parser.depth.get() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}