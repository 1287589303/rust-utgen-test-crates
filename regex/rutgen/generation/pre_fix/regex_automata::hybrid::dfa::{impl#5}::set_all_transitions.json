{
  "name": "regex_automata::hybrid::dfa::{impl#5}::set_all_transitions",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2584:5:2588:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: unit in self.dfa.classes.representatives(..) at line 2585 is true\n",
        "precondition: unit in self.dfa.classes.representatives(..) at line 2585 is false\n"
      ],
      "input_infer": "LazyStateID range: valid LazyStateID values (0 to 2^32-1) for both from and to; unit = all valid byte values (0 to 255) and an invalid byte value (-1 or 256) for edge cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache { trans: vec![LazyStateID(0); 512], ..Default::default() };",
                "    let dfa = DFA {",
                "        classes: ByteClasses([0; 256]),",
                "        ..Default::default()",
                "    };",
                "    ",
                "    let mut lazy = Lazy::new(&dfa, &mut cache);",
                "    let from = LazyStateID(1);",
                "    let to = LazyStateID(2);",
                "    lazy.set_all_transitions(from, to);",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.dfa.classes.get_by_unit(alphabet::Unit(0)) == 0);",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(0))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(2).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(255))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans.iter().all(|&x| x == LazyStateID(2));",
                "    lazy.set_all_transitions(from, to);",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(0))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(1))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(2))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(255))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans.iter().filter(|&&x| x == LazyStateID(2)).count() == lazy.dfa.classes.stride2());",
                "    assert!(lazy.as_ref().is_valid(from));",
                "    assert!(lazy.as_ref().is_valid(to));",
                "    lazy.clear_cache();",
                "    assert!(lazy.cache.trans.iter().all(|&x| x == LazyStateID(0)));"
              ],
              "code": [
                "{",
                "    let mut cache = Cache { trans: vec![LazyStateID(0); 512], ..Default::default() };",
                "    let dfa = DFA {",
                "        classes: ByteClasses([0; 256]),",
                "        ..Default::default()",
                "    };",
                "    ",
                "    let mut lazy = Lazy::new(&dfa, &mut cache);",
                "    let from = LazyStateID(1);",
                "    let to = LazyStateID(2);",
                "    lazy.set_all_transitions(from, to);",
                "    assert!(lazy.dfa.classes.get_by_unit(alphabet::Unit(0)) == 0);",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(0))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(2).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(255))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans.iter().all(|&x| x == LazyStateID(2));",
                "    lazy.set_all_transitions(from, to);",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(0))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(1))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(2))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans[LazyStateID(1).as_usize_untagged() + lazy.dfa.classes.get_by_unit(alphabet::Unit(255))] == LazyStateID(2));",
                "    assert!(lazy.cache.trans.iter().filter(|&&x| x == LazyStateID(2)).count() == lazy.dfa.classes.stride2());",
                "    assert!(lazy.as_ref().is_valid(from));",
                "    assert!(lazy.as_ref().is_valid(to));",
                "    lazy.clear_cache();",
                "    assert!(lazy.cache.trans.iter().all(|&x| x == LazyStateID(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut cache = Cache { trans: vec![LazyStateID(0); 512], ..Default::default() };",
                "    let dfa = DFA {",
                "        classes: ByteClasses([0; 256]),",
                "        ..Default::default()",
                "    };",
                "    ",
                "    let mut lazy = Lazy::new(&dfa, &mut cache);",
                "    let from = LazyStateID(1);",
                "    let to = LazyStateID(2);",
                "    lazy.set_transition(from, alphabet::Unit(256), to); // Invalid byte",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lazy.cache.trans.len(), 512);",
                "    assert_eq!(lazy.dfa.classes.get_by_unit(alphabet::Unit(256)), 0);",
                "    assert!(matches!(lazy.set_transition(from, alphabet::Unit(256), to), Err(_)));"
              ],
              "code": [
                "{",
                "    let mut cache = Cache { trans: vec![LazyStateID(0); 512], ..Default::default() };",
                "    let dfa = DFA {",
                "        classes: ByteClasses([0; 256]),",
                "        ..Default::default()",
                "    };",
                "    ",
                "    let mut lazy = Lazy::new(&dfa, &mut cache);",
                "    let from = LazyStateID(1);",
                "    let to = LazyStateID(2);",
                "    lazy.set_transition(from, alphabet::Unit(256), to); // Invalid byte",
                "    assert_eq!(lazy.cache.trans.len(), 512);",
                "    assert_eq!(lazy.dfa.classes.get_by_unit(alphabet::Unit(256)), 0);",
                "    assert!(matches!(lazy.set_transition(from, alphabet::Unit(256), to), Err(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: unit in self.dfa.classes.representatives(..) at line 2585 is false\n"
      ],
      "input_infer": "from LazyStateID with minimum value of 0 to a maximum value of LazyStateID(u32::MAX) ensuring unit does not exist in representations of self.dfa.classes\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); 256],",
                "        starts: vec![LazyStateID(0)],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::new(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty,",
                "        state_saver: StateSaver::new(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    ",
                "    let classes = ByteClasses([0; 256]);",
                "    let dfa = DFA {",
                "        tt: vec![],",
                "        st: vec![],",
                "        ms: vec![],",
                "        special: Special::default(),",
                "        accels: vec![],",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags::default(),",
                "        classes,",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        dfa: &dfa,",
                "        cache: &mut cache,",
                "    };",
                "",
                "    lazy.set_all_transitions(LazyStateID(0), LazyStateID(u32::MAX));",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.as_ref().is_valid(LazyStateID(0)), \"invalid 'from' id: {:?}\", LazyStateID(0));",
                "    assert!(lazy.as_ref().is_valid(LazyStateID(u32::MAX)), \"invalid 'to' id: {:?}\", LazyStateID(u32::MAX));",
                "    assert_eq!(cache.trans.len(), 256, \"trans should have length 256\");",
                "    for unit in lazy.dfa.classes.representatives(..) {",
                "    assert_eq!(cache.trans[unit.0 as usize], LazyStateID(u32::MAX), \"transition from state 'from' to state 'to' should be set\");",
                "    }"
              ],
              "code": [
                "{",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); 256],",
                "        starts: vec![LazyStateID(0)],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::new(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty,",
                "        state_saver: StateSaver::new(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "    ",
                "    let classes = ByteClasses([0; 256]);",
                "    let dfa = DFA {",
                "        tt: vec![],",
                "        st: vec![],",
                "        ms: vec![],",
                "        special: Special::default(),",
                "        accels: vec![],",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags::default(),",
                "        classes,",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        dfa: &dfa,",
                "        cache: &mut cache,",
                "    };",
                "",
                "    lazy.set_all_transitions(LazyStateID(0), LazyStateID(u32::MAX));",
                "    assert!(lazy.as_ref().is_valid(LazyStateID(0)), \"invalid 'from' id: {:?}\", LazyStateID(0));",
                "    assert!(lazy.as_ref().is_valid(LazyStateID(u32::MAX)), \"invalid 'to' id: {:?}\", LazyStateID(u32::MAX));",
                "    assert_eq!(cache.trans.len(), 256, \"trans should have length 256\");",
                "    for unit in lazy.dfa.classes.representatives(..) {",
                "    assert_eq!(cache.trans[unit.0 as usize], LazyStateID(u32::MAX), \"transition from state 'from' to state 'to' should be set\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); 256],",
                "        starts: vec![LazyStateID(0)],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::new(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty,",
                "        state_saver: StateSaver::new(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "",
                "    let classes = ByteClasses([0; 256]);",
                "    let dfa = DFA {",
                "        tt: vec![],",
                "        st: vec![],",
                "        ms: vec![],",
                "        special: Special::default(),",
                "        accels: vec![],",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags::default(),",
                "        classes,",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        dfa: &dfa,",
                "        cache: &mut cache,",
                "    };",
                "",
                "    lazy.set_all_transitions(LazyStateID(u32::MAX), LazyStateID(u32::MAX));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lazy.cache.trans[0], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[1], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[2], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[3], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[4], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[5], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[6], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[7], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[8], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[9], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[10], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[11], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[12], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[13], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[14], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[15], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[16], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[17], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[18], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[19], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[20], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[21], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[22], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[23], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[24], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[25], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[26], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[27], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[28], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[29], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[30], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[31], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[32], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[33], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[34], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[35], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[36], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[37], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[38], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[39], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[40], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[41], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[42], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[43], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[44], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[45], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[46], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[47], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[48], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[49], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[50], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[51], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[52], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[53], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[54], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[55], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[56], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[57], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[58], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[59], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[60], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[61], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[62], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[63], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[64], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[65], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[66], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[67], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[68], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[69], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[70], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[71], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[72], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[73], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[74], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[75], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[76], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[77], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[78], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[79], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[80], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[81], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[82], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[83], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[84], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[85], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[86], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[87], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[88], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[89], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[90], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[91], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[92], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[93], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[94], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[95], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[96], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[97], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[98], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[99], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[100], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[101], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[102], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[103], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[104], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[105], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[106], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[107], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[108], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[109], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[110], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[111], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[112], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[113], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[114], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[115], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[116], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[117], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[118], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[119], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[120], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[121], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[122], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[123], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[124], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[125], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[126], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[127], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[128], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[129], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[130], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[131], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[132], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[133], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[134], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[135], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[136], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[137], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[138], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[139], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[140], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[141], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[142], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[143], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[144], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[145], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[146], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[147], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[148], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[149], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[150], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[151], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[152], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[153], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[154], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[155], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[156], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[157], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[158], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[159], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[160], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[161], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[162], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[163], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[164], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[165], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[166], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[167], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[168], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[169], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[170], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[171], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[172], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[173], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[174], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[175], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[176], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[177], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[178], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[179], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[180], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[181], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[182], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[183], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[184], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[185], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[186], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[187], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[188], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[189], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[190], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[191], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[192], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[193], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[194], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[195], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[196], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[197], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[198], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[199], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[200], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[201], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[202], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[203], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[204], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[205], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[206], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[207], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[208], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[209], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[210], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[211], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[212], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[213], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[214], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[215], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[216], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[217], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[218], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[219], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[220], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[221], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[222], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[223], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[224], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[225], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[226], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[227], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[228], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[229], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[230], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[231], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[232], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[233], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[234], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[235], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[236], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[237], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[238], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[239], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[240], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[241], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[242], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[243], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[244], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[245], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[246], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[247], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[248], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[249], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[250], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[251], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[252], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[253], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[254], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[255], LazyStateID(u32::MAX));"
              ],
              "code": [
                "{",
                "    let mut cache = Cache {",
                "        trans: vec![LazyStateID(0); 256],",
                "        starts: vec![LazyStateID(0)],",
                "        states: vec![],",
                "        states_to_id: StateMap::new(),",
                "        sparses: SparseSets::new(),",
                "        stack: vec![],",
                "        scratch_state_builder: StateBuilderEmpty,",
                "        state_saver: StateSaver::new(),",
                "        memory_usage_state: 0,",
                "        clear_count: 0,",
                "        bytes_searched: 0,",
                "        progress: None,",
                "    };",
                "",
                "    let classes = ByteClasses([0; 256]);",
                "    let dfa = DFA {",
                "        tt: vec![],",
                "        st: vec![],",
                "        ms: vec![],",
                "        special: Special::default(),",
                "        accels: vec![],",
                "        pre: None,",
                "        quitset: ByteSet::default(),",
                "        flags: Flags::default(),",
                "        classes,",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        dfa: &dfa,",
                "        cache: &mut cache,",
                "    };",
                "",
                "    lazy.set_all_transitions(LazyStateID(u32::MAX), LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[0], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[1], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[2], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[3], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[4], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[5], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[6], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[7], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[8], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[9], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[10], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[11], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[12], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[13], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[14], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[15], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[16], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[17], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[18], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[19], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[20], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[21], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[22], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[23], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[24], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[25], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[26], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[27], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[28], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[29], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[30], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[31], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[32], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[33], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[34], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[35], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[36], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[37], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[38], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[39], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[40], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[41], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[42], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[43], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[44], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[45], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[46], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[47], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[48], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[49], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[50], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[51], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[52], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[53], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[54], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[55], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[56], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[57], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[58], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[59], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[60], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[61], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[62], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[63], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[64], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[65], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[66], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[67], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[68], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[69], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[70], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[71], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[72], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[73], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[74], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[75], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[76], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[77], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[78], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[79], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[80], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[81], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[82], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[83], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[84], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[85], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[86], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[87], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[88], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[89], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[90], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[91], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[92], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[93], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[94], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[95], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[96], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[97], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[98], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[99], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[100], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[101], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[102], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[103], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[104], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[105], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[106], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[107], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[108], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[109], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[110], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[111], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[112], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[113], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[114], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[115], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[116], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[117], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[118], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[119], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[120], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[121], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[122], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[123], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[124], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[125], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[126], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[127], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[128], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[129], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[130], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[131], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[132], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[133], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[134], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[135], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[136], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[137], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[138], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[139], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[140], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[141], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[142], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[143], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[144], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[145], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[146], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[147], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[148], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[149], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[150], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[151], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[152], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[153], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[154], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[155], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[156], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[157], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[158], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[159], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[160], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[161], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[162], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[163], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[164], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[165], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[166], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[167], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[168], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[169], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[170], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[171], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[172], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[173], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[174], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[175], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[176], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[177], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[178], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[179], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[180], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[181], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[182], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[183], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[184], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[185], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[186], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[187], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[188], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[189], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[190], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[191], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[192], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[193], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[194], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[195], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[196], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[197], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[198], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[199], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[200], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[201], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[202], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[203], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[204], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[205], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[206], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[207], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[208], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[209], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[210], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[211], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[212], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[213], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[214], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[215], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[216], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[217], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[218], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[219], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[220], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[221], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[222], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[223], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[224], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[225], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[226], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[227], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[228], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[229], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[230], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[231], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[232], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[233], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[234], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[235], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[236], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[237], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[238], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[239], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[240], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[241], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[242], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[243], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[244], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[245], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[246], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[247], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[248], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[249], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[250], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[251], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[252], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[253], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[254], LazyStateID(u32::MAX));",
                "    assert_eq!(lazy.cache.trans[255], LazyStateID(u32::MAX));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}