{
  "name": "regex_automata::dfa::accel::{impl#5}::contains",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/accel.rs:490:5:492:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions: byte values (0-255) with non-empty and empty accelerator states (Accel with varying lengths from 0 to 7, inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 5;",
                "    accel.contains(byte_to_test);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(accel.len(), 7);",
                "    assert!(accel.contains(5));",
                "    assert!(!accel.contains(8));",
                "    assert!(accel.contains(1));",
                "    assert!(accel.contains(7));",
                "    assert!(accel.is_empty() == false);",
                "    assert!(accel.contains(6));",
                "    assert!(accel.bytes[0] == 7);"
              ],
              "code": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 5;",
                "    accel.contains(byte_to_test);",
                "    assert_eq!(accel.len(), 7);",
                "    assert!(accel.contains(5));",
                "    assert!(!accel.contains(8));",
                "    assert!(accel.contains(1));",
                "    assert!(accel.contains(7));",
                "    assert!(accel.is_empty() == false);",
                "    assert!(accel.contains(6));",
                "    assert!(accel.bytes[0] == 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 8;",
                "    accel.contains(byte_to_test);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(accel.len(), 7);",
                "    assert!(accel.contains(1));",
                "    assert!(accel.contains(2));",
                "    assert!(accel.contains(3));",
                "    assert!(accel.contains(4));",
                "    assert!(accel.contains(5));",
                "    assert!(accel.contains(6));",
                "    assert!(accel.contains(7));",
                "    assert!(!accel.contains(8));"
              ],
              "code": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 8;",
                "    accel.contains(byte_to_test);",
                "    assert_eq!(accel.len(), 7);",
                "    assert!(accel.contains(1));",
                "    assert!(accel.contains(2));",
                "    assert!(accel.contains(3));",
                "    assert!(accel.contains(4));",
                "    assert!(accel.contains(5));",
                "    assert!(accel.contains(6));",
                "    assert!(accel.contains(7));",
                "    assert!(!accel.contains(8));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let accel = Accel::new();",
                "    let byte_to_test = 0;",
                "    accel.contains(byte_to_test);",
                "}"
              ],
              "oracle": [
                "    let accel = Accel::new();",
                "    let byte_to_test = 0;",
                "    assert_eq!(accel.contains(byte_to_test), false);"
              ],
              "code": [
                "{",
                "    let accel = Accel::new();",
                "    let byte_to_test = 0;",
                "    accel.contains(byte_to_test);",
                "    let accel = Accel::new();",
                "    let byte_to_test = 0;",
                "    assert_eq!(accel.contains(byte_to_test), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut accel = Accel::new();",
                "    accel.add(10);",
                "    let byte_to_test = 10;",
                "    accel.contains(byte_to_test);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(accel.len(), 1);",
                "    assert!(accel.contains(byte_to_test));",
                "    assert!(!accel.contains(5));",
                "    assert!(accel.is_empty() == false);",
                "    assert!(accel.len() > 0);"
              ],
              "code": [
                "{",
                "    let mut accel = Accel::new();",
                "    accel.add(10);",
                "    let byte_to_test = 10;",
                "    accel.contains(byte_to_test);",
                "    assert_eq!(accel.len(), 1);",
                "    assert!(accel.contains(byte_to_test));",
                "    assert!(!accel.contains(5));",
                "    assert!(accel.is_empty() == false);",
                "    assert!(accel.len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut accel = Accel::new();",
                "    accel.add(10);",
                "    let byte_to_test = 20;",
                "    accel.contains(byte_to_test);",
                "}"
              ],
              "oracle": [
                "    let mut accel = Accel::new();",
                "    assert_eq!(accel.is_empty(), true);",
                "    accel.add(10);",
                "    assert_eq!(accel.contains(10), true);",
                "    assert_eq!(accel.contains(20), false);",
                "    accel.add(20);",
                "    assert_eq!(accel.contains(20), true);",
                "    assert_eq!(accel.len(), 2);",
                "    assert_eq!(accel.len(), 2);"
              ],
              "code": [
                "{",
                "    let mut accel = Accel::new();",
                "    accel.add(10);",
                "    let byte_to_test = 20;",
                "    accel.contains(byte_to_test);",
                "    let mut accel = Accel::new();",
                "    assert_eq!(accel.is_empty(), true);",
                "    accel.add(10);",
                "    assert_eq!(accel.contains(10), true);",
                "    assert_eq!(accel.contains(20), false);",
                "    accel.add(20);",
                "    assert_eq!(accel.contains(20), true);",
                "    assert_eq!(accel.len(), 2);",
                "    assert_eq!(accel.len(), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 7;",
                "    accel.contains(byte_to_test);",
                "}"
              ],
              "oracle": [
                "    assert!(accel.add(1));",
                "    assert!(accel.add(2));",
                "    assert!(accel.add(3));",
                "    assert!(accel.add(4));",
                "    assert!(accel.add(5));",
                "    assert!(accel.add(6));",
                "    assert!(accel.add(7));",
                "    assert!(accel.contains(7));",
                "    assert!(!accel.contains(8));",
                "    assert_eq!(accel.len(), 7);",
                "    assert!(!accel.is_empty());",
                "    accel = Accel::new();",
                "    assert!(accel.is_empty());",
                "    assert!(!accel.contains(1));",
                "    assert_eq!(accel.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 7;",
                "    accel.contains(byte_to_test);",
                "    assert!(accel.add(1));",
                "    assert!(accel.add(2));",
                "    assert!(accel.add(3));",
                "    assert!(accel.add(4));",
                "    assert!(accel.add(5));",
                "    assert!(accel.add(6));",
                "    assert!(accel.add(7));",
                "    assert!(accel.contains(7));",
                "    assert!(!accel.contains(8));",
                "    assert_eq!(accel.len(), 7);",
                "    assert!(!accel.is_empty());",
                "    accel = Accel::new();",
                "    assert!(accel.is_empty());",
                "    assert!(!accel.contains(1));",
                "    assert_eq!(accel.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 0;",
                "    accel.contains(byte_to_test);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(accel.contains(0), false);",
                "    assert_eq!(accel.contains(1), true);",
                "    assert_eq!(accel.contains(2), true);",
                "    assert_eq!(accel.contains(3), true);",
                "    assert_eq!(accel.contains(4), true);",
                "    assert_eq!(accel.contains(5), true);",
                "    assert_eq!(accel.contains(6), true);",
                "    assert_eq!(accel.contains(7), true);",
                "    assert_eq!(accel.contains(8), false);",
                "    assert_eq!(accel.contains(255), false);"
              ],
              "code": [
                "{",
                "    let mut accel = Accel::new();",
                "    for byte in 1..=7 {",
                "        accel.add(byte);",
                "    }",
                "    let byte_to_test = 0;",
                "    accel.contains(byte_to_test);",
                "    assert_eq!(accel.contains(0), false);",
                "    assert_eq!(accel.contains(1), true);",
                "    assert_eq!(accel.contains(2), true);",
                "    assert_eq!(accel.contains(3), true);",
                "    assert_eq!(accel.contains(4), true);",
                "    assert_eq!(accel.contains(5), true);",
                "    assert_eq!(accel.contains(6), true);",
                "    assert_eq!(accel.contains(7), true);",
                "    assert_eq!(accel.contains(8), false);",
                "    assert_eq!(accel.contains(255), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}