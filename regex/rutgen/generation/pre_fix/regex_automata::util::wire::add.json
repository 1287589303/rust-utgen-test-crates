{
  "name": "regex_automata::util::wire::add",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:816:1:825:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: a.checked_add(b) matches Some(c) at line 821 is true\n",
        "precondition: a.checked_add(b) matches Some(c) at line 821 is true\n",
        "expected return value/type: Ok(c)\n"
      ],
      "input_infer": "Test input conditions or ranges: a + b should be less than or equal to usize::MAX, where a and b are non-negative integers; a and b should be in the range [0, usize::MAX - b] for various values of b; 'what' should be a valid &'static str.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = add(1, 2, \"Adding small numbers\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(3));"
              ],
              "code": [
                "{",
                "    let result = add(1, 2, \"Adding small numbers\");",
                "    assert_eq!(result, Ok(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = add(usize::MAX - 1, 1, \"Adding to maximum\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(usize::MAX));"
              ],
              "code": [
                "{",
                "    let result = add(usize::MAX - 1, 1, \"Adding to maximum\");",
                "    assert_eq!(result, Ok(usize::MAX));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = add(0, 0, \"Adding zeros\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(0));"
              ],
              "code": [
                "{",
                "    let result = add(0, 0, \"Adding zeros\");",
                "    assert_eq!(result, Ok(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = add(1000, 2000, \"Adding mid-range numbers\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(3000));"
              ],
              "code": [
                "{",
                "    let result = add(1000, 2000, \"Adding mid-range numbers\");",
                "    assert_eq!(result, Ok(3000));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: a.checked_add(b) matches None at line 821 is true\n",
        "expected return value/type: Err(DeserializeError::arithmetic_overflow(what))\n"
      ],
      "input_infer": "a: usize equals usize::MAX; b: usize equals 1; what: any static string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = usize::MAX;",
                "    let b = 1;",
                "    let what = \"Addition that exceeds usize max\";",
                "    let result = add(a, b, what);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Err(DeserializeError { .. })));",
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"Addition that exceeds usize max\")));"
              ],
              "code": [
                "{",
                "    let a = usize::MAX;",
                "    let b = 1;",
                "    let what = \"Addition that exceeds usize max\";",
                "    let result = add(a, b, what);",
                "    assert!(matches!(result, Err(DeserializeError { .. })));",
                "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"Addition that exceeds usize max\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = usize::MAX;",
                "    let b = 1;",
                "    let what = \"Another addition exceeding max\";",
                "    let result = add(a, b, what);",
                "}"
              ],
              "oracle": [
                "    let a = usize::MAX;",
                "    let b = 1;",
                "    let what = \"Another addition exceeding max\";",
                "    let expected = Err(DeserializeError::arithmetic_overflow(what));",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let a = usize::MAX;",
                "    let b = 1;",
                "    let what = \"Another addition exceeding max\";",
                "    let result = add(a, b, what);",
                "    let a = usize::MAX;",
                "    let b = 1;",
                "    let what = \"Another addition exceeding max\";",
                "    let expected = Err(DeserializeError::arithmetic_overflow(what));",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}