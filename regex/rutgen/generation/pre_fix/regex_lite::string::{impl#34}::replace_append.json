{
  "name": "regex_lite::string::{impl#34}::replace_append",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2516:5:2518:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "1. Input `self` as an empty string, a string with special characters, a string with whitespace, and a normal sentence; `caps` should contain various patterns that match and do not match these strings; `dst` should be initialized empty or with previous content.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut s = String::new();",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"\");",
                "    let caps = Captures { haystack: \"test\", slots: CaptureLocations::default(), pikevm: Arc::new(PikeVM::default()) };",
                "    s.push_str(\"test\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"test\");",
                "    let caps = Captures { haystack: \"foo\", slots: CaptureLocations::default(), pikevm: Arc::new(PikeVM::default()) };",
                "    s.push_str(\"foo\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"foo\");",
                "    let mut dst = String::from(\"initial\");",
                "    let caps = Captures { haystack: \"bar\", slots: CaptureLocations::default(), pikevm: Arc::new(PikeVM::default()) };",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"initial\");",
                "    assert_eq!(s, \"foo\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"initial\");",
                "    assert_eq!(s, \"foo\");"
              ],
              "code": [
                "{",
                "    let mut s = String::new();",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"\");",
                "    let caps = Captures { haystack: \"test\", slots: CaptureLocations::default(), pikevm: Arc::new(PikeVM::default()) };",
                "    s.push_str(\"test\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"test\");",
                "    let caps = Captures { haystack: \"foo\", slots: CaptureLocations::default(), pikevm: Arc::new(PikeVM::default()) };",
                "    s.push_str(\"foo\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"foo\");",
                "    let mut dst = String::from(\"initial\");",
                "    let caps = Captures { haystack: \"bar\", slots: CaptureLocations::default(), pikevm: Arc::new(PikeVM::default()) };",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"initial\");",
                "    assert_eq!(s, \"foo\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"initial\");",
                "    assert_eq!(s, \"foo\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut s = String::from(\"!@#$%^&*()\");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"!@#$%\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"!@#$%^&*()\");",
                "    assert_eq!(caps.haystack, \"!@#$%\");",
                "    assert_eq!(caps.slots, CaptureLocations::default());",
                "    assert!(caps.pikevm.is_some());"
              ],
              "code": [
                "{",
                "    let mut s = String::from(\"!@#$%^&*()\");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"!@#$%\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"\");",
                "    assert_eq!(s, \"!@#$%^&*()\");",
                "    assert_eq!(caps.haystack, \"!@#$%\");",
                "    assert_eq!(caps.slots, CaptureLocations::default());",
                "    assert!(caps.pikevm.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut s = String::from(\"   \");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"  \",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, \"   \");",
                "    assert_eq!(s, \"   \");",
                "    assert_eq!(caps.haystack, \"  \");",
                "    assert!(caps.slots.is_default());",
                "    assert!(Arc::strong_count(&caps.pikevm) > 0);",
                "    assert!(caps.pikevm.is_default());",
                "    dst.clear();",
                "    s.push_str(\"abc\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"   abc\");"
              ],
              "code": [
                "{",
                "    let mut s = String::from(\"   \");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"  \",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"   \");",
                "    assert_eq!(s, \"   \");",
                "    assert_eq!(caps.haystack, \"  \");",
                "    assert!(caps.slots.is_default());",
                "    assert!(Arc::strong_count(&caps.pikevm) > 0);",
                "    assert!(caps.pikevm.is_default());",
                "    dst.clear();",
                "    s.push_str(\"abc\");",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"   abc\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut s = String::from(\"Hello world\");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"Hello\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, \"Hello world\");",
                "    assert_eq!(s, \"Hello world\");",
                "    assert!(dst.is_empty() == false);",
                "    assert!(caps.haystack == \"Hello\");",
                "    assert!(caps.pikevm.is_some() == true);"
              ],
              "code": [
                "{",
                "    let mut s = String::from(\"Hello world\");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"Hello\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"Hello world\");",
                "    assert_eq!(s, \"Hello world\");",
                "    assert!(dst.is_empty() == false);",
                "    assert!(caps.haystack == \"Hello\");",
                "    assert!(caps.pikevm.is_some() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut s = String::from(\"Goodbye\");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"Hello\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, \"Goodbye\");",
                "    assert_eq!(s, \"Goodbye\");",
                "    assert!(dst.is_empty());",
                "    assert!(s.contains(\"Goodbye\"));",
                "    assert_eq!(caps.haystack, \"Hello\");"
              ],
              "code": [
                "{",
                "    let mut s = String::from(\"Goodbye\");",
                "    let mut dst = String::new();",
                "    let caps = Captures {",
                "        haystack: \"Hello\",",
                "        slots: CaptureLocations::default(),",
                "        pikevm: Arc::new(PikeVM::default()),",
                "    };",
                "    s.replace_append(&caps, &mut dst);",
                "    assert_eq!(dst, \"Goodbye\");",
                "    assert_eq!(s, \"Goodbye\");",
                "    assert!(dst.is_empty());",
                "    assert!(s.contains(\"Goodbye\"));",
                "    assert_eq!(caps.haystack, \"Hello\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}