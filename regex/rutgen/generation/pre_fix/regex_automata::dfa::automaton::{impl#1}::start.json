{
  "name": "regex_automata::dfa::automaton::{impl#1}::start",
  "mod_info": {
    "name": "dfa::automaton",
    "loc": "regex-automata/src/dfa/mod.rs:348:1:348:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/automaton.rs:2054:5:2062:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: OverlappingState {\n            mat: None,\n            id: None,\n            at: 0,\n            next_match_index: None,\n            rev_eoi: false,\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: No inputs required, expect return of OverlappingState with mat=None, id=None, at=0, next_match_index=None, rev_eoi=false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state = OverlappingState::start();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state.mat, None);",
                "    assert_eq!(state.id, None);",
                "    assert_eq!(state.at, 0);",
                "    assert_eq!(state.next_match_index, None);",
                "    assert_eq!(state.rev_eoi, false);"
              ],
              "code": [
                "{",
                "    let state = OverlappingState::start();",
                "    assert_eq!(state.mat, None);",
                "    assert_eq!(state.id, None);",
                "    assert_eq!(state.at, 0);",
                "    assert_eq!(state.next_match_index, None);",
                "    assert_eq!(state.rev_eoi, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state = OverlappingState::start();",
                "    assert_eq!(state.mat, None);",
                "    assert_eq!(state.id, None);",
                "    assert_eq!(state.at, 0);",
                "    assert_eq!(state.next_match_index, None);",
                "    assert_eq!(state.rev_eoi, false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state.mat, None);",
                "    assert_eq!(state.id, None);",
                "    assert_eq!(state.at, 0);",
                "    assert_eq!(state.next_match_index, None);",
                "    assert_eq!(state.rev_eoi, false);"
              ],
              "code": [
                "{",
                "    let state = OverlappingState::start();",
                "    assert_eq!(state.mat, None);",
                "    assert_eq!(state.id, None);",
                "    assert_eq!(state.at, 0);",
                "    assert_eq!(state.next_match_index, None);",
                "    assert_eq!(state.rev_eoi, false);",
                "    assert_eq!(state.mat, None);",
                "    assert_eq!(state.id, None);",
                "    assert_eq!(state.at, 0);",
                "    assert_eq!(state.next_match_index, None);",
                "    assert_eq!(state.rev_eoi, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}