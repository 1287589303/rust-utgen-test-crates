{
  "name": "regex_automata::util::look::{impl#4}::is_word_unicode",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1018:5:1026:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: is_word_char::rev(haystack, at)? at line 1023 is Err/None\n"
      ],
      "input_infer": "haystack: any valid byte slice, at: any non-negative integer up to haystack.len() including edge case at = haystack.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\";",
                "    let at: usize = 0;",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Err(UnicodeWordBoundaryError(())));"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\";",
                "    let at: usize = 0;",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Err(UnicodeWordBoundaryError(())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 3;",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 3;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err(), UnicodeWordBoundaryError(()));",
                "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len() + 1).is_err(), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 3;",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 3;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err(), UnicodeWordBoundaryError(()));",
                "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len() + 1).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"world\";",
                "    let at: usize = haystack.len();",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"world\";",
                "    let at: usize = haystack.len();",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"word\";",
                "    let at: usize = 1;",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err().0, ());",
                "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
                "    assert!(matcher.is_word_unicode(haystack, at).unwrap_err() == UnicodeWordBoundaryError(()));",
                "    assert!(matcher.is_word_unicode(haystack, 0).is_ok());",
                "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, 5).is_err(), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"word\";",
                "    let at: usize = 1;",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err().0, ());",
                "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
                "    assert!(matcher.is_word_unicode(haystack, at).unwrap_err() == UnicodeWordBoundaryError(()));",
                "    assert!(matcher.is_word_unicode(haystack, 0).is_ok());",
                "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
                "    assert_eq!(matcher.is_word_unicode(haystack, 5).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: is_word_char::rev(haystack, at)? at line 1023 is Ok/Some\n",
        "precondition: is_word_char::fwd(haystack, at)? at line 1024 is Err/None\n"
      ],
      "input_infer": "haystack: non-empty array of u8; at: valid indices 0 to haystack.len(), with at >= 1 for precondition to hold true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\"; // non-empty array of u8",
                "    let at: usize = 5; // at is equal to haystack.len(), valid boundary case",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 5;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), false);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\"; // non-empty array of u8",
                "    let at: usize = 5; // at is equal to haystack.len(), valid boundary case",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 5;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"world\"; // non-empty array of u8",
                "    let at: usize = 6; // at is out of bounds for haystack.length",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
                "    assert!(matcher.is_word_unicode(haystack, at).unwrap_err().is_some());",
                "    assert!(at > haystack.len());",
                "    assert!(haystack.len() == 5);",
                "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
                "    assert_eq!(matcher.is_word_unicode(haystack, 5).is_ok(), true);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"world\"; // non-empty array of u8",
                "    let at: usize = 6; // at is out of bounds for haystack.length",
                "    let _ = matcher.is_word_unicode(haystack, at);",
                "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
                "    assert!(matcher.is_word_unicode(haystack, at).unwrap_err().is_some());",
                "    assert!(at > haystack.len());",
                "    assert!(haystack.len() == 5);",
                "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
                "    assert_eq!(matcher.is_word_unicode(haystack, 5).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"test\"; // non-empty array of u8",
                "    let at: usize = 4; // at is equal to haystack.len(), valid boundary case",
                "    let result = matcher.is_word_unicode(haystack, at); // should return Ok",
                "    let _ = result.is_ok();",
                "}"
              ],
              "oracle": [
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"test\";",
                "    let at: usize = 4;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    let word_boundary_check = result.unwrap();",
                "    assert!(word_boundary_check);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"test\"; // non-empty array of u8",
                "    let at: usize = 4; // at is equal to haystack.len(), valid boundary case",
                "    let result = matcher.is_word_unicode(haystack, at); // should return Ok",
                "    let _ = result.is_ok();",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"test\";",
                "    let at: usize = 4;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    let word_boundary_check = result.unwrap();",
                "    assert!(word_boundary_check);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: is_word_char::rev(haystack, at)? at line 1023 is Ok/Some\n",
        "precondition: is_word_char::fwd(haystack, at)? at line 1024 is Ok/Some\n",
        "expected return value/type: Ok(word_before != word_after)\n"
      ],
      "input_infer": "haystack: non-empty byte array of valid UTF-8 characters, at: 0 to haystack.len() inclusive, unicode-word-boundary feature enabled\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 0;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(true));",
                "    let at: usize = 5;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Ok(false));",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let at: usize = 6;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Ok(true));",
                "    let at: usize = 11;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Ok(false));"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 0;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(_result, Ok(true));",
                "    let at: usize = 5;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Ok(false));",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let at: usize = 6;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Ok(true));",
                "    let at: usize = 11;",
                "    assert_eq!(matcher.is_word_unicode(haystack, at), Ok(false));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let at: usize = 5;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let at: usize = 5;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), true);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let at: usize = 5;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let at: usize = 5;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 5;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 5;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(_result, Ok(true));  // Assuming the conditions for word boundary are met",
                "    assert_eq!(matcher.is_word_unicode(haystack, 0), Ok(true));  // Testing start of string",
                "    assert_eq!(matcher.is_word_unicode(haystack, 1), Ok(false)); // Testing middle of word",
                "    assert_eq!(matcher.is_word_unicode(haystack, 6), Ok(false)); // Testing out of bounds",
                "    assert!(matcher.is_word_unicode(haystack, haystack.len()).is_ok()); // Testing edge case at end of string",
                "    assert!(matcher.is_word_unicode(haystack, 3).is_ok()); // Ensure it's okay for valid in-range indices",
                "    assert!(matcher.is_word_unicode(haystack, 4).is_ok()); // Testing last character index"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 5;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"hello\";",
                "    let at: usize = 5;",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(_result, Ok(true));  // Assuming the conditions for word boundary are met",
                "    assert_eq!(matcher.is_word_unicode(haystack, 0), Ok(true));  // Testing start of string",
                "    assert_eq!(matcher.is_word_unicode(haystack, 1), Ok(false)); // Testing middle of word",
                "    assert_eq!(matcher.is_word_unicode(haystack, 6), Ok(false)); // Testing out of bounds",
                "    assert!(matcher.is_word_unicode(haystack, haystack.len()).is_ok()); // Testing edge case at end of string",
                "    assert!(matcher.is_word_unicode(haystack, 3).is_ok()); // Ensure it's okay for valid in-range indices",
                "    assert!(matcher.is_word_unicode(haystack, 4).is_ok()); // Testing last character index",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = \"こんにちは\".as_bytes(); // \"Hello\" in Japanese",
                "    let at: usize = 3; // After first Unicode character",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = \"こんにちは\".as_bytes();",
                "    let at: usize = 3;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    let is_word_before = is_word_char::rev(haystack, at).unwrap();",
                "    let is_word_after = is_word_char::fwd(haystack, at).unwrap();",
                "    assert_eq!(result.unwrap(), is_word_before != is_word_after);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = \"こんにちは\".as_bytes(); // \"Hello\" in Japanese",
                "    let at: usize = 3; // After first Unicode character",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = \"こんにちは\".as_bytes();",
                "    let at: usize = 3;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert!(result.is_ok());",
                "    let is_word_before = is_word_char::rev(haystack, at).unwrap();",
                "    let is_word_after = is_word_char::fwd(haystack, at).unwrap();",
                "    assert_eq!(result.unwrap(), is_word_before != is_word_after);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"word$%&*\"; // Special characters mixed with ASCII",
                "    let at: usize = 4; // At the position of the special character",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"word$%&*\";",
                "    let at: usize = 4;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(true)); // Assuming the character at index 4 is a boundary",
                "    let at: usize = 0;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(false)); // Assuming the character at index 0 is within a word",
                "    let at: usize = 6; // At the position of the null terminator",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(false)); // Assuming index 6 is end of the word",
                "    let haystack: &[u8] = b\"word\"; // All ASCII characters",
                "    let at: usize = 3;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(false)); // No word boundary at end of valid ASCII word",
                "    let haystack: &[u8] = b\"$$$\"; // Only special characters",
                "    let at: usize = 1;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(true)); // All special characters, indicating a boundary"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"word$%&*\"; // Special characters mixed with ASCII",
                "    let at: usize = 4; // At the position of the special character",
                "    let _result = matcher.is_word_unicode(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"word$%&*\";",
                "    let at: usize = 4;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(true)); // Assuming the character at index 4 is a boundary",
                "    let at: usize = 0;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(false)); // Assuming the character at index 0 is within a word",
                "    let at: usize = 6; // At the position of the null terminator",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(false)); // Assuming index 6 is end of the word",
                "    let haystack: &[u8] = b\"word\"; // All ASCII characters",
                "    let at: usize = 3;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(false)); // No word boundary at end of valid ASCII word",
                "    let haystack: &[u8] = b\"$$$\"; // Only special characters",
                "    let at: usize = 1;",
                "    let result = matcher.is_word_unicode(haystack, at);",
                "    assert_eq!(result, Ok(true)); // All special characters, indicating a boundary",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}