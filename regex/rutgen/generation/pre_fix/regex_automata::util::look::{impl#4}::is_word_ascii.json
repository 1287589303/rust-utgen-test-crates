{
  "name": "regex_automata::util::look::{impl#4}::is_word_ascii",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:985:5:990:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: at > 0 at line 986 is true\n",
        "precondition: at < haystack.len() at line 988 is true\n",
        "expected return value/type: word_before != word_after\n"
      ],
      "input_infer": "at > 0 and at < haystack.len(), with haystack containing a mix of word and non-word bytes such as [b'a', b' ', b'_', b'9', b'!', b'Z']\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 3; // At b'9', which is a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false); // At b'a', check at start (not a word byte)",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false); // At b'Z', which is a word byte"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 3; // At b'9', which is a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false); // At b'a', check at start (not a word byte)",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false); // At b'Z', which is a word byte",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 2; // At b'_', which is a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii(&haystack, 1), true);  // At b' ', not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true);  // At b'_', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 3), false);  // At b'9', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 4), true);  // At b'!', not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false);  // At b'Z', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false);  // Out of bounds, should not panic (at = 0)",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 6), false);  // At haystack.len(), should not panic"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 2; // At b'_', which is a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 1), true);  // At b' ', not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true);  // At b'_', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 3), false);  // At b'9', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 4), true);  // At b'!', not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false);  // At b'Z', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false);  // Out of bounds, should not panic (at = 0)",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 6), false);  // At haystack.len(), should not panic",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 1; // At b' ', which is not a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 1;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
                "    let at = 2;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
                "    ",
                "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
                "    let at = 3;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
                "    let at = 4;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 5;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 0;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 1;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 2;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 3;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 1; // At b' ', which is not a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 1;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
                "    let at = 2;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
                "    ",
                "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
                "    let at = 3;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
                "    let at = 4;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 5;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 0;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 1;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 2;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "    ",
                "    let haystack = [b'_', b'9', b'!', b'Z'];",
                "    let at = 3;",
                "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 0; // At b'a', which is a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii(&haystack, 1), false); // At b' ', which is not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 5), true); // At b'Z', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 0), true); // At start, checks boundary, as b'a' is word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 6), true); // At haystack.len(), which is allowed, checks end boundary"
              ],
              "code": [
                "{",
                "    let mut matcher = LookMatcher::new();",
                "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
                "    let at = 0; // At b'a', which is a word byte",
                "    matcher.is_word_ascii(&haystack, at);",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 1), false); // At b' ', which is not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 5), true); // At b'Z', which is a word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 0), true); // At start, checks boundary, as b'a' is word byte",
                "    assert_eq!(matcher.is_word_ascii(&haystack, 6), true); // At haystack.len(), which is allowed, checks end boundary",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: at > 0 at line 986 is false, with bound at == 0\n",
        "precondition: at < haystack.len() at line 988 is false, with bound at == haystack.len()\n",
        "expected return value/type: word_before != word_after\n"
      ],
      "input_infer": "at = 0, haystack = empty byte array; at = 0, haystack = byte array with a single word byte; at = haystack.len(), haystack = byte array with a single word byte; at = haystack.len(), haystack = empty byte array.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    matcher.is_word_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    assert_eq!(matcher.is_word_ascii(haystack, at), false);",
                "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii(haystack, at + 1); }).is_err());",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len() - 1), false);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    matcher.is_word_ascii(haystack, at);",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = 0;",
                "    assert_eq!(matcher.is_word_ascii(haystack, at), false);",
                "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii(haystack, at + 1); }).is_err());",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len() - 1), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a'];",
                "    let at = 0;",
                "    matcher.is_word_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii(haystack, at), false);  // at == 0, word_before is false",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), true);  // at == haystack.len(), word_after is false"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a'];",
                "    let at = 0;",
                "    matcher.is_word_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_ascii(haystack, at), false);  // at == 0, word_before is false",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), true);  // at == haystack.len(), word_after is false",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a'];",
                "    let at = haystack.len();",
                "    matcher.is_word_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[b'a'];",
                "    let at = haystack.len();",
                "    matcher.is_word_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = haystack.len();",
                "    matcher.is_word_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_ascii(haystack, 0), false);",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = &[];",
                "    let at = haystack.len();",
                "    matcher.is_word_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_ascii(haystack, 0), false);",
                "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}