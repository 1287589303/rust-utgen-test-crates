{
  "name": "regex_automata::dfa::onepass::{impl#0}::get_starts_for_each_pattern",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:247:5:249:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.starts_for_each_pattern can be None, true, or false; test input conditions: None, true, false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let result = config.get_starts_for_each_pattern();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let result = config.get_starts_for_each_pattern();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().starts_for_each_pattern(true);",
                "    let result = config.get_starts_for_each_pattern();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let config = Config::default().starts_for_each_pattern(true);",
                "    let result = config.get_starts_for_each_pattern();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default().starts_for_each_pattern(false);",
                "    let result = config.get_starts_for_each_pattern();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let config = Config::default().starts_for_each_pattern(false);",
                "    let result = config.get_starts_for_each_pattern();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}