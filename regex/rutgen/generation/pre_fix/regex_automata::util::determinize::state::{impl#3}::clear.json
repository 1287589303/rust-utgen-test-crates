{
  "name": "regex_automata::util::determinize::state::{impl#3}::clear",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:204:5:206:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.0 must be a non-empty Vec<u8> with a capacity greater than 0 for the clear function to demonstrate its effect, and the expected return value is a unit type () with self.0 becoming an empty Vec<u8>.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = StateBuilderEmpty(vec![1, 2, 3]);",
                "    builder.clear();",
                "}"
              ],
              "oracle": [
                "    assert!(builder.0.is_empty());",
                "    assert_eq!(builder.0.len(), 0);",
                "    assert_eq!(builder.capacity(), 3);",
                "    assert_eq!(builder.0, vec![]);"
              ],
              "code": [
                "{",
                "    let mut builder = StateBuilderEmpty(vec![1, 2, 3]);",
                "    builder.clear();",
                "    assert!(builder.0.is_empty());",
                "    assert_eq!(builder.0.len(), 0);",
                "    assert_eq!(builder.capacity(), 3);",
                "    assert_eq!(builder.0, vec![]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = StateBuilderEmpty(vec![0; 10]);",
                "    builder.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.0.len(), 0);",
                "    assert!(builder.0.is_empty());",
                "    assert!(builder.0.capacity() >= 10);",
                "    builder.clear();",
                "    assert_eq!(builder.0.len(), 0);",
                "    assert!(builder.0.is_empty());"
              ],
              "code": [
                "{",
                "    let mut builder = StateBuilderEmpty(vec![0; 10]);",
                "    builder.clear();",
                "    assert_eq!(builder.0.len(), 0);",
                "    assert!(builder.0.is_empty());",
                "    assert!(builder.0.capacity() >= 10);",
                "    builder.clear();",
                "    assert_eq!(builder.0.len(), 0);",
                "    assert!(builder.0.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = StateBuilderEmpty(vec![42]);",
                "    builder.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.0.len(), 0);",
                "    assert!(builder.0.is_empty());",
                "    assert_eq!(builder.capacity(), 1);",
                "    builder.clear();",
                "    assert_eq!(builder.capacity(), 1);"
              ],
              "code": [
                "{",
                "    let mut builder = StateBuilderEmpty(vec![42]);",
                "    builder.clear();",
                "    assert_eq!(builder.0.len(), 0);",
                "    assert!(builder.0.is_empty());",
                "    assert_eq!(builder.capacity(), 1);",
                "    builder.clear();",
                "    assert_eq!(builder.capacity(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}