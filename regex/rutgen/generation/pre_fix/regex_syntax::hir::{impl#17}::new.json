{
  "name": "regex_syntax::hir::{impl#17}::new",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1360:5:1365:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ClassBytes { set: IntervalSet::new(ranges) }\n"
      ],
      "input_infer": "I: IntoIterator<Item = ClassBytesRange> containing non-overlapping and overlapping ranges with 0 to 256 possible u8 values, including edge cases such as an empty iterator or single range (e.g., ClassBytesRange { start: 0, end: 255 }).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges: Vec<ClassBytesRange> = vec![];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "}"
              ],
              "oracle": [
                "    let expected_class_bytes = ClassBytes { set: IntervalSet::new(vec![]) };",
                "    assert_eq!(class_bytes, expected_class_bytes);"
              ],
              "code": [
                "{",
                "    let ranges: Vec<ClassBytesRange> = vec![];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    let expected_class_bytes = ClassBytes { set: IntervalSet::new(vec![]) };",
                "    assert_eq!(class_bytes, expected_class_bytes);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 5 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "}"
              ],
              "oracle": [
                "    let ranges = vec![ClassBytesRange { start: 0, end: 5 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 1);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 5 });",
                "    ",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 3 }, ClassBytesRange { start: 2, end: 5 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 1);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 5 });",
                "    ",
                "    let ranges = vec![ClassBytesRange { start: 5, end: 8 }, ClassBytesRange { start: 0, end: 2 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 2 });",
                "    assert_eq!(class_bytes.set.ranges[1], ClassBytesRange { start: 5, end: 8 });",
                "    ",
                "    let ranges: Vec<ClassBytesRange> = vec![];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 0);"
              ],
              "code": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 5 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 5 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 1);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 5 });",
                "    ",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 3 }, ClassBytesRange { start: 2, end: 5 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 1);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 5 });",
                "    ",
                "    let ranges = vec![ClassBytesRange { start: 5, end: 8 }, ClassBytesRange { start: 0, end: 2 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 2 });",
                "    assert_eq!(class_bytes.set.ranges[1], ClassBytesRange { start: 5, end: 8 });",
                "    ",
                "    let ranges: Vec<ClassBytesRange> = vec![];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 5 },",
                "        ClassBytesRange { start: 10, end: 15 },",
                "    ];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 5 });",
                "    assert_eq!(class_bytes.set.ranges[1], ClassBytesRange { start: 10, end: 15 });",
                "    assert!(class_bytes.set.folded == false);",
                "    assert!(class_bytes.set.ranges.is_sorted());"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 5 },",
                "        ClassBytesRange { start: 10, end: 15 },",
                "    ];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 5 });",
                "    assert_eq!(class_bytes.set.ranges[1], ClassBytesRange { start: 10, end: 15 });",
                "    assert!(class_bytes.set.folded == false);",
                "    assert!(class_bytes.set.ranges.is_sorted());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 5 },",
                "        ClassBytesRange { start: 3, end: 7 },",
                "    ];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "}"
              ],
              "oracle": [
                "    let ranges = vec![ClassBytesRange { start: 0, end: 5 }, ClassBytesRange { start: 3, end: 7 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 7 });",
                "    assert!(class_bytes.set.folded == false);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 5 },",
                "        ClassBytesRange { start: 3, end: 7 },",
                "    ];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 5 }, ClassBytesRange { start: 3, end: 7 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 7 });",
                "    assert!(class_bytes.set.folded == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 255 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.set.ranges.len(), 1);",
                "    assert_eq!(class_bytes.set.ranges[0].start, 0);",
                "    assert_eq!(class_bytes.set.ranges[0].end, 255);",
                "    assert!(class_bytes.set.folded == false);",
                "    assert!(class_bytes.iter().count() == 256);",
                "    assert!(class_bytes.minimum_len().unwrap() == 1);",
                "    assert!(class_bytes.maximum_len().unwrap() == 1);",
                "    assert!(class_bytes.is_ascii() == true);",
                "    assert!(class_bytes.literal().is_none());",
                "    assert!(class_bytes.to_unicode_class().is_none());"
              ],
              "code": [
                "{",
                "    let ranges = vec![ClassBytesRange { start: 0, end: 255 }];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 1);",
                "    assert_eq!(class_bytes.set.ranges[0].start, 0);",
                "    assert_eq!(class_bytes.set.ranges[0].end, 255);",
                "    assert!(class_bytes.set.folded == false);",
                "    assert!(class_bytes.iter().count() == 256);",
                "    assert!(class_bytes.minimum_len().unwrap() == 1);",
                "    assert!(class_bytes.maximum_len().unwrap() == 1);",
                "    assert!(class_bytes.is_ascii() == true);",
                "    assert!(class_bytes.literal().is_none());",
                "    assert!(class_bytes.to_unicode_class().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 127 },",
                "        ClassBytesRange { start: 128, end: 255 },",
                "    ];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 127 });",
                "    assert_eq!(class_bytes.set.ranges[1], ClassBytesRange { start: 128, end: 255 });",
                "    assert!(class_bytes.set.folded == false);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 127 },",
                "        ClassBytesRange { start: 128, end: 255 },",
                "    ];",
                "    let class_bytes = ClassBytes::new(ranges);",
                "    assert_eq!(class_bytes.set.ranges.len(), 2);",
                "    assert_eq!(class_bytes.set.ranges[0], ClassBytesRange { start: 0, end: 127 });",
                "    assert_eq!(class_bytes.set.ranges[1], ClassBytesRange { start: 128, end: 255 });",
                "    assert!(class_bytes.set.folded == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}