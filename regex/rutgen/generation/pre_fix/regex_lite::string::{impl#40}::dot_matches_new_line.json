{
  "name": "regex_lite::string::{impl#40}::dot_matches_new_line",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2753:5:2756:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid boolean inputs for dot_matches_new_line (true, false), followed by a valid RegexBuilder instance with a string pattern\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"foo.bar\");",
                "    builder.dot_matches_new_line(true);",
                "}"
              ],
              "oracle": [
                "    builder.dot_matches_new_line(true);",
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, true);",
                "    builder.dot_matches_new_line(false);",
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, false);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"foo.bar\");",
                "    builder.dot_matches_new_line(true);",
                "    builder.dot_matches_new_line(true);",
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, true);",
                "    builder.dot_matches_new_line(false);",
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"foo.bar\");",
                "    builder.dot_matches_new_line(false);",
                "}"
              ],
              "oracle": [
                "    let builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(builder.dot_matches_new_line(false), &mut builder);",
                "    let builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(builder.dot_matches_new_line(true), &mut builder);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"foo.bar\");",
                "    builder.dot_matches_new_line(false);",
                "    let builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(builder.dot_matches_new_line(false), &mut builder);",
                "    let builder = RegexBuilder::new(r\"foo.bar\");",
                "    assert_eq!(builder.dot_matches_new_line(true), &mut builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"foo.bar\");",
                "    builder.dot_matches_new_line(true)",
                "           .dot_matches_new_line(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, true);",
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, false);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"foo.bar\");",
                "    builder.dot_matches_new_line(true)",
                "           .dot_matches_new_line(false);",
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, true);",
                "    assert_eq!(builder.hir_config.flags.dot_matches_new_line, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}