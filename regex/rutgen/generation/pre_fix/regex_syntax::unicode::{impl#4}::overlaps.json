{
  "name": "regex_syntax::unicode::{impl#4}::overlaps",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/unicode.rs:178:5:193:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: start <= end at line 181 is true, with bound start == end\n"
      ],
      "input_infer": "valid ranges where start and end are the same character, valid ranges where start is less than end, ranges starting from the lowest Unicode scalar value (U+0000) to the highest (U+10FFFF), a range of non-overlapping characters, and a range that includes overlapping characters from the case folding table.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start_end = 'a';",
                "    case_folder.overlaps(start_end, start_end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(case_folder.overlaps('a', 'a'), true);",
                "    assert_eq!(case_folder.overlaps('b', 'b'), true);",
                "    assert_eq!(case_folder.overlaps('z', 'z'), false);",
                "    assert_eq!(case_folder.overlaps('A', 'A'), false);",
                "    assert_eq!(case_folder.overlaps('c', 'c'), false);"
              ],
              "code": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start_end = 'a';",
                "    case_folder.overlaps(start_end, start_end);",
                "    assert_eq!(case_folder.overlaps('a', 'a'), true);",
                "    assert_eq!(case_folder.overlaps('b', 'b'), true);",
                "    assert_eq!(case_folder.overlaps('z', 'z'), false);",
                "    assert_eq!(case_folder.overlaps('A', 'A'), false);",
                "    assert_eq!(case_folder.overlaps('c', 'c'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('a', 'b');",
                "}"
              ],
              "oracle": [
                "    case_folder.overlaps('a', 'a'); // Test with start equal to end where mapping exists",
                "    case_folder.overlaps('b', 'b'); // Test with start equal to end where mapping exists",
                "    case_folder.overlaps('a', 'b'); // Test with inclusive range having multiple mappings",
                "    case_folder.overlaps('c', 'c'); // Test with start equal to end where no mapping exists",
                "    case_folder.overlaps('a', 'c'); // Test with range that includes both mapped and unmapped",
                "    case_folder.overlaps('z', 'z'); // Test with start equal to end for high codepoint with no mapping",
                "    case_folder.overlaps('a', 'd'); // Test with ranges extending beyond existing mappings",
                "    case_folder.overlaps('\\0', '\\0'); // Test with start equal to end at boundary codepoint",
                "    case_folder.overlaps('A', 'Z'); // Test with ranges that are outside the existing table",
                "    case_folder.overlaps('\\u{100}', '\\u{200}'); // Test with a range that is well beyond any mapping"
              ],
              "code": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('a', 'b');",
                "    case_folder.overlaps('a', 'a'); // Test with start equal to end where mapping exists",
                "    case_folder.overlaps('b', 'b'); // Test with start equal to end where mapping exists",
                "    case_folder.overlaps('a', 'b'); // Test with inclusive range having multiple mappings",
                "    case_folder.overlaps('c', 'c'); // Test with start equal to end where no mapping exists",
                "    case_folder.overlaps('a', 'c'); // Test with range that includes both mapped and unmapped",
                "    case_folder.overlaps('z', 'z'); // Test with start equal to end for high codepoint with no mapping",
                "    case_folder.overlaps('a', 'd'); // Test with ranges extending beyond existing mappings",
                "    case_folder.overlaps('\\0', '\\0'); // Test with start equal to end at boundary codepoint",
                "    case_folder.overlaps('A', 'Z'); // Test with ranges that are outside the existing table",
                "    case_folder.overlaps('\\u{100}', '\\u{200}'); // Test with a range that is well beyond any mapping",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('\\u{0000}', '\\u{0000}');",
                "}"
              ],
              "oracle": [
                "    assert!(case_folder.overlaps('\\u{0000}', '\\u{0000}') == false);",
                "    assert!(case_folder.overlaps('a', 'a') == true);",
                "    assert!(case_folder.overlaps('b', 'b') == true);",
                "    assert!(case_folder.overlaps('c', 'c') == false);",
                "    assert!(case_folder.overlaps('a', 'b') == true);",
                "    assert!(case_folder.overlaps('z', 'z') == false);"
              ],
              "code": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('\\u{0000}', '\\u{0000}');",
                "    assert!(case_folder.overlaps('\\u{0000}', '\\u{0000}') == false);",
                "    assert!(case_folder.overlaps('a', 'a') == true);",
                "    assert!(case_folder.overlaps('b', 'b') == true);",
                "    assert!(case_folder.overlaps('c', 'c') == false);",
                "    assert!(case_folder.overlaps('a', 'b') == true);",
                "    assert!(case_folder.overlaps('z', 'z') == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('\\u{10FFFF}', '\\u{10FFFF}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(case_folder.overlaps('\\u{10FFFF}', '\\u{10FFFF}'), false);",
                "    case_folder.overlaps('a', 'a');",
                "    assert!(case_folder.overlaps('b', 'b'));",
                "    assert!(!case_folder.overlaps('c', 'd'));",
                "    case_folder.overlaps('\\u{0000}', '\\u{007F}');",
                "    case_folder.overlaps('\\u{0041}', '\\u{0041}');",
                "    assert!(case_folder.overlaps('a', 'b'));",
                "    assert!(case_folder.overlaps('A', 'B'));",
                "    case_folder.overlaps('\\u{007F}', '\\u{007F}');"
              ],
              "code": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('\\u{10FFFF}', '\\u{10FFFF}');",
                "    assert_eq!(case_folder.overlaps('\\u{10FFFF}', '\\u{10FFFF}'), false);",
                "    case_folder.overlaps('a', 'a');",
                "    assert!(case_folder.overlaps('b', 'b'));",
                "    assert!(!case_folder.overlaps('c', 'd'));",
                "    case_folder.overlaps('\\u{0000}', '\\u{007F}');",
                "    case_folder.overlaps('\\u{0041}', '\\u{0041}');",
                "    assert!(case_folder.overlaps('a', 'b'));",
                "    assert!(case_folder.overlaps('A', 'B'));",
                "    case_folder.overlaps('\\u{007F}', '\\u{007F}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('c', 'd');",
                "}"
              ],
              "oracle": [
                "    case_folder.overlaps('a', 'a'); // expected: true",
                "    case_folder.overlaps('b', 'b'); // expected: true",
                "    case_folder.overlaps('c', 'c'); // expected: false",
                "    case_folder.overlaps('d', 'd'); // expected: false",
                "    case_folder.overlaps('e', 'e'); // expected: false",
                "    case_folder.overlaps('A', 'A'); // expected: false",
                "    case_folder.overlaps('B', 'B'); // expected: false",
                "    case_folder.overlaps('z', 'z'); // expected: false",
                "    case_folder.overlaps('x', 'y'); // expected: false",
                "    case_folder.overlaps('a', 'b'); // expected: true",
                "    case_folder.overlaps('b', 'c'); // expected: true",
                "    case_folder.overlaps('c', 'e'); // expected: false"
              ],
              "code": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('b', &['B'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('c', 'd');",
                "    case_folder.overlaps('a', 'a'); // expected: true",
                "    case_folder.overlaps('b', 'b'); // expected: true",
                "    case_folder.overlaps('c', 'c'); // expected: false",
                "    case_folder.overlaps('d', 'd'); // expected: false",
                "    case_folder.overlaps('e', 'e'); // expected: false",
                "    case_folder.overlaps('A', 'A'); // expected: false",
                "    case_folder.overlaps('B', 'B'); // expected: false",
                "    case_folder.overlaps('z', 'z'); // expected: false",
                "    case_folder.overlaps('x', 'y'); // expected: false",
                "    case_folder.overlaps('a', 'b'); // expected: true",
                "    case_folder.overlaps('b', 'c'); // expected: true",
                "    case_folder.overlaps('c', 'e'); // expected: false",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('c', &['C'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('a', 'c');",
                "}"
              ],
              "oracle": [
                "    assert!(case_folder.overlaps('a', 'a'));",
                "    assert!(case_folder.overlaps('b', 'b'));",
                "    assert!(case_folder.overlaps('c', 'c'));",
                "    assert!(!case_folder.overlaps('d', 'e'));",
                "    assert!(case_folder.overlaps('a', 'c'));",
                "    assert!(!case_folder.overlaps('z', 'z'));",
                "    assert!(case_folder.overlaps('c', 'c'));",
                "    assert!(case_folder.overlaps('a', 'c'));"
              ],
              "code": [
                "{",
                "    let table: &'static [(char, &'static [char])] = &[('a', &['A']), ('c', &['C'])];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    case_folder.overlaps('a', 'c');",
                "    assert!(case_folder.overlaps('a', 'a'));",
                "    assert!(case_folder.overlaps('b', 'b'));",
                "    assert!(case_folder.overlaps('c', 'c'));",
                "    assert!(!case_folder.overlaps('d', 'e'));",
                "    assert!(case_folder.overlaps('a', 'c'));",
                "    assert!(!case_folder.overlaps('z', 'z'));",
                "    assert!(case_folder.overlaps('c', 'c'));",
                "    assert!(case_folder.overlaps('a', 'c'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: start <= end at line 181 is false\n"
      ],
      "input_infer": "start: char range from '\\u{0000}' to '\\u{FFFF}', end: char range from start to '\\u{FFFF}' where start > end\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{FF00}';",
                "    let end = '\\u{00FF}';",
                "    case_folder.overlaps(start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(true, std::panic::catch_unwind(|| {",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{FF00}';",
                "    let end = '\\u{00FF}';",
                "    case_folder.overlaps(start, end);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{FF00}';",
                "    let end = '\\u{00FF}';",
                "    case_folder.overlaps(start, end);",
                "    assert_eq!(true, std::panic::catch_unwind(|| {",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{FF00}';",
                "    let end = '\\u{00FF}';",
                "    case_folder.overlaps(start, end);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{007F}';",
                "    let end = '\\u{0000}';",
                "    case_folder.overlaps(start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(case_folder.overlaps('\\u{007F}', '\\u{0000}'), true);",
                "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{0030}'), true);",
                "    assert_eq!(case_folder.overlaps('\\u{0030}', '\\u{0035}'), true);",
                "    assert_eq!(case_folder.overlaps('\\u{0001}', '\\u{0000}'), true);"
              ],
              "code": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{007F}';",
                "    let end = '\\u{0000}';",
                "    case_folder.overlaps(start, end);",
                "    assert_eq!(case_folder.overlaps('\\u{007F}', '\\u{0000}'), true);",
                "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{0030}'), true);",
                "    assert_eq!(case_folder.overlaps('\\u{0030}', '\\u{0035}'), true);",
                "    assert_eq!(case_folder.overlaps('\\u{0001}', '\\u{0000}'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{1234}';",
                "    let end = '\\u{1233}';",
                "    case_folder.overlaps(start, end);",
                "}"
              ],
              "oracle": [
                "    assert!(case_folder.overlaps(start, end).is_panic());"
              ],
              "code": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{1234}';",
                "    let end = '\\u{1233}';",
                "    case_folder.overlaps(start, end);",
                "    assert!(case_folder.overlaps(start, end).is_panic());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{2E00}';",
                "    let end = '\\u{2DFF}';",
                "    case_folder.overlaps(start, end);",
                "}"
              ],
              "oracle": [
                "    assert!(core::panic::catch_unwind(|| {",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{2E00}';",
                "    let end = '\\u{2DFF}';",
                "    case_folder.overlaps(start, end);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{2E00}';",
                "    let end = '\\u{2DFF}';",
                "    case_folder.overlaps(start, end);",
                "    assert!(core::panic::catch_unwind(|| {",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{2E00}';",
                "    let end = '\\u{2DFF}';",
                "    case_folder.overlaps(start, end);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{FFFF}';",
                "    let end = '\\u{FFFE}';",
                "    case_folder.overlaps(start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(case_folder.overlaps('\\u{FFFF}', '\\u{FFFE}'), true);",
                "    assert_eq!(case_folder.overlaps('a', 'A'), false);",
                "    assert_eq!(case_folder.overlaps('A', 'a'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{007A}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0061}', '\\u{007A}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0000}', '\\u{0000}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{007A}', '\\u{007A}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0020}', '\\u{0020}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0100}', '\\u{03FF}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{300}', '\\u{400}'), false);"
              ],
              "code": [
                "{",
                "    let table: &[(char, &'static [char])] = &[];",
                "    let mut case_folder = SimpleCaseFolder { table, last: None, next: 0 };",
                "    let start = '\\u{FFFF}';",
                "    let end = '\\u{FFFE}';",
                "    case_folder.overlaps(start, end);",
                "    assert_eq!(case_folder.overlaps('\\u{FFFF}', '\\u{FFFE}'), true);",
                "    assert_eq!(case_folder.overlaps('a', 'A'), false);",
                "    assert_eq!(case_folder.overlaps('A', 'a'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0041}', '\\u{007A}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0061}', '\\u{007A}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0000}', '\\u{0000}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{007A}', '\\u{007A}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0020}', '\\u{0020}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{0100}', '\\u{03FF}'), false);",
                "    assert_eq!(case_folder.overlaps('\\u{300}', '\\u{400}'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}