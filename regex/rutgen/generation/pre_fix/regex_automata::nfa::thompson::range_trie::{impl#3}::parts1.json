{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#3}::parts1",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:843:5:847:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Split { partitions: [r1, nada, nada], len: 1 }\n"
      ],
      "input_infer": "Test input conditions or ranges: SplitRange values with valid Utf8Range start < end, edge case with start == end, and invalid Utf8Range where start > end.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = SplitRange::Old(Utf8Range { start: 1, end: 2 });",
                "    let split = Split::parts1(r1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(split.len, 1);",
                "    assert_eq!(split.partitions[0], r1);",
                "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
                "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));"
              ],
              "code": [
                "{",
                "    let r1 = SplitRange::Old(Utf8Range { start: 1, end: 2 });",
                "    let split = Split::parts1(r1);",
                "    assert_eq!(split.len, 1);",
                "    assert_eq!(split.partitions[0], r1);",
                "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
                "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = SplitRange::Old(Utf8Range { start: 2, end: 2 });",
                "    let split = Split::parts1(r1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(split.len, 1);",
                "    assert_eq!(split.partitions[0], SplitRange::Old(Utf8Range { start: 2, end: 2 }));",
                "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
                "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));"
              ],
              "code": [
                "{",
                "    let r1 = SplitRange::Old(Utf8Range { start: 2, end: 2 });",
                "    let split = Split::parts1(r1);",
                "    assert_eq!(split.len, 1);",
                "    assert_eq!(split.partitions[0], SplitRange::Old(Utf8Range { start: 2, end: 2 }));",
                "    assert_eq!(split.partitions[1], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
                "    assert_eq!(split.partitions[2], SplitRange::Old(Utf8Range { start: 0, end: 0 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let r1 = SplitRange::Old(Utf8Range { start: 3, end: 2 });",
                "    let split = Split::parts1(r1);",
                "}"
              ],
              "oracle": [
                "    let expected_split = Split { partitions: [SplitRange::Old(Utf8Range { start: 3, end: 2 }), SplitRange::Old(Utf8Range { start: 0, end: 0 }), SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 1 };",
                "    assert_eq!(split, expected_split);"
              ],
              "code": [
                "{",
                "    let r1 = SplitRange::Old(Utf8Range { start: 3, end: 2 });",
                "    let split = Split::parts1(r1);",
                "    let expected_split = Split { partitions: [SplitRange::Old(Utf8Range { start: 3, end: 2 }), SplitRange::Old(Utf8Range { start: 0, end: 0 }), SplitRange::Old(Utf8Range { start: 0, end: 0 })], len: 1 };",
                "    assert_eq!(split, expected_split);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}