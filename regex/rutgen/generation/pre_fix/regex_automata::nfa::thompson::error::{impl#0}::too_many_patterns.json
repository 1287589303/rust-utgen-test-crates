{
  "name": "regex_automata::nfa::thompson::error::{impl#0}::too_many_patterns",
  "mod_info": {
    "name": "nfa::thompson::error",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:61:1:61:11"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/error.rs:108:5:111:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: BuildError { kind: BuildErrorKind::TooManyPatterns { given, limit } }\n"
      ],
      "input_infer": "given: 0 to PatternID::LIMIT + 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let given = 0;",
                "    let result = BuildError::too_many_patterns(given);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::TooManyPatterns { given: 0, limit: PatternID::LIMIT });"
              ],
              "code": [
                "{",
                "    let given = 0;",
                "    let result = BuildError::too_many_patterns(given);",
                "    assert_eq!(result.kind(), &BuildErrorKind::TooManyPatterns { given: 0, limit: PatternID::LIMIT });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let given = PatternID::LIMIT;",
                "    let result = BuildError::too_many_patterns(given);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::TooManyPatterns { given, limit: PatternID::LIMIT });"
              ],
              "code": [
                "{",
                "    let given = PatternID::LIMIT;",
                "    let result = BuildError::too_many_patterns(given);",
                "    assert_eq!(result.kind(), &BuildErrorKind::TooManyPatterns { given, limit: PatternID::LIMIT });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let given = PatternID::LIMIT + 1;",
                "    let result = BuildError::too_many_patterns(given);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &BuildErrorKind::TooManyPatterns { given, limit: PatternID::LIMIT });"
              ],
              "code": [
                "{",
                "    let given = PatternID::LIMIT + 1;",
                "    let result = BuildError::too_many_patterns(given);",
                "    assert_eq!(result.kind(), &BuildErrorKind::TooManyPatterns { given, limit: PatternID::LIMIT });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}