{
  "name": "regex_automata::util::alphabet::{impl#9}::default",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:689:5:691:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions or ranges: n/a (no inputs are required for the default function)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_class_set = ByteClassSet::default();",
                "}"
              ],
              "oracle": [
                "    assert!(byte_class_set == ByteClassSet::empty());"
              ],
              "code": [
                "{",
                "    let byte_class_set = ByteClassSet::default();",
                "    assert!(byte_class_set == ByteClassSet::empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_class_set = ByteClassSet::empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_class_set, ByteClassSet(ByteSet([false; 256])));",
                "    assert!(byte_class_set.0.bits.eq(&BitSet::default()));",
                "    assert!(byte_class_set.0.0.iter().all(|&bit| !bit));",
                "    assert_eq!(byte_class_set.0.0.len(), 256);",
                "    assert_eq!(byte_class_set.0.0.iter().filter(|&&bit| bit).count(), 0);"
              ],
              "code": [
                "{",
                "    let byte_class_set = ByteClassSet::empty();",
                "    assert_eq!(byte_class_set, ByteClassSet(ByteSet([false; 256])));",
                "    assert!(byte_class_set.0.bits.eq(&BitSet::default()));",
                "    assert!(byte_class_set.0.0.iter().all(|&bit| !bit));",
                "    assert_eq!(byte_class_set.0.0.len(), 256);",
                "    assert_eq!(byte_class_set.0.0.iter().filter(|&&bit| bit).count(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}