{
  "name": "regex_lite::hir::{impl#0}::default",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": true,
  "loc": "regex-lite/src/hir/mod.rs:114:5:116:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config { nest_limit: 50, flags: Flags::default() }\n"
      ],
      "input_infer": "nest_limit: 0 to 100 (inclusive), flags: Flags { case_insensitive: true/false, multi_line: true/false, dot_matches_new_line: true/false, swap_greed: true/false, crlf: true/false, ignore_whitespace: true/false }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let _ = config; // This is to use the config variable and avoid warnings.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let _ = config; // This is to use the config variable and avoid warnings.",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 0, flags: Flags::default() };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    let config = Config::default();",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 0, flags: Flags::default() };",
                "    let _ = config;",
                "    let config = Config::default();",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 100, flags: Flags::default() };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 100, flags: Flags::default() };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { case_insensitive: true, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "    assert_eq!(Config::default().flags.case_insensitive, false);",
                "    assert_eq!(Config::default().flags.multi_line, false);",
                "    assert_eq!(Config::default().flags.dot_matches_new_line, false);",
                "    assert_eq!(Config::default().flags.swap_greed, false);",
                "    assert_eq!(Config::default().flags.crlf, false);",
                "    assert_eq!(Config::default().flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { case_insensitive: true, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "    assert_eq!(Config::default().flags.case_insensitive, false);",
                "    assert_eq!(Config::default().flags.multi_line, false);",
                "    assert_eq!(Config::default().flags.dot_matches_new_line, false);",
                "    assert_eq!(Config::default().flags.swap_greed, false);",
                "    assert_eq!(Config::default().flags.crlf, false);",
                "    assert_eq!(Config::default().flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { case_insensitive: false, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { case_insensitive: false, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { multi_line: true, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { multi_line: true, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { multi_line: false, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "    assert!(Config::default().flags.multi_line == false);",
                "    assert!(Config::default().flags.case_insensitive == false);",
                "    assert!(Config::default().flags.dot_matches_new_line == false);",
                "    assert!(Config::default().flags.swap_greed == false);",
                "    assert!(Config::default().flags.crlf == false);",
                "    assert!(Config::default().flags.ignore_whitespace == false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { multi_line: false, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "    assert!(Config::default().flags.multi_line == false);",
                "    assert!(Config::default().flags.case_insensitive == false);",
                "    assert!(Config::default().flags.dot_matches_new_line == false);",
                "    assert!(Config::default().flags.swap_greed == false);",
                "    assert!(Config::default().flags.crlf == false);",
                "    assert!(Config::default().flags.ignore_whitespace == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { dot_matches_new_line: true, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert!(Config::default().flags == Flags::default());"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { dot_matches_new_line: true, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert!(Config::default().flags == Flags::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { dot_matches_new_line: false, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { dot_matches_new_line: false, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { swap_greed: true, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, true);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { swap_greed: true, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, true);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { swap_greed: false, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    let config = Config::default();",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags, Flags::default());",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { swap_greed: false, ..Flags::default() } };",
                "    let _ = config;",
                "    let config = Config::default();",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags, Flags::default());",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { crlf: true, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { crlf: true, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { crlf: false, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { crlf: false, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(Config::default().nest_limit, 50);",
                "    assert_eq!(Config::default().flags, Flags::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { ignore_whitespace: true, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.ignore_whitespace, true);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { ignore_whitespace: true, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.ignore_whitespace, true);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { ignore_whitespace: false, ..Flags::default() } };",
                "    let _ = config;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut config = Config { nest_limit: 50, flags: Flags { ignore_whitespace: false, ..Flags::default() } };",
                "    let _ = config;",
                "    assert_eq!(config.nest_limit, 50);",
                "    assert_eq!(config.flags.case_insensitive, false);",
                "    assert_eq!(config.flags.multi_line, false);",
                "    assert_eq!(config.flags.dot_matches_new_line, false);",
                "    assert_eq!(config.flags.swap_greed, false);",
                "    assert_eq!(config.flags.crlf, false);",
                "    assert_eq!(config.flags.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}