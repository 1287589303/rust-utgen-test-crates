{
  "name": "regex_automata::util::int::{impl#1}::low_u8",
  "mod_info": {
    "name": "util::int",
    "loc": "regex-automata/src/util/mod.rs:51:1:51:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/int.rs:69:5:71:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self as u8\n"
      ],
      "input_infer": "Test input conditions or ranges: input values for self between 0 and 65535 (inclusive) for valid u16 conversion, and boundary cases such as 0 and 65535 specifically.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 0;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (value & 0xFF) as u8);",
                "    assert_eq!(result, (u16::from(value) as u8));",
                "    assert_eq!(result, (0u16 as u8));",
                "    assert_eq!(result, (u16::MAX as u8));",
                "    assert_eq!(result, (value.low_u8()));",
                "    assert_eq!(result, (value as u8));",
                "    assert_eq!(result, (value.wrapping_neg() as u8));"
              ],
              "code": [
                "{",
                "    let value: u16 = 0;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (value & 0xFF) as u8);",
                "    assert_eq!(result, (u16::from(value) as u8));",
                "    assert_eq!(result, (0u16 as u8));",
                "    assert_eq!(result, (u16::MAX as u8));",
                "    assert_eq!(result, (value.low_u8()));",
                "    assert_eq!(result, (value as u8));",
                "    assert_eq!(result, (value.wrapping_neg() as u8));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 255;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 255);"
              ],
              "code": [
                "{",
                "    let value: u16 = 255;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u16 = 65535;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 255);",
                "    assert_eq!(result, (value & 0xFF) as u8);",
                "    assert_eq!(result, 65535 as u8);",
                "    assert_eq!(result, u8::from(u16::MAX));",
                "    assert_eq!(result, (value % 256) as u8);",
                "    assert_eq!(result, value.low_u8());",
                "    assert_eq!(result, value & 0xFF);"
              ],
              "code": [
                "{",
                "    let value: u16 = 65535;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 255);",
                "    assert_eq!(result, (value & 0xFF) as u8);",
                "    assert_eq!(result, 65535 as u8);",
                "    assert_eq!(result, u8::from(u16::MAX));",
                "    assert_eq!(result, (value % 256) as u8);",
                "    assert_eq!(result, value.low_u8());",
                "    assert_eq!(result, value & 0xFF);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}