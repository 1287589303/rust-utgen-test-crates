{
  "name": "regex_automata::util::alphabet::{impl#2}::alphabet_len",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:321:5:326:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: usize::from(self.0[255]) + 1 + 1\n"
      ],
      "input_infer": "Input conditions: self.0 must be an array of 256 u8 values, with at least one of the values in the array to test for maximum and minimum cases (e.g., self.0[255] = 0, self.0[255] = 255, self.0[255] = any valid u8 value).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_classes = ByteClasses([0; 256]);",
                "    let result = byte_classes.alphabet_len();",
                "}"
              ],
              "oracle": [
                "    let byte_classes = ByteClasses([0; 256]); assert_eq!(byte_classes.alphabet_len(), 1);",
                "    let byte_classes = ByteClasses([1; 256]); assert_eq!(byte_classes.alphabet_len(), 2);",
                "    let byte_classes = ByteClasses([5; 256]); assert_eq!(byte_classes.alphabet_len(), 7);",
                "    let byte_classes = ByteClasses([255; 256]); assert_eq!(byte_classes.alphabet_len(), 257);",
                "    let byte_classes = ByteClasses([100; 256]); assert_eq!(byte_classes.alphabet_len(), 102);"
              ],
              "code": [
                "{",
                "    let byte_classes = ByteClasses([0; 256]);",
                "    let result = byte_classes.alphabet_len();",
                "    let byte_classes = ByteClasses([0; 256]); assert_eq!(byte_classes.alphabet_len(), 1);",
                "    let byte_classes = ByteClasses([1; 256]); assert_eq!(byte_classes.alphabet_len(), 2);",
                "    let byte_classes = ByteClasses([5; 256]); assert_eq!(byte_classes.alphabet_len(), 7);",
                "    let byte_classes = ByteClasses([255; 256]); assert_eq!(byte_classes.alphabet_len(), 257);",
                "    let byte_classes = ByteClasses([100; 256]); assert_eq!(byte_classes.alphabet_len(), 102);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses([0; 255]);",
                "    byte_classes.0[255] = 0;",
                "    let result = byte_classes.alphabet_len();",
                "}"
              ],
              "oracle": [
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 0;",
                "    assert_eq!(byte_classes.alphabet_len(), 1);",
                "    ",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 5;",
                "    assert_eq!(byte_classes.alphabet_len(), 7);",
                "    ",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 10;",
                "    assert_eq!(byte_classes.alphabet_len(), 12);",
                "    ",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = u8::MAX;",
                "    assert_eq!(byte_classes.alphabet_len(), u8::MAX as usize + 2);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses([0; 255]);",
                "    byte_classes.0[255] = 0;",
                "    let result = byte_classes.alphabet_len();",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 0;",
                "    assert_eq!(byte_classes.alphabet_len(), 1);",
                "    ",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 5;",
                "    assert_eq!(byte_classes.alphabet_len(), 7);",
                "    ",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 10;",
                "    assert_eq!(byte_classes.alphabet_len(), 12);",
                "    ",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = u8::MAX;",
                "    assert_eq!(byte_classes.alphabet_len(), u8::MAX as usize + 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 2;",
                "    let result = byte_classes.alphabet_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 2;",
                "    let result = byte_classes.alphabet_len();",
                "    assert_eq!(result, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 255;",
                "    let result = byte_classes.alphabet_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 257);"
              ],
              "code": [
                "{",
                "    let mut byte_classes = ByteClasses([0; 256]);",
                "    byte_classes.0[255] = 255;",
                "    let result = byte_classes.alphabet_len();",
                "    assert_eq!(result, 257);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}