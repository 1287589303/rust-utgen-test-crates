{
  "name": "regex_automata::util::search::{impl#14}::insert",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1225:5:1228:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid PatternID values ranging from 0 to capacity-1 where capacity is a non-negative integer, and edge cases include attempting to insert PatternID equal to capacity and insertions into an empty PatternSet and a full PatternSet.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    let pid = PatternID(0);",
                "    pattern_set.insert(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pattern_set.len(), 1);",
                "    assert!(pattern_set.contains(pid));",
                "    assert!(!pattern_set.is_empty());",
                "    assert!(!pattern_set.is_full());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert_eq!(pattern_set.which[0], true);",
                "    assert_eq!(pattern_set.insert(pid), false);",
                "    assert_eq!(pattern_set.len(), 1);"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    let pid = PatternID(0);",
                "    pattern_set.insert(pid);",
                "    assert_eq!(pattern_set.len(), 1);",
                "    assert!(pattern_set.contains(pid));",
                "    assert!(!pattern_set.is_empty());",
                "    assert!(!pattern_set.is_full());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert_eq!(pattern_set.which[0], true);",
                "    assert_eq!(pattern_set.insert(pid), false);",
                "    assert_eq!(pattern_set.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    for id in 0..capacity {",
                "        pattern_set.insert(PatternID(id));",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pattern_set.len(), capacity);",
                "    assert!(pattern_set.is_full());",
                "    for id in 0..capacity {",
                "    assert!(pattern_set.contains(PatternID(id)));",
                "    }",
                "    assert!(!pattern_set.is_empty());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert!(pattern_set.insert(PatternID(0)) == false);",
                "    assert!(pattern_set.insert(PatternID(1)) == false);",
                "    assert!(pattern_set.insert(PatternID(2)) == false);",
                "    assert!(pattern_set.insert(PatternID(3)) == false);",
                "    assert!(pattern_set.insert(PatternID(4)) == false);"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    for id in 0..capacity {",
                "        pattern_set.insert(PatternID(id));",
                "    }",
                "    assert_eq!(pattern_set.len(), capacity);",
                "    assert!(pattern_set.is_full());",
                "    for id in 0..capacity {",
                "    assert!(pattern_set.contains(PatternID(id)));",
                "    }",
                "    assert!(!pattern_set.is_empty());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert!(pattern_set.insert(PatternID(0)) == false);",
                "    assert!(pattern_set.insert(PatternID(1)) == false);",
                "    assert!(pattern_set.insert(PatternID(2)) == false);",
                "    assert!(pattern_set.insert(PatternID(3)) == false);",
                "    assert!(pattern_set.insert(PatternID(4)) == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    let pid = PatternID(capacity - 1);",
                "    pattern_set.insert(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pattern_set.len(), 1);",
                "    assert_eq!(pattern_set.contains(pid), true);",
                "    assert_eq!(pattern_set.is_full(), false);",
                "    assert_eq!(pattern_set.is_empty(), false);",
                "    assert_eq!(pattern_set.capacity(), capacity);"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    let pid = PatternID(capacity - 1);",
                "    pattern_set.insert(pid);",
                "    assert_eq!(pattern_set.len(), 1);",
                "    assert_eq!(pattern_set.contains(pid), true);",
                "    assert_eq!(pattern_set.is_full(), false);",
                "    assert_eq!(pattern_set.is_empty(), false);",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    let pid = PatternID(capacity);",
                "    pattern_set.insert(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pattern_set.len(), 0);",
                "    assert!(pattern_set.is_empty());",
                "    assert!(!pattern_set.is_full());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert!(matches!(pattern_set.try_insert(pid), Err(PatternSetInsertError { attempted: _, capacity: _ })));"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    let pid = PatternID(capacity);",
                "    pattern_set.insert(pid);",
                "    assert_eq!(pattern_set.len(), 0);",
                "    assert!(pattern_set.is_empty());",
                "    assert!(!pattern_set.is_full());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert!(matches!(pattern_set.try_insert(pid), Err(PatternSetInsertError { attempted: _, capacity: _ })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    for id in 0..capacity {",
                "        pattern_set.insert(PatternID(id));",
                "    }",
                "    let pid = PatternID(3); // This id is already inserted",
                "    pattern_set.insert(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pattern_set.len(), capacity);",
                "    assert_eq!(pattern_set.contains(PatternID(0)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(1)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(2)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(3)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(4)), true);",
                "    assert_eq!(pattern_set.insert(PatternID(3)), false);",
                "    assert_eq!(pattern_set.len(), capacity);",
                "    assert!(pattern_set.is_full());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert_eq!(pattern_set.is_empty(), false);"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut pattern_set = PatternSet::new(capacity);",
                "    for id in 0..capacity {",
                "        pattern_set.insert(PatternID(id));",
                "    }",
                "    let pid = PatternID(3); // This id is already inserted",
                "    pattern_set.insert(pid);",
                "    assert_eq!(pattern_set.len(), capacity);",
                "    assert_eq!(pattern_set.contains(PatternID(0)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(1)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(2)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(3)), true);",
                "    assert_eq!(pattern_set.contains(PatternID(4)), true);",
                "    assert_eq!(pattern_set.insert(PatternID(3)), false);",
                "    assert_eq!(pattern_set.len(), capacity);",
                "    assert!(pattern_set.is_full());",
                "    assert_eq!(pattern_set.capacity(), capacity);",
                "    assert_eq!(pattern_set.is_empty(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}