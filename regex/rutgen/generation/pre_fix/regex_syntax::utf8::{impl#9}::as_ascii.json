{
  "name": "regex_syntax::utf8::{impl#9}::as_ascii",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/utf8.rs:414:5:422:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_ascii() at line 415 is true\n",
        "expected return value/type: Some(Utf8Range::new(start, end))\n"
      ],
      "input_infer": "self.start and self.end must be within the range [0, 127] where start â‰¤ end.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0, end: 10 };",
                "    let result = range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 0);",
                "    assert_eq!(utf8_range.end, 10);",
                "    assert!(range.is_ascii());"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0, end: 10 };",
                "    let result = range.as_ascii();",
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 0);",
                "    assert_eq!(utf8_range.end, 10);",
                "    assert!(range.is_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 50, end: 70 };",
                "    let result = range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 50);",
                "    assert_eq!(utf8_range.end, 70);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 50, end: 70 };",
                "    let result = range.as_ascii();",
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 50);",
                "    assert_eq!(utf8_range.end, 70);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 120, end: 127 };",
                "    let result = range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 120);",
                "    assert_eq!(utf8_range.end, 127);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 120, end: 127 };",
                "    let result = range.as_ascii();",
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 120);",
                "    assert_eq!(utf8_range.end, 127);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 100, end: 100 };",
                "    let result = range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 100);",
                "    assert_eq!(utf8_range.end, 100);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 100, end: 100 };",
                "    let result = range.as_ascii();",
                "    assert!(result.is_some());",
                "    let utf8_range = result.unwrap();",
                "    assert_eq!(utf8_range.start, 100);",
                "    assert_eq!(utf8_range.end, 100);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0, end: 0 };",
                "    let result = range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), Utf8Range::new(0, 0));",
                "    assert!(ScalarRange { start: 0, end: 0x7F }.is_ascii());",
                "    assert!(result.unwrap().matches(0));",
                "    assert!(result.unwrap().matches(0x7F));",
                "    assert!(!result.unwrap().matches(0x80));"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0, end: 0 };",
                "    let result = range.as_ascii();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), Utf8Range::new(0, 0));",
                "    assert!(ScalarRange { start: 0, end: 0x7F }.is_ascii());",
                "    assert!(result.unwrap().matches(0));",
                "    assert!(result.unwrap().matches(0x7F));",
                "    assert!(!result.unwrap().matches(0x80));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_ascii() at line 415 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "ScalarRange with start > 127 and end > 127, or start > end, or start or end outside the range 0 to 0x10FFFF\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 128, end: 255 };",
                "    let result = scalar_range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 128, end: 255 };",
                "    let result = scalar_range.as_ascii();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0, end: 200 };",
                "    let result = scalar_range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0, end: 200 };",
                "    let result = scalar_range.as_ascii();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 255, end: 128 };",
                "    let result = scalar_range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 255, end: 128 };",
                "    let result = scalar_range.as_ascii();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0x110000, end: 0x110000 };",
                "    let result = scalar_range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0x110000, end: 0x110000 };",
                "    let result = scalar_range.as_ascii();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scalar_range = ScalarRange { start: 0, end: 0x110000 };",
                "    let result = scalar_range.as_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let scalar_range = ScalarRange { start: 0, end: 0x110000 };",
                "    let result = scalar_range.as_ascii();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}