{
  "name": "regex_automata::util::prefilter::memmem::{impl#1}::prefix",
  "mod_info": {
    "name": "util::prefilter::memmem",
    "loc": "regex-automata/src/util/prefilter/mod.rs:39:1:39:12"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/memmem.rs:51:5:65:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: haystack[span].starts_with(needle) at line 59 is true\n",
        "expected return value/type: Some(Span { end: span.start + needle.len(), ..span })\n"
      ],
      "input_infer": "haystack: non-empty &[u8]; span: Span { start: 0, end: haystack.len() }; needle: non-empty slice of bytes that exists within haystack at span\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello, world!\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"hello\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    let haystack: &[u8] = b\"hello, world!\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem { finder: memchr::memmem::Finder::new(b\"hello\") };",
                "    let result = memmem.prefix(haystack, span);",
                "    let expected = Some(Span { start: 0, end: 5 });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello, world!\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"hello\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "    let haystack: &[u8] = b\"hello, world!\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem { finder: memchr::memmem::Finder::new(b\"hello\") };",
                "    let result = memmem.prefix(haystack, span);",
                "    let expected = Some(Span { start: 0, end: 5 });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"rust is fun!\";",
                "    let span = Span { start: 0, end: 14 }; // haystack length",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"rust\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memmem.prefix(haystack, span), Some(Span { start: 0, end: 4 }));"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"rust is fun!\";",
                "    let span = Span { start: 0, end: 14 }; // haystack length",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"rust\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "    assert_eq!(memmem.prefix(haystack, span), Some(Span { start: 0, end: 4 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"the quick brown fox\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"quick\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    let haystack: &[u8] = b\"the quick brown fox\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem { finder: memchr::memmem::Finder::new(b\"quick\") };",
                "    let result = memmem.prefix(haystack, span);",
                "    assert!(result.is_some());",
                "    let expected_span = Span { start: 0, end: 5 };",
                "    assert_eq!(result, Some(expected_span));"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"the quick brown fox\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"quick\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "    let haystack: &[u8] = b\"the quick brown fox\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem { finder: memchr::memmem::Finder::new(b\"quick\") };",
                "    let result = memmem.prefix(haystack, span);",
                "    assert!(result.is_some());",
                "    let expected_span = Span { start: 0, end: 5 };",
                "    assert_eq!(result, Some(expected_span));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"end with the needle\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"needle\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_, Some(Span { start: 0, end: 6 }));"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"end with the needle\";",
                "    let span = Span { start: 0, end: haystack.len() };",
                "    let memmem = Memmem {",
                "        finder: memchr::memmem::Finder::new(b\"needle\"),",
                "    };",
                "    let _ = memmem.prefix(haystack, span);",
                "    assert_eq!(_, Some(Span { start: 0, end: 6 }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: haystack[span].starts_with(needle) at line 59 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "haystack must be a non-empty byte array where span.start < span.end and span is a valid range within haystack, with needle being a byte sequence that is not a prefix of haystack[span].\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let span = Span { start: 0, end: 5 }; // \"hello\"",
                "    ",
                "    let memmem = Memmem {",
                "        #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
                "        _unused: (),",
                "        #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
                "        finder: memchr::memmem::Finder::new(b\"world\"), // needle \"world\"",
                "    };",
                "    ",
                "    let result = memmem.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"hello world\";",
                "    let span = Span { start: 0, end: 5 }; // \"hello\"",
                "    ",
                "    let memmem = Memmem {",
                "        #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
                "        _unused: (),",
                "        #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
                "        finder: memchr::memmem::Finder::new(b\"world\"), // needle \"world\"",
                "    };",
                "    ",
                "    let result = memmem.prefix(haystack, span);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"x\"; // Non-empty haystack",
                "    let span = Span { start: 0, end: 1 }; // \"x\"",
                "    ",
                "    let memmem = Memmem {",
                "        #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
                "        _unused: (),",
                "        #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
                "        finder: memchr::memmem::Finder::new(b\"y\"), // needle \"y\" not in \"x\"",
                "    };",
                "    ",
                "    let result = memmem.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"x\"; // Non-empty haystack",
                "    let span = Span { start: 0, end: 1 }; // \"x\"",
                "    ",
                "    let memmem = Memmem {",
                "        #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
                "        _unused: (),",
                "        #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
                "        finder: memchr::memmem::Finder::new(b\"y\"), // needle \"y\" not in \"x\"",
                "    };",
                "    ",
                "    let result = memmem.prefix(haystack, span);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack: &[u8] = b\"test string\";",
                "    let span = Span { start: 0, end: 4 }; // \"test\"",
                "    ",
                "    let memmem = Memmem {",
                "        #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
                "        _unused: (),",
                "        #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
                "        finder: memchr::memmem::Finder::new(b\"string\"), // needle \"string\" not in \"test\"",
                "    };",
                "    ",
                "    let result = memmem.prefix(haystack, span);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let haystack: &[u8] = b\"test string\";",
                "    let span = Span { start: 0, end: 4 }; // \"test\"",
                "    ",
                "    let memmem = Memmem {",
                "        #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
                "        _unused: (),",
                "        #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
                "        finder: memchr::memmem::Finder::new(b\"string\"), // needle \"string\" not in \"test\"",
                "    };",
                "    ",
                "    let result = memmem.prefix(haystack, span);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}