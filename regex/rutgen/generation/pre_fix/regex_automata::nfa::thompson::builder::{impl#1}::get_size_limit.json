{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::get_size_limit",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1288:5:1290:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.size_limit\n"
      ],
      "input_infer": "self.size_limit inputs: None, Some(0), Some(1), Some(usize::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let builder = Builder::default();",
                "    let limit = builder.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    let builder = Builder::default();",
                "    let limit = builder.get_size_limit();",
                "    assert_eq!(limit, None);"
              ],
              "code": [
                "{",
                "    let builder = Builder::default();",
                "    let limit = builder.get_size_limit();",
                "    let builder = Builder::default();",
                "    let limit = builder.get_size_limit();",
                "    assert_eq!(limit, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.set_size_limit(Some(0)).unwrap();",
                "    let limit = builder.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(limit, Some(0));",
                "    ",
                "    builder.set_size_limit(None).unwrap();",
                "    let limit = builder.get_size_limit();",
                "    assert_eq!(limit, None);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.set_size_limit(Some(0)).unwrap();",
                "    let limit = builder.get_size_limit();",
                "    assert_eq!(limit, Some(0));",
                "    ",
                "    builder.set_size_limit(None).unwrap();",
                "    let limit = builder.get_size_limit();",
                "    assert_eq!(limit, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.set_size_limit(Some(1)).unwrap();",
                "    let limit = builder.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(limit, Some(1));",
                "    builder.set_size_limit(None).unwrap();",
                "    let limit_none = builder.get_size_limit();",
                "    assert_eq!(limit_none, None);",
                "    builder.set_size_limit(Some(10)).unwrap();",
                "    let limit_ten = builder.get_size_limit();",
                "    assert_eq!(limit_ten, Some(10));",
                "    builder.set_size_limit(Some(5)).unwrap();",
                "    let limit_five = builder.get_size_limit();",
                "    assert_eq!(limit_five, Some(5));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.set_size_limit(Some(1)).unwrap();",
                "    let limit = builder.get_size_limit();",
                "    assert_eq!(limit, Some(1));",
                "    builder.set_size_limit(None).unwrap();",
                "    let limit_none = builder.get_size_limit();",
                "    assert_eq!(limit_none, None);",
                "    builder.set_size_limit(Some(10)).unwrap();",
                "    let limit_ten = builder.get_size_limit();",
                "    assert_eq!(limit_ten, Some(10));",
                "    builder.set_size_limit(Some(5)).unwrap();",
                "    let limit_five = builder.get_size_limit();",
                "    assert_eq!(limit_five, Some(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.set_size_limit(Some(usize::MAX)).unwrap();",
                "    let limit = builder.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(limit, Some(usize::MAX));",
                "    assert!(limit.is_some());",
                "    builder.set_size_limit(None).unwrap();",
                "    let limit_none = builder.get_size_limit();",
                "    assert_eq!(limit_none, None);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::default();",
                "    builder.set_size_limit(Some(usize::MAX)).unwrap();",
                "    let limit = builder.get_size_limit();",
                "    assert_eq!(limit, Some(usize::MAX));",
                "    assert!(limit.is_some());",
                "    builder.set_size_limit(None).unwrap();",
                "    let limit_none = builder.get_size_limit();",
                "    assert_eq!(limit_none, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}