{
  "name": "regex_syntax::hir::{impl#17}::ranges",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1388:5:1390:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.set.intervals()\n"
      ],
      "input_infer": "self.set must be a non-empty IntervalSet with valid ClassBytesRange values where each start is less than or equal to its corresponding end, and handles edge cases like overlapping or contiguous ranges; test with 0-255 for valid ranges and empty sets for boundary cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 255 };",
                "    let interval_set = IntervalSet::new(vec![range]);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "}"
              ],
              "oracle": [
                "    let range = ClassBytesRange { start: 0, end: 255 };",
                "    let interval_set = IntervalSet::new(vec![range]);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 0, end: 255 }]);",
                "    ",
                "    let empty_interval_set = IntervalSet::new(vec![]);",
                "    let empty_class_bytes = ClassBytes { set: empty_interval_set };",
                "    assert_eq!(empty_class_bytes.ranges(), &[]);",
                "    ",
                "    let range1 = ClassBytesRange { start: 10, end: 20 };",
                "    let range2 = ClassBytesRange { start: 30, end: 40 };",
                "    let interval_set_with_ranges = IntervalSet::new(vec![range1, range2]);",
                "    let class_bytes_with_ranges = ClassBytes { set: interval_set_with_ranges };",
                "    assert_eq!(class_bytes_with_ranges.ranges(), &[ClassBytesRange { start: 10, end: 20 }, ClassBytesRange { start: 30, end: 40 }]);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange { start: 0, end: 255 };",
                "    let interval_set = IntervalSet::new(vec![range]);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "    let range = ClassBytesRange { start: 0, end: 255 };",
                "    let interval_set = IntervalSet::new(vec![range]);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    assert_eq!(class_bytes.ranges(), &[ClassBytesRange { start: 0, end: 255 }]);",
                "    ",
                "    let empty_interval_set = IntervalSet::new(vec![]);",
                "    let empty_class_bytes = ClassBytes { set: empty_interval_set };",
                "    assert_eq!(empty_class_bytes.ranges(), &[]);",
                "    ",
                "    let range1 = ClassBytesRange { start: 10, end: 20 };",
                "    let range2 = ClassBytesRange { start: 30, end: 40 };",
                "    let interval_set_with_ranges = IntervalSet::new(vec![range1, range2]);",
                "    let class_bytes_with_ranges = ClassBytes { set: interval_set_with_ranges };",
                "    assert_eq!(class_bytes_with_ranges.ranges(), &[ClassBytesRange { start: 10, end: 20 }, ClassBytesRange { start: 30, end: 40 }]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 100 },",
                "        ClassBytesRange { start: 101, end: 200 },",
                "        ClassBytesRange { start: 201, end: 255 },",
                "    ];",
                "    let interval_set = IntervalSet::new(ranges);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), &[",
                "    ClassBytesRange { start: 0, end: 100 },",
                "    ClassBytesRange { start: 101, end: 200 },",
                "    ClassBytesRange { start: 201, end: 255 },",
                "    ]);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 100 },",
                "        ClassBytesRange { start: 101, end: 200 },",
                "        ClassBytesRange { start: 201, end: 255 },",
                "    ];",
                "    let interval_set = IntervalSet::new(ranges);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "    assert_eq!(class_bytes.ranges(), &[",
                "    ClassBytesRange { start: 0, end: 100 },",
                "    ClassBytesRange { start: 101, end: 200 },",
                "    ClassBytesRange { start: 201, end: 255 },",
                "    ]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 100 },",
                "        ClassBytesRange { start: 100, end: 200 },",
                "    ];",
                "    let interval_set = IntervalSet::new(ranges);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), class_bytes.set.intervals());",
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 100 });",
                "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 100, end: 200 });",
                "    assert!(class_bytes.ranges()[0].start <= class_bytes.ranges()[0].end);",
                "    assert!(class_bytes.ranges()[1].start <= class_bytes.ranges()[1].end);"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 100 },",
                "        ClassBytesRange { start: 100, end: 200 },",
                "    ];",
                "    let interval_set = IntervalSet::new(ranges);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "    assert_eq!(class_bytes.ranges(), class_bytes.set.intervals());",
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 100 });",
                "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 100, end: 200 });",
                "    assert!(class_bytes.ranges()[0].start <= class_bytes.ranges()[0].end);",
                "    assert!(class_bytes.ranges()[1].start <= class_bytes.ranges()[1].end);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 200 },",
                "        ClassBytesRange { start: 100, end: 255 },",
                "    ];",
                "    let interval_set = IntervalSet::new(ranges);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), class_bytes.set.intervals());"
              ],
              "code": [
                "{",
                "    let ranges = vec![",
                "        ClassBytesRange { start: 0, end: 200 },",
                "        ClassBytesRange { start: 100, end: 255 },",
                "    ];",
                "    let interval_set = IntervalSet::new(ranges);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "    assert_eq!(class_bytes.ranges(), class_bytes.set.intervals());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let interval_set: IntervalSet<ClassBytesRange> = IntervalSet::new(vec![]);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_bytes.ranges(), &[]);"
              ],
              "code": [
                "{",
                "    let interval_set: IntervalSet<ClassBytesRange> = IntervalSet::new(vec![]);",
                "    let class_bytes = ClassBytes { set: interval_set };",
                "    class_bytes.ranges();",
                "    assert_eq!(class_bytes.ranges(), &[]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}