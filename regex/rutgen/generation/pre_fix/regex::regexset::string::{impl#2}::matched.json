{
  "name": "regex::regexset::string::{impl#2}::matched",
  "mod_info": {
    "name": "regexset::string",
    "loc": "src/regexset/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regexset/string.rs:524:5:526:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "index: 0 to len - 1, where len is the number of regexes in the original `RegexSet` for valid checks; index >= len for panic conditions.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matches.matched(0), false);",
                "    assert_eq!(matches.matched(1), true);",
                "    assert_panics!(matches.matched(2));",
                "    assert_eq!(matches.len(), 2);",
                "    assert_eq!(matches.matched(0), false);",
                "    assert_eq!(matches.matched(1), true);"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(0);",
                "    assert_eq!(matches.matched(0), false);",
                "    assert_eq!(matches.matched(1), true);",
                "    assert_panics!(matches.matched(2));",
                "    assert_eq!(matches.len(), 2);",
                "    assert_eq!(matches.matched(0), false);",
                "    assert_eq!(matches.matched(1), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(1);",
                "}"
              ],
              "oracle": [
                "    assert!(matches.matched(1));",
                "    assert!(!matches.matched(0));",
                "    let index_out_of_bounds = matches.len();",
                "    assert_panics!(matches.matched(index_out_of_bounds));",
                "    assert_panics!(matches.matched(index_out_of_bounds + 1));"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(1);",
                "    assert!(matches.matched(1));",
                "    assert!(!matches.matched(0));",
                "    let index_out_of_bounds = matches.len();",
                "    assert_panics!(matches.matched(index_out_of_bounds));",
                "    assert_panics!(matches.matched(index_out_of_bounds + 1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(2);",
                "}"
              ],
              "oracle": [
                "    assert!(matches.matched(2).is_err());",
                "    assert!(std::panic::catch_unwind(|| matches.matched(2)).is_err());",
                "    assert_eq!(matches.len(), 2);",
                "    assert!(matches.matched(0) == false);",
                "    assert!(matches.matched(1) == true);"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(2);",
                "    assert!(matches.matched(2).is_err());",
                "    assert!(std::panic::catch_unwind(|| matches.matched(2)).is_err());",
                "    assert_eq!(matches.len(), 2);",
                "    assert!(matches.matched(0) == false);",
                "    assert!(matches.matched(1) == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(2);",
                "}"
              ],
              "oracle": [
                "    assert_panics!(|| { let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap(); let matches = set.matches(\"example.com\"); matches.matched(2); });"
              ],
              "code": [
                "{",
                "    let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap();",
                "    let matches = set.matches(\"example.com\");",
                "    matches.matched(2);",
                "    assert_panics!(|| { let set = RegexSet::new([r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]).unwrap(); let matches = set.matches(\"example.com\"); matches.matched(2); });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}