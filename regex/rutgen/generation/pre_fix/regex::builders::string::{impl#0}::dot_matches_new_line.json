{
  "name": "regex::builders::string::{impl#0}::dot_matches_new_line",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:392:9:398:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "pattern: any valid regex string; yes: boolean (true/false) for dot_matches_new_line function; additional flags and configurations (case_insensitive, multi_line, etc.) may be included; string with line terminators or edge cases for matching expected output.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .dot_matches_new_line(true)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    let _ = re.find(hay);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.builder.pats.len(), 1);",
                "    assert!(re.builder.metac.dot_matches_new_line);",
                "    assert_eq!(re.builder.pats[0], r\"foo.bar\");",
                "    assert_eq!(hay, \"foo\\nbar\");",
                "    assert!(re.find(hay).is_some());",
                "    assert_eq!(re.find(hay).map(|m| m.as_str()), Some(\"foo\\nbar\"));"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .dot_matches_new_line(true)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    let _ = re.find(hay);",
                "    assert_eq!(re.builder.pats.len(), 1);",
                "    assert!(re.builder.metac.dot_matches_new_line);",
                "    assert_eq!(re.builder.pats[0], r\"foo.bar\");",
                "    assert_eq!(hay, \"foo\\nbar\");",
                "    assert!(re.find(hay).is_some());",
                "    assert_eq!(re.find(hay).map(|m| m.as_str()), Some(\"foo\\nbar\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .dot_matches_new_line(false)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    let _ = re.find(hay);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.dot_matches_new_line(false), &mut RegexBuilder);",
                "    assert!(re.find(hay).is_none());"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .dot_matches_new_line(false)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    let _ = re.find(hay);",
                "    assert_eq!(re.dot_matches_new_line(false), &mut RegexBuilder);",
                "    assert!(re.find(hay).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .dot_matches_new_line(true)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"foobar\";",
                "    let _ = re.find(hay);",
                "}"
              ],
              "oracle": [
                "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    assert_eq!(Some(\"foo\\nbar\"), re.find(hay).map(|m| m.as_str()));",
                "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(false).build().unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    assert_eq!(None, re.find(hay));",
                "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
                "    let hay = \"fooxbar\";",
                "    assert_eq!(Some(\"fooxbar\"), re.find(hay).map(|m| m.as_str()));"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .dot_matches_new_line(true)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"foobar\";",
                "    let _ = re.find(hay);",
                "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    assert_eq!(Some(\"foo\\nbar\"), re.find(hay).map(|m| m.as_str()));",
                "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(false).build().unwrap();",
                "    let hay = \"foo\\nbar\";",
                "    assert_eq!(None, re.find(hay));",
                "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
                "    let hay = \"fooxbar\";",
                "    assert_eq!(Some(\"fooxbar\"), re.find(hay).map(|m| m.as_str()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .case_insensitive(true)",
                "        .multi_line(true)",
                "        .dot_matches_new_line(true)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"FOO\\nBAR\";",
                "    let _ = re.find(hay);",
                "}"
              ],
              "oracle": [
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "    .case_insensitive(true)",
                "    .multi_line(true)",
                "    .dot_matches_new_line(true)",
                "    .build()",
                "    .unwrap();",
                "    assert_eq!(Some(\"FOO\\nBAR\"), re.find(\"FOO\\nBAR\").map(|m| m.as_str()));"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "        .case_insensitive(true)",
                "        .multi_line(true)",
                "        .dot_matches_new_line(true)",
                "        .build()",
                "        .unwrap();",
                "    let hay = \"FOO\\nBAR\";",
                "    let _ = re.find(hay);",
                "    let re = RegexBuilder::new(r\"foo.bar\")",
                "    .case_insensitive(true)",
                "    .multi_line(true)",
                "    .dot_matches_new_line(true)",
                "    .build()",
                "    .unwrap();",
                "    assert_eq!(Some(\"FOO\\nBAR\"), re.find(\"FOO\\nBAR\").map(|m| m.as_str()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}