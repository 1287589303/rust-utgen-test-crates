{
  "name": "regex::builders::string::{impl#1}::multi_line",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:940:9:943:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid boolean values for 'yes' (true or false), and a non-empty slice of valid regex patterns as input to `RegexSetBuilder::new`\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    regex_set_builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    let regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    assert_eq!(regex_set_builder.multi_line(true), &mut regex_set_builder);"
              ],
              "code": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    regex_set_builder.multi_line(true);",
                "    let regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    assert_eq!(regex_set_builder.multi_line(true), &mut regex_set_builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    regex_set_builder.multi_line(false);",
                "}"
              ],
              "oracle": [
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    assert_eq!(regex_set_builder.multi_line(false), &mut regex_set_builder);"
              ],
              "code": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    regex_set_builder.multi_line(false);",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\"]);",
                "    assert_eq!(regex_set_builder.multi_line(false), &mut regex_set_builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"\"]);",
                "    regex_set_builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    regex_set_builder.multi_line(true);",
                "    assert_eq!(regex_set_builder.builder.syntaxc.is_multi_line(), true);",
                "    regex_set_builder.multi_line(false);",
                "    assert_eq!(regex_set_builder.builder.syntaxc.is_multi_line(), false);",
                "    regex_set_builder.multi_line(true);",
                "    let re = regex_set_builder.build().unwrap();",
                "    assert!(re.is_match(\"\\nfoo\\n\"));",
                "    assert!(!re.is_match(\"foo\"));",
                "    assert!(re.is_match(\"foo\\n\"));",
                "    assert!(re.is_match(\"bar\\nfoo\\nbaz\"));"
              ],
              "code": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"\"]);",
                "    regex_set_builder.multi_line(true);",
                "    regex_set_builder.multi_line(true);",
                "    assert_eq!(regex_set_builder.builder.syntaxc.is_multi_line(), true);",
                "    regex_set_builder.multi_line(false);",
                "    assert_eq!(regex_set_builder.builder.syntaxc.is_multi_line(), false);",
                "    regex_set_builder.multi_line(true);",
                "    let re = regex_set_builder.build().unwrap();",
                "    assert!(re.is_match(\"\\nfoo\\n\"));",
                "    assert!(!re.is_match(\"foo\"));",
                "    assert!(re.is_match(\"foo\\n\"));",
                "    assert!(re.is_match(\"bar\\nfoo\\nbaz\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^.*$\", r\"\\d+\"]);",
                "    regex_set_builder.multi_line(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_set_builder.builder.syntaxc.multi_line, false);"
              ],
              "code": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^.*$\", r\"\\d+\"]);",
                "    regex_set_builder.multi_line(false);",
                "    assert_eq!(regex_set_builder.builder.syntaxc.multi_line, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\", \"^bar$\"]);",
                "    regex_set_builder.multi_line(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex_set_builder.builder.syntaxc.multi_line, true);"
              ],
              "code": [
                "{",
                "    let mut regex_set_builder = RegexSetBuilder::new(vec![\"^foo$\", \"^bar$\"]);",
                "    regex_set_builder.multi_line(true);",
                "    assert_eq!(regex_set_builder.builder.syntaxc.multi_line, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}