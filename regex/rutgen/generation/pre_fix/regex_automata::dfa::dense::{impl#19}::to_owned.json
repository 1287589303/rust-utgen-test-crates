{
  "name": "regex_automata::dfa::dense::{impl#19}::to_owned",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4175:5:4185:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StartTable {\n            table: self.table.as_ref().to_vec(),\n            kind: self.kind,\n            start_map: self.start_map.clone(),\n            stride: self.stride,\n            pattern_len: self.pattern_len,\n            universal_start_unanchored: self.universal_start_unanchored,\n            universal_start_anchored: self.universal_start_anchored,\n        }\n"
      ],
      "input_infer": "T: Vec<u32>, kind: StartKind (both, unanchored, anchored), start_map: StartByteMap (valid byte mappings), stride: usize (0 to the maximum possible based on patterns), pattern_len: Option<usize> (none or 0 to arbitrary maximum), universal_start_unanchored: Option<StateID> (valid state ID or none), universal_start_anchored: Option<StateID> (valid state ID or none)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u32> = vec![1, 2, 3, 4, 5, 6, 7, 8];",
                "    let start_map = StartByteMap { ",
                "        map: [Start::default(); 256] ",
                "    };",
                "    let stride = 4;",
                "    let pattern_len = Some(2);",
                "    let universal_start_unanchored = Some(StateID(1));",
                "    let universal_start_anchored = Some(StateID(2));",
                "    ",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride,",
                "        pattern_len,",
                "        universal_start_unanchored,",
                "        universal_start_anchored,",
                "    };",
                "    ",
                "    let owned_table = start_table.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(owned_table.table, start_table.table.clone());",
                "    assert_eq!(owned_table.kind, startTable.kind);",
                "    assert_eq!(owned_table.start_map, start_table.start_map);",
                "    assert_eq!(owned_table.stride, start_table.stride);",
                "    assert_eq!(owned_table.pattern_len, start_table.pattern_len);",
                "    assert_eq!(owned_table.universal_start_unanchored, start_table.universal_start_unanchored);",
                "    assert_eq!(owned_table.universal_start_anchored, start_table.universal_start_anchored);"
              ],
              "code": [
                "{",
                "    let table: Vec<u32> = vec![1, 2, 3, 4, 5, 6, 7, 8];",
                "    let start_map = StartByteMap { ",
                "        map: [Start::default(); 256] ",
                "    };",
                "    let stride = 4;",
                "    let pattern_len = Some(2);",
                "    let universal_start_unanchored = Some(StateID(1));",
                "    let universal_start_anchored = Some(StateID(2));",
                "    ",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Both,",
                "        start_map,",
                "        stride,",
                "        pattern_len,",
                "        universal_start_unanchored,",
                "        universal_start_anchored,",
                "    };",
                "    ",
                "    let owned_table = start_table.to_owned();",
                "    assert_eq!(owned_table.table, start_table.table.clone());",
                "    assert_eq!(owned_table.kind, startTable.kind);",
                "    assert_eq!(owned_table.start_map, start_table.start_map);",
                "    assert_eq!(owned_table.stride, start_table.stride);",
                "    assert_eq!(owned_table.pattern_len, start_table.pattern_len);",
                "    assert_eq!(owned_table.universal_start_unanchored, start_table.universal_start_unanchored);",
                "    assert_eq!(owned_table.universal_start_anchored, start_table.universal_start_anchored);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u32> = vec![9, 10, 11, 12, 13, 14, 15, 16];",
                "    let start_map = StartByteMap { ",
                "        map: [Start::default(); 256] ",
                "    };",
                "    let stride = 3;",
                "    let pattern_len = Some(0);",
                "    let universal_start_unanchored = Some(StateID(3));",
                "    let universal_start_anchored = None;",
                "    ",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Unanchored,",
                "        start_map,",
                "        stride,",
                "        pattern_len,",
                "        universal_start_unanchored,",
                "        universal_start_anchored,",
                "    };",
                "    ",
                "    let owned_table = start_table.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(owned_table.table, start_table.table.clone());",
                "    assert_eq!(owned_table.kind, startTable.kind);",
                "    assert_eq!(owned_table.start_map, startTable.start_map);",
                "    assert_eq!(owned_table.stride, startTable.stride);",
                "    assert_eq!(owned_table.pattern_len, startTable.pattern_len);",
                "    assert_eq!(owned_table.universal_start_unanchored, startTable.universal_start_unanchored);",
                "    assert_eq!(owned_table.universal_start_anchored, startTable.universal_start_anchored);"
              ],
              "code": [
                "{",
                "    let table: Vec<u32> = vec![9, 10, 11, 12, 13, 14, 15, 16];",
                "    let start_map = StartByteMap { ",
                "        map: [Start::default(); 256] ",
                "    };",
                "    let stride = 3;",
                "    let pattern_len = Some(0);",
                "    let universal_start_unanchored = Some(StateID(3));",
                "    let universal_start_anchored = None;",
                "    ",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Unanchored,",
                "        start_map,",
                "        stride,",
                "        pattern_len,",
                "        universal_start_unanchored,",
                "        universal_start_anchored,",
                "    };",
                "    ",
                "    let owned_table = start_table.to_owned();",
                "    assert_eq!(owned_table.table, start_table.table.clone());",
                "    assert_eq!(owned_table.kind, startTable.kind);",
                "    assert_eq!(owned_table.start_map, startTable.start_map);",
                "    assert_eq!(owned_table.stride, startTable.stride);",
                "    assert_eq!(owned_table.pattern_len, startTable.pattern_len);",
                "    assert_eq!(owned_table.universal_start_unanchored, startTable.universal_start_unanchored);",
                "    assert_eq!(owned_table.universal_start_anchored, startTable.universal_start_anchored);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: Vec<u32> = vec![17, 18, 19, 20, 21, 22, 23, 24];",
                "    let start_map = StartByteMap { ",
                "        map: [Start::default(); 256] ",
                "    };",
                "    let stride = 2;",
                "    let pattern_len = None;",
                "    let universal_start_unanchored = None;",
                "    let universal_start_anchored = Some(StateID(4));",
                "    ",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Anchored,",
                "        start_map,",
                "        stride,",
                "        pattern_len,",
                "        universal_start_unanchored,",
                "        universal_start_anchored,",
                "    };",
                "    ",
                "    let owned_table = start_table.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(owned_table.table, start_table.table.clone());",
                "    assert_eq!(owned_table.kind, start_table.kind);",
                "    assert_eq!(owned_table.start_map, start_table.start_map);",
                "    assert_eq!(owned_table.stride, start_table.stride);",
                "    assert_eq!(owned_table.pattern_len, start_table.pattern_len);",
                "    assert_eq!(owned_table.universal_start_unanchored, start_table.universal_start_unanchored);",
                "    assert_eq!(owned_table.universal_start_anchored, start_table.universal_start_anchored);"
              ],
              "code": [
                "{",
                "    let table: Vec<u32> = vec![17, 18, 19, 20, 21, 22, 23, 24];",
                "    let start_map = StartByteMap { ",
                "        map: [Start::default(); 256] ",
                "    };",
                "    let stride = 2;",
                "    let pattern_len = None;",
                "    let universal_start_unanchored = None;",
                "    let universal_start_anchored = Some(StateID(4));",
                "    ",
                "    let start_table = StartTable {",
                "        table,",
                "        kind: StartKind::Anchored,",
                "        start_map,",
                "        stride,",
                "        pattern_len,",
                "        universal_start_unanchored,",
                "        universal_start_anchored,",
                "    };",
                "    ",
                "    let owned_table = start_table.to_owned();",
                "    assert_eq!(owned_table.table, start_table.table.clone());",
                "    assert_eq!(owned_table.kind, start_table.kind);",
                "    assert_eq!(owned_table.start_map, start_table.start_map);",
                "    assert_eq!(owned_table.stride, start_table.stride);",
                "    assert_eq!(owned_table.pattern_len, start_table.pattern_len);",
                "    assert_eq!(owned_table.universal_start_unanchored, start_table.universal_start_unanchored);",
                "    assert_eq!(owned_table.universal_start_anchored, start_table.universal_start_anchored);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}