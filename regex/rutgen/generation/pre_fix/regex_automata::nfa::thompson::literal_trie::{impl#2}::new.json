{
  "name": "regex_automata::nfa::thompson::literal_trie::{impl#2}::new",
  "mod_info": {
    "name": "nfa::thompson::literal_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:63:1:63:18"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/literal_trie.rs:326:5:332:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Frame { chunks, transitions, union: vec![], sparse: vec![] }\n"
      ],
      "input_infer": "State with at least one chunk, chunk containing at least one transition, non-empty byte range for transitions, valid StateID values for transitions, and transitions with valid byte values (0-255)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition.clone()],",
                "        chunks: vec![(0, 1)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "}"
              ],
              "oracle": [
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State { transitions: vec![transition.clone()], chunks: vec![(0, 1)] };",
                "    let frame = Frame::new(&state);",
                "    assert_eq!(frame.union, vec![]);",
                "    assert_eq!(frame.sparse, vec![]);",
                "    assert!(frame.chunks.len() > 0);",
                "    assert!(frame.transitions.len() > 0);",
                "    assert_eq!(frame.chunks.next().unwrap(), &(0, 1));"
              ],
              "code": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition.clone()],",
                "        chunks: vec![(0, 1)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State { transitions: vec![transition.clone()], chunks: vec![(0, 1)] };",
                "    let frame = Frame::new(&state);",
                "    assert_eq!(frame.union, vec![]);",
                "    assert_eq!(frame.sparse, vec![]);",
                "    assert!(frame.chunks.len() > 0);",
                "    assert!(frame.transitions.len() > 0);",
                "    assert_eq!(frame.chunks.next().unwrap(), &(0, 1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id_1 = StateID(1);",
                "    let state_id_2 = StateID(2);",
                "    let transitions = vec![",
                "        Transition { byte: 1, next: state_id_1 },",
                "        Transition { byte: 2, next: state_id_2 },",
                "    ];",
                "    let state = State {",
                "        transitions,",
                "        chunks: vec![(0, 2)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(frame.union, vec![]);",
                "    assert_eq!(frame.sparse, vec![]);",
                "    assert!(frame.chunks.active.is_some());",
                "    assert_eq!(frame.chunks.transitions.len(), 2);",
                "    assert_eq!(frame.chunks.chunks.len(), 1);",
                "    assert_eq!(frame.chunks.chunks.next().unwrap().0, 0);",
                "    assert_eq!(frame.chunks.chunks.next().unwrap().1, 2);",
                "    assert_eq!(frame.transitions.as_slice(), state.active_chunk());",
                "    assert_eq!(frame.transitions.next().expect(\"Transition should exist\").byte, 1);",
                "    assert_eq!(frame.transitions.next().expect(\"Transition should exist\").byte, 2);"
              ],
              "code": [
                "{",
                "    let state_id_1 = StateID(1);",
                "    let state_id_2 = StateID(2);",
                "    let transitions = vec![",
                "        Transition { byte: 1, next: state_id_1 },",
                "        Transition { byte: 2, next: state_id_2 },",
                "    ];",
                "    let state = State {",
                "        transitions,",
                "        chunks: vec![(0, 2)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "    assert_eq!(frame.union, vec![]);",
                "    assert_eq!(frame.sparse, vec![]);",
                "    assert!(frame.chunks.active.is_some());",
                "    assert_eq!(frame.chunks.transitions.len(), 2);",
                "    assert_eq!(frame.chunks.chunks.len(), 1);",
                "    assert_eq!(frame.chunks.chunks.next().unwrap().0, 0);",
                "    assert_eq!(frame.chunks.chunks.next().unwrap().1, 2);",
                "    assert_eq!(frame.transitions.as_slice(), state.active_chunk());",
                "    assert_eq!(frame.transitions.next().expect(\"Transition should exist\").byte, 1);",
                "    assert_eq!(frame.transitions.next().expect(\"Transition should exist\").byte, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition_1 = Transition { byte: 1, next: state_id };",
                "    let transition_2 = Transition { byte: 2, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition_1.clone(), transition_2.clone()],",
                "        chunks: vec![(0, 2), (1, 1)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "}"
              ],
              "oracle": [
                "    let expected_chunks_len = 2;",
                "    let expected_transitions_len = 2;",
                "    let expected_union_len = 0;",
                "    let expected_sparse_len = 0;",
                "    assert_eq!(frame.chunks.chunks.len(), expected_chunks_len);",
                "    assert_eq!(frame.transitions.len(), expected_transitions_len);",
                "    assert_eq!(frame.union.len(), expected_union_len);",
                "    assert_eq!(frame.sparse.len(), expected_sparse_len);",
                "    assert_eq!(frame.chunks.transitions[0].byte, 1);",
                "    assert_eq!(frame.chunks.transitions[1].byte, 2);",
                "    assert_eq!(frame.chunks.active.unwrap(), frame.chunks.transitions);",
                "    assert_eq!(frame.chunks.active.unwrap().len(), expected_transitions_len);"
              ],
              "code": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition_1 = Transition { byte: 1, next: state_id };",
                "    let transition_2 = Transition { byte: 2, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition_1.clone(), transition_2.clone()],",
                "        chunks: vec![(0, 2), (1, 1)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "    let expected_chunks_len = 2;",
                "    let expected_transitions_len = 2;",
                "    let expected_union_len = 0;",
                "    let expected_sparse_len = 0;",
                "    assert_eq!(frame.chunks.chunks.len(), expected_chunks_len);",
                "    assert_eq!(frame.transitions.len(), expected_transitions_len);",
                "    assert_eq!(frame.union.len(), expected_union_len);",
                "    assert_eq!(frame.sparse.len(), expected_sparse_len);",
                "    assert_eq!(frame.chunks.transitions[0].byte, 1);",
                "    assert_eq!(frame.chunks.transitions[1].byte, 2);",
                "    assert_eq!(frame.chunks.active.unwrap(), frame.chunks.transitions);",
                "    assert_eq!(frame.chunks.active.unwrap().len(), expected_transitions_len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition.clone()],",
                "        chunks: vec![(0, 0)], // No transitions in chunk",
                "    };",
                "    let frame = Frame::new(&state);",
                "}"
              ],
              "oracle": [
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State {",
                "    transitions: vec![transition.clone()],",
                "    chunks: vec![(0, 0)],",
                "    };",
                "    assert_eq!(frame.chunks.transitions.len(), 0);",
                "    assert_eq!(frame.chunks.chunks.len(), 1);",
                "    assert_eq!(frame.transitions.as_slice(), state.active_chunk());",
                "    assert!(frame.union.is_empty());",
                "    assert!(frame.sparse.is_empty());"
              ],
              "code": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition.clone()],",
                "        chunks: vec![(0, 0)], // No transitions in chunk",
                "    };",
                "    let frame = Frame::new(&state);",
                "    let state_id = StateID(0);",
                "    let transition = Transition { byte: 1, next: state_id };",
                "    let state = State {",
                "    transitions: vec![transition.clone()],",
                "    chunks: vec![(0, 0)],",
                "    };",
                "    assert_eq!(frame.chunks.transitions.len(), 0);",
                "    assert_eq!(frame.chunks.chunks.len(), 1);",
                "    assert_eq!(frame.transitions.as_slice(), state.active_chunk());",
                "    assert!(frame.union.is_empty());",
                "    assert!(frame.sparse.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition_low = Transition { byte: 0, next: state_id };",
                "    let transition_high = Transition { byte: 255, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition_low, transition_high],",
                "        chunks: vec![(0, 2)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "}"
              ],
              "oracle": [
                "    let expected_union = vec![];",
                "    let expected_sparse = vec![];",
                "    let expected_chunks = state.chunks();",
                "    let expected_transitions = expected_chunks.next().unwrap().iter();",
                "    assert_eq!(frame.union, expected_union);",
                "    assert_eq!(frame.sparse, expected_sparse);",
                "    assert_eq!(frame.chunks.as_slice(), expected_chunks);",
                "    assert_eq!(frame.transitions.as_slice(), expected_transitions);",
                "    assert!(frame.transitions.len() > 0);",
                "    assert_eq!(frame.chunks.len(), 1);",
                "    assert!(frame.chunks.peekable().next().is_some());"
              ],
              "code": [
                "{",
                "    let state_id = StateID(0);",
                "    let transition_low = Transition { byte: 0, next: state_id };",
                "    let transition_high = Transition { byte: 255, next: state_id };",
                "    let state = State {",
                "        transitions: vec![transition_low, transition_high],",
                "        chunks: vec![(0, 2)],",
                "    };",
                "    let frame = Frame::new(&state);",
                "    let expected_union = vec![];",
                "    let expected_sparse = vec![];",
                "    let expected_chunks = state.chunks();",
                "    let expected_transitions = expected_chunks.next().unwrap().iter();",
                "    assert_eq!(frame.union, expected_union);",
                "    assert_eq!(frame.sparse, expected_sparse);",
                "    assert_eq!(frame.chunks.as_slice(), expected_chunks);",
                "    assert_eq!(frame.transitions.as_slice(), expected_transitions);",
                "    assert!(frame.transitions.len() > 0);",
                "    assert_eq!(frame.chunks.len(), 1);",
                "    assert!(frame.chunks.peekable().next().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}