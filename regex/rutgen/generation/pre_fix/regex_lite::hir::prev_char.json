{
  "name": "regex_lite::hir::prev_char",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:759:1:767:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ch == '\\u{E000}' at line 761 is false\n",
        "expected return value/type: Some('\\u{D7FF}')\n"
      ],
      "input_infer": "ch: any valid Unicode scalar value except '\\u{E000}', specifically within the range U+0000 to U+D7FF, excluding U+E000\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{D7FF}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "}"
              ],
              "oracle": [
                "    let result = prev_char('\\u{D7FF}'); assert_eq!(result, Some('\\u{D7FE}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{D7FF}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "    let result = prev_char('\\u{D7FF}'); assert_eq!(result, Some('\\u{D7FE}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{007F}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "}"
              ],
              "oracle": [
                "    let result = prev_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{007F}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "    let result = prev_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{0001}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{0000}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{0001}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "    assert_eq!(result, Some('\\u{0000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{0045}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{0044}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{0045}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "    assert_eq!(result, Some('\\u{0044}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{EFFF}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "}"
              ],
              "oracle": [
                "    let result = prev_char('\\u{EFFF}');",
                "    assert_eq!(result, Some('\\u{EFFE}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{EFFF}');",
                "    let _ = result; // Using the result to ensure the function call is made.",
                "    let result = prev_char('\\u{EFFF}');",
                "    assert_eq!(result, Some('\\u{EFFE}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: ch == '\\u{E000}' at line 761 is true\n",
        "precondition: u32::from(ch).checked_sub(1)? at line 766 is Err/None\n"
      ],
      "input_infer": "ch == '\\u{E000}', ch in '\\u{0001}' to '\\u{D7FF}' (inclusive), ch == '\\u{U+0000}'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{E000}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let result_none = prev_char(char::from_u32(0).unwrap());",
                "    assert_eq!(result_none, None);",
                "    let result_invalid = prev_char('\\u{E001}');",
                "    assert_eq!(result_invalid, Some('\\u{E000}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let result_none = prev_char(char::from_u32(0).unwrap());",
                "    assert_eq!(result_none, None);",
                "    let result_invalid = prev_char('\\u{E001}');",
                "    assert_eq!(result_invalid, Some('\\u{E000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{0001}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{0000}'));",
                "    let result = prev_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let result = prev_char('\\u{0000}');",
                "    assert_eq!(result, None);",
                "    let result = prev_char('\\u{E001}');",
                "    assert_eq!(result, Some('\\u{E000}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{0001}');",
                "    assert_eq!(result, Some('\\u{0000}'));",
                "    let result = prev_char('\\u{E000}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let result = prev_char('\\u{0000}');",
                "    assert_eq!(result, None);",
                "    let result = prev_char('\\u{E001}');",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{D7FF}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
                "    assert_eq!(prev_char('\\u{0000}'), None);",
                "    assert_eq!(prev_char('\\u{0001}'), Some('\\u{0000}'));",
                "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{D7FF}');",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
                "    assert_eq!(prev_char('\\u{0000}'), None);",
                "    assert_eq!(prev_char('\\u{0001}'), Some('\\u{0000}'));",
                "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = prev_char('\\u{0000}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
                "    assert_eq!(prev_char('\\u{0000}'), None);",
                "    assert_eq!(prev_char('\\u{D7FF}'), Some('\\u{D7FE}'));",
                "    assert_eq!(prev_char('\\u{10FFFF}'), Some('\\u{10FFFE}'));",
                "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));"
              ],
              "code": [
                "{",
                "    let result = prev_char('\\u{0000}');",
                "    assert_eq!(result, None);",
                "    assert_eq!(prev_char('\\u{E000}'), Some('\\u{D7FF}'));",
                "    assert_eq!(prev_char('\\u{0000}'), None);",
                "    assert_eq!(prev_char('\\u{D7FF}'), Some('\\u{D7FE}'));",
                "    assert_eq!(prev_char('\\u{10FFFF}'), Some('\\u{10FFFE}'));",
                "    assert_eq!(prev_char('\\u{E001}'), Some('\\u{E000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: ch == '\\u{E000}' at line 761 is true\n",
        "precondition: u32::from(ch).checked_sub(1)? at line 766 is Ok/Some\n",
        "expected return value/type: Some(char::from_u32(u32::from(ch).checked_sub(1)?).unwrap())\n"
      ],
      "input_infer": "Input conditions: ch is exactly '\\u{E000}' and ch is any valid Unicode scalar value from '\\u{0001}' to '\\u{D7FF}' excluding '\\u{E000}'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{E000}';",
                "    let result = prev_char(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    assert!(result.is_some());",
                "    assert!(matches!(result, Some(_)));",
                "    assert_eq!(result.unwrap(), '\\u{D7FF}');"
              ],
              "code": [
                "{",
                "    let ch = '\\u{E000}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    assert!(result.is_some());",
                "    assert!(matches!(result, Some(_)));",
                "    assert_eq!(result.unwrap(), '\\u{D7FF}');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{0001}';",
                "    let result = prev_char(ch);",
                "}"
              ],
              "oracle": [
                "    let ch = '\\u{E000}';",
                "    let expected = Some('\\u{D7FF}');",
                "    assert_eq!(prev_char(ch), expected);",
                "    let ch = '\\u{0002}';",
                "    let expected = Some('\\u{0001}');",
                "    assert_eq!(prev_char(ch), expected);",
                "    let ch = '\\u{0001}';",
                "    let expected = None;",
                "    assert_eq!(prev_char(ch), expected);"
              ],
              "code": [
                "{",
                "    let ch = '\\u{0001}';",
                "    let result = prev_char(ch);",
                "    let ch = '\\u{E000}';",
                "    let expected = Some('\\u{D7FF}');",
                "    assert_eq!(prev_char(ch), expected);",
                "    let ch = '\\u{0002}';",
                "    let expected = Some('\\u{0001}');",
                "    assert_eq!(prev_char(ch), expected);",
                "    let ch = '\\u{0001}';",
                "    let expected = None;",
                "    assert_eq!(prev_char(ch), expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{D7FF}';",
                "    let result = prev_char(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{D7FE}'));",
                "    let ch = '\\u{E000}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let ch = '\\u{0001}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{0000}'));",
                "    let ch = '\\u{0000}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, None);",
                "    let ch = '\\u{E001}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{E000}'));"
              ],
              "code": [
                "{",
                "    let ch = '\\u{D7FF}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FE}'));",
                "    let ch = '\\u{E000}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    let ch = '\\u{0001}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{0000}'));",
                "    let ch = '\\u{0000}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, None);",
                "    let ch = '\\u{E001}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{E000}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{007F}';",
                "    let result = prev_char(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{007E}'));",
                "    ",
                "    let ch = '\\u{E000}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    ",
                "    let ch = '\\u{0100}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{00FF}'));",
                "    ",
                "    let ch = '\\u{0001}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{0000}'));",
                "    ",
                "    let ch = '\\u{10FFFF}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{10FFFE}'));",
                "    ",
                "    let ch = '\\u{FFFD}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{FFFC}'));",
                "    ",
                "    let ch = '\\u{D800}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FF}'));"
              ],
              "code": [
                "{",
                "    let ch = '\\u{007F}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{007E}'));",
                "    ",
                "    let ch = '\\u{E000}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "    ",
                "    let ch = '\\u{0100}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{00FF}'));",
                "    ",
                "    let ch = '\\u{0001}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{0000}'));",
                "    ",
                "    let ch = '\\u{10FFFF}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{10FFFE}'));",
                "    ",
                "    let ch = '\\u{FFFD}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{FFFC}'));",
                "    ",
                "    let ch = '\\u{D800}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{D7FF}'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{0100}';",
                "    let result = prev_char(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some('\\u{00FF}'));",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap() == '\\u{00FF}');"
              ],
              "code": [
                "{",
                "    let ch = '\\u{0100}';",
                "    let result = prev_char(ch);",
                "    assert_eq!(result, Some('\\u{00FF}'));",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap() == '\\u{00FF}');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}