{
  "name": "regex_syntax::ast::{impl#12}::class_unicode",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:525:5:527:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ast::ClassUnicode(Box::new(e))\n"
      ],
      "input_infer": "min: 0, max: None | min: 0, max: Some(10) | min: 5, max: Some(5) | min: 3, max: Some(7) | negated: true, kind: ClassUnicodeKind | negated: false, kind: ClassUnicodeKind | valid span | empty span | multiple ranges in Unicode class\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(unicode_class)));"
              ],
              "code": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(unicode_class)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(unicode_class)));",
                "    assert!(matches!(result, Ast::ClassUnicode(_)));",
                "    assert!(result.span().start.0 == 0);",
                "    assert!(result.span().end.0 == 1);",
                "    assert!(!result.negated);",
                "    assert_eq!(if let Ast::ClassUnicode(ref class) = result { class.kind } else { unreachable!() }, ClassUnicodeKind::SomeKind);"
              ],
              "code": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(unicode_class)));",
                "    assert!(matches!(result, Ast::ClassUnicode(_)));",
                "    assert!(result.span().start.0 == 0);",
                "    assert!(result.span().end.0 == 1);",
                "    assert!(!result.negated);",
                "    assert_eq!(if let Ast::ClassUnicode(ref class) = result { class.kind } else { unreachable!() }, ClassUnicodeKind::SomeKind);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind })));"
              ],
              "code": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: Position(1), end: Position(2) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(unicode_class)));"
              ],
              "code": [
                "{",
                "    let span = Span { start: Position(1), end: Position(2) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(unicode_class)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: Position(0), end: Position(10) };",
                "    let unicode_class = ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind })));"
              ],
              "code": [
                "{",
                "    let span = Span { start: Position(0), end: Position(10) };",
                "    let unicode_class = ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: Position(0), end: Position(0) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "}"
              ],
              "oracle": [
                "    let span = Span { start: Position(0), end: Position(0) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind })));"
              ],
              "code": [
                "{",
                "    let span = Span { start: Position(0), end: Position(0) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    let span = Span { start: Position(0), end: Position(0) };",
                "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind })));"
              ],
              "code": [
                "{",
                "    let span = Span { start: Position(0), end: Position(1) };",
                "    let unicode_class = ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind };",
                "    let result = Ast::class_unicode(unicode_class);",
                "    assert_eq!(result, Ast::ClassUnicode(Box::new(ClassUnicode { span, negated: true, kind: ClassUnicodeKind::SomeKind })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}