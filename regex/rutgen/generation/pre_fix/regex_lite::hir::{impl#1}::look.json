{
  "name": "regex_lite::hir::{impl#1}::look",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:250:5:258:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: look matches Look::Start at line 254 is false\n",
        "precondition: look matches _ at line 459 is true\n",
        "expected return value/type: Hir {\n            kind,\n            is_start_anchored: matches!(look, Look::Start),\n            is_match_empty: true,\n            static_explicit_captures_len: Some(0),\n        }\n"
      ],
      "input_infer": "Look::End, Look::EndLF, Look::StartLF, Look::StartCRLF, Look::Word, Look::WordNegate, Look::WordStart, Look::WordEnd, Look::WordStartHalf, Look::WordEndHalf\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::End));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::End));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::StartCRLF));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::StartCRLF));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Word;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::Word));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::Word;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::Word));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordNegate;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordNegate));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordNegate;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordNegate));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStart;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStart));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordStart;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStart));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEnd;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEnd));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordEnd;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEnd));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalf;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartHalf));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalf;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStartHalf));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalf;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalf));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalf;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalf));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: look matches Look::Start at line 254 is true\n",
        "precondition: look matches Look::Start at line 254 is true\n",
        "expected return value/type: Hir {\n            kind,\n            is_start_anchored: matches!(look, Look::Start),\n            is_match_empty: true,\n            static_explicit_captures_len: Some(0),\n        }\n"
      ],
      "input_infer": "look input must be Look::Start\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Start;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::Start));",
                "    assert!(result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::Start;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::Start));",
                "    assert!(result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::End;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::End));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::End;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::End));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::StartLF;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::EndLF;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::StartCRLF));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::StartCRLF;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::StartCRLF));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    let look = Look::EndCRLF;",
                "    let expected_kind = HirKind::Look(look);",
                "    let expected_is_start_anchored = false;",
                "    let expected_is_match_empty = true;",
                "    let expected_static_explicit_captures_len = Some(0);",
                "    assert_eq!(result.kind(), &expected_kind);",
                "    assert_eq!(result.is_start_anchored(), expected_is_start_anchored);",
                "    assert_eq!(result.is_match_empty(), expected_is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len(), expected_static_explicit_captures_len);"
              ],
              "code": [
                "{",
                "    let look = Look::EndCRLF;",
                "    let result = Hir::look(look);",
                "    let look = Look::EndCRLF;",
                "    let expected_kind = HirKind::Look(look);",
                "    let expected_is_start_anchored = false;",
                "    let expected_is_match_empty = true;",
                "    let expected_static_explicit_captures_len = Some(0);",
                "    assert_eq!(result.kind(), &expected_kind);",
                "    assert_eq!(result.is_start_anchored(), expected_is_start_anchored);",
                "    assert_eq!(result.is_match_empty(), expected_is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len(), expected_static_explicit_captures_len);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::Word;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::Word));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::Word;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::Word));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordNegate;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordNegate));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordNegate;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordNegate));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStart;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStart));",
                "    assert!(result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordStart;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordStart));",
                "    assert!(result.is_start_anchored());",
                "    assert!(result.is_match_empty);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEnd;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEnd));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordEnd;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEnd));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordStartHalf;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    result.kind == HirKind::Look(Look::WordStartHalf)",
                "    result.is_start_anchored == false",
                "    result.is_match_empty == true",
                "    result.static_explicit_captures_len == Some(0)"
              ],
              "code": [
                "{",
                "    let look = Look::WordStartHalf;",
                "    let result = Hir::look(look);",
                "    result.kind == HirKind::Look(Look::WordStartHalf)",
                "    result.is_start_anchored == false",
                "    result.is_match_empty == true",
                "    result.static_explicit_captures_len == Some(0)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look = Look::WordEndHalf;",
                "    let result = Hir::look(look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalf));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let look = Look::WordEndHalf;",
                "    let result = Hir::look(look);",
                "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalf));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, true);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}