{
  "name": "regex_automata::util::start::{impl#1}::new",
  "mod_info": {
    "name": "util::start",
    "loc": "regex-automata/src/util/mod.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "regex-automata/src/util/start.rs:216:5:250:6",
  "fn_tests": [
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: byte <= b'9' at line 223 is true, with bound byte == b'9'\n",
        "precondition: byte <= b'9' at line 223 is false\n",
        "precondition: byte <= b'Z' at line 228 is true, with bound byte == b'Z'\n",
        "precondition: byte <= b'Z' at line 228 is false\n",
        "precondition: byte <= b'z' at line 233 is true, with bound byte == b'z'\n",
        "precondition: byte <= b'z' at line 233 is false\n",
        "precondition: lineterm != b'\\r' at line 246 is false\n",
        "expected return value/type: StartByteMap { map }\n"
      ],
      "input_infer": "byte in range [0, 255], lineterm in range [0, 255] with lineterm == b'\\r' or b'\\n', lineterm in range [0, 255] with lineterm not equal to b'\\r' or b'\\n'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
                "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::CustomLineTerminator"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
                "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::CustomLineTerminator",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'1')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'2')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'3')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'4')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'5')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'6')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'7')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'8')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'B')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'C')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'D')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'E')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'F')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'G')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'H')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'I')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'J')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'K')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'L')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'M')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'N')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'O')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'P')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'R')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'S')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'T')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'U')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'V')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'W')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'X')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Y')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'b')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'c')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'd')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'e')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'f')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'g')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'h')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'i')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'j')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'k')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'l')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'm')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'n')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'o')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'p')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'r')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b's')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b't')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'u')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'v')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'w')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'1')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'2')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'3')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'4')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'5')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'6')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'7')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'8')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'B')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'C')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'D')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'E')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'F')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'G')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'H')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'I')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'J')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'K')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'L')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'M')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'N')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'O')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'P')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'R')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'S')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'T')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'U')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'V')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'W')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'X')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Y')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'b')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'c')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'd')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'e')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'f')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'g')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'h')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'i')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'j')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'k')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'l')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'm')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'n')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'o')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'p')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'r')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b's')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b't')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'u')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'v')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'w')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "    assert_eq!(start_byte_map.map[usize::from(b'y')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'A'..=b'Z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    for byte in b'a'..=b'z' { assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte); }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    let look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "    for byte in [b'\\n', b'\\r', b'_', b'0', b'A', b'a'].iter() {",
                "    assert_ne!(start_byte_map.map[usize::from(*byte)], Start::CustomLineTerminator);",
                "    }"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    let look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "    for byte in [b'\\n', b'\\r', b'_', b'0', b'A', b'a'].iter() {",
                "    assert_ne!(start_byte_map.map[usize::from(*byte)], Start::CustomLineTerminator);",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\r');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_ne!(start_byte_map.map[usize::from(b'\\r')], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\r');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_ne!(start_byte_map.map[usize::from(b'\\r')], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\n');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
                "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'!')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'@')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'#')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'$')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'%')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'^')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'&')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'*')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'(')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b')')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'-')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'+')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'=')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'[')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b']')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'{')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'}')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b';')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b':')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\\"')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\'')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'<')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'>')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b',')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'.')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'/')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\\\')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b' ')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\t')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(0)] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(255)] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(lineterm)] == Start::CustomLineTerminator"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\n');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
                "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'!')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'@')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'#')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'$')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'%')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'^')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'&')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'*')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'(')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b')')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'-')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'+')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'=')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'[')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b']')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'{')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'}')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b';')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b':')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\\"')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\'')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'<')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'>')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b',')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'.')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'/')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\\\')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b' ')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\t')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(0)] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(255)] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(lineterm)] == Start::CustomLineTerminator",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    let look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\n');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    look_matcher.set_line_terminator(b'\\r');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    look_matcher.set_line_terminator(b'_');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    let look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\n');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    look_matcher.set_line_terminator(b'\\r');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    look_matcher.set_line_terminator(b'_');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    look_matcher.set_line_terminator(b'x');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'x')], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 22,
      "prompt_conds": [
        "precondition: byte <= b'9' at line 223 is false\n",
        "precondition: byte <= b'Z' at line 228 is false\n",
        "precondition: byte <= b'z' at line 233 is false\n",
        "precondition: lineterm != b'\\r' at line 246 is true\n",
        "precondition: lineterm != b'\\n' at line 246 is true\n",
        "expected return value/type: StartByteMap { map }\n"
      ],
      "input_infer": "lookm: LookMatcher with custom line terminator byte > b'\\r' and < 0xFF, byte > b'9', byte > b'Z', byte > b'z'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestLookMatcher {",
                "        lineterm: DebugByte,",
                "    }",
                "",
                "    impl TestLookMatcher {",
                "        fn new(lineterm: u8) -> Self {",
                "            TestLookMatcher {",
                "                lineterm: DebugByte(lineterm),",
                "            }",
                "        }",
                "",
                "        fn get_line_terminator(&self) -> u8 {",
                "            self.lineterm.0",
                "        }",
                "    }",
                "",
                "    let lookm = TestLookMatcher::new(0xFF); // Custom line terminator greater than b'\\r' and not equal to b'\\n'",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "}"
              ],
              "oracle": [
                "    let lookm = TestLookMatcher::new(0xFF);",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(0xFF)], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    struct TestLookMatcher {",
                "        lineterm: DebugByte,",
                "    }",
                "",
                "    impl TestLookMatcher {",
                "        fn new(lineterm: u8) -> Self {",
                "            TestLookMatcher {",
                "                lineterm: DebugByte(lineterm),",
                "            }",
                "        }",
                "",
                "        fn get_line_terminator(&self) -> u8 {",
                "            self.lineterm.0",
                "        }",
                "    }",
                "",
                "    let lookm = TestLookMatcher::new(0xFF); // Custom line terminator greater than b'\\r' and not equal to b'\\n'",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "    let lookm = TestLookMatcher::new(0xFF);",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(0xFF)], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestLookMatcher {",
                "        lineterm: DebugByte,",
                "    }",
                "",
                "    impl TestLookMatcher {",
                "        fn new(lineterm: u8) -> Self {",
                "            TestLookMatcher {",
                "                lineterm: DebugByte(lineterm),",
                "            }",
                "        }",
                "",
                "        fn get_line_terminator(&self) -> u8 {",
                "            self.lineterm.0",
                "        }",
                "    }",
                "",
                "    let lookm = TestLookMatcher::new(0xFE); // Another custom line terminator",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'1')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'2')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'3')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'4')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'5')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'6')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'7')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'8')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'B')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'C')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'D')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'E')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'F')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'G')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'H')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'I')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'J')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'K')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'L')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'M')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'N')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'O')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'P')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'Q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'R')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'S')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'T')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'U')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'V')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'W')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'X')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'Y')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'b')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'c')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'd')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'e')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'f')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'g')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'h')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'i')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'j')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'k')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'l')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'm')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'n')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'o')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'p')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'r')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b's')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b't')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'u')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'v')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'w')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'x')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'y')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(0xFE)], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    struct TestLookMatcher {",
                "        lineterm: DebugByte,",
                "    }",
                "",
                "    impl TestLookMatcher {",
                "        fn new(lineterm: u8) -> Self {",
                "            TestLookMatcher {",
                "                lineterm: DebugByte(lineterm),",
                "            }",
                "        }",
                "",
                "        fn get_line_terminator(&self) -> u8 {",
                "            self.lineterm.0",
                "        }",
                "    }",
                "",
                "    let lookm = TestLookMatcher::new(0xFE); // Another custom line terminator",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'1')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'2')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'3')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'4')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'5')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'6')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'7')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'8')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'B')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'C')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'D')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'E')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'F')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'G')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'H')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'I')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'J')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'K')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'L')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'M')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'N')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'O')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'P')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'Q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'R')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'S')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'T')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'U')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'V')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'W')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'X')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'Y')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'b')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'c')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'd')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'e')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'f')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'g')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'h')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'i')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'j')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'k')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'l')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'm')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'n')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'o')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'p')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'q')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'r')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b's')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b't')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'u')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'v')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'w')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'x')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'y')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[ usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(0xFE)], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestLookMatcher {",
                "        lineterm: DebugByte,",
                "    }",
                "",
                "    impl TestLookMatcher {",
                "        fn new(lineterm: u8) -> Self {",
                "            TestLookMatcher {",
                "                lineterm: DebugByte(lineterm),",
                "            }",
                "        }",
                "",
                "        fn get_line_terminator(&self) -> u8 {",
                "            self.lineterm.0",
                "        }",
                "    }",
                "",
                "    let lookm = TestLookMatcher::new(0xA0); // Yet another custom line terminator",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "}"
              ],
              "oracle": [
                "    let lookm = TestLookMatcher::new(0xA0);",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(0xA0)], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    struct TestLookMatcher {",
                "        lineterm: DebugByte,",
                "    }",
                "",
                "    impl TestLookMatcher {",
                "        fn new(lineterm: u8) -> Self {",
                "            TestLookMatcher {",
                "                lineterm: DebugByte(lineterm),",
                "            }",
                "        }",
                "",
                "        fn get_line_terminator(&self) -> u8 {",
                "            self.lineterm.0",
                "        }",
                "    }",
                "",
                "    let lookm = TestLookMatcher::new(0xA0); // Yet another custom line terminator",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "    let lookm = TestLookMatcher::new(0xA0);",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    for byte in b'0'..=b'9' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'A'..=b'Z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    for byte in b'a'..=b'z' {",
                "    assert_eq!(start_byte_map.map[usize::from(byte)], Start::WordByte);",
                "    }",
                "    assert_eq!(start_byte_map.map[usize::from(0xA0)], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 23,
      "prompt_conds": [
        "precondition: byte <= b'9' at line 223 is false\n",
        "precondition: byte <= b'Z' at line 228 is false\n",
        "precondition: byte <= b'z' at line 233 is false\n",
        "precondition: lineterm != b'\\r' at line 246 is true\n",
        "precondition: lineterm != b'\\n' at line 246 is false\n",
        "expected return value/type: StartByteMap { map }\n"
      ],
      "input_infer": "byte > b'9' && (byte < b'A' || byte > b'Z') && (byte < b'a' || byte > b'z') && lineterm == b'\\n'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\n');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'X')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'#')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'@')], Start::NonWordByte);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\n');",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'X')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'#')], Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'@')], Start::NonWordByte);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\x1E'); // a custom line terminator",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\x1E')], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\x1E'); // a custom line terminator",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\n')], Start::LineLF);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\r')], Start::LineCR);",
                "    assert_eq!(start_byte_map.map[usize::from(b'_')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'0')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'9')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'A')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'Z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'a')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'z')], Start::WordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\x1E')], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\r'); // ensure to set CR to see mapping",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "}"
              ],
              "oracle": [
                "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
                "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'!')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\"')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'#')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'$')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'%')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'&')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\'')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'(')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b')')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'*')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'+')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b',')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'-')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'.')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'/')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b':')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b';')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'<')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'=')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'>')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'?')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'@')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'[')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\\\')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b']')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'^')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'`')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'{')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'|')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'}')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'~')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(255)] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(lineterm)] == Start::CustomLineTerminator"
              ],
              "code": [
                "{",
                "    let mut look_matcher = LookMatcher::new();",
                "    look_matcher.set_line_terminator(b'\\r'); // ensure to set CR to see mapping",
                "    let start_byte_map = StartByteMap::new(&look_matcher);",
                "    start_byte_map.map[usize::from(b'\\n')] == Start::LineLF",
                "    start_byte_map.map[usize::from(b'\\r')] == Start::LineCR",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'0')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'1')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'2')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'3')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'4')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'5')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'6')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'7')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'8')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'9')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'A')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'B')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'C')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'D')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'E')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'F')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'G')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'H')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'I')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'J')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'K')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'L')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'M')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'N')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'O')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'P')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'R')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'S')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'T')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'U')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'V')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'W')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'X')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'Z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'a')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'b')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'c')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'd')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'e')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'f')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'g')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'h')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'i')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'j')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'k')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'l')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'm')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'n')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'o')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'p')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'q')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'r')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b's')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b't')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'u')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'v')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'w')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'x')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'y')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'z')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'!')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\"')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'#')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'$')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'%')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'&')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\'')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'(')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b')')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'*')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'+')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b',')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'-')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'.')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'/')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b':')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b';')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'<')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'=')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'>')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'?')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'@')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'[')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'\\\\')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b']')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'^')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'_')] == Start::WordByte",
                "    start_byte_map.map[usize::from(b'`')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'{')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'|')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'}')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(b'~')] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(255)] == Start::NonWordByte",
                "    start_byte_map.map[usize::from(lineterm)] == Start::CustomLineTerminator",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 24,
      "prompt_conds": [
        "precondition: byte <= b'9' at line 223 is false\n",
        "precondition: byte <= b'Z' at line 228 is false\n",
        "precondition: byte <= b'z' at line 233 is false\n",
        "precondition: lineterm != b'\\r' at line 246 is false\n",
        "expected return value/type: StartByteMap { map }\n"
      ],
      "input_infer": "lookm: LookMatcher with line terminator set to b'\\r'; byte values >= b':' (for preconditions to fail) and valid U8s (0-255) to generate StartByteMap.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lookm = LookMatcher::new();",
                "    lookm.set_line_terminator(b'\\r');",
                "",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "",
                "    let byte_to_test1 = b':';",
                "    let byte_to_test2 = b'{';",
                "    let byte_to_test3 = b'|';",
                "    let byte_to_test4 = b'~';",
                "",
                "    let map_value1 = start_byte_map.get(byte_to_test1);",
                "    let map_value2 = start_byte_map.get(byte_to_test2);",
                "    let map_value3 = start_byte_map.get(byte_to_test3);",
                "    let map_value4 = start_byte_map.get(byte_to_test4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_byte_map.get(b':'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'{'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'|'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'~'), Start::NonWordByte);"
              ],
              "code": [
                "{",
                "    let mut lookm = LookMatcher::new();",
                "    lookm.set_line_terminator(b'\\r');",
                "",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "",
                "    let byte_to_test1 = b':';",
                "    let byte_to_test2 = b'{';",
                "    let byte_to_test3 = b'|';",
                "    let byte_to_test4 = b'~';",
                "",
                "    let map_value1 = start_byte_map.get(byte_to_test1);",
                "    let map_value2 = start_byte_map.get(byte_to_test2);",
                "    let map_value3 = start_byte_map.get(byte_to_test3);",
                "    let map_value4 = start_byte_map.get(byte_to_test4);",
                "    assert_eq!(start_byte_map.get(b':'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'{'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'|'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'~'), Start::NonWordByte);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lookm = LookMatcher::new();",
                "    lookm.set_line_terminator(b'\\x1A'); // an unusual line terminator",
                "",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "",
                "    let byte_to_test1 = b':';",
                "    let byte_to_test2 = b'{';",
                "    let byte_to_test3 = b'|';",
                "    let byte_to_test4 = b'~';",
                "",
                "    let map_value1 = start_byte_map.get(byte_to_test1);",
                "    let map_value2 = start_byte_map.get(byte_to_test2);",
                "    let map_value3 = start_byte_map.get(byte_to_test3);",
                "    let map_value4 = start_byte_map.get(byte_to_test4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_byte_map.get(b':'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'{'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'|'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'~'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\x1A')], Start::CustomLineTerminator);"
              ],
              "code": [
                "{",
                "    let mut lookm = LookMatcher::new();",
                "    lookm.set_line_terminator(b'\\x1A'); // an unusual line terminator",
                "",
                "    let start_byte_map = StartByteMap::new(&lookm);",
                "",
                "    let byte_to_test1 = b':';",
                "    let byte_to_test2 = b'{';",
                "    let byte_to_test3 = b'|';",
                "    let byte_to_test4 = b'~';",
                "",
                "    let map_value1 = start_byte_map.get(byte_to_test1);",
                "    let map_value2 = start_byte_map.get(byte_to_test2);",
                "    let map_value3 = start_byte_map.get(byte_to_test3);",
                "    let map_value4 = start_byte_map.get(byte_to_test4);",
                "    assert_eq!(start_byte_map.get(b':'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'{'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'|'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.get(b'~'), Start::NonWordByte);",
                "    assert_eq!(start_byte_map.map[usize::from(b'\\x1A')], Start::CustomLineTerminator);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}