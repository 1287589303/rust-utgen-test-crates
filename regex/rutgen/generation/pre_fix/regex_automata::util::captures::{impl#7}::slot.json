{
  "name": "regex_automata::util::captures::{impl#7}::slot",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1904:5:1921:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: group_index >= self.group_len(pid) at line 1905 is true, with bound group_index == self.group_len(pid)\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "group_index >= self.group_len(pid) (validating upper bound), group_index = self.group_len(pid) (boundary case)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
                "    let group_info = GroupInfo::empty();",
                "    let group_index = group_info.group_len(pattern_id);",
                "    let result = group_info.slot(pattern_id, group_index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
                "    let group_info = GroupInfo::empty();",
                "    let group_index = group_info.group_len(pattern_id);",
                "    let result = group_info.slot(pattern_id, group_index);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
                "    let group_info = GroupInfo::empty();",
                "    let group_index = group_info.group_len(pattern_id) + 1;",
                "    let result = group_info.slot(pattern_id, group_index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let pattern_id = PatternID(SmallIndex::new(0).unwrap());",
                "    let group_info = GroupInfo::empty();",
                "    let group_index = group_info.group_len(pattern_id) + 1;",
                "    let result = group_info.slot(pattern_id, group_index);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: group_index >= self.group_len(pid) at line 1905 is false\n",
        "precondition: group_index == 0 at line 1912 is false\n",
        "expected return value/type: Some(pid.as_usize() * 2)\n"
      ],
      "input_infer": "0 < pid.as_usize() < self.group_len(pid) and group_index > 0 and group_index < self.group_len(pid)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pid = PatternID(SmallIndex(1));",
                "    let group_index = 1;",
                "",
                "    let result = group_info.slot(pid, group_index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(pid.as_usize() * 2));"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pid = PatternID(SmallIndex(1));",
                "    let group_index = 1;",
                "",
                "    let result = group_info.slot(pid, group_index);",
                "    assert_eq!(result, Some(pid.as_usize() * 2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfo::default();",
                "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
                "    ",
                "    let pid = PatternID(SmallIndex(0));",
                "    let group_index = 1;",
                "",
                "    let result = group_info.slot(pid, group_index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(pid.as_usize() * 2));"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfo::default();",
                "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
                "    ",
                "    let pid = PatternID(SmallIndex(0));",
                "    let group_index = 1;",
                "",
                "    let result = group_info.slot(pid, group_index);",
                "    assert_eq!(result, Some(pid.as_usize() * 2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut group_info = GroupInfo::default();",
                "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
                "    ",
                "    let pid = PatternID(SmallIndex(1));",
                "    let group_index = 1;",
                "",
                "    let result = group_info.slot(pid, group_index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(2));"
              ],
              "code": [
                "{",
                "    let mut group_info = GroupInfo::default();",
                "    group_info.0.slot_ranges.push((SmallIndex(2), SmallIndex(4)));",
                "    ",
                "    let pid = PatternID(SmallIndex(1));",
                "    let group_index = 1;",
                "",
                "    let result = group_info.slot(pid, group_index);",
                "    assert_eq!(result, Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: group_index >= self.group_len(pid) at line 1905 is false\n",
        "precondition: group_index == 0 at line 1912 is true\n",
        "expected return value/type: Some(start.as_usize() + ((group_index - 1) * 2))\n"
      ],
      "input_infer": "pid: PatternID must 0; group_index: 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 0;",
                "    let _ = group_info.slot(pid, group_index);",
                "}"
              ],
              "oracle": [
                "    let group_info = GroupInfo::default();",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 0;",
                "    assert_eq!(group_info.slot(pid, group_index), Some(pid.as_usize() * 2));"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 0;",
                "    let _ = group_info.slot(pid, group_index);",
                "    let group_info = GroupInfo::default();",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 0;",
                "    assert_eq!(group_info.slot(pid, group_index), Some(pid.as_usize() * 2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo {",
                "        0: Arc::new(GroupInfoInner {",
                "            slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))],",
                "            ..Default::default()",
                "        }),",
                "    };",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 1;",
                "    let _ = group_info.slot(pid, group_index);",
                "}"
              ],
              "oracle": [
                "    let group_info = GroupInfo { 0: Arc::new(GroupInfoInner { slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))], ..Default::default() }), };",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 1;",
                "    let expected_slot = Some(1 + ((group_index - 1) * 2));",
                "    assert_eq!(group_info.slot(pid, group_index), expected_slot);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo {",
                "        0: Arc::new(GroupInfoInner {",
                "            slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))],",
                "            ..Default::default()",
                "        }),",
                "    };",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 1;",
                "    let _ = group_info.slot(pid, group_index);",
                "    let group_info = GroupInfo { 0: Arc::new(GroupInfoInner { slot_ranges: vec![(SmallIndex::new_unchecked(1), SmallIndex::new_unchecked(2))], ..Default::default() }), };",
                "    let pid = PatternID::must(SmallIndex::new_unchecked(0).as_usize());",
                "    let group_index = 1;",
                "    let expected_slot = Some(1 + ((group_index - 1) * 2));",
                "    assert_eq!(group_info.slot(pid, group_index), expected_slot);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}