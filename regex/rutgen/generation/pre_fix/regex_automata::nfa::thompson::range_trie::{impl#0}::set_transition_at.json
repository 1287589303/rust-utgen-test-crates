{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::set_transition_at",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:530:5:538:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "i: usize >= 0 && i < transitions.len() && from_id: StateID is valid && range: Utf8Range represents a valid byte range && next_id: StateID is valid\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[should_panic]",
            "fn test_set_transition_at_out_of_bounds() {",
            "    let mut trie = RangeTrie::new();",
            "    let from_id = trie.add_empty();",
            "    let next_id = trie.add_empty();",
            "    let range = Utf8Range::new(0, 1);",
            "    let i = 1; // Out of bounds",
            "",
            "    trie.set_transition_at(i, from_id, range, next_id);",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range = Utf8Range::new(0, 1);",
                "    let i = 0;",
                "",
                "    trie.set_transition_at(i, from_id, range, next_id);",
                "}"
              ],
              "oracle": [
                "    assert_panics!(trie.set_transition_at(1, from_id, range, next_id));",
                "    trie.set_transition_at(0, from_id, range, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range = Utf8Range::new(0, 1);",
                "    let i = 0;",
                "",
                "    trie.set_transition_at(i, from_id, range, next_id);",
                "    assert_panics!(trie.set_transition_at(1, from_id, range, next_id));",
                "    trie.set_transition_at(0, from_id, range, next_id);",
                "    assert_eq!(trie.state(from_id).transitions[0].range, range);",
                "    assert_eq!(trie.state(from_id).transitions[0].next_id, next_id);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range = Utf8Range::new(0, 1);",
                "    ",
                "    // Precondition: Setting the last possible index",
                "    let transitions_len = trie.state(from_id).transitions.len();",
                "    let i = transitions_len - 1;",
                "",
                "    trie.set_transition_at(i, from_id, range, next_id);",
                "}"
              ],
              "oracle": [
                "    assert_panics!(trie.set_transition_at(1, from_id, Utf8Range::new(0, 1), next_id));",
                "    assert_eq!(trie.state(from_id).transitions[transitions_len - 1].range, Utf8Range::new(0, 1));",
                "    assert_eq!(trie.state(from_id).transitions[transitions_len - 1].next_id, next_id);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range = Utf8Range::new(0, 1);",
                "    ",
                "    // Precondition: Setting the last possible index",
                "    let transitions_len = trie.state(from_id).transitions.len();",
                "    let i = transitions_len - 1;",
                "",
                "    trie.set_transition_at(i, from_id, range, next_id);",
                "    assert_panics!(trie.set_transition_at(1, from_id, Utf8Range::new(0, 1), next_id));",
                "    assert_eq!(trie.state(from_id).transitions[transitions_len - 1].range, Utf8Range::new(0, 1));",
                "    assert_eq!(trie.state(from_id).transitions[transitions_len - 1].next_id, next_id);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range1 = Utf8Range::new(0, 1);",
                "    let range2 = Utf8Range::new(1, 2);",
                "",
                "    trie.insert(&[range1, range2]); // Insert two ranges",
                "    let i = 1; // Change the transition at the second index",
                "",
                "    trie.set_transition_at(i, from_id, range2, next_id);",
                "}"
              ],
              "oracle": [
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range = Utf8Range::new(0, 1);",
                "    let i = 1; // Out of bounds",
                "    assert_panics!(trie.set_transition_at(i, from_id, range, next_id));",
                "    ",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range1 = Utf8Range::new(0, 1);",
                "    let range2 = Utf8Range::new(1, 2);",
                "    trie.insert(&[range1, range2]); // Insert two ranges",
                "    let i = 1; // Change the transition at the second index",
                "    trie.set_transition_at(i, from_id, range2, next_id);",
                "    let state = trie.state(from_id);",
                "    assert_eq!(state.transitions[i].range, range2);",
                "    assert_eq!(state.transitions[i].next_id, next_id);"
              ],
              "code": [
                "{",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range1 = Utf8Range::new(0, 1);",
                "    let range2 = Utf8Range::new(1, 2);",
                "",
                "    trie.insert(&[range1, range2]); // Insert two ranges",
                "    let i = 1; // Change the transition at the second index",
                "",
                "    trie.set_transition_at(i, from_id, range2, next_id);",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range = Utf8Range::new(0, 1);",
                "    let i = 1; // Out of bounds",
                "    assert_panics!(trie.set_transition_at(i, from_id, range, next_id));",
                "    ",
                "    let mut trie = RangeTrie::new();",
                "    let from_id = trie.add_empty();",
                "    let next_id = trie.add_empty();",
                "    let range1 = Utf8Range::new(0, 1);",
                "    let range2 = Utf8Range::new(1, 2);",
                "    trie.insert(&[range1, range2]); // Insert two ranges",
                "    let i = 1; // Change the transition at the second index",
                "    trie.set_transition_at(i, from_id, range2, next_id);",
                "    let state = trie.state(from_id);",
                "    assert_eq!(state.transitions[i].range, range2);",
                "    assert_eq!(state.transitions[i].next_id, next_id);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}