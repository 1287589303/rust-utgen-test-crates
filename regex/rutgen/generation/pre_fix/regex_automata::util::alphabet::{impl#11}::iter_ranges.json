{
  "name": "regex_automata::util::alphabet::{impl#11}::iter_ranges",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:794:5:796:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ByteSetRangeIter { set: self, b: 0 }\n"
      ],
      "input_infer": "ByteSet with varying byte combinations (empty, single byte, multiple contiguous bytes, and non-contiguous bytes)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet::empty();",
                "    let iter = byte_set.iter_ranges();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "    assert!(byte_set.is_empty());"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet::empty();",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "    assert!(byte_set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(5);",
                "    let iter = byte_set.iter_ranges();",
                "}"
              ],
              "oracle": [
                "    let mut byte_set = ByteSet::empty();",
                "    assert_eq!(byte_set.iter_ranges(), ByteSetRangeIter { set: &byte_set, b: 0 });"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(5);",
                "    let iter = byte_set.iter_ranges();",
                "    let mut byte_set = ByteSet::empty();",
                "    assert_eq!(byte_set.iter_ranges(), ByteSetRangeIter { set: &byte_set, b: 0 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(1);",
                "    byte_set.add(2);",
                "    byte_set.add(3);",
                "    let iter = byte_set.iter_ranges();",
                "}"
              ],
              "oracle": [
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(1);",
                "    byte_set.add(2);",
                "    byte_set.add(3);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(1);",
                "    byte_set.add(2);",
                "    byte_set.add(3);",
                "    let iter = byte_set.iter_ranges();",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(1);",
                "    byte_set.add(2);",
                "    byte_set.add(3);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(1);",
                "    byte_set.add(3);",
                "    byte_set.add(5);",
                "    let iter = byte_set.iter_ranges();",
                "}"
              ],
              "oracle": [
                "    let byte_set = ByteSet::empty();",
                "    assert_eq!(byte_set.iter_ranges(), ByteSetRangeIter { set: &byte_set, b: 0 });",
                "    byte_set.add(1);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "    byte_set.add(3);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "    byte_set.add(5);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);"
              ],
              "code": [
                "{",
                "    let mut byte_set = ByteSet::empty();",
                "    byte_set.add(1);",
                "    byte_set.add(3);",
                "    byte_set.add(5);",
                "    let iter = byte_set.iter_ranges();",
                "    let byte_set = ByteSet::empty();",
                "    assert_eq!(byte_set.iter_ranges(), ByteSetRangeIter { set: &byte_set, b: 0 });",
                "    byte_set.add(1);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "    byte_set.add(3);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "    byte_set.add(5);",
                "    let iter = byte_set.iter_ranges();",
                "    assert_eq!(iter.set, &byte_set);",
                "    assert_eq!(iter.b, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}