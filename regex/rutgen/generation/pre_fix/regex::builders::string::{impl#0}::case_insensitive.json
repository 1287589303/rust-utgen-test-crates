{
  "name": "regex::builders::string::{impl#0}::case_insensitive",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:322:9:325:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "pattern: non-empty string, yes: boolean (true, false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"foo(?-i:bar)quux\")",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.is_match(\"FoObarQuUx\"), true);",
                "    assert_eq!(re.is_match(\"fooBARquux\"), false);"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"foo(?-i:bar)quux\")",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re.is_match(\"FoObarQuUx\"), true);",
                "    assert_eq!(re.is_match(\"fooBARquux\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"foo(?-i:bar)quux\")",
                "        .case_insensitive(false)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.is_match(\"FoObarQuUx\"), false);",
                "    assert_eq!(re.is_match(\"fooBARquux\"), false);",
                "    assert_eq!(re.is_match(\"foobarquux\"), true);",
                "    assert_eq!(re.is_match(\"foo bar quux\"), false);",
                "    assert_eq!(re.is_match(\"FOOBARQUUX\"), false);",
                "    assert_eq!(re.is_match(\"foobar QUUX\"), true);",
                "    assert_eq!(re.is_match(\"foo(?-i:bar)quux\"), true);",
                "    assert_eq!(re.is_match(\"foo(?i:bar)quux\"), true);",
                "    assert_eq!(re.is_match(\"foo(?i:BAR)quux\"), false);",
                "    assert_eq!(re.is_match(\"FOO(?-i:BAR)QUUX\"), false);"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"foo(?-i:bar)quux\")",
                "        .case_insensitive(false)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re.is_match(\"FoObarQuUx\"), false);",
                "    assert_eq!(re.is_match(\"fooBARquux\"), false);",
                "    assert_eq!(re.is_match(\"foobarquux\"), true);",
                "    assert_eq!(re.is_match(\"foo bar quux\"), false);",
                "    assert_eq!(re.is_match(\"FOOBARQUUX\"), false);",
                "    assert_eq!(re.is_match(\"foobar QUUX\"), true);",
                "    assert_eq!(re.is_match(\"foo(?-i:bar)quux\"), true);",
                "    assert_eq!(re.is_match(\"foo(?i:bar)quux\"), true);",
                "    assert_eq!(re.is_match(\"foo(?i:BAR)quux\"), false);",
                "    assert_eq!(re.is_match(\"FOO(?-i:BAR)QUUX\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(\"a\")",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.is_match(\"A\"), true);",
                "    assert_eq!(re.is_match(\"a\"), true);",
                "    assert_eq!(re.is_match(\"b\"), false);",
                "    assert_eq!(re.is_match(\"Aa\"), false);",
                "    assert_eq!(re.is_match(\"aa\"), false);",
                "    assert_eq!(re.is_match(\"aA\"), false);",
                "    assert_eq!(re.is_match(\"aaA\"), false);",
                "    assert_eq!(re.is_match(\"AA\"), true);"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(\"a\")",
                "        .case_insensitive(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re.is_match(\"A\"), true);",
                "    assert_eq!(re.is_match(\"a\"), true);",
                "    assert_eq!(re.is_match(\"b\"), false);",
                "    assert_eq!(re.is_match(\"Aa\"), false);",
                "    assert_eq!(re.is_match(\"aa\"), false);",
                "    assert_eq!(re.is_match(\"aA\"), false);",
                "    assert_eq!(re.is_match(\"aaA\"), false);",
                "    assert_eq!(re.is_match(\"AA\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}