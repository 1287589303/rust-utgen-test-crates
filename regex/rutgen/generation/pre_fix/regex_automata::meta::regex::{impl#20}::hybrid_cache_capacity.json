{
  "name": "regex_automata::meta::regex::{impl#20}::hybrid_cache_capacity",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2826:5:2828:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config { hybrid_cache_capacity: Some(limit), ..self }\n"
      ],
      "input_infer": "limit: 0 to usize::MAX, including boundary values for optimal and suboptimal caching scenarios\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.hybrid_cache_capacity, Some(0));",
                "    assert_eq!(result.get_utf8_empty(), config.get_utf8_empty());",
                "    assert_eq!(result.get_match_kind(), config.get_match_kind());",
                "    assert_eq!(result.get_auto_prefilter(), config.get_auto_prefilter());",
                "    assert_eq!(result.get_prefilter(), config.get_prefilter());",
                "    assert_eq!(result.get_which_captures(), config.get_which_captures());",
                "    assert_eq!(result.get_nfa_size_limit(), config.get_nfa_size_limit());",
                "    assert_eq!(result.get_onepass_size_limit(), config.get_onepass_size_limit());",
                "    assert_eq!(result.get_dfa_size_limit(), config.get_dfa_size_limit());",
                "    assert_eq!(result.get_dfa_state_limit(), config.get_dfa_state_limit());",
                "    assert_eq!(result.get_byte_classes(), config.get_byte_classes());",
                "    assert_eq!(result.get_line_terminator(), config.get_line_terminator());",
                "    assert_eq!(result.get_hybrid(), config.get_hybrid());",
                "    assert_eq!(result.get_dfa(), config.get_dfa());",
                "    assert_eq!(result.get_onepass(), config.get_onepass());",
                "    assert_eq!(result.get_backtrack(), config.get_backtrack());"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(0);",
                "    assert_eq!(result.hybrid_cache_capacity, Some(0));",
                "    assert_eq!(result.get_utf8_empty(), config.get_utf8_empty());",
                "    assert_eq!(result.get_match_kind(), config.get_match_kind());",
                "    assert_eq!(result.get_auto_prefilter(), config.get_auto_prefilter());",
                "    assert_eq!(result.get_prefilter(), config.get_prefilter());",
                "    assert_eq!(result.get_which_captures(), config.get_which_captures());",
                "    assert_eq!(result.get_nfa_size_limit(), config.get_nfa_size_limit());",
                "    assert_eq!(result.get_onepass_size_limit(), config.get_onepass_size_limit());",
                "    assert_eq!(result.get_dfa_size_limit(), config.get_dfa_size_limit());",
                "    assert_eq!(result.get_dfa_state_limit(), config.get_dfa_state_limit());",
                "    assert_eq!(result.get_byte_classes(), config.get_byte_classes());",
                "    assert_eq!(result.get_line_terminator(), config.get_line_terminator());",
                "    assert_eq!(result.get_hybrid(), config.get_hybrid());",
                "    assert_eq!(result.get_dfa(), config.get_dfa());",
                "    assert_eq!(result.get_onepass(), config.get_onepass());",
                "    assert_eq!(result.get_backtrack(), config.get_backtrack());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.hybrid_cache_capacity, Some(1));",
                "    assert_eq!(result.get_hybrid_cache_capacity(), 1);",
                "    assert_eq!(result.get_nfa_size_limit(), None);",
                "    assert_eq!(result.get_dfa_size_limit(), None);",
                "    assert_eq!(result.get_onepass_size_limit(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(1);",
                "    assert_eq!(result.hybrid_cache_capacity, Some(1));",
                "    assert_eq!(result.get_hybrid_cache_capacity(), 1);",
                "    assert_eq!(result.get_nfa_size_limit(), None);",
                "    assert_eq!(result.get_dfa_size_limit(), None);",
                "    assert_eq!(result.get_onepass_size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(1024);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.hybrid_cache_capacity, Some(1024));",
                "    assert_eq!(result.get_match_kind(), config.get_match_kind());",
                "    assert_eq!(result.get_utf8_empty(), config.get_utf8_empty());",
                "    assert_eq!(result.get_auto_prefilter(), config.get_auto_prefilter());",
                "    assert_eq!(result.get_prefilter(), config.get_prefilter());",
                "    assert_eq!(result.get_which_captures(), config.get_which_captures());",
                "    assert_eq!(result.get_nfa_size_limit(), config.get_nfa_size_limit());",
                "    assert_eq!(result.get_onepass_size_limit(), config.get_onepass_size_limit());",
                "    assert_eq!(result.get_dfa_size_limit(), config.get_dfa_size_limit());",
                "    assert_eq!(result.get_dfa_state_limit(), config.get_dfa_state_limit());",
                "    assert_eq!(result.get_byte_classes(), config.get_byte_classes());",
                "    assert_eq!(result.get_line_terminator(), config.get_line_terminator());",
                "    assert_eq!(result.get_hybrid(), config.get_hybrid());",
                "    assert_eq!(result.get_dfa(), config.get_dfa());",
                "    assert_eq!(result.get_onepass(), config.get_onepass());",
                "    assert_eq!(result.get_backtrack(), config.get_backtrack());"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(1024);",
                "    assert_eq!(result.hybrid_cache_capacity, Some(1024));",
                "    assert_eq!(result.get_match_kind(), config.get_match_kind());",
                "    assert_eq!(result.get_utf8_empty(), config.get_utf8_empty());",
                "    assert_eq!(result.get_auto_prefilter(), config.get_auto_prefilter());",
                "    assert_eq!(result.get_prefilter(), config.get_prefilter());",
                "    assert_eq!(result.get_which_captures(), config.get_which_captures());",
                "    assert_eq!(result.get_nfa_size_limit(), config.get_nfa_size_limit());",
                "    assert_eq!(result.get_onepass_size_limit(), config.get_onepass_size_limit());",
                "    assert_eq!(result.get_dfa_size_limit(), config.get_dfa_size_limit());",
                "    assert_eq!(result.get_dfa_state_limit(), config.get_dfa_state_limit());",
                "    assert_eq!(result.get_byte_classes(), config.get_byte_classes());",
                "    assert_eq!(result.get_line_terminator(), config.get_line_terminator());",
                "    assert_eq!(result.get_hybrid(), config.get_hybrid());",
                "    assert_eq!(result.get_dfa(), config.get_dfa());",
                "    assert_eq!(result.get_onepass(), config.get_onepass());",
                "    assert_eq!(result.get_backtrack(), config.get_backtrack());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(1 << 20);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.hybrid_cache_capacity, Some(1 << 20));",
                "    assert_eq!(result.get_hybrid_cache_capacity(), 1 << 20);",
                "    assert_eq!(result.hybrid_cache_capacity, config.hybrid_cache_capacity);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(1 << 20);",
                "    assert_eq!(result.hybrid_cache_capacity, Some(1 << 20));",
                "    assert_eq!(result.get_hybrid_cache_capacity(), 1 << 20);",
                "    assert_eq!(result.hybrid_cache_capacity, config.hybrid_cache_capacity);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.hybrid_cache_capacity, Some(usize::MAX));",
                "    assert_eq!(result.get_hybrid_cache_capacity(), usize::MAX);",
                "    assert!(result != config);",
                "    assert!(result.get_dfa().is_none());",
                "    assert!(result.get_prefilter().is_none());",
                "    assert_eq!(result.get_nfa_size_limit(), None);",
                "    assert!(result.get_onepass_size_limit().is_none());",
                "    assert_eq!(result.get_line_terminator(), 0);",
                "    assert!(!result.get_byte_classes());",
                "    assert!(!result.get_backtrack());",
                "    assert_eq!(result.get_which_captures(), WhichCaptures::All);",
                "    assert!(!result.get_auto_prefilter());",
                "    assert!(!result.get_utf8_empty());",
                "    assert!(!result.get_hybrid());",
                "    assert!(!result.get_onepass());",
                "    assert!(!result.get_dfa());"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.hybrid_cache_capacity(usize::MAX);",
                "    assert_eq!(result.hybrid_cache_capacity, Some(usize::MAX));",
                "    assert_eq!(result.get_hybrid_cache_capacity(), usize::MAX);",
                "    assert!(result != config);",
                "    assert!(result.get_dfa().is_none());",
                "    assert!(result.get_prefilter().is_none());",
                "    assert_eq!(result.get_nfa_size_limit(), None);",
                "    assert!(result.get_onepass_size_limit().is_none());",
                "    assert_eq!(result.get_line_terminator(), 0);",
                "    assert!(!result.get_byte_classes());",
                "    assert!(!result.get_backtrack());",
                "    assert_eq!(result.get_which_captures(), WhichCaptures::All);",
                "    assert!(!result.get_auto_prefilter());",
                "    assert!(!result.get_utf8_empty());",
                "    assert!(!result.get_hybrid());",
                "    assert!(!result.get_onepass());",
                "    assert!(!result.get_dfa());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}