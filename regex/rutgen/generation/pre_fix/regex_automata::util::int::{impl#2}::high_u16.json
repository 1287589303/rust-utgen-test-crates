{
  "name": "regex_automata::util::int::{impl#2}::high_u16",
  "mod_info": {
    "name": "util::int",
    "loc": "regex-automata/src/util/mod.rs:51:1:51:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/int.rs:105:5:107:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (self >> 16) as u16\n"
      ],
      "input_infer": "test input conditions or ranges: input values of type u32 covering the full range from 0 to 4294967295, including boundary values 0, 65535, 65536, 4294901760, 4294967295, and values just below and above these thresholds\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0;",
                "    let result = value.high_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (0 >> 16) as u16);",
                "    let value: u32 = 65535;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (65535 >> 16) as u16);",
                "    let value: u32 = 65536;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (65536 >> 16) as u16);",
                "    let value: u32 = 4294967295;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (4294967295 >> 16) as u16);",
                "    let value: u32 = 32768;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (32768 >> 16) as u16);",
                "    let value: u32 = 0xFFFF0000;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (0xFFFF0000 >> 16) as u16);",
                "    let value: u32 = 0xABCD1234;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (0xABCD1234 >> 16) as u16);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (0 >> 16) as u16);",
                "    let value: u32 = 65535;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (65535 >> 16) as u16);",
                "    let value: u32 = 65536;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (65536 >> 16) as u16);",
                "    let value: u32 = 4294967295;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (4294967295 >> 16) as u16);",
                "    let value: u32 = 32768;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (32768 >> 16) as u16);",
                "    let value: u32 = 0xFFFF0000;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (0xFFFF0000 >> 16) as u16);",
                "    let value: u32 = 0xABCD1234;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, (0xABCD1234 >> 16) as u16);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 65535;",
                "    let result = value.high_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (65535 >> 16) as u16);",
                "    assert_eq!(result, (value >> 16) as u16);",
                "    let value: u32 = 4294967295;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 65535);",
                "    assert_eq!(result, (4294967295 >> 16) as u16);",
                "    let value: u32 = 0;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (0 >> 16) as u16);",
                "    let value: u32 = 32768;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (32768 >> 16) as u16);"
              ],
              "code": [
                "{",
                "    let value: u32 = 65535;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (65535 >> 16) as u16);",
                "    assert_eq!(result, (value >> 16) as u16);",
                "    let value: u32 = 4294967295;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 65535);",
                "    assert_eq!(result, (4294967295 >> 16) as u16);",
                "    let value: u32 = 0;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (0 >> 16) as u16);",
                "    let value: u32 = 32768;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0);",
                "    assert_eq!(result, (32768 >> 16) as u16);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 65536;",
                "    let result = value.high_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    assert_eq!(result, (65536 >> 16) as u16);",
                "    assert_eq!(result, (value >> 16) as u16);",
                "    assert_eq!(result, 0u16);",
                "    assert_eq!(result, (0u32 >> 16) as u16);",
                "    assert_eq!(result, (65535 >> 16) as u16);",
                "    assert_eq!(result, (4294967295u32 >> 16) as u16);",
                "    assert_eq!(result, (32768 >> 16) as u16);",
                "    assert_eq!(result, (131071 >> 16) as u16);",
                "    assert_eq!(result, (65536u32.wrapping_add(1) >> 16) as u16);"
              ],
              "code": [
                "{",
                "    let value: u32 = 65536;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 1);",
                "    assert_eq!(result, (65536 >> 16) as u16);",
                "    assert_eq!(result, (value >> 16) as u16);",
                "    assert_eq!(result, 0u16);",
                "    assert_eq!(result, (0u32 >> 16) as u16);",
                "    assert_eq!(result, (65535 >> 16) as u16);",
                "    assert_eq!(result, (4294967295u32 >> 16) as u16);",
                "    assert_eq!(result, (32768 >> 16) as u16);",
                "    assert_eq!(result, (131071 >> 16) as u16);",
                "    assert_eq!(result, (65536u32.wrapping_add(1) >> 16) as u16);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 4294901760;",
                "    let result = value.high_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 65535);"
              ],
              "code": [
                "{",
                "    let value: u32 = 4294901760;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 65535);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 4294967295;",
                "    let result = value.high_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 65535);"
              ],
              "code": [
                "{",
                "    let value: u32 = 4294967295;",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 65535);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 4294967296; // This value will overflow in u32 context",
                "    let result = value.high_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);  // 4294967296 >> 16 equals 1 when cast to u16",
                "    assert!(result <= u16::MAX);  // Ensure result is within u16 range",
                "    assert_eq!(result as u32, 4294967296 >> 16);  // Validate correct bit shifting operation"
              ],
              "code": [
                "{",
                "    let value: u32 = 4294967296; // This value will overflow in u32 context",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 1);  // 4294967296 >> 16 equals 1 when cast to u16",
                "    assert!(result <= u16::MAX);  // Ensure result is within u16 range",
                "    assert_eq!(result as u32, 4294967296 >> 16);  // Validate correct bit shifting operation",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 4294967294; // Testing just below max",
                "    let result = value.high_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 65535); // Expecting high 16 bits of 4294967294",
                "    assert_eq!(result, (value >> 16) as u16); // Validating against manual calculation",
                "    let value: u32 = 0; // Testing with minimum",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0); // Expecting high 16 bits of 0",
                "    let value: u32 = 65536; // Testing boundary value",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 1); // Expecting high 16 bits of 65536",
                "    let value: u32 = 65535; // Testing upper 16 bits",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0); // Expecting high 16 bits of 65535",
                "    let value: u32 = 4294901760; // Testing just below 2^32 - 1",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 65534); // Expecting high 16 bits of 4294901760"
              ],
              "code": [
                "{",
                "    let value: u32 = 4294967294; // Testing just below max",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 65535); // Expecting high 16 bits of 4294967294",
                "    assert_eq!(result, (value >> 16) as u16); // Validating against manual calculation",
                "    let value: u32 = 0; // Testing with minimum",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0); // Expecting high 16 bits of 0",
                "    let value: u32 = 65536; // Testing boundary value",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 1); // Expecting high 16 bits of 65536",
                "    let value: u32 = 65535; // Testing upper 16 bits",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 0); // Expecting high 16 bits of 65535",
                "    let value: u32 = 4294901760; // Testing just below 2^32 - 1",
                "    let result = value.high_u16();",
                "    assert_eq!(result, 65534); // Expecting high 16 bits of 4294901760",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}