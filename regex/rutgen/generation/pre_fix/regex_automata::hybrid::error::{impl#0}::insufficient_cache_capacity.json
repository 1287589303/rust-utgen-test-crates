{
  "name": "regex_automata::hybrid::error::{impl#0}::insufficient_cache_capacity",
  "mod_info": {
    "name": "hybrid::error",
    "loc": "regex-automata/src/hybrid/mod.rs:141:1:141:11"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/error.rs:40:5:47:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: BuildError {\n            kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given },\n        }\n"
      ],
      "input_infer": "minimum: 0 to MAX usize, given: 0 to MAX usize, given < minimum, given = minimum, given > minimum\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = 0;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    let minimum = 0;",
                "    let given = 0;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 1;",
                "    let given = 2;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 10;",
                "    let given = 5;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX - 1;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);"
              ],
              "code": [
                "{",
                "    let minimum = 0;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    let minimum = 0;",
                "    let given = 0;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 1;",
                "    let given = 2;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 10;",
                "    let given = 5;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX - 1;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error, expected_error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = 0;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    let minimum = 0;",
                "    let given = 1;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = 5;",
                "    let given = 3;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = 10;",
                "    let given = 20;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = 1;",
                "    let given = 0;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX - 1;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);"
              ],
              "code": [
                "{",
                "    let minimum = 0;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    let minimum = 0;",
                "    let given = 1;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = 5;",
                "    let given = 3;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = 10;",
                "    let given = 20;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = 1;",
                "    let given = 0;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX - 1;",
                "    let expected = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = 1;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    let minimum = 1;",
                "    let given = 0;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 10;",
                "    let given = 5;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 0;",
                "    let given = 1;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX - 1;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 100;",
                "    let given = 100;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);"
              ],
              "code": [
                "{",
                "    let minimum = 1;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    let minimum = 1;",
                "    let given = 0;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 10;",
                "    let given = 5;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 0;",
                "    let given = 1;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = usize::MAX;",
                "    let given = usize::MAX - 1;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "    ",
                "    let minimum = 100;",
                "    let given = 100;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = 1;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    let minimum = 1;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 1, given: 1 });",
                "    let minimum = 2;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 2, given: 1 });",
                "    let minimum = 0;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 0, given: 0 });",
                "    let minimum = 10;",
                "    let given = 5;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 10, given: 5 });",
                "    let minimum = 100;",
                "    let given = 50;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 100, given: 50 });"
              ],
              "code": [
                "{",
                "    let minimum = 1;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    let minimum = 1;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 1, given: 1 });",
                "    let minimum = 2;",
                "    let given = 1;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 2, given: 1 });",
                "    let minimum = 0;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 0, given: 0 });",
                "    let minimum = 10;",
                "    let given = 5;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 10, given: 5 });",
                "    let minimum = 100;",
                "    let given = 50;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 100, given: 50 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = 1;",
                "    let given = 2;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 1, given: 2 });"
              ],
              "code": [
                "{",
                "    let minimum = 1;",
                "    let given = 2;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 1, given: 2 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = std::usize::MAX;",
                "    let given = std::usize::MAX;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    let minimum = std::usize::MAX;",
                "    let given = std::usize::MAX;",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum, given });"
              ],
              "code": [
                "{",
                "    let minimum = std::usize::MAX;",
                "    let given = std::usize::MAX;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    let minimum = std::usize::MAX;",
                "    let given = std::usize::MAX;",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum, given });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = std::usize::MAX;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    let minimum = std::usize::MAX;",
                "    let given = 0;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);"
              ],
              "code": [
                "{",
                "    let minimum = std::usize::MAX;",
                "    let given = 0;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    let minimum = std::usize::MAX;",
                "    let given = 0;",
                "    let expected_error = BuildError { kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given } };",
                "    assert_eq!(_error, expected_error);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let minimum = 0;",
                "    let given = std::usize::MAX;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 0, given: std::usize::MAX });"
              ],
              "code": [
                "{",
                "    let minimum = 0;",
                "    let given = std::usize::MAX;",
                "    let _error = BuildError::insufficient_cache_capacity(minimum, given);",
                "    assert_eq!(_error.kind, BuildErrorKind::InsufficientCacheCapacity { minimum: 0, given: std::usize::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}