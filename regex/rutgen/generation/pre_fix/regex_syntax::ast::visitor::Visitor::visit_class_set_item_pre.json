{
  "name": "regex_syntax::ast::visitor::Visitor::visit_class_set_item_pre",
  "mod_info": {
    "name": "ast::visitor",
    "loc": "regex-syntax/src/ast/mod.rs:13:1:13:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/visitor.rs:58:5:63:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "_input conditions: Any valid instance of ClassSetItem, including Empty, Literal, Range, Ascii, Unicode, Perl, Bracketed, and Union variants, with various valid inner data structures or empty state._\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Empty(Span { start: 0, end: 0 });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span { start: 0, end: 0 })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal::Char('a'))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange::new(Literal::Char('a'), Literal::Char('z')))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii::Alphanumeric)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode::Letter)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl::Digit)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::new()))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion::new())).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Empty(Span { start: 0, end: 0 });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span { start: 0, end: 0 })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal::Char('a'))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange::new(Literal::Char('a'), Literal::Char('z')))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii::Alphanumeric)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode::Letter)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl::Digit)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::new()))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion::new())).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Literal(Literal { value: 'a' });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed {}))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion {})).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Literal(Literal { value: 'a' });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl {})).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed {}))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion {})).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Range(ClassSetRange { start: 'a', end: 'z' });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal::from('c'))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii::Alnum)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode::L)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl::Digit)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![] }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion { items: vec![] })).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Range(ClassSetRange { start: 'a', end: 'z' });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal::from('c'))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii::Alnum)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode::L)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl::Digit)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![] }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion { items: vec![] })).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Ascii(ClassAscii { name: String::from(\"alnum\") });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii { name: String::from(\"punct\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { .. }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion { .. })).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Ascii(ClassAscii { name: String::from(\"alnum\") });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii { name: String::from(\"punct\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl { .. })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { .. }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion { .. })).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Unicode(ClassUnicode { name: String::from(\"Greek\") });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span::default())).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal { value: 'a' })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii::default())).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode { name: String::from(\"Latin\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl::default())).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::default()))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion::default())).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Unicode(ClassUnicode { name: String::from(\"Greek\") });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span::default())).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal { value: 'a' })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii::default())).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode { name: String::from(\"Latin\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl::default())).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::default()))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion::default())).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Perl(ClassPerl { name: String::from(\"digit\") });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal { value: 'a' })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange { start: 'a', end: 'z' })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii { name: String::from(\"alnum\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode { name: String::from(\"Greek\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![] }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion { items: vec![] })).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Perl(ClassPerl { name: String::from(\"digit\") });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal { value: 'a' })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange { start: 'a', end: 'z' })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii { name: String::from(\"alnum\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode { name: String::from(\"Greek\") })).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![] }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion { items: vec![] })).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![] }));",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![ast::ClassSetItem::Literal(Literal)] }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion)).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![] }));",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed { items: vec![ast::ClassSetItem::Literal(Literal)] }))).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Union(ClassSetUnion)).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Union(ClassSetUnion { items: vec![] });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "}"
              ],
              "oracle": [
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed))).unwrap();"
              ],
              "code": [
                "{",
                "    struct TestVisitor;",
                "    impl Visitor for TestVisitor {",
                "        type Output = ();",
                "        type Err = ();",
                "    }",
                "",
                "    let mut visitor = TestVisitor;",
                "    let class_set_item = ast::ClassSetItem::Union(ClassSetUnion { items: vec![] });",
                "    ",
                "    visitor.visit_class_set_item_pre(&class_set_item).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Empty(Span)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Literal(Literal)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Range(ClassSetRange)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Ascii(ClassAscii)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Unicode(ClassUnicode)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Perl(ClassPerl)).unwrap();",
                "    visitor.visit_class_set_item_pre(&ast::ClassSetItem::Bracketed(Box::new(ClassBracketed))).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}