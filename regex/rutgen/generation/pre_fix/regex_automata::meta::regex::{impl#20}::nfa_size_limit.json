{
  "name": "regex_automata::meta::regex::{impl#20}::nfa_size_limit",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2752:5:2754:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Config { nfa_size_limit: Some(limit), ..self }\n"
      ],
      "input_infer": "limit: None, limit: Some(0), limit: Some(1024), limit: Some(1073741824), limit: Some(20 * (1<<10))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nfa_size_limit(None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nfa_size_limit, Some(None));",
                "    assert_eq!(config.nfa_size_limit, None);",
                "    assert!(config.nfa_size_limit.is_none());",
                "    assert_eq!(config.nfa_size_limit.as_ref(), None);",
                "    assert_eq!(config.nfa_size_limit.unwrap(), None);",
                "    assert!(matches!(config.nfa_size_limit, Some(None)));"
              ],
              "code": [
                "{",
                "    let config = Config::new().nfa_size_limit(None);",
                "    assert_eq!(config.nfa_size_limit, Some(None));",
                "    assert_eq!(config.nfa_size_limit, None);",
                "    assert!(config.nfa_size_limit.is_none());",
                "    assert_eq!(config.nfa_size_limit.as_ref(), None);",
                "    assert_eq!(config.nfa_size_limit.unwrap(), None);",
                "    assert!(matches!(config.nfa_size_limit, Some(None)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(0));",
                "}"
              ],
              "oracle": [
                "    let config = Config::new().nfa_size_limit(Some(0));",
                "    assert_eq!(config.nfa_size_limit, Some(Some(0)));",
                "    let config = Config::new().nfa_size_limit(Some(10));",
                "    assert_eq!(config.nfa_size_limit, Some(Some(10)));",
                "    let config = Config::new().nfa_size_limit(Some(1024));",
                "    assert_eq!(config.nfa_size_limit, Some(Some(1024)));",
                "    let config = Config::new().nfa_size_limit(None);",
                "    assert_eq!(config.nfa_size_limit, Some(None));"
              ],
              "code": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(0));",
                "    let config = Config::new().nfa_size_limit(Some(0));",
                "    assert_eq!(config.nfa_size_limit, Some(Some(0)));",
                "    let config = Config::new().nfa_size_limit(Some(10));",
                "    assert_eq!(config.nfa_size_limit, Some(Some(10)));",
                "    let config = Config::new().nfa_size_limit(Some(1024));",
                "    assert_eq!(config.nfa_size_limit, Some(Some(1024)));",
                "    let config = Config::new().nfa_size_limit(None);",
                "    assert_eq!(config.nfa_size_limit, Some(None));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(1024));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nfa_size_limit, Some(Some(1024)));"
              ],
              "code": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(1024));",
                "    assert_eq!(config.nfa_size_limit, Some(Some(1024)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(1073741824));",
                "}"
              ],
              "oracle": [
                "    let result = Config::new().nfa_size_limit(Some(1073741824));",
                "    assert_eq!(result.nfa_size_limit, Some(Some(1073741824)));",
                "    let default_config = Config::new();",
                "    let updated_result = default_config.nfa_size_limit(Some(0));",
                "    assert_eq!(updated_result.nfa_size_limit, Some(Some(0)));",
                "    let none_result = default_config.nfa_size_limit(None);",
                "    assert_eq!(none_result.nfa_size_limit, Some(None));",
                "    let negative_limit_result = default_config.nfa_size_limit(Some(!0));",
                "    assert_eq!(negative_limit_result.nfa_size_limit, Some(Some(!0)));"
              ],
              "code": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(1073741824));",
                "    let result = Config::new().nfa_size_limit(Some(1073741824));",
                "    assert_eq!(result.nfa_size_limit, Some(Some(1073741824)));",
                "    let default_config = Config::new();",
                "    let updated_result = default_config.nfa_size_limit(Some(0));",
                "    assert_eq!(updated_result.nfa_size_limit, Some(Some(0)));",
                "    let none_result = default_config.nfa_size_limit(None);",
                "    assert_eq!(none_result.nfa_size_limit, Some(None));",
                "    let negative_limit_result = default_config.nfa_size_limit(Some(!0));",
                "    assert_eq!(negative_limit_result.nfa_size_limit, Some(Some(!0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(20 * (1 << 10)));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.nfa_size_limit, Some(20 * (1 << 10)));"
              ],
              "code": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(20 * (1 << 10)));",
                "    assert_eq!(config.nfa_size_limit, Some(20 * (1 << 10)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}