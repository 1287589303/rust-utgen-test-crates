{
  "name": "regex_automata::nfa::thompson::nfa::{impl#8}::matches_byte",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1993:5:1995:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.start <= byte at line 1994 is true, with bound self.start == byte\n",
        "expected return value/type: byte <= self.end\n"
      ],
      "input_infer": "self.start = 0 to 255, byte = self.start to 255, self.end = self.start to 255\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let result = transition.matches_byte(100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);  // matches_byte should return true when byte is equal to start",
                "    assert!(result == (100 <= transition.end));  // confirm that byte is less than or equal to end"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
                "    let result = transition.matches_byte(100);",
                "    assert_eq!(result, true);  // matches_byte should return true when byte is equal to start",
                "    assert!(result == (100 <= transition.end));  // confirm that byte is less than or equal to end",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 150, end: 150, next: StateID(0) };",
                "    let result = transition.matches_byte(150);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(transition.matches_byte(150));",
                "    assert!(transition.matches_byte(149));",
                "    assert!(!transition.matches_byte(151));",
                "    assert!(transition.matches_byte(150));"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 150, end: 150, next: StateID(0) };",
                "    let result = transition.matches_byte(150);",
                "    assert_eq!(result, true);",
                "    assert!(transition.matches_byte(150));",
                "    assert!(transition.matches_byte(149));",
                "    assert!(!transition.matches_byte(151));",
                "    assert!(transition.matches_byte(150));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 200, end: 250, next: StateID(0) };",
                "    let result = transition.matches_byte(200);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(result == true);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 200, end: 250, next: StateID(0) };",
                "    let result = transition.matches_byte(200);",
                "    assert_eq!(result, true);",
                "    assert!(result == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let result = transition.matches_byte(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(result == true);",
                "    assert!(transition.matches_byte(255));",
                "    assert!(transition.matches_byte(128));",
                "    assert!(!transition.matches_byte(256));",
                "    assert!(transition.matches_byte(0));",
                "    assert!(transition.matches_byte(255));",
                "    assert_eq!(result, transition.matches_byte(0));",
                "    assert_eq!(result, transition.matches_byte(255));",
                "    assert_eq!(result, transition.matches_byte(128));",
                "    assert_eq!(false, transition.matches_byte(256));"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let result = transition.matches_byte(0);",
                "    assert_eq!(result, true);",
                "    assert!(result == true);",
                "    assert!(transition.matches_byte(255));",
                "    assert!(transition.matches_byte(128));",
                "    assert!(!transition.matches_byte(256));",
                "    assert!(transition.matches_byte(0));",
                "    assert!(transition.matches_byte(255));",
                "    assert_eq!(result, transition.matches_byte(0));",
                "    assert_eq!(result, transition.matches_byte(255));",
                "    assert_eq!(result, transition.matches_byte(128));",
                "    assert_eq!(false, transition.matches_byte(256));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let result = transition.matches_byte(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let transition = Transition { start: 10, end: 20, next: StateID(1) };",
                "    let result = transition.matches_byte(10);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(20);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(5);",
                "    assert_eq!(result, false);",
                "    let result = transition.matches_byte(25);",
                "    assert_eq!(result, false);",
                "    let transition = Transition { start: 100, end: 150, next: StateID(2) };",
                "    let result = transition.matches_byte(100);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(150);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(99);",
                "    assert_eq!(result, false);",
                "    let result = transition.matches_byte(151);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
                "    let result = transition.matches_byte(255);",
                "    assert_eq!(result, true);",
                "    let transition = Transition { start: 10, end: 20, next: StateID(1) };",
                "    let result = transition.matches_byte(10);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(20);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(5);",
                "    assert_eq!(result, false);",
                "    let result = transition.matches_byte(25);",
                "    assert_eq!(result, false);",
                "    let transition = Transition { start: 100, end: 150, next: StateID(2) };",
                "    let result = transition.matches_byte(100);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(150);",
                "    assert_eq!(result, true);",
                "    let result = transition.matches_byte(99);",
                "    assert_eq!(result, false);",
                "    let result = transition.matches_byte(151);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 50, end: 255, next: StateID(0) };",
                "    let result = transition.matches_byte(50);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(result);",
                "    assert!(transition.matches_byte(255));",
                "    assert!(transition.matches_byte(100));",
                "    assert!(!transition.matches_byte(49));",
                "    assert!(!transition.matches_byte(256));"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 50, end: 255, next: StateID(0) };",
                "    let result = transition.matches_byte(50);",
                "    assert_eq!(result, true);",
                "    assert!(result);",
                "    assert!(transition.matches_byte(255));",
                "    assert!(transition.matches_byte(100));",
                "    assert!(!transition.matches_byte(49));",
                "    assert!(!transition.matches_byte(256));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 100, end: 150, next: StateID(0) };",
                "    let result = transition.matches_byte(100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(result);",
                "    assert!(transition.matches_byte(150));"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 100, end: 150, next: StateID(0) };",
                "    let result = transition.matches_byte(100);",
                "    assert_eq!(result, true);",
                "    assert!(result);",
                "    assert!(transition.matches_byte(150));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 50, end: 200, next: StateID(0) };",
                "    let result = transition.matches_byte(51);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(transition.matches_byte(50));",
                "    assert!(transition.matches_byte(200));",
                "    assert!(!transition.matches_byte(49));",
                "    assert!(!transition.matches_byte(201));"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 50, end: 200, next: StateID(0) };",
                "    let result = transition.matches_byte(51);",
                "    assert_eq!(result, true);",
                "    assert!(transition.matches_byte(50));",
                "    assert!(transition.matches_byte(200));",
                "    assert!(!transition.matches_byte(49));",
                "    assert!(!transition.matches_byte(201));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.start <= byte at line 1994 is false\n",
        "expected return value/type: self.start <= byte && byte <= self.end\n"
      ],
      "input_infer": "self.start is greater than byte (self.start > byte), self.end is greater than or equal to byte (self.end >= byte), and byte is an 8-bit unsigned integer (0-255).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 5, end: 10, next: StateID(SmallIndex::new(1)) };",
                "    let byte = 3;",
                "    transition.matches_byte(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition.matches_byte(byte), false);",
                "    assert!(self.start > byte);",
                "    assert!(byte < transition.start);",
                "    assert!(transition.start - byte == 2);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 5, end: 10, next: StateID(SmallIndex::new(1)) };",
                "    let byte = 3;",
                "    transition.matches_byte(byte);",
                "    assert_eq!(transition.matches_byte(byte), false);",
                "    assert!(self.start > byte);",
                "    assert!(byte < transition.start);",
                "    assert!(transition.start - byte == 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 10, end: 10, next: StateID(SmallIndex::new(1)) };",
                "    let byte = 9;",
                "    transition.matches_byte(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition.matches_byte(9), false);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 10, end: 10, next: StateID(SmallIndex::new(1)) };",
                "    let byte = 9;",
                "    transition.matches_byte(byte);",
                "    assert_eq!(transition.matches_byte(9), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition { start: 20, end: 50, next: StateID(SmallIndex::new(1)) };",
                "    let byte = 15;",
                "    transition.matches_byte(byte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition.matches_byte(byte), false);"
              ],
              "code": [
                "{",
                "    let transition = Transition { start: 20, end: 50, next: StateID(SmallIndex::new(1)) };",
                "    let byte = 15;",
                "    transition.matches_byte(byte);",
                "    assert_eq!(transition.matches_byte(byte), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}