{
  "name": "regex_automata::util::start::{impl#0}::get_look_behind",
  "mod_info": {
    "name": "util::start",
    "loc": "regex-automata/src/util/mod.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "regex-automata/src/util/start.rs:183:5:185:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.look_behind\n"
      ],
      "input_infer": "Test input conditions or ranges: look_behind set to None, look_behind set to Some(0), look_behind set to Some(255)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().look_behind(None);",
                "    let result = config.get_look_behind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().look_behind(None);",
                "    let result = config.get_look_behind();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().look_behind(Some(0));",
                "    let result = config.get_look_behind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(0));",
                "    ",
                "    let config = Config::new().look_behind(None);",
                "    let result = config.get_look_behind();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().look_behind(Some(0));",
                "    let result = config.get_look_behind();",
                "    assert_eq!(result, Some(0));",
                "    ",
                "    let config = Config::new().look_behind(None);",
                "    let result = config.get_look_behind();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().look_behind(Some(255));",
                "    let result = config.get_look_behind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(255));",
                "    ",
                "    let config = Config::new().look_behind(None);",
                "    let result = config.get_look_behind();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().look_behind(Some(255));",
                "    let result = config.get_look_behind();",
                "    assert_eq!(result, Some(255));",
                "    ",
                "    let config = Config::new().look_behind(None);",
                "    let result = config.get_look_behind();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}