{
  "name": "regex_syntax::unicode::{impl#5}::canonicalize",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:238:5:285:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::ByValue { property_name, property_value } at line 239 is true\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Err/None\n"
      ],
      "input_infer": "ClassQuery::ByValue with property_name being a non-canonical Unicode property name and property_value being any valid string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"NonCanonicalProperty\",",
                "        property_value: \"SomeValue\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"NonCanonicalProperty\", property_value: \"SomeValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"NonCanonicalProperty\",",
                "        property_value: \"SomeValue\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"NonCanonicalProperty\", property_value: \"SomeValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"AnotherNonCanonicalProperty\",",
                "        property_value: \"\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"AnotherNonCanonicalProperty\",",
                "        property_value: \"\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Invalid@PropertyName!\",",
                "        property_value: \"SomeUniqueValue\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Invalid@PropertyName!\",",
                "        property_value: \"SomeUniqueValue\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::ByValue { property_name, property_value } at line 239 is true\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Ok/Some\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Err/None\n",
        "precondition: canon_name matches \"General_Category\" at line 251 is true\n",
        "precondition: canon_name matches \"General_Category\" at line 250 is true\n",
        "precondition: canonical_gencat(&property_value)? matches None at line 252 is true\n",
        "precondition: canonical_gencat(&property_value)? matches Some(canon) at line 252 is true\n",
        "expected return value/type: Ok(match canon_name {\n                    \"General_Category\" => {\n                        let canon = match canonical_gencat(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::GeneralCategory(canon)\n                    }\n                    \"Script\" => {\n                        let canon = match canonical_script(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::Script(canon)\n                    }\n                    _ => {\n                        let vals = match property_values(canon_name)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(vals) => vals,\n                        };\n                        let canon_val =\n                            match canonical_value(vals, &property_value) {\n                                None => {\n                                    return Err(Error::PropertyValueNotFound)\n                                }\n                                Some(canon_val) => canon_val,\n                            };\n                        CanonicalClassQuery::ByValue {\n                            property_name: canon_name,\n                            property_value: canon_val,\n                        }\n                    }\n                })\n"
      ],
      "input_infer": "ClassQuery::ByValue with property_name as \"General_Category\" or another recognizable property that can be canonized, and property_value as \"any\" or a defined general category value that is canonized; also, test cases for valid values and boundary cases for empty strings or invalid entries for both property_name and property_value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"assigned\"",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canonical_query = result.unwrap();",
                "    assert_eq!(canonical_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"assigned\"",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canonical_query = result.unwrap();",
                "    assert_eq!(canonical_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"invalid_category\"",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"valid_category\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"valid_category\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"invalid_category\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"other_property\", property_value: \"some_value\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"canonical_name\", property_value: \"canonical_value\" }));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"invalid_script\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"invalid_category\"",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"valid_category\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"valid_category\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"invalid_category\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"other_property\", property_value: \"some_value\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"canonical_name\", property_value: \"canonical_value\" }));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"invalid_script\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"any\"",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canon_query = result.unwrap();",
                "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Any\"));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"non_existent\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canon_query = result.unwrap();",
                "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown_value\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"any\"",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canon_query = result.unwrap();",
                "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Any\"));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"non_existent\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canon_query = result.unwrap();",
                "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown_value\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Invalid_Property\",",
                "        property_value: \"assigned\"",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"assigned\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"invalid_value\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"nonexistent\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Invalid_Property\",",
                "        property_value: \"assigned\"",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"assigned\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"invalid_value\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"nonexistent\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"\"",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ascii\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"any\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err() && matches!(result, Err(Error::PropertyNotFound)));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"other\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"\"",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ascii\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"any\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err() && matches!(result, Err(Error::PropertyNotFound)));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"other\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::ByValue { property_name, property_value } at line 239 is true\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Ok/Some\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Err/None\n",
        "precondition: canon_name matches \"General_Category\" at line 251 is false\n",
        "precondition: canon_name matches \"Script\" at line 258 is true\n",
        "precondition: canon_name matches \"Script\" at line 250 is true\n",
        "precondition: canonical_script(&property_value)? matches None at line 259 is true\n",
        "precondition: canonical_script(&property_value)? matches Some(canon) at line 259 is true\n",
        "expected return value/type: Ok(match canon_name {\n                    \"General_Category\" => {\n                        let canon = match canonical_gencat(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::GeneralCategory(canon)\n                    }\n                    \"Script\" => {\n                        let canon = match canonical_script(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::Script(canon)\n                    }\n                    _ => {\n                        let vals = match property_values(canon_name)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(vals) => vals,\n                        };\n                        let canon_val =\n                            match canonical_value(vals, &property_value) {\n                                None => {\n                                    return Err(Error::PropertyValueNotFound)\n                                }\n                                Some(canon_val) => canon_val,\n                            };\n                        CanonicalClassQuery::ByValue {\n                            property_name: canon_name,\n                            property_value: canon_val,\n                        }\n                    }\n                })\n"
      ],
      "input_infer": "ClassQuery::ByValue with property_name as a valid Unicode property that is not \"General_Category\", and property_value as a valid value for \"Script\", ensuring canonical_script(property_value) returns Some(canon) while canonical_prop(property_name) returns Some(canon_name) indicating valid property mapping.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"Latin\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result.is_ok(), true);",
                "    match result {",
                "    Ok(CanonicalClassQuery::Script(canon)) => assert_eq!(canon, \"Latin\"),",
                "    _ => panic!(\"Expected CanonicalClassQuery::Script variant\"),",
                "    }"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"Latin\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result.is_ok(), true);",
                "    match result {",
                "    Ok(CanonicalClassQuery::Script(canon)) => assert_eq!(canon, \"Latin\"),",
                "    _ => panic!(\"Expected CanonicalClassQuery::Script variant\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"UnknownScript\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Letter\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize().is_ok(), true);",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"InvalidScript\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Common\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Common\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"NonLetter\" };",
                "    assert_eq!(query.canonicalize().is_ok(), false);",
                "    let query = ClassQuery::ByValue { property_name: \"Some_Property\", property_value: \"Some_Value\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"Some_Property\", property_value: \"Some_Canonical_Value\" }));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"UnknownScript\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Letter\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize().is_ok(), true);",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"InvalidScript\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Common\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Common\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"NonLetter\" };",
                "    assert_eq!(query.canonicalize().is_ok(), false);",
                "    let query = ClassQuery::ByValue { property_name: \"Some_Property\", property_value: \"Some_Value\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"Some_Property\", property_value: \"Some_Canonical_Value\" }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Some_Other_Property\",",
                "        property_value: \"Latin\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"Some_Other_Property\", property_value: \"Latin\" };",
                "    assert!(query.canonicalize().is_ok());",
                "    let result = query.canonicalize().unwrap();",
                "    assert!(matches!(result, CanonicalClassQuery::Script(_)));",
                "    assert!(matches!(result, CanonicalClassQuery::ByValue { property_name, property_value } if property_name == \"Some_Other_Property\" && property_value == \"Latin\"));",
                "    let result = query.canonicalize().unwrap_err();",
                "    assert!(matches!(result, Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Latin\" };",
                "    assert!(query.canonicalize().is_err());",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Nonexistent_Script\" };",
                "    assert!(query.canonicalize().is_err());",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert!(query.canonicalize().is_ok());"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Some_Other_Property\",",
                "        property_value: \"Latin\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"Some_Other_Property\", property_value: \"Latin\" };",
                "    assert!(query.canonicalize().is_ok());",
                "    let result = query.canonicalize().unwrap();",
                "    assert!(matches!(result, CanonicalClassQuery::Script(_)));",
                "    assert!(matches!(result, CanonicalClassQuery::ByValue { property_name, property_value } if property_name == \"Some_Other_Property\" && property_value == \"Latin\"));",
                "    let result = query.canonicalize().unwrap_err();",
                "    assert!(matches!(result, Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Latin\" };",
                "    assert!(query.canonicalize().is_err());",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Nonexistent_Script\" };",
                "    assert!(query.canonicalize().is_err());",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert!(query.canonicalize().is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::ByValue { property_name, property_value } at line 239 is true\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Ok/Some\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Err/None\n",
        "precondition: canon_name matches \"General_Category\" at line 251 is false\n",
        "precondition: canon_name matches \"Script\" at line 258 is false\n",
        "precondition: property_values(canon_name)? matches None at line 266 is true\n",
        "precondition: property_values(canon_name)? matches Some(vals) at line 266 is true\n",
        "precondition: canonical_value(vals, &property_value) matches Some(canon_val) at line 271 is true\n",
        "expected return value/type: Ok(match canon_name {\n                    \"General_Category\" => {\n                        let canon = match canonical_gencat(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::GeneralCategory(canon)\n                    }\n                    \"Script\" => {\n                        let canon = match canonical_script(&property_value)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(canon) => canon,\n                        };\n                        CanonicalClassQuery::Script(canon)\n                    }\n                    _ => {\n                        let vals = match property_values(canon_name)? {\n                            None => return Err(Error::PropertyValueNotFound),\n                            Some(vals) => vals,\n                        };\n                        let canon_val =\n                            match canonical_value(vals, &property_value) {\n                                None => {\n                                    return Err(Error::PropertyValueNotFound)\n                                }\n                                Some(canon_val) => canon_val,\n                            };\n                        CanonicalClassQuery::ByValue {\n                            property_name: canon_name,\n                            property_value: canon_val,\n                        }\n                    }\n                })\n"
      ],
      "input_infer": "ClassQuery::ByValue with property_name that is a valid Unicode property and property_value that exists for that property; property_name normalization should yield a valid canonical name; property_values returns Some(vals); canonical_value should return a valid canonical value for property_value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"ValidProperty\",",
                "        property_value: \"ValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"ValidValue\" }; assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeCanonicalValue\" }));",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"ValidProperty\",",
                "        property_value: \"ValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"ValidValue\" }; assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeCanonicalValue\" }));",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"InvalidProperty\",",
                "        property_value: \"ValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"General_Category\",",
                "    property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"General_Category\",",
                "    property_value: \"Assigned\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    match result.unwrap() {",
                "    CanonicalClassQuery::GeneralCategory(ref canon) => {",
                "    assert_eq!(canon, \"Assigned\");",
                "    }",
                "    _ => panic!(\"Expected GeneralCategory variant\"),",
                "    }",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"Script\",",
                "    property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"Script\",",
                "    property_value: \"Latin\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    match result.unwrap() {",
                "    CanonicalClassQuery::Script(ref canon) => {",
                "    assert_eq!(canon, \"Latin\");",
                "    }",
                "    _ => panic!(\"Expected Script variant\"),",
                "    }",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"CustomProperty\",",
                "    property_value: \"ValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    match result.unwrap() {",
                "    CanonicalClassQuery::ByValue { property_name, property_value } => {",
                "    assert_eq!(property_name, \"CustomProperty\");",
                "    assert_eq!(property_value, \"ValidValue\");",
                "    }",
                "    _ => panic!(\"Expected ByValue variant\"),",
                "    }"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"InvalidProperty\",",
                "        property_value: \"ValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"General_Category\",",
                "    property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"General_Category\",",
                "    property_value: \"Assigned\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    match result.unwrap() {",
                "    CanonicalClassQuery::GeneralCategory(ref canon) => {",
                "    assert_eq!(canon, \"Assigned\");",
                "    }",
                "    _ => panic!(\"Expected GeneralCategory variant\"),",
                "    }",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"Script\",",
                "    property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"Script\",",
                "    property_value: \"Latin\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    match result.unwrap() {",
                "    CanonicalClassQuery::Script(ref canon) => {",
                "    assert_eq!(canon, \"Latin\");",
                "    }",
                "    _ => panic!(\"Expected Script variant\"),",
                "    }",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name: \"CustomProperty\",",
                "    property_value: \"ValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    match result.unwrap() {",
                "    CanonicalClassQuery::ByValue { property_name, property_value } => {",
                "    assert_eq!(property_name, \"CustomProperty\");",
                "    assert_eq!(property_value, \"ValidValue\");",
                "    }",
                "    _ => panic!(\"Expected ByValue variant\"),",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"SomeProperty\",",
                "        property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result.unwrap(), CanonicalClassQuery::ByValue { property_name, property_value } if property_name == \"SomeProperty\" && property_value == \"ExpectedValue\"));",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
                "    assert!(result.is_err());",
                "    assert!(result.unwrap_err() == Error::PropertyValueNotFound);",
                "    assert!(result.unwrap().is_some());",
                "    assert!(matches!(result.unwrap(), CanonicalClassQuery::GeneralCategory(_)));",
                "    assert!(matches!(result.unwrap(), CanonicalClassQuery::Script(_)));",
                "    assert!(result.unwrap_err() == Error::PropertyNotFound);"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"SomeProperty\",",
                "        property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    assert!(matches!(result.unwrap(), CanonicalClassQuery::ByValue { property_name, property_value } if property_name == \"SomeProperty\" && property_value == \"ExpectedValue\"));",
                "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
                "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
                "    assert!(result.is_err());",
                "    assert!(result.unwrap_err() == Error::PropertyValueNotFound);",
                "    assert!(result.unwrap().is_some());",
                "    assert!(matches!(result.unwrap(), CanonicalClassQuery::GeneralCategory(_)));",
                "    assert!(matches!(result.unwrap(), CanonicalClassQuery::Script(_)));",
                "    assert!(result.unwrap_err() == Error::PropertyNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Assigned\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Latin\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"NonExistentProperty\", property_value: \"SomeValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"NonExistentValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ASCII\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Greek\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Greek\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"InvalidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Assigned\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Latin\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"NonExistentProperty\", property_value: \"SomeValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"NonExistentValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ASCII\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Greek\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Greek\")));",
                "    ",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeValue\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"SomeProperty\",",
                "        property_value: \"AnotherValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    query.canonicalize().is_ok();",
                "    query.canonicalize().unwrap() is_a(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: any() });",
                "    canonical_prop(\"SomeProperty\") is_ok();",
                "    canonical_prop(\"SomeProperty\") is_none();",
                "    property_values(canonical_prop(\"SomeProperty\")?) is_none();",
                "    property_values(canonical_prop(\"SomeProperty\")?) is_some();",
                "    canonical_value(property_values(canonical_prop(\"SomeProperty\")?)?, \"AnotherValidValue\") is_some();",
                "    result.unwrap() matches Ok(CanonicalClassQuery::ByValue { property_name: any(), property_value: any() });"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"SomeProperty\",",
                "        property_value: \"AnotherValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    query.canonicalize().is_ok();",
                "    query.canonicalize().unwrap() is_a(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: any() });",
                "    canonical_prop(\"SomeProperty\") is_ok();",
                "    canonical_prop(\"SomeProperty\") is_none();",
                "    property_values(canonical_prop(\"SomeProperty\")?) is_none();",
                "    property_values(canonical_prop(\"SomeProperty\")?) is_some();",
                "    canonical_value(property_values(canonical_prop(\"SomeProperty\")?)?, \"AnotherValidValue\") is_some();",
                "    result.unwrap() matches Ok(CanonicalClassQuery::ByValue { property_name: any(), property_value: any() });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"SomeProperty\",",
                "        property_value: \"AnotherValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"AnotherValidValue\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canonical_class_query = result.unwrap();",
                "    assert!(matches!(canonical_class_query, CanonicalClassQuery::ByValue { property_name, property_value }));",
                "    let canon_name = // obtain canon_name from the context;",
                "    assert_ne!(canon_name, \"General_Category\");",
                "    assert_ne!(canon_name, \"Script\");",
                "    let vals = property_values(canon_name).unwrap().unwrap();",
                "    assert!(canonical_value(vals, \"AnotherValidValue\").is_some());"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"SomeProperty\",",
                "        property_value: \"AnotherValidValue\",",
                "    };",
                "    let result = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"AnotherValidValue\" };",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canonical_class_query = result.unwrap();",
                "    assert!(matches!(canonical_class_query, CanonicalClassQuery::ByValue { property_name, property_value }));",
                "    let canon_name = // obtain canon_name from the context;",
                "    assert_ne!(canon_name, \"General_Category\");",
                "    assert_ne!(canon_name, \"Script\");",
                "    let vals = property_values(canon_name).unwrap().unwrap();",
                "    assert!(canonical_value(vals, \"AnotherValidValue\").is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 10,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::ByValue { property_name, property_value } at line 239 is true\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Ok/Some\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Err/None\n",
        "precondition: canon_name matches \"General_Category\" at line 251 is false\n",
        "precondition: canon_name matches \"Script\" at line 258 is false\n",
        "precondition: property_values(canon_name)? matches None at line 266 is true\n",
        "precondition: property_values(canon_name)? matches Some(vals) at line 266 is true\n",
        "precondition: canonical_value(vals, &property_value) matches None at line 271 is true\n",
        "precondition: canonical_value(vals, &property_value) matches None at line 271 is true\n",
        "expected return value/type: Err(Error::PropertyValueNotFound)\n"
      ],
      "input_infer": "property_name must be a known property, property_value must be an unrecognized value for that property; both must be provided as valid strings and should not contain special characters or whitespace.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Unknown_Value\"; // Precondition: canonical_value(vals, &property_value) is None",
                "",
                "    let query = ClassQuery::ByValue {",
                "        property_name,",
                "        property_value,",
                "    };",
                "    ",
                "    let _result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Unknown_Value\"; // Precondition: canonical_value(vals, &property_value) is None",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name,",
                "    property_value,",
                "    };",
                "    ",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Unknown_Value\"; // Precondition: canonical_value(vals, &property_value) is None",
                "",
                "    let query = ClassQuery::ByValue {",
                "        property_name,",
                "        property_value,",
                "    };",
                "    ",
                "    let _result = query.canonicalize();",
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Unknown_Value\"; // Precondition: canonical_value(vals, &property_value) is None",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name,",
                "    property_value,",
                "    };",
                "    ",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Recognized_Value\"; // This should be valid but not found in property_values",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "        property_name,",
                "        property_value,",
                "    };",
                "",
                "    let _result = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Invalid_Value\"; // This should be valid but not found in property_values",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name,",
                "    property_value,",
                "    };",
                "    ",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Recognized_Value\"; // This should be valid but not found in property_values",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "        property_name,",
                "        property_value,",
                "    };",
                "",
                "    let _result = query.canonicalize();",
                "    let property_name = \"Known_Property\"; // Precondition: canonical_prop(&property_name)? is Ok/Some",
                "    let property_value = \"Invalid_Value\"; // This should be valid but not found in property_values",
                "    ",
                "    let query = ClassQuery::ByValue {",
                "    property_name,",
                "    property_value,",
                "    };",
                "    ",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 12,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::ByValue { property_name, property_value } at line 239 is true\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Ok/Some\n",
        "precondition: canonical_prop(&property_name)? at line 246 is Ok/Some\n",
        "precondition: canonical_prop(&property_name)? matches None at line 246 is true\n",
        "expected return value/type: Err(Error::PropertyNotFound)\n"
      ],
      "input_infer": "ClassQuery::ByValue with invalid property_name, ensuring symbolic_name_normalize does not match any known property, which leads to None in canonical_prop.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"invalid_property_name\",",
                "        property_value: \"some_value\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"invalid_property_name\", property_value: \"some_value\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"invalid_property_name\",",
                "        property_value: \"some_value\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"invalid_property_name\", property_value: \"some_value\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"invalid_value\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"invalid_value\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"invalid_value\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"invalid_value\" };",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::Binary(name) at line 239 is true\n",
        "precondition: *self matches ClassQuery::Binary(name) at line 239 is true\n"
      ],
      "input_infer": "Test input conditions or ranges: a single-letter string representing a binary property name such as \"cf\", \"sc\", or \"lc\"; valid Unicode property names like \"General_Category\", \"Script\"; invalid property names; and combinations of these to test successful canonicalization as well as expected errors (e.g., \"Invalid_Property_Name\").\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"cf\")));",
                "    let query = ClassQuery::Binary(\"unknown_property\");",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "    let query = ClassQuery::Binary(\"sc\");",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"sc\")));",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"lc\")));",
                "    let query = ClassQuery::Binary(\"invalid_property\");",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let _ = query.canonicalize();",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"cf\")));",
                "    let query = ClassQuery::Binary(\"unknown_property\");",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "    let query = ClassQuery::Binary(\"sc\");",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"sc\")));",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"lc\")));",
                "    let query = ClassQuery::Binary(\"invalid_property\");",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"General_Category\");",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::Binary(\"General_Category\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"General_Category\")));",
                "    ",
                "    let query = ClassQuery::Binary(\"Script\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Script\")));",
                "    ",
                "    let query = ClassQuery::Binary(\"NonExistent\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    ",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    ",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"General_Category\");",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::Binary(\"General_Category\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"General_Category\")));",
                "    ",
                "    let query = ClassQuery::Binary(\"Script\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Script\")));",
                "    ",
                "    let query = ClassQuery::Binary(\"NonExistent\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    ",
                "    let query = ClassQuery::Binary(\"cf\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "    ",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"Script\");",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::Binary(\"Script\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), CanonicalClassQuery::Script(\"Script\"));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"Script\");",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::Binary(\"Script\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), CanonicalClassQuery::Script(\"Script\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
                "    let result = query.canonicalize();",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    Result::Ok(CanonicalClassQuery::Binary(\"lc\"))"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"lc\");",
                "    let _ = query.canonicalize();",
                "    Result::Ok(CanonicalClassQuery::Binary(\"lc\"))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"Non_Existent\");",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_ , Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"Non_Existent\");",
                "    let _ = query.canonicalize();",
                "    assert_eq!(_ , Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 14,
      "prompt_conds": [
        "precondition: *self matches ClassQuery::OneLetter(c) at line 239 is true\n",
        "precondition: *self matches ClassQuery::OneLetter(c) at line 239 is true\n"
      ],
      "input_infer": "ClassQuery::OneLetter(c) where c is a valid unicode character, ClassQuery::Binary(name) where name is a valid unicode property name, ClassQuery::ByValue { property_name: \"General_Category\" or \"Script\", property_value: valid corresponding value}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::OneLetter('A');",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    let query = ClassQuery::OneLetter('A');",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canonical_query = result.unwrap();",
                "    match canonical_query {",
                "    CanonicalClassQuery::Binary(name) => assert_eq!(name, \"A\"),",
                "    _ => panic!(\"Expected CanonicalClassQuery::Binary for OneLetter 'A'\"),",
                "    }"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::OneLetter('A');",
                "    let _ = query.canonicalize();",
                "    let query = ClassQuery::OneLetter('A');",
                "    let result = query.canonicalize();",
                "    assert!(result.is_ok());",
                "    let canonical_query = result.unwrap();",
                "    match canonical_query {",
                "    CanonicalClassQuery::Binary(name) => assert_eq!(name, \"A\"),",
                "    _ => panic!(\"Expected CanonicalClassQuery::Binary for OneLetter 'A'\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::Binary(\"sc\");",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Script\")));",
                "    let query = ClassQuery::OneLetter('A');",
                "    assert_eq!(query.canonicalize().is_ok(), true);",
                "    let query = ClassQuery::OneLetter('0');",
                "    assert!(query.canonicalize().is_err());",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize().unwrap(), CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" });",
                "    let query = ClassQuery::Binary(\"xyz\");",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::Binary(\"sc\");",
                "    let _ = query.canonicalize();",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Script\")));",
                "    let query = ClassQuery::OneLetter('A');",
                "    assert_eq!(query.canonicalize().is_ok(), true);",
                "    let query = ClassQuery::OneLetter('0');",
                "    assert!(query.canonicalize().is_err());",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize().unwrap(), CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" });",
                "    let query = ClassQuery::Binary(\"xyz\");",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"Lu\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Lu\")));",
                "    let query = ClassQuery::OneLetter('a');",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
                "    let query = ClassQuery::Binary(\"Letter\");",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Ll\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Ll\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Nonexistent_Property\", property_value: \"Value\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Nonexistent_Value\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"General_Category\",",
                "        property_value: \"Lu\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Lu\")));",
                "    let query = ClassQuery::OneLetter('a');",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
                "    let query = ClassQuery::Binary(\"Letter\");",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Ll\" };",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Ll\")));",
                "    let query = ClassQuery::ByValue { property_name: \"Nonexistent_Property\", property_value: \"Value\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
                "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Nonexistent_Value\" };",
                "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"Latin\",",
                "    };",
                "    let _ = query.canonicalize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }));"
              ],
              "code": [
                "{",
                "    let query = ClassQuery::ByValue {",
                "        property_name: \"Script\",",
                "        property_value: \"Latin\",",
                "    };",
                "    let _ = query.canonicalize();",
                "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}