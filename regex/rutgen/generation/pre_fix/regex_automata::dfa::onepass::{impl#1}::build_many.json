{
  "name": "regex_automata::dfa::onepass::{impl#1}::build_many",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:365:5:372:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.thompson.build_many(patterns).map_err(BuildError::nfa)? at line 370 is Err/None\n"
      ],
      "input_infer": "patterns: empty slice, slice with valid patterns, slice with invalid patterns, slice with mixed valid and invalid patterns, slice exceeding length limit (e.g., 1024 elements), patterns that include special regex characters, patterns with different regex types, patterns causing maximum NFA size limits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let comp = Compiler::new();",
                "    let result = comp.build_many::<&str>(&[]);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind, BuildErrorKind::NfaError);"
              ],
              "code": [
                "{",
                "    let comp = Compiler::new();",
                "    let result = comp.build_many::<&str>(&[]);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind, BuildErrorKind::NfaError);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"abc\", \"123\", \".*\"];",
                "    let result = comp.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::NfaError);"
              ],
              "code": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"abc\", \"123\", \".*\"];",
                "    let result = comp.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::NfaError);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"[a-\", \"(\"];",
                "    let result = comp.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::Nfa(/* expected kind here */));"
              ],
              "code": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"[a-\", \"(\"];",
                "    let result = comp.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::Nfa(/* expected kind here */));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"valid_pattern\", \"[a-\", \"another_valid_pattern\", \"(\"];",
                "    let result = comp.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(BuildError { kind: BuildErrorKind::Nfa(_)})));",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::Nfa(_));"
              ],
              "code": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"valid_pattern\", \"[a-\", \"another_valid_pattern\", \"(\"];",
                "    let result = comp.build_many(&patterns);",
                "    assert_eq!(result.is_err(), true);",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(BuildError { kind: BuildErrorKind::Nfa(_)})));",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::Nfa(_));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns: Vec<&str> = (0..1025).map(|i| format!(\"pattern{}\", i)).collect();",
                "    let result = comp.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::Nfa);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns: Vec<&str> = (0..1025).map(|i| format!(\"pattern{}\", i)).collect();",
                "    let result = comp.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::Nfa);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"$^.*\", \".?+|\", \"[a-z]\"];",
                "    let result = comp.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(BuildError { kind: BuildErrorKind::Nfa(_)})));"
              ],
              "code": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"$^.*\", \".?+|\", \"[a-z]\"];",
                "    let result = comp.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(BuildError { kind: BuildErrorKind::Nfa(_)})));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"a{100000}\", \"b{100000}\", \"c{100000}\"];",
                "    let result = comp.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(BuildError { kind: BuildErrorKind::Nfa(_)) }));"
              ],
              "code": [
                "{",
                "    let comp = Compiler::new();",
                "    let patterns = vec![\"a{100000}\", \"b{100000}\", \"c{100000}\"];",
                "    let result = comp.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(BuildError { kind: BuildErrorKind::Nfa(_)) }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.thompson.build_many(patterns).map_err(BuildError::nfa)? at line 370 is Ok/Some\n"
      ],
      "input_infer": "patterns: non-empty slice of strings with valid regex patterns, maximum length of 100, minimum length of 1, each pattern should not exceed 255 characters\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"a*b\"]; // Single valid regex pattern",
                "    let _ = compiler.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().config.match_kind, None);",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.starts.len() > 0));",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().min_match_id, 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().alphabet_len > 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().classes.is_empty() == false);",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.table.len() > 0));",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.stride2.is_power_of_two()));"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"a*b\"]; // Single valid regex pattern",
                "    let _ = compiler.build_many(&patterns);",
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().config.match_kind, None);",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.starts.len() > 0));",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().min_match_id, 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().alphabet_len > 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().classes.is_empty() == false);",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.table.len() > 0));",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.stride2.is_power_of_two()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"a*b\", \"c+d\", \"e?f\"]; // Multiple valid regex patterns",
                "    let _ = compiler.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.min_match_id == 0));",
                "    assert!(compiler.build_many(&patterns).unwrap().starts.len() == patterns.len() + 1);",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().classes.len(), 3);",
                "    assert!(compiler.build_many(&patterns).unwrap().table.len() > 0);"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"a*b\", \"c+d\", \"e?f\"]; // Multiple valid regex patterns",
                "    let _ = compiler.build_many(&patterns);",
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(dfa) if dfa.min_match_id == 0));",
                "    assert!(compiler.build_many(&patterns).unwrap().starts.len() == patterns.len() + 1);",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().classes.len(), 3);",
                "    assert!(compiler.build_many(&patterns).unwrap().table.len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"a\".repeat(255)]; // Pattern at maximum length",
                "    let _ = compiler.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(_)));",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().starts.len(), 1);",
                "    assert!(compiler.build_many(&patterns).unwrap().table.len() > 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().min_match_id >= 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().classes.len() > 0);",
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert!(compiler.build_many(&patterns).unwrap().table.iter().all(|t| t.transition_valid()));"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"a\".repeat(255)]; // Pattern at maximum length",
                "    let _ = compiler.build_many(&patterns);",
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert!(matches!(compiler.build_many(&patterns), Ok(_)));",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().starts.len(), 1);",
                "    assert!(compiler.build_many(&patterns).unwrap().table.len() > 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().min_match_id >= 0);",
                "    assert!(compiler.build_many(&patterns).unwrap().classes.len() > 0);",
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert!(compiler.build_many(&patterns).unwrap().table.iter().all(|t| t.transition_valid()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns: Vec<String> = (0..100).map(|i| format!(\"pattern{}\", i)).collect(); // Maximum number of patterns",
                "    let _ = compiler.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(compiler.thompson.build_many(&patterns).is_ok());",
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().starts.len(), patterns.len());",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().config.match_kind, None);",
                "    assert!(compiler.build_many(&vec![\"patternA\"]).is_ok());",
                "    assert!(compiler.build_many(&vec![\"pattern1\", \"pattern2\"]).is_ok());",
                "    assert!(compiler.build_many(&patterns).unwrap().table.len() > 0);",
                "    assert!(compiler.build_many(&vec![]).is_err());",
                "    assert!(compiler.build_many(&vec![\"\"]).is_ok());",
                "    assert!(matches!(compiler.build_many(&patterns).unwrap_err(), BuildError { .. }));",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().alphabet_len, 256);"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns: Vec<String> = (0..100).map(|i| format!(\"pattern{}\", i)).collect(); // Maximum number of patterns",
                "    let _ = compiler.build_many(&patterns);",
                "    assert!(compiler.thompson.build_many(&patterns).is_ok());",
                "    assert!(compiler.build_many(&patterns).is_ok());",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().starts.len(), patterns.len());",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().config.match_kind, None);",
                "    assert!(compiler.build_many(&vec![\"patternA\"]).is_ok());",
                "    assert!(compiler.build_many(&vec![\"pattern1\", \"pattern2\"]).is_ok());",
                "    assert!(compiler.build_many(&patterns).unwrap().table.len() > 0);",
                "    assert!(compiler.build_many(&vec![]).is_err());",
                "    assert!(compiler.build_many(&vec![\"\"]).is_ok());",
                "    assert!(matches!(compiler.build_many(&patterns).unwrap_err(), BuildError { .. }));",
                "    assert_eq!(compiler.build_many(&patterns).unwrap().alphabet_len, 256);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns: Vec<&str> = vec![]; // Empty patterns vector - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "}"
              ],
              "oracle": [
                "    let mut compiler = Compiler::new();",
                "    let patterns: Vec<&str> = vec![\"pattern1\"]; // Single valid pattern",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_ok());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"pattern1\", \"pattern2\"]; // Multiple valid patterns",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_ok());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"\"]; // Empty string pattern - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"valid_pattern\", \"\"]; // Mixed valid and empty pattern - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"$regex!\"]; // Invalid pattern - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"valid_pattern_1\", \"valid_pattern_2\"]; // Valid patterns with complex structure",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns: Vec<&str> = vec![]; // Empty patterns vector - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    let mut compiler = Compiler::new();",
                "    let patterns: Vec<&str> = vec![\"pattern1\"]; // Single valid pattern",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_ok());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"pattern1\", \"pattern2\"]; // Multiple valid patterns",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_ok());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"\"]; // Empty string pattern - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"valid_pattern\", \"\"]; // Mixed valid and empty pattern - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"$regex!\"]; // Invalid pattern - should fail",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_err());",
                "    ",
                "    let patterns: Vec<&str> = vec![\"valid_pattern_1\", \"valid_pattern_2\"]; // Valid patterns with complex structure",
                "    let result = compiler.build_many(&patterns);",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"[\"]; // Invalid regex pattern",
                "    let _ = compiler.build_many(&patterns);",
                "}"
              ],
              "oracle": [
                "    assert!(compiler.build_many(&patterns).is_err());"
              ],
              "code": [
                "{",
                "    let mut compiler = Compiler::new();",
                "    let patterns = vec![\"[\"]; // Invalid regex pattern",
                "    let _ = compiler.build_many(&patterns);",
                "    assert!(compiler.build_many(&patterns).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}