{
  "name": "regex_lite::hir::parse::{impl#1}::hir_char",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:1273:5:1281:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.flags().case_insensitive at line 1274 is true\n",
        "precondition: let Some(folded) = this.ascii_case_fold() at line 1276 is true\n"
      ],
      "input_infer": "self.flags().case_insensitive is true and ch is one of the lowercase letters 'a' to 'z' or 'A' to 'Z' that produces a valid folded character in ascii_case_fold()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('a')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('a');",
                "}"
              ],
              "oracle": [
                "    assert!(parser.flags().case_insensitive);",
                "    let this = hir::ClassRange { start: 'a', end: 'a' };",
                "    assert!(this.ascii_case_fold().is_some());",
                "    let folded = this.ascii_case_fold().unwrap();",
                "    assert_eq!(folded.start, 'A'); // Assuming 'A' is the uppercase equivalent of 'a'",
                "    assert_eq!(folded.end, 'A');  // This check should match expected behavior",
                "    assert_eq!(Hir::class(hir::Class::new([this, folded])).kind(), hir::HirKind::Class);",
                "    assert_eq!(Hir::char('a').kind(), hir::HirKind::Char('a'));"
              ],
              "code": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('a')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('a');",
                "    assert!(parser.flags().case_insensitive);",
                "    let this = hir::ClassRange { start: 'a', end: 'a' };",
                "    assert!(this.ascii_case_fold().is_some());",
                "    let folded = this.ascii_case_fold().unwrap();",
                "    assert_eq!(folded.start, 'A'); // Assuming 'A' is the uppercase equivalent of 'a'",
                "    assert_eq!(folded.end, 'A');  // This check should match expected behavior",
                "    assert_eq!(Hir::class(hir::Class::new([this, folded])).kind(), hir::HirKind::Class);",
                "    assert_eq!(Hir::char('a').kind(), hir::HirKind::Char('a'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('b')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('b');",
                "}"
              ],
              "oracle": [
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('b')), capture_index: Cell::new(0), flags: RefCell::new(flags), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.hir_char('b');",
                "    assert!(matches!(result.kind(), HirKind::Class(_)));",
                "    assert_eq!(result.is_start_anchored(), false);",
                "    assert_eq!(result.is_match_empty(), false);",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('b')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('b');",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser { config, pattern: \"\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('b')), capture_index: Cell::new(0), flags: RefCell::new(flags), capture_names: RefCell::new(vec![]) };",
                "    let result = parser.hir_char('b');",
                "    assert!(matches!(result.kind(), HirKind::Class(_)));",
                "    assert_eq!(result.is_start_anchored(), false);",
                "    assert_eq!(result.is_match_empty(), false);",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('z')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('z');",
                "}"
              ],
              "oracle": [
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "    config,",
                "    pattern: \"\",",
                "    depth: Cell::new(0),",
                "    pos: Cell::new(0),",
                "    char: Cell::new(Some('z')),",
                "    capture_index: Cell::new(0),",
                "    flags: RefCell::new(flags),",
                "    capture_names: RefCell::new(vec![]),",
                "    };",
                "    let result = parser.hir_char('z');",
                "    assert_eq!(result.kind(), &HirKind::Class(Class::new(vec![ClassRange { start: 'z', end: 'z' }, folded])));",
                "    assert!(result.is_start_anchored() == false);",
                "    assert!(result.is_match_empty() == false);",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('z')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('z');",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "    config,",
                "    pattern: \"\",",
                "    depth: Cell::new(0),",
                "    pos: Cell::new(0),",
                "    char: Cell::new(Some('z')),",
                "    capture_index: Cell::new(0),",
                "    flags: RefCell::new(flags),",
                "    capture_names: RefCell::new(vec![]),",
                "    };",
                "    let result = parser.hir_char('z');",
                "    assert_eq!(result.kind(), &HirKind::Class(Class::new(vec![ClassRange { start: 'z', end: 'z' }, folded])));",
                "    assert!(result.is_start_anchored() == false);",
                "    assert!(result.is_match_empty() == false);",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('A')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('A');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.hir_char('A').kind(), HirKind::Class(Class::new([ClassRange { start: 'A', end: 'A' }, ClassRange { start: 'a', end: 'a' }])));",
                "    assert!(parser.hir_char('A').is_start_anchored() == false);",
                "    assert!(parser.hir_char('A').is_match_empty() == false);",
                "    assert_eq!(parser.hir_char('A').static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('A')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('A');",
                "    assert_eq!(parser.hir_char('A').kind(), HirKind::Class(Class::new([ClassRange { start: 'A', end: 'A' }, ClassRange { start: 'a', end: 'a' }])));",
                "    assert!(parser.hir_char('A').is_start_anchored() == false);",
                "    assert!(parser.hir_char('A').is_match_empty() == false);",
                "    assert_eq!(parser.hir_char('A').static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('Z')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('Z');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.flags().case_insensitive, true);",
                "    assert!(parser.char.get().is_some());",
                "    assert_eq!(parser.char.get().unwrap(), 'Z');",
                "    assert!(this.ascii_case_fold().is_some());",
                "    let folded = this.ascii_case_fold().unwrap();",
                "    assert!(folded.start <= folded.end);",
                "    assert_eq!(folded.start, 'z');",
                "    assert_eq!(folded.end, 'z');"
              ],
              "code": [
                "{",
                "    let flags = Flags { case_insensitive: true, ..Flags::default() };",
                "    let config = Config { nest_limit: 10, flags };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('Z')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(flags),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _ = parser.hir_char('Z');",
                "    assert_eq!(parser.flags().case_insensitive, true);",
                "    assert!(parser.char.get().is_some());",
                "    assert_eq!(parser.char.get().unwrap(), 'Z');",
                "    assert!(this.ascii_case_fold().is_some());",
                "    let folded = this.ascii_case_fold().unwrap();",
                "    assert!(folded.start <= folded.end);",
                "    assert_eq!(folded.start, 'z');",
                "    assert_eq!(folded.end, 'z');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.flags().case_insensitive at line 1274 is false\n"
      ],
      "input_infer": "valid char inputs: any Unicode character (including special characters and digits) where self.flags().case_insensitive is false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('a')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('a');",
                "}"
              ],
              "oracle": [
                "    .assert_eq(_result.kind(), HirKind::Char('a'))",
                "    .assert!(!_result.is_start_anchored())",
                "    .assert!(!_result.is_match_empty())",
                "    .assert_eq(_result.static_explicit_captures_len(), Some(0))"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('a')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('a');",
                "    .assert_eq(_result.kind(), HirKind::Char('a'))",
                "    .assert!(!_result.is_start_anchored())",
                "    .assert!(!_result.is_match_empty())",
                "    .assert_eq(_result.static_explicit_captures_len(), Some(0))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('A')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('A');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.kind(), &HirKind::Char('A'));",
                "    assert!(!_result.is_start_anchored());",
                "    assert!(!_result.is_match_empty());",
                "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('A')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('A');",
                "    assert_eq!(_result.kind(), &HirKind::Char('A'));",
                "    assert!(!_result.is_start_anchored());",
                "    assert!(!_result.is_match_empty());",
                "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('1')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('1');",
                "}"
              ],
              "oracle": [
                "    let expected_result = Hir::char('1');",
                "    assert_eq!(_result, expected_result);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('1')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('1');",
                "    let expected_result = Hir::char('1');",
                "    assert_eq!(_result, expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('@')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('@');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.kind(), HirKind::Char('@'));",
                "    assert!(!_result.is_start_anchored());",
                "    assert!(!_result.is_match_empty());",
                "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('@')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('@');",
                "    assert_eq!(_result.kind(), HirKind::Char('@'));",
                "    assert!(!_result.is_start_anchored());",
                "    assert!(!_result.is_match_empty());",
                "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('α')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('α');",
                "}"
              ],
              "oracle": [
                "    let parser = Parser { config, pattern: \"test\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('α')), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: false, ..Default::default() }), capture_names: RefCell::new(vec![]) };",
                "    assert_eq!(_result.kind(), HirKind::Char('α'));",
                "    assert!(!_result.is_start_anchored());",
                "    assert!(!_result.is_match_empty());",
                "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
                "    assert_eq!(_result.kind(), Hir::char('α').kind());"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        nest_limit: 10,",
                "        flags: Flags {",
                "            case_insensitive: false,",
                "            ..Default::default()",
                "        },",
                "    };",
                "    let parser = Parser {",
                "        config,",
                "        pattern: \"test\",",
                "        depth: Cell::new(0),",
                "        pos: Cell::new(0),",
                "        char: Cell::new(Some('α')),",
                "        capture_index: Cell::new(0),",
                "        flags: RefCell::new(Flags::default()),",
                "        capture_names: RefCell::new(vec![]),",
                "    };",
                "    let _result = parser.hir_char('α');",
                "    let parser = Parser { config, pattern: \"test\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('α')), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: false, ..Default::default() }), capture_names: RefCell::new(vec![]) };",
                "    assert_eq!(_result.kind(), HirKind::Char('α'));",
                "    assert!(!_result.is_start_anchored());",
                "    assert!(!_result.is_match_empty());",
                "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
                "    assert_eq!(_result.kind(), Hir::char('α').kind());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}