{
  "name": "regex::builders::string::{impl#0}::multi_line",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:361:9:364:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "pattern: non-empty regex pattern string, yes: bool (true/false), line terminator byte: valid ASCII byte (0x00 to 0x7F), multi-line flag: true or false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.is_multi_line(), true);",
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"foo\"));",
                "    assert_eq!(None, re.find(\"bar\"));",
                "    assert_eq!(Some(0..3), re.find(\"foo\").map(|m| m.range()));"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re.is_multi_line(), true);",
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"foo\"));",
                "    assert_eq!(None, re.find(\"bar\"));",
                "    assert_eq!(Some(0..3), re.find(\"foo\").map(|m| m.range()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(false)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.find(\"foo\"), None);",
                "    assert_eq!(re.find(\"\\nfoo\"), None);",
                "    assert_eq!(re.find(\"foo\\n\"), None);",
                "    assert_eq!(re.find(\"\\nfoo\\n\"), None);",
                "    assert_eq!(re.find(\"foofoo\"), None);",
                "    assert_eq!(re.find(\"bar\"), None);",
                "    assert_eq!(re.find(\"  foo  \"), None);",
                "    assert_eq!(re.find(\"\\rfoo\"), None);",
                "    assert_eq!(re.find(\"foo\\r\"), None);",
                "    assert_eq!(re.find(\"<foo>\"), None);"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(false)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re.find(\"foo\"), None);",
                "    assert_eq!(re.find(\"\\nfoo\"), None);",
                "    assert_eq!(re.find(\"foo\\n\"), None);",
                "    assert_eq!(re.find(\"\\nfoo\\n\"), None);",
                "    assert_eq!(re.find(\"foofoo\"), None);",
                "    assert_eq!(re.find(\"bar\"), None);",
                "    assert_eq!(re.find(\"  foo  \"), None);",
                "    assert_eq!(re.find(\"\\rfoo\"), None);",
                "    assert_eq!(re.find(\"foo\\r\"), None);",
                "    assert_eq!(re.find(\"<foo>\"), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .line_terminator(b'\\n')",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.find(\"foo\").map(|m| m.range()), None);",
                "    assert_eq!(re.find(\"\\nfoo\").map(|m| m.range()), Some(1..4));",
                "    assert_eq!(re.find(\"foo\\n\").map(|m| m.range()), Some(0..3));",
                "    assert_eq!(re.find(\"\\nfoo\\n\").map(|m| m.range()), Some(1..4));",
                "    assert_eq!(re.find(\"bar\").map(|m| m.range()), None);"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .line_terminator(b'\\n')",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re.find(\"foo\").map(|m| m.range()), None);",
                "    assert_eq!(re.find(\"\\nfoo\").map(|m| m.range()), Some(1..4));",
                "    assert_eq!(re.find(\"foo\\n\").map(|m| m.range()), Some(0..3));",
                "    assert_eq!(re.find(\"\\nfoo\\n\").map(|m| m.range()), Some(1..4));",
                "    assert_eq!(re.find(\"bar\").map(|m| m.range()), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .crlf(true)",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"foo\").map(|m| m.range()));",
                "    assert!(re.is_multiline());",
                "    assert_eq!(regex_builder.builder.syntaxc.is_multiline(), true);",
                "    assert_eq!(regex_builder.builder.syntaxc.line_terminator(), b'\\n');"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .crlf(true)",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    assert_eq!(None, re.find(\"foo\").map(|m| m.range()));",
                "    assert!(re.is_multiline());",
                "    assert_eq!(regex_builder.builder.syntaxc.is_multiline(), true);",
                "    assert_eq!(regex_builder.builder.syntaxc.line_terminator(), b'\\n');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"\")",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.multi_line(true), &re);"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"\")",
                "        .multi_line(true)",
                "        .build()",
                "        .unwrap();",
                "    assert_eq!(re.multi_line(true), &re);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}