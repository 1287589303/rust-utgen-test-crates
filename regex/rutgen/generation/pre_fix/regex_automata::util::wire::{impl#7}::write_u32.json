{
  "name": "regex_automata::util::wire::{impl#7}::write_u32",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:901:5:903:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "n: u32 in the range 0 to 4294967295 (inclusive), dst as a mutable slice of [u8] of length at least 4 bytes.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 0;",
                "    BE::write_u32(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [0, 0, 0, 0]);  // Check if dst is filled with zeroes for input 0",
                "    let n: u32 = 1;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0, 0, 0, 1]);  // Check if the last byte is set to 1 for input 1",
                "    let n: u32 = 0xFF;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0, 0, 0, 255]);  // Check if last byte is 255",
                "    let n: u32 = 0x01020304;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [1, 2, 3, 4]);  // Check endianness for input 0x01020304",
                "    let n: u32 = u32::MAX;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [255, 255, 255, 255]);  // Check if all bytes are 255 for MAX value"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 0;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0, 0, 0, 0]);  // Check if dst is filled with zeroes for input 0",
                "    let n: u32 = 1;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0, 0, 0, 1]);  // Check if the last byte is set to 1 for input 1",
                "    let n: u32 = 0xFF;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0, 0, 0, 255]);  // Check if last byte is 255",
                "    let n: u32 = 0x01020304;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [1, 2, 3, 4]);  // Check endianness for input 0x01020304",
                "    let n: u32 = u32::MAX;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [255, 255, 255, 255]);  // Check if all bytes are 255 for MAX value",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 4294967295;",
                "    BE::write_u32(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 4294967295;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [255, 255, 255, 255]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 4294967295;",
                "    BE::write_u32(n, &mut dst);",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 4294967295;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [255, 255, 255, 255]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 2147483648;",
                "    BE::write_u32(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [0x80, 0x00, 0x00, 0x00]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 2147483648;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0x80, 0x00, 0x00, 0x00]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 1;",
                "    BE::write_u32(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [0, 0, 0, 1]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 1;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0, 0, 0, 1]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 4294967294;",
                "    BE::write_u32(n, &mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [0xFF, 0xFF, 0xFF, 0xFE]);"
              ],
              "code": [
                "{",
                "    let mut dst = [0u8; 4];",
                "    let n: u32 = 4294967294;",
                "    BE::write_u32(n, &mut dst);",
                "    assert_eq!(dst, [0xFF, 0xFF, 0xFF, 0xFE]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}