{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#10}::memory_usage",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:2125:5:2127:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.table.len() * core::mem::size_of::<Option<NonMaxUsize>>()\n"
      ],
      "input_infer": "test input conditions: table with lengths of 0, 1, 10, and 100; ensuring NonMaxUsize is valid/non-zero in table; varying captures_slot_len from 0 to small integers.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: vec![],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 0,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let slot_table = SlotTable { table: vec![], slots_per_state: 1, slots_for_captures: 0 };",
                "    assert_eq!(slot_table.memory_usage(), 0);",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))], slots_per_state: 1, slots_for_captures: 1 };",
                "    assert_eq!(slot_table.memory_usage(), core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![None, Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))], slots_per_state: 2, slots_for_captures: 0 };",
                "    assert_eq!(slot_table.memory_usage(), 2 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())); 10], slots_per_state: 10, slots_for_captures: 10 };",
                "    assert_eq!(slot_table.memory_usage(), 10 * core::mem::size_of::<Option<NonMaxUsize>>());"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: vec![],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 0,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "    let slot_table = SlotTable { table: vec![], slots_per_state: 1, slots_for_captures: 0 };",
                "    assert_eq!(slot_table.memory_usage(), 0);",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))], slots_per_state: 1, slots_for_captures: 1 };",
                "    assert_eq!(slot_table.memory_usage(), core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![None, Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))], slots_per_state: 2, slots_for_captures: 0 };",
                "    assert_eq!(slot_table.memory_usage(), 2 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(3).unwrap())); 10], slots_per_state: 10, slots_for_captures: 10 };",
                "    assert_eq!(slot_table.memory_usage(), 10 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let slot_table = SlotTable { table: vec![], slots_per_state: 1, slots_for_captures: 1 }; assert_eq!(slot_table.memory_usage(), 0);",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))], slots_per_state: 1, slots_for_captures: 1 }; assert_eq!(slot_table.memory_usage(), core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 10], slots_per_state: 10, slots_for_captures: 10 }; assert_eq!(slot_table.memory_usage(), 10 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![None; 5], slots_per_state: 5, slots_for_captures: 5 }; assert_eq!(slot_table.memory_usage(), 5 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())); 3], slots_per_state: 3, slots_for_captures: 3 }; assert_eq!(slot_table.memory_usage(), 3 * core::mem::size_of::<Option<NonMaxUsize>>());"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "    let slot_table = SlotTable { table: vec![], slots_per_state: 1, slots_for_captures: 1 }; assert_eq!(slot_table.memory_usage(), 0);",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))], slots_per_state: 1, slots_for_captures: 1 }; assert_eq!(slot_table.memory_usage(), core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 10], slots_per_state: 10, slots_for_captures: 10 }; assert_eq!(slot_table.memory_usage(), 10 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![None; 5], slots_per_state: 5, slots_for_captures: 5 }; assert_eq!(slot_table.memory_usage(), 5 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())); 3], slots_per_state: 3, slots_for_captures: 3 }; assert_eq!(slot_table.memory_usage(), 3 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: (1..=10).map(|i| Some(NonMaxUsize(NonZeroUsize::new(i).unwrap()))).collect(),",
                "        slots_per_state: 1,",
                "        slots_for_captures: 10,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slot_table.memory_usage(), 10 * core::mem::size_of::<Option<NonMaxUsize>>());"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: (1..=10).map(|i| Some(NonMaxUsize(NonZeroUsize::new(i).unwrap()))).collect(),",
                "        slots_per_state: 1,",
                "        slots_for_captures: 10,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "    assert_eq!(slot_table.memory_usage(), 10 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: (1..=100).map(|i| Some(NonMaxUsize(NonZeroUsize::new(i).unwrap()))).collect(),",
                "        slots_per_state: 1,",
                "        slots_for_captures: 100,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let slot_table = SlotTable { table: (1..=100).map(|i| Some(NonMaxUsize(NonZeroUsize::new(i).unwrap()))).collect(), slots_per_state: 1, slots_for_captures: 100 }; assert_eq!(slot_table.memory_usage(), 100 * core::mem::size_of::<Option<NonMaxUsize>>());"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable {",
                "        table: (1..=100).map(|i| Some(NonMaxUsize(NonZeroUsize::new(i).unwrap()))).collect(),",
                "        slots_per_state: 1,",
                "        slots_for_captures: 100,",
                "    };",
                "    let _usage = slot_table.memory_usage();",
                "    let slot_table = SlotTable { table: (1..=100).map(|i| Some(NonMaxUsize(NonZeroUsize::new(i).unwrap()))).collect(), slots_per_state: 1, slots_for_captures: 100 }; assert_eq!(slot_table.memory_usage(), 100 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}