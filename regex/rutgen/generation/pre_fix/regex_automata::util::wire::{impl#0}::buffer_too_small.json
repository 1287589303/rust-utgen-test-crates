{
  "name": "regex_automata::util::wire::{impl#0}::buffer_too_small",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:108:5:110:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SerializeError { what }\n"
      ],
      "input_infer": "'what' parameter must be a non-empty static string slice, with maximum length condition based on the system's memory limits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = SerializeError::buffer_too_small(\"short\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.what, \"short\");",
                "    assert!(matches!(result, SerializeError { what: _ }));",
                "    assert_eq!(size_of::<SerializeError>(), size_of::<&'static str>() + size_of::<u8>());"
              ],
              "code": [
                "{",
                "    let result = SerializeError::buffer_too_small(\"short\");",
                "    assert_eq!(result.what, \"short\");",
                "    assert!(matches!(result, SerializeError { what: _ }));",
                "    assert_eq!(size_of::<SerializeError>(), size_of::<&'static str>() + size_of::<u8>());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = SerializeError::buffer_too_small(\"this is a medium length string\");",
                "}"
              ],
              "oracle": [
                "    let expected_what = \"this is a medium length string\";",
                "    let result = SerializeError::buffer_too_small(expected_what);",
                "    assert_eq!(result.what, expected_what);",
                "    assert_eq!(result, SerializeError::buffer_too_small(\"this is a medium length string\"));"
              ],
              "code": [
                "{",
                "    let result = SerializeError::buffer_too_small(\"this is a medium length string\");",
                "    let expected_what = \"this is a medium length string\";",
                "    let result = SerializeError::buffer_too_small(expected_what);",
                "    assert_eq!(result.what, expected_what);",
                "    assert_eq!(result, SerializeError::buffer_too_small(\"this is a medium length string\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let long_string = \"a\".repeat(1024); // 1024 characters long",
                "    let result = SerializeError::buffer_too_small(&long_string);",
                "}"
              ],
              "oracle": [
                "    // Ensure that the returned error has the correct `what` field",
                "    assert_eq!(result.what, long_string);"
              ],
              "code": [
                "{",
                "    let long_string = \"a\".repeat(1024); // 1024 characters long",
                "    let result = SerializeError::buffer_too_small(&long_string);",
                "    // Ensure that the returned error has the correct `what` field",
                "    assert_eq!(result.what, long_string);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let edge_case_string = \"a\"; // 1 character long",
                "    let result = SerializeError::buffer_too_small(edge_case_string);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.what, edge_case_string)"
              ],
              "code": [
                "{",
                "    let edge_case_string = \"a\"; // 1 character long",
                "    let result = SerializeError::buffer_too_small(edge_case_string);",
                "    assert_eq!(result.what, edge_case_string)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_length_string = \"b\".repeat(usize::MAX); // maximum length depending on system's memory limits",
                "    let result = SerializeError::buffer_too_small(&max_length_string);",
                "}"
              ],
              "oracle": [
                "    let max_length_string = \"b\".repeat(usize::MAX);",
                "    let result = SerializeError::buffer_too_small(&max_length_string);",
                "    assert_eq!(result.what, max_length_string);",
                "    assert!(std::mem::size_of::<SerializeError>() > 0);",
                "    assert!(std::any::TypeId::of::<SerializeError>() == std::any::TypeId::of::<SerializeError>());",
                "    assert!(result.what.is_not_empty());",
                "    assert!(result.what.len() <= usize::MAX);",
                "    assert_eq!(result.what, \"b\".repeat(usize::MAX));"
              ],
              "code": [
                "{",
                "    let max_length_string = \"b\".repeat(usize::MAX); // maximum length depending on system's memory limits",
                "    let result = SerializeError::buffer_too_small(&max_length_string);",
                "    let max_length_string = \"b\".repeat(usize::MAX);",
                "    let result = SerializeError::buffer_too_small(&max_length_string);",
                "    assert_eq!(result.what, max_length_string);",
                "    assert!(std::mem::size_of::<SerializeError>() > 0);",
                "    assert!(std::any::TypeId::of::<SerializeError>() == std::any::TypeId::of::<SerializeError>());",
                "    assert!(result.what.is_not_empty());",
                "    assert!(result.what.len() <= usize::MAX);",
                "    assert_eq!(result.what, \"b\".repeat(usize::MAX));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}