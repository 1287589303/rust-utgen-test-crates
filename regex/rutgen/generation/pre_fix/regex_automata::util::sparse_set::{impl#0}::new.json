{
  "name": "regex_automata::util::sparse_set::{impl#0}::new",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:45:5:50:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SparseSets {\n            set1: SparseSet::new(capacity),\n            set2: SparseSet::new(capacity),\n        }\n"
      ],
      "input_infer": "0 < capacity <= StateID::LIMIT\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 1; // Minimum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "}"
              ],
              "oracle": [
                "    let capacity = 1; // Minimum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "    assert_eq!(sparse_sets.set1.len, 0);",
                "    assert_eq!(sparse_sets.set2.len, 0);",
                "    assert_eq!(sparse_sets.set1.capacity(), 1);",
                "    assert_eq!(sparse_sets.set2.capacity(), 1);",
                "    ",
                "    let capacity = StateID::LIMIT; // Maximum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "    assert_eq!(sparse_sets.set1.len, 0);",
                "    assert_eq!(sparse_sets.set2.len, 0);",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT);",
                "    ",
                "    let capacity = StateID::LIMIT + 1; // Invalid capacity",
                "    let result = std::panic::catch_unwind(|| {",
                "    SparseSets::new(capacity);",
                "    });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let capacity = 1; // Minimum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "    let capacity = 1; // Minimum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "    assert_eq!(sparse_sets.set1.len, 0);",
                "    assert_eq!(sparse_sets.set2.len, 0);",
                "    assert_eq!(sparse_sets.set1.capacity(), 1);",
                "    assert_eq!(sparse_sets.set2.capacity(), 1);",
                "    ",
                "    let capacity = StateID::LIMIT; // Maximum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "    assert_eq!(sparse_sets.set1.len, 0);",
                "    assert_eq!(sparse_sets.set2.len, 0);",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT);",
                "    ",
                "    let capacity = StateID::LIMIT + 1; // Invalid capacity",
                "    let result = std::panic::catch_unwind(|| {",
                "    SparseSets::new(capacity);",
                "    });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = StateID::LIMIT; // Maximum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());"
              ],
              "code": [
                "{",
                "    let capacity = StateID::LIMIT; // Maximum valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "    assert_eq!(sparse_sets.set1.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set2.capacity(), StateID::LIMIT);",
                "    assert_eq!(sparse_sets.set1.len(), 0);",
                "    assert_eq!(sparse_sets.set2.len(), 0);",
                "    assert!(sparse_sets.set1.is_empty());",
                "    assert!(sparse_sets.set2.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let capacity = StateID::LIMIT + 1; // Exceeding valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "}"
              ],
              "oracle": [
                "    let capacity = StateID::LIMIT + 1; // Exceeding valid capacity",
                "    let sparse_sets = SparseSets::new(capacity); // This line should panic"
              ],
              "code": [
                "{",
                "    let capacity = StateID::LIMIT + 1; // Exceeding valid capacity",
                "    let sparse_sets = SparseSets::new(capacity);",
                "    let capacity = StateID::LIMIT + 1; // Exceeding valid capacity",
                "    let sparse_sets = SparseSets::new(capacity); // This line should panic",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}