{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#6}::fmt",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:891:5:908:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.range.start == self.range.end at line 892 is true\n"
      ],
      "input_infer": "self.range.start and self.range.end must be equal and within the valid UTF-8 byte range (0 to 255), and self.next_id must be a valid StateID.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range {",
                "            start: 0, // valid byte range start",
                "            end: 0,   // end equals start",
                "        },",
                "        next_id: StateID::new_unchecked(1), // valid StateID",
                "    };",
                "    let mut buffer = String::new();",
                "    let _ = transition.fmt(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:02X} => {:02X}\", 0, 1)",
                "    assert_eq!(buffer, \"00 => 01\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range {",
                "            start: 0, // valid byte range start",
                "            end: 0,   // end equals start",
                "        },",
                "        next_id: StateID::new_unchecked(1), // valid StateID",
                "    };",
                "    let mut buffer = String::new();",
                "    let _ = transition.fmt(&mut buffer);",
                "    write!(f, \"{:02X} => {:02X}\", 0, 1)",
                "    assert_eq!(buffer, \"00 => 01\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range {",
                "            start: 127, // valid byte range start",
                "            end: 127,   // end equals start",
                "        },",
                "        next_id: StateID::new_unchecked(100), // valid StateID",
                "    };",
                "    let mut buffer = String::new();",
                "    let _ = transition.fmt(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:02X} => {:02X}\", 0x7F, 100);",
                "    assert_eq!(buffer, \"7F => 64\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range {",
                "            start: 127, // valid byte range start",
                "            end: 127,   // end equals start",
                "        },",
                "        next_id: StateID::new_unchecked(100), // valid StateID",
                "    };",
                "    let mut buffer = String::new();",
                "    let _ = transition.fmt(&mut buffer);",
                "    write!(f, \"{:02X} => {:02X}\", 0x7F, 100);",
                "    assert_eq!(buffer, \"7F => 64\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range {",
                "            start: 255, // valid byte range start",
                "            end: 255,   // end equals start",
                "        },",
                "        next_id: StateID::new_unchecked(255), // valid StateID",
                "    };",
                "    let mut buffer = String::new();",
                "    let _ = transition.fmt(&mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, \"FF => FF\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range {",
                "            start: 255, // valid byte range start",
                "            end: 255,   // end equals start",
                "        },",
                "        next_id: StateID::new_unchecked(255), // valid StateID",
                "    };",
                "    let mut buffer = String::new();",
                "    let _ = transition.fmt(&mut buffer);",
                "    assert_eq!(buffer, \"FF => FF\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.range.start == self.range.end at line 892 is false\n"
      ],
      "input_infer": "self.range.start should be less than self.range.end, and both should be valid UTF-8 code points within the range 0 to 0x10FFFF, and next_id must be a valid StateID.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0x30, end: 0x39 }, // Valid UTF-8 range for digits '0' to '9'",
                "        next_id: StateID::new_unchecked(2), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x30, 0x39, 2);"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0x30, end: 0x39 }, // Valid UTF-8 range for digits '0' to '9'",
                "        next_id: StateID::new_unchecked(2), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x30, 0x39, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0x41, end: 0x5A }, // Valid UTF-8 range for uppercase 'A' to 'Z'",
                "        next_id: StateID::new_unchecked(3), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, \"41-5A => 03\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0x41, end: 0x5A }, // Valid UTF-8 range for uppercase 'A' to 'Z'",
                "        next_id: StateID::new_unchecked(3), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "    assert_eq!(output, \"41-5A => 03\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0xD7A3, end: 0xD7B2 }, // Valid UTF-8 range within surrogate code points",
                "        next_id: StateID::new_unchecked(4), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(output, \"D7A3-D7B2 => 04\");"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0xD7A3, end: 0xD7B2 }, // Valid UTF-8 range within surrogate code points",
                "        next_id: StateID::new_unchecked(4), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "    assert_eq!(output, \"D7A3-D7B2 => 04\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0x00E0, end: 0x00E5 }, // Valid UTF-8 range for 'à' to 'ë'",
                "        next_id: StateID::new_unchecked(5), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "}"
              ],
              "oracle": [
                "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x00E0, 0x00E5, 5) == output.trim()"
              ],
              "code": [
                "{",
                "    let transition = Transition {",
                "        range: Utf8Range { start: 0x00E0, end: 0x00E5 }, // Valid UTF-8 range for 'à' to 'ë'",
                "        next_id: StateID::new_unchecked(5), // Valid StateID",
                "    };",
                "    let mut output = String::new();",
                "    let _ = transition.fmt(&mut output);",
                "    write!(f, \"{:02X}-{:02X} => {:02X}\", 0x00E0, 0x00E5, 5) == output.trim()",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}