{
  "name": "regex::regex::string::{impl#7}::static_captures_len",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:1396:5:1398:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid regex patterns for testing: \"\", \"a\", \"(a)\", \"(a)|(b)\", \"(a)(b)|(c)(d)\", \"(a)|b\", \"a|(b)\", \"(b)*\", \"(b)+\", with expected return values of Some(0), Some(1), Some(2), or None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(0), Regex::new(\"\").unwrap().static_captures_len());",
                "    assert_eq!(Some(1), Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(b)+\").unwrap().static_captures_len());"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(Some(0), Regex::new(\"\").unwrap().static_captures_len());",
                "    assert_eq!(Some(1), Regex::new(\"a\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(Some(3), Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new(\"(a)|b\").unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new(\"a|(b)\").unwrap().static_captures_len());",
                "    assert_eq!(None, Regex::new(\"(b)*\").unwrap().static_captures_len());",
                "    assert_eq!(Some(2), Regex::new(\"(b)+\").unwrap().static_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)|c\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)|c\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(4), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)|(c)(d)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)(b)|(c)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(Some(4), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)|(c)(d)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    ",
                "    let regex = Regex::new(\"(a)(b)|(c)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), None);"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Some(0), regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(Some(0), regex.static_captures_len());",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(None, regex.static_captures_len());",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(Some(2), regex.static_captures_len());",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(Some(3), regex.static_captures_len());",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(Some(1), regex.static_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(\"(b)+\").unwrap();",
                "    let _ = regex.static_captures_len();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"a\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(1));",
                "    let regex = Regex::new(\"(a)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)|(b)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(2));",
                "    let regex = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), Some(3));",
                "    let regex = Regex::new(\"(a)|b\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"a|(b)\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "    let regex = Regex::new(\"(b)*\").unwrap();",
                "    assert_eq!(regex.static_captures_len(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}