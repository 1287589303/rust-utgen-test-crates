{
  "name": "regex_automata::util::search::{impl#3}::range",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:817:5:819:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "start and end should be non-negative usize values with start less than or equal to end; test inputs: (0, 0), (1, 1), (0, 10), (10, 10), (5, 15), (usize::MAX - 1, usize::MAX)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let _ = span.range();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.range(), Range { start: 0, end: 0 });"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let _ = span.range();",
                "    assert_eq!(span.range(), Range { start: 0, end: 0 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 1, end: 1 };",
                "    let _ = span.range();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.range(), 1..1);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 1, end: 1 };",
                "    let _ = span.range();",
                "    assert_eq!(span.range(), 1..1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 10 };",
                "    let _ = span.range();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.range().start, 0);",
                "    assert_eq!(span.range().end, 10);",
                "    assert_eq!(span.range(), Range { start: 0, end: 10 });"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 10 };",
                "    let _ = span.range();",
                "    assert_eq!(span.range().start, 0);",
                "    assert_eq!(span.range().end, 10);",
                "    assert_eq!(span.range(), Range { start: 0, end: 10 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 10, end: 10 };",
                "    let _ = span.range();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.range(), 10..10);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 10, end: 10 };",
                "    let _ = span.range();",
                "    assert_eq!(span.range(), 10..10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 5, end: 15 };",
                "    let _ = span.range();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.range(), 5..15);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 5, end: 15 };",
                "    let _ = span.range();",
                "    assert_eq!(span.range(), 5..15);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: usize::MAX - 1, end: usize::MAX };",
                "    let _ = span.range();",
                "}"
              ],
              "oracle": [
                "    let span = Span { start: usize::MAX - 1, end: usize::MAX };",
                "    assert_eq!(span.range(), Range { start: usize::MAX - 1, end: usize::MAX });",
                "    assert!(span.range().start == usize::MAX - 1);",
                "    assert!(span.range().end == usize::MAX);"
              ],
              "code": [
                "{",
                "    let span = Span { start: usize::MAX - 1, end: usize::MAX };",
                "    let _ = span.range();",
                "    let span = Span { start: usize::MAX - 1, end: usize::MAX };",
                "    assert_eq!(span.range(), Range { start: usize::MAX - 1, end: usize::MAX });",
                "    assert!(span.range().start == usize::MAX - 1);",
                "    assert!(span.range().end == usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}