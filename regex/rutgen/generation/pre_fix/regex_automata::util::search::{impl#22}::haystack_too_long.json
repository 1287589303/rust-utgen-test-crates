{
  "name": "regex_automata::util::search::{impl#22}::haystack_too_long",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1833:5:1835:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "len: 0 (minimum edge case), len: 1, len: 10, len: 100, len: 1000 (boundary cases), len: MAX_USIZE (maximum edge case)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = MatchError::haystack_too_long(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: 0 });"
              ],
              "code": [
                "{",
                "    let error = MatchError::haystack_too_long(0);",
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: 0 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = MatchError::haystack_too_long(1);",
                "}"
              ],
              "oracle": [
                "    error.kind() == &MatchErrorKind::HaystackTooLong { len: 1 }",
                "    error.kind().len == 1",
                "    error.kind().len != 0",
                "    error.kind().len > 0",
                "    error.kind().len < 10",
                "    error.kind().len == usize::MAX",
                "    error.kind().len == 0"
              ],
              "code": [
                "{",
                "    let error = MatchError::haystack_too_long(1);",
                "    error.kind() == &MatchErrorKind::HaystackTooLong { len: 1 }",
                "    error.kind().len == 1",
                "    error.kind().len != 0",
                "    error.kind().len > 0",
                "    error.kind().len < 10",
                "    error.kind().len == usize::MAX",
                "    error.kind().len == 0",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = MatchError::haystack_too_long(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: 10 });"
              ],
              "code": [
                "{",
                "    let error = MatchError::haystack_too_long(10);",
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: 10 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = MatchError::haystack_too_long(100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: 100 });"
              ],
              "code": [
                "{",
                "    let error = MatchError::haystack_too_long(100);",
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: 100 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = MatchError::haystack_too_long(1000);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackToo Long { len: 1000 });",
                "    assert!(matches!(error.kind(), MatchErrorKind::HaystackTooLong { len: _ }));",
                "    assert_eq!(error.kind().len(), 1000);",
                "    assert!(error == MatchError::new(MatchErrorKind::HaystackTooLong { len: 1000 }));",
                "    assert!(error.len() >= 1000);",
                "    assert!(error.offset() > 0);",
                "    assert!(error.is_haystack_too_long());"
              ],
              "code": [
                "{",
                "    let error = MatchError::haystack_too_long(1000);",
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackToo Long { len: 1000 });",
                "    assert!(matches!(error.kind(), MatchErrorKind::HaystackTooLong { len: _ }));",
                "    assert_eq!(error.kind().len(), 1000);",
                "    assert!(error == MatchError::new(MatchErrorKind::HaystackTooLong { len: 1000 }));",
                "    assert!(error.len() >= 1000);",
                "    assert!(error.offset() > 0);",
                "    assert!(error.is_haystack_too_long());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = MatchError::haystack_too_long(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: usize::MAX });"
              ],
              "code": [
                "{",
                "    let error = MatchError::haystack_too_long(usize::MAX);",
                "    assert_eq!(error.kind(), &MatchErrorKind::HaystackTooLong { len: usize::MAX });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}