{
  "name": "regex_automata::hybrid::dfa::{impl#8}::cache_capacity",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:3506:5:3509:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "cache_capacity test input conditions: bytes should be in the range [0, 2^30] to cover small (0), medium (e.g., 1MB, 10MB, 100MB), and large (e.g., 1GB) cache sizes while testing boundary cases including minimum and maximum valid values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().cache_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.cache_capacity, Some(0));",
                "    let config = Config::new().cache_capacity(100);",
                "    assert_eq!(config.cache_capacity, Some(100));",
                "    let config = Config::new().cache_capacity(1024);",
                "    assert_eq!(config.cache_capacity, Some(1024));",
                "    let config = Config::new().cache_capacity(1 << 20);",
                "    assert_eq!(config.cache_capacity, Some(1 << 20));",
                "    let config = Config::new().cache_capacity(10 * (1 << 20));",
                "    assert_eq!(config.cache_capacity, Some(10 * (1 << 20)));"
              ],
              "code": [
                "{",
                "    let config = Config::new().cache_capacity(0);",
                "    assert_eq!(config.cache_capacity, Some(0));",
                "    let config = Config::new().cache_capacity(100);",
                "    assert_eq!(config.cache_capacity, Some(100));",
                "    let config = Config::new().cache_capacity(1024);",
                "    assert_eq!(config.cache_capacity, Some(1024));",
                "    let config = Config::new().cache_capacity(1 << 20);",
                "    assert_eq!(config.cache_capacity, Some(1 << 20));",
                "    let config = Config::new().cache_capacity(10 * (1 << 20));",
                "    assert_eq!(config.cache_capacity, Some(10 * (1 << 20)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().cache_capacity(1 * (1 << 20));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.cache_capacity, Some(1 * (1 << 20)));",
                "    assert_eq!(config.minimum_cache_clear_count(), None);",
                "    assert_eq!(config.get_match_kind(), MatchKind::Default);",
                "    assert!(config.get_byte_classes());",
                "    assert!(!config.get_specialize_start_states());",
                "    assert_eq!(config.get_minimum_bytes_per_state(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().cache_capacity(1 * (1 << 20));",
                "    assert_eq!(config.cache_capacity, Some(1 * (1 << 20)));",
                "    assert_eq!(config.minimum_cache_clear_count(), None);",
                "    assert_eq!(config.get_match_kind(), MatchKind::Default);",
                "    assert!(config.get_byte_classes());",
                "    assert!(!config.get_specialize_start_states());",
                "    assert_eq!(config.get_minimum_bytes_per_state(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().cache_capacity(10 * (1 << 20));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.cache_capacity, Some(10 * (1 << 20)));",
                "    assert!(config.cache_capacity.is_some());",
                "    let default_config = Config::new();",
                "    assert_eq!(default_config.cache_capacity, None);",
                "    config.cache_capacity(0);",
                "    assert_eq!(config.cache_capacity, Some(0));",
                "    config.cache_capacity(100 * (1 << 20));",
                "    assert_eq!(config.cache_capacity, Some(100 * (1 << 20)));"
              ],
              "code": [
                "{",
                "    let config = Config::new().cache_capacity(10 * (1 << 20));",
                "    assert_eq!(config.cache_capacity, Some(10 * (1 << 20)));",
                "    assert!(config.cache_capacity.is_some());",
                "    let default_config = Config::new();",
                "    assert_eq!(default_config.cache_capacity, None);",
                "    config.cache_capacity(0);",
                "    assert_eq!(config.cache_capacity, Some(0));",
                "    config.cache_capacity(100 * (1 << 20));",
                "    assert_eq!(config.cache_capacity, Some(100 * (1 << 20)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().cache_capacity(100 * (1 << 20));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.cache_capacity, Some(100 * (1 << 20)));",
                "    assert!(config.cache_capacity.is_some());",
                "    assert!(config.cache_capacity.unwrap() > 0);",
                "    assert!(config.cache_capacity.unwrap() < usize::MAX);",
                "    assert_eq!(config.cache_capacity.unwrap(), 104857600);"
              ],
              "code": [
                "{",
                "    let config = Config::new().cache_capacity(100 * (1 << 20));",
                "    assert_eq!(config.cache_capacity, Some(100 * (1 << 20)));",
                "    assert!(config.cache_capacity.is_some());",
                "    assert!(config.cache_capacity.unwrap() > 0);",
                "    assert!(config.cache_capacity.unwrap() < usize::MAX);",
                "    assert_eq!(config.cache_capacity.unwrap(), 104857600);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().cache_capacity(1 * (1 << 30));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.cache_capacity, Some(1 * (1 << 30)));",
                "    assert_eq!(config.cache_capacity, Some(1073741824));",
                "    assert!(config.cache_capacity.is_some());",
                "    assert!(config.cache_capacity.unwrap() > MIN_STATES);",
                "    assert!(config.cache_capacity.is_some() && config.cache_capacity.unwrap() > 0);",
                "    assert!(config.cache_capacity.unwrap() % (1 << 20) == 0);"
              ],
              "code": [
                "{",
                "    let config = Config::new().cache_capacity(1 * (1 << 30));",
                "    assert_eq!(config.cache_capacity, Some(1 * (1 << 30)));",
                "    assert_eq!(config.cache_capacity, Some(1073741824));",
                "    assert!(config.cache_capacity.is_some());",
                "    assert!(config.cache_capacity.unwrap() > MIN_STATES);",
                "    assert!(config.cache_capacity.is_some() && config.cache_capacity.unwrap() > 0);",
                "    assert!(config.cache_capacity.unwrap() % (1 << 20) == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}