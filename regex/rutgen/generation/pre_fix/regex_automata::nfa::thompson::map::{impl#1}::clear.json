{
  "name": "regex_automata::nfa::thompson::map::{impl#1}::clear",
  "mod_info": {
    "name": "nfa::thompson::map",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:65:1:65:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/map.rs:242:5:251:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.map.is_empty() at line 243 is true\n"
      ],
      "input_infer": "capacity >= 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 10;",
                "    let mut map = Utf8SuffixMap::new(capacity);",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity, 10);",
                "    assert!(map.map.len() == 10);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "    assert_eq!(map.version, 0);"
              ],
              "code": [
                "{",
                "    let capacity = 10;",
                "    let mut map = Utf8SuffixMap::new(capacity);",
                "    map.clear();",
                "    assert_eq!(map.capacity, 10);",
                "    assert!(map.map.len() == 10);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "    assert_eq!(map.version, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 0;",
                "    let mut map = Utf8SuffixMap::new(capacity);",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    let capacity = 0;",
                "    let mut map = Utf8SuffixMap::new(capacity);",
                "    map.clear();",
                "    assert_eq!(map.map.len(), capacity);",
                "    assert_eq!(map.version, 0);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));"
              ],
              "code": [
                "{",
                "    let capacity = 0;",
                "    let mut map = Utf8SuffixMap::new(capacity);",
                "    map.clear();",
                "    let capacity = 0;",
                "    let mut map = Utf8SuffixMap::new(capacity);",
                "    map.clear();",
                "    assert_eq!(map.map.len(), capacity);",
                "    assert_eq!(map.version, 0);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.map.is_empty() at line 243 is false\n",
        "precondition: self.version == 0 at line 247 is false\n"
      ],
      "input_infer": "self.version should be greater than 0, self.map should contain at least one entry\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 1,",
                "        capacity: 5,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 1,",
                "            key: Utf8SuffixKey {},",
                "            val: StateID::new(1),",
                "        }],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 2);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "    assert_eq!(map.map.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 1,",
                "        capacity: 5,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 1,",
                "            key: Utf8SuffixKey {},",
                "            val: StateID::new(1),",
                "        }],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 2);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "    assert_eq!(map.map.capacity(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 10,",
                "        capacity: 5,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 10,",
                "            key: Utf8SuffixKey {},",
                "            val: StateID::new(2),",
                "        }],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 11);",
                "    assert_eq!(map.map.len(), 5);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 10,",
                "        capacity: 5,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 10,",
                "            key: Utf8SuffixKey {},",
                "            val: StateID::new(2),",
                "        }],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 11);",
                "    assert_eq!(map.map.len(), 5);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 5,",
                "        capacity: 3,",
                "        map: vec![",
                "            Utf8SuffixEntry {",
                "                version: 5,",
                "                key: Utf8SuffixKey {},",
                "                val: StateID::new(3),",
                "            },",
                "            Utf8SuffixEntry {",
                "                version: 5,",
                "                key: Utf8SuffixKey {},",
                "                val: StateID::new(4),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 6);",
                "    assert_eq!(map.map.len(), 3);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "    assert_ne!(map.version, 0);"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 5,",
                "        capacity: 3,",
                "        map: vec![",
                "            Utf8SuffixEntry {",
                "                version: 5,",
                "                key: Utf8SuffixKey {},",
                "                val: StateID::new(3),",
                "            },",
                "            Utf8SuffixEntry {",
                "                version: 5,",
                "                key: Utf8SuffixKey {},",
                "                val: StateID::new(4),",
                "            },",
                "        ],",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 6);",
                "    assert_eq!(map.map.len(), 3);",
                "    assert!(map.map.iter().all(|entry| entry == &Utf8SuffixEntry::default()));",
                "    assert_ne!(map.version, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.map.is_empty() at line 243 is false\n",
        "precondition: self.version == 0 at line 247 is true\n"
      ],
      "input_infer": "self.map must not be empty and self.version must be 0 before calling clear()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 0,",
                "        capacity: 10,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 0,",
                "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
                "            val: StateID::new(1), // Assuming default initialization",
                "        }; 5], // Initialize with 5 entries",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), 10);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key == Utf8SuffixKey::default()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 0,",
                "        capacity: 10,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 0,",
                "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
                "            val: StateID::new(1), // Assuming default initialization",
                "        }; 5], // Initialize with 5 entries",
                "    };",
                "    map.clear();",
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), 10);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.key == Utf8SuffixKey::default()));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 0,",
                "        capacity: 15,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 0,",
                "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
                "            val: StateID::new(2), // Assuming default initialization",
                "        }; 10], // Initialize with 10 entries",
                "    };",
                "    map.clear();",
                "}"
              ],
              "oracle": [
                "    let map = Utf8SuffixMap { version: 0, capacity: 15, map: vec![Utf8SuffixEntry { version: 0, key: Utf8SuffixKey {}, val: StateID::new(2) }; 10] };",
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), 15);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));",
                "    assert!(map.map.iter().any(|entry| entry.key == Utf8SuffixKey {}));"
              ],
              "code": [
                "{",
                "    let mut map = Utf8SuffixMap {",
                "        version: 0,",
                "        capacity: 15,",
                "        map: vec![Utf8SuffixEntry {",
                "            version: 0,",
                "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
                "            val: StateID::new(2), // Assuming default initialization",
                "        }; 10], // Initialize with 10 entries",
                "    };",
                "    map.clear();",
                "    let map = Utf8SuffixMap { version: 0, capacity: 15, map: vec![Utf8SuffixEntry { version: 0, key: Utf8SuffixKey {}, val: StateID::new(2) }; 10] };",
                "    assert_eq!(map.version, 1);",
                "    assert_eq!(map.map.len(), 15);",
                "    assert!(map.map.iter().all(|entry| entry.version == 0));",
                "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));",
                "    assert!(map.map.iter().any(|entry| entry.key == Utf8SuffixKey {}));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}