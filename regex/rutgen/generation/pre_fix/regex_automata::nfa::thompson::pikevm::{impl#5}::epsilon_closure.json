{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#5}::epsilon_closure",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1611:5:1637:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(frame) = stack.pop() at line 1625 is true\n",
        "precondition: frame matches FollowEpsilon::RestoreCapture { slot, offset: pos } at line 1626 is true\n",
        "precondition: frame matches FollowEpsilon::RestoreCapture { slot, offset: pos } at line 1626 is true\n",
        "precondition: let Some(frame) = stack.pop() at line 1625 is true\n"
      ],
      "input_infer": "input haystack as bytes of varying lengths (0 to 65535), span set to (0, input length), stack initialized with at least one FollowEpsilon::RestoreCapture, curr_slots as Option<NonMaxUsize> array matching state count, next ActiveStates not empty, at within range (0 to input length), sid as valid StateID from NFA's state set\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stack = &mut vec![",
                "        FollowEpsilon::RestoreCapture {",
                "            slot: SmallIndex(0),",
                "            offset: Some(NonMaxUsize::new(1).unwrap()),",
                "        },",
                "    ];",
                "    ",
                "    let curr_slots = &mut [Some(NonMaxUsize::new(0).unwrap())];",
                "    let next = &mut ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"abc\".as_ref(),",
                "        span: Span::new(0, 3),",
                "        anchored: Anchored::No,",
                "        earliest: false,",
                "    };",
                "    ",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(1));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(stack, curr_slots, next, &input, at, sid);",
                "}"
              ],
              "oracle": [
                "    let result = curr_slots[SmallIndex(0)]; // check if curr_slots[0] is updated correctly after calling epsilon_closure",
                "    assert_eq!(result, Some(NonMaxUsize::new(1).unwrap())); // expected value is Some(NonMaxUsize::new(1).unwrap())",
                "    let result_set = next.set; // check if next.set contains expected states",
                "    assert!(result_set.contains(StateID(SmallIndex(1)))); // StateID(1) should be included in active states",
                "    let restored_position = curr_slots[SmallIndex(0)]; // check if curr_slots[0] is restored to original value",
                "    assert_eq!(restored_position, Some(NonMaxUsize::new(0).unwrap())); // original value should have been restored"
              ],
              "code": [
                "{",
                "    let stack = &mut vec![",
                "        FollowEpsilon::RestoreCapture {",
                "            slot: SmallIndex(0),",
                "            offset: Some(NonMaxUsize::new(1).unwrap()),",
                "        },",
                "    ];",
                "    ",
                "    let curr_slots = &mut [Some(NonMaxUsize::new(0).unwrap())];",
                "    let next = &mut ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"abc\".as_ref(),",
                "        span: Span::new(0, 3),",
                "        anchored: Anchored::No,",
                "        earliest: false,",
                "    };",
                "    ",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(1));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(stack, curr_slots, next, &input, at, sid);",
                "    let result = curr_slots[SmallIndex(0)]; // check if curr_slots[0] is updated correctly after calling epsilon_closure",
                "    assert_eq!(result, Some(NonMaxUsize::new(1).unwrap())); // expected value is Some(NonMaxUsize::new(1).unwrap())",
                "    let result_set = next.set; // check if next.set contains expected states",
                "    assert!(result_set.contains(StateID(SmallIndex(1)))); // StateID(1) should be included in active states",
                "    let restored_position = curr_slots[SmallIndex(0)]; // check if curr_slots[0] is restored to original value",
                "    assert_eq!(restored_position, Some(NonMaxUsize::new(0).unwrap())); // original value should have been restored",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stack = &mut vec![",
                "        FollowEpsilon::RestoreCapture {",
                "            slot: SmallIndex(1),",
                "            offset: Some(NonMaxUsize::new(2).unwrap()),",
                "        },",
                "    ];",
                "    ",
                "    let curr_slots = &mut [Some(NonMaxUsize::new(3).unwrap()), None];",
                "    let next = &mut ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"xyz\".as_ref(),",
                "        span: Span::new(0, 3),",
                "        anchored: Anchored::No,",
                "        earliest: false,",
                "    };",
                "    ",
                "    let at = 1;",
                "    let sid = StateID(SmallIndex(2));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(stack, curr_slots, next, &input, at, sid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(curr_slots[1], Some(NonMaxUsize::new(2).unwrap()));",
                "    assert_eq!(curr_slots[0], Some(NonMaxUsize::new(3).unwrap()));",
                "    assert!(next.set.is_empty());",
                "    assert_eq!(next.slot_table.for_state(sid), curr_slots);",
                "    assert!(stack.is_empty());"
              ],
              "code": [
                "{",
                "    let stack = &mut vec![",
                "        FollowEpsilon::RestoreCapture {",
                "            slot: SmallIndex(1),",
                "            offset: Some(NonMaxUsize::new(2).unwrap()),",
                "        },",
                "    ];",
                "    ",
                "    let curr_slots = &mut [Some(NonMaxUsize::new(3).unwrap()), None];",
                "    let next = &mut ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"xyz\".as_ref(),",
                "        span: Span::new(0, 3),",
                "        anchored: Anchored::No,",
                "        earliest: false,",
                "    };",
                "    ",
                "    let at = 1;",
                "    let sid = StateID(SmallIndex(2));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(stack, curr_slots, next, &input, at, sid);",
                "    assert_eq!(curr_slots[1], Some(NonMaxUsize::new(2).unwrap()));",
                "    assert_eq!(curr_slots[0], Some(NonMaxUsize::new(3).unwrap()));",
                "    assert!(next.set.is_empty());",
                "    assert_eq!(next.slot_table.for_state(sid), curr_slots);",
                "    assert!(stack.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let stack = &mut vec![",
                "        FollowEpsilon::RestoreCapture {",
                "            slot: SmallIndex(2),",
                "            offset: None,",
                "        },",
                "    ];",
                "    ",
                "    let curr_slots = &mut [None, Some(NonMaxUsize::new(4).unwrap()), Some(NonMaxUsize::new(5).unwrap())];",
                "    let next = &mut ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"hello\".as_ref(),",
                "        span: Span::new(0, 5),",
                "        anchored: Anchored::No,",
                "        earliest: false,",
                "    };",
                "    ",
                "    let at = 2;",
                "    let sid = StateID(SmallIndex(3));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(stack, curr_slots, next, &input, at, sid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(curr_slots[2], None);",
                "    assert_eq!(curr_slots[1], Some(NonMaxUsize::new(4).unwrap()));",
                "    assert_eq!(curr_slots[0], None);",
                "    assert!(next.set.is_empty());",
                "    assert!(next.slot_table.for_state(sid).iter().all(|&slot| slot.is_none()));",
                "    assert!(stack.is_empty());"
              ],
              "code": [
                "{",
                "    let stack = &mut vec![",
                "        FollowEpsilon::RestoreCapture {",
                "            slot: SmallIndex(2),",
                "            offset: None,",
                "        },",
                "    ];",
                "    ",
                "    let curr_slots = &mut [None, Some(NonMaxUsize::new(4).unwrap()), Some(NonMaxUsize::new(5).unwrap())];",
                "    let next = &mut ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    ",
                "    let input = Input {",
                "        haystack: b\"hello\".as_ref(),",
                "        span: Span::new(0, 5),",
                "        anchored: Anchored::No,",
                "        earliest: false,",
                "    };",
                "    ",
                "    let at = 2;",
                "    let sid = StateID(SmallIndex(3));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(stack, curr_slots, next, &input, at, sid);",
                "    assert_eq!(curr_slots[2], None);",
                "    assert_eq!(curr_slots[1], Some(NonMaxUsize::new(4).unwrap()));",
                "    assert_eq!(curr_slots[0], None);",
                "    assert!(next.set.is_empty());",
                "    assert!(next.slot_table.for_state(sid).iter().all(|&slot| slot.is_none()));",
                "    assert!(stack.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Some(frame) = stack.pop() at line 1625 is true\n",
        "precondition: frame matches FollowEpsilon::Explore(sid) at line 1626 is true\n",
        "precondition: let Some(frame) = stack.pop() at line 1625 is true\n"
      ],
      "input_infer": "stack size > 0, curr_slots length > 0, next ActiveStates is initialized, input haystack length > 0, at is a valid index within input haystack, sid is a valid StateID for the NFA\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(0)))];",
                "    let mut curr_slots = vec![Some(NonMaxUsize::new(0).unwrap())];",
                "    let mut next = ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "        haystack: &[1, 2, 3],",
                "        span: Span::default(),",
                "        anchored: Anchored::default(),",
                "        earliest: false,",
                "    };",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(1));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, &input, at, sid);",
                "}"
              ],
              "oracle": [
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(0)))];",
                "    let mut curr_slots = vec![Some(NonMaxUsize::new(0).unwrap())];",
                "    let mut next = ActiveStates {",
                "    set: SparseSet::default(),",
                "    slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "    haystack: &[1, 2, 3],",
                "    span: Span::default(),",
                "    anchored: Anchored::default(),",
                "    earliest: false,",
                "    };",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(1));",
                "    ",
                "    assert!(stack.pop().is_some()); // Check precondition: let Some(frame) = stack.pop() is true",
                "    if let Some(frame) = stack.pop() {",
                "    match frame {",
                "    FollowEpsilon::Explore(sid) => {",
                "    assert_eq!(curr_slots[0], Some(NonMaxUsize::new(0).unwrap())); // Ensure curr_slots remains unchanged",
                "    assert!(next.set.is_empty()); // Ensure next is initially empty",
                "    }",
                "    }",
                "    }"
              ],
              "code": [
                "{",
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(0)))];",
                "    let mut curr_slots = vec![Some(NonMaxUsize::new(0).unwrap())];",
                "    let mut next = ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "        haystack: &[1, 2, 3],",
                "        span: Span::default(),",
                "        anchored: Anchored::default(),",
                "        earliest: false,",
                "    };",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(1));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, &input, at, sid);",
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(0)))];",
                "    let mut curr_slots = vec![Some(NonMaxUsize::new(0).unwrap())];",
                "    let mut next = ActiveStates {",
                "    set: SparseSet::default(),",
                "    slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "    haystack: &[1, 2, 3],",
                "    span: Span::default(),",
                "    anchored: Anchored::default(),",
                "    earliest: false,",
                "    };",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(1));",
                "    ",
                "    assert!(stack.pop().is_some()); // Check precondition: let Some(frame) = stack.pop() is true",
                "    if let Some(frame) = stack.pop() {",
                "    match frame {",
                "    FollowEpsilon::Explore(sid) => {",
                "    assert_eq!(curr_slots[0], Some(NonMaxUsize::new(0).unwrap())); // Ensure curr_slots remains unchanged",
                "    assert!(next.set.is_empty()); // Ensure next is initially empty",
                "    }",
                "    }",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(2)))];",
                "    let mut curr_slots = vec![",
                "        Some(NonMaxUsize::new(1).unwrap()),",
                "        Some(NonMaxUsize::new(2).unwrap()),",
                "    ];",
                "    let mut next = ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "        haystack: &[4, 5, 6],",
                "        span: Span::default(),",
                "        anchored: Anchored::default(),",
                "        earliest: true,",
                "    };",
                "    let at = 1;",
                "    let sid = StateID(SmallIndex(3));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, &input, at, sid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(curr_slots[0], Some(NonMaxUsize::new(1).unwrap()));",
                "    assert_eq!(curr_slots[1], Some(NonMaxUsize::new(2).unwrap()));",
                "    assert!(next.set.len() > 0);",
                "    assert!(stack.is_empty());",
                "    assert!(next.slot_table.for_state(sid).iter().all(|&v| v == Some(NonMaxUsize::new(1).unwrap()) || v == Some(NonMaxUsize::new(2).unwrap())));",
                "    assert!(next.slot_table.for_state(StateID(SmallIndex(3))).is_some());",
                "    assert_eq!(next.slot_table.for_state(StateID(SmallIndex(2))).len(), curr_slots.len());",
                "    assert!(next.slot_table.for_state(sid).iter().any(|&v| v.is_some()));"
              ],
              "code": [
                "{",
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(2)))];",
                "    let mut curr_slots = vec![",
                "        Some(NonMaxUsize::new(1).unwrap()),",
                "        Some(NonMaxUsize::new(2).unwrap()),",
                "    ];",
                "    let mut next = ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "        haystack: &[4, 5, 6],",
                "        span: Span::default(),",
                "        anchored: Anchored::default(),",
                "        earliest: true,",
                "    };",
                "    let at = 1;",
                "    let sid = StateID(SmallIndex(3));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, &input, at, sid);",
                "    assert_eq!(curr_slots[0], Some(NonMaxUsize::new(1).unwrap()));",
                "    assert_eq!(curr_slots[1], Some(NonMaxUsize::new(2).unwrap()));",
                "    assert!(next.set.len() > 0);",
                "    assert!(stack.is_empty());",
                "    assert!(next.slot_table.for_state(sid).iter().all(|&v| v == Some(NonMaxUsize::new(1).unwrap()) || v == Some(NonMaxUsize::new(2).unwrap())));",
                "    assert!(next.slot_table.for_state(StateID(SmallIndex(3))).is_some());",
                "    assert_eq!(next.slot_table.for_state(StateID(SmallIndex(2))).len(), curr_slots.len());",
                "    assert!(next.slot_table.for_state(sid).iter().any(|&v| v.is_some()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(4)))];",
                "    let mut curr_slots = vec![None];",
                "    let mut next = ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "        haystack: &[7],",
                "        span: Span::default(),",
                "        anchored: Anchored::default(),",
                "        earliest: false,",
                "    };",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(5));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, &input, at, sid);",
                "}"
              ],
              "oracle": [
                "    stack.pop().is_some() == true",
                "    frame == FollowEpsilon::Explore(StateID(SmallIndex(5)))",
                "    curr_slots.len() == 1",
                "    next.set.is_empty() == true",
                "    next.slot_table.for_state(StateID(SmallIndex(5))) == curr_slots",
                "    curr_slots[0].is_none() == true",
                "    input.haystack[0] == 7",
                "    at == 0",
                "    sid == StateID(SmallIndex(5))"
              ],
              "code": [
                "{",
                "    let mut stack = vec![FollowEpsilon::Explore(StateID(SmallIndex(4)))];",
                "    let mut curr_slots = vec![None];",
                "    let mut next = ActiveStates {",
                "        set: SparseSet::default(),",
                "        slot_table: SlotTable::default(),",
                "    };",
                "    let input = Input {",
                "        haystack: &[7],",
                "        span: Span::default(),",
                "        anchored: Anchored::default(),",
                "        earliest: false,",
                "    };",
                "    let at = 0;",
                "    let sid = StateID(SmallIndex(5));",
                "",
                "    let pike_vm = PikeVM {",
                "        config: Config::default(),",
                "        nfa: NFA::default(),",
                "    };",
                "",
                "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, &input, at, sid);",
                "    stack.pop().is_some() == true",
                "    frame == FollowEpsilon::Explore(StateID(SmallIndex(5)))",
                "    curr_slots.len() == 1",
                "    next.set.is_empty() == true",
                "    next.slot_table.for_state(StateID(SmallIndex(5))) == curr_slots",
                "    curr_slots[0].is_none() == true",
                "    input.haystack[0] == 7",
                "    at == 0",
                "    sid == StateID(SmallIndex(5))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}