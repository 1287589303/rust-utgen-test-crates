{
  "name": "regex_lite::pikevm::{impl#6}::new",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:671:5:673:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SlotTable { table: vec![], slots_for_captures: 0, slots_per_state: 0 }\n"
      ],
      "input_infer": "test input conditions: none (as the function does not take parameters and returns a new SlotTable instance with default values)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table to be SlotTable { table: vec![], slots_for_captures: 0, slots_per_state: 0 }",
                "}"
              ],
              "oracle": [
                "    let slot_table = SlotTable::new();",
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table to be SlotTable { table: vec![], slots_for_captures: 0, slots_per_state: 0 }",
                "    let slot_table = SlotTable::new();",
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table.table to be empty",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);",
                "    assert!(slot_table.table.is_empty());"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table.table to be empty",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);",
                "    assert!(slot_table.table.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table.slots_for_captures to be 0",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table.slots_for_captures to be 0",
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table.slots_per_state to be 0",
                "}"
              ],
              "oracle": [
                "    let slot_table = SlotTable::new();",
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);"
              ],
              "code": [
                "{",
                "    let slot_table = SlotTable::new();",
                "    // Implicitly expect slot_table.slots_per_state to be 0",
                "    let slot_table = SlotTable::new();",
                "    assert_eq!(slot_table.table, vec![]);",
                "    assert_eq!(slot_table.slots_for_captures, 0);",
                "    assert_eq!(slot_table.slots_per_state, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}