{
  "name": "regex_automata::util::start::{impl#0}::anchored",
  "mod_info": {
    "name": "util::start",
    "loc": "regex-automata/src/util/mod.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "regex-automata/src/util/start.rs:177:5:180:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "Anchored mode as either Anchored::No, Anchored::Yes, or Anchored::Pattern(PatternID) with valid PatternID values, and self must be a valid Config instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let modified_config = config.anchored(Anchored::No);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(modified_config.get_anchored(), Anchored::No);",
                "    assert!(modified_config.get_look_behind().is_none());",
                "    assert_ne!(modified_config, config);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let modified_config = config.anchored(Anchored::No);",
                "    assert_eq!(modified_config.get_anchored(), Anchored::No);",
                "    assert!(modified_config.get_look_behind().is_none());",
                "    assert_ne!(modified_config, config);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let modified_config = config.anchored(Anchored::Yes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(modified_config.get_anchored(), Anchored::Yes);",
                "    assert_ne!(modified_config.get_anchored(), Anchored::No);",
                "    assert_ne!(modified_config.get_anchored(), Anchored::Pattern(PatternID::default()));"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let modified_config = config.anchored(Anchored::Yes);",
                "    assert_eq!(modified_config.get_anchored(), Anchored::Yes);",
                "    assert_ne!(modified_config.get_anchored(), Anchored::No);",
                "    assert_ne!(modified_config.get_anchored(), Anchored::Pattern(PatternID::default()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct PatternID; // Dummy struct for PatternID",
                "    let config = Config::new();",
                "    let pattern_id = PatternID; // Create an instance of PatternID",
                "    let modified_config = config.anchored(Anchored::Pattern(pattern_id));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(modified_config.get_anchored(), Anchored::Pattern(pattern_id));",
                "    assert!(modified_config.get_look_behind().is_none());",
                "    assert_ne!(config.get_anchored(), modified_config.get_anchored());",
                "    assert!(modified_config.get_anchored() != Anchored::No);",
                "    assert_eq!(config.get_look_behind(), None);"
              ],
              "code": [
                "{",
                "    struct PatternID; // Dummy struct for PatternID",
                "    let config = Config::new();",
                "    let pattern_id = PatternID; // Create an instance of PatternID",
                "    let modified_config = config.anchored(Anchored::Pattern(pattern_id));",
                "    assert_eq!(modified_config.get_anchored(), Anchored::Pattern(pattern_id));",
                "    assert!(modified_config.get_look_behind().is_none());",
                "    assert_ne!(config.get_anchored(), modified_config.get_anchored());",
                "    assert!(modified_config.get_anchored() != Anchored::No);",
                "    assert_eq!(config.get_look_behind(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}