{
  "name": "regex_lite::hir::escape",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": true,
  "loc": "regex-lite/src/hir/mod.rs:11:1:21:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ch in pattern.chars() at line 14 is true\n",
        "precondition: is_meta_character(ch) at line 15 is true\n",
        "precondition: ch in pattern.chars() at line 14 is false\n",
        "expected return value/type: buf\n"
      ],
      "input_infer": "Input conditions or ranges: An empty string, a single non-meta character, a single meta character (e.g., \".\", \"+\", \"*\"), a string with both meta and non-meta characters, and a string composed entirely of meta characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"\");",
                "    assert_eq!(result.len(), 0);",
                "    let result = escape(\"abc\");",
                "    assert_eq!(result, \"abc\");",
                "    let result = escape(\"a.b+c?\");",
                "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\?\");",
                "    let result = escape(\"\\\\(test\\\\)\");",
                "    assert_eq!(result, \"\\\\\\\\(test\\\\\\\\)\");",
                "    let result = escape(\"foo$bar\");",
                "    assert_eq!(result, \"foo\\\\$bar\");",
                "    let result = escape(\"[a-z]\");",
                "    assert_eq!(result, \"\\\\[a-z\\\\]\");"
              ],
              "code": [
                "{",
                "    let result = escape(\"\");",
                "    assert_eq!(result, \"\");",
                "    assert_eq!(result.len(), 0);",
                "    let result = escape(\"abc\");",
                "    assert_eq!(result, \"abc\");",
                "    let result = escape(\"a.b+c?\");",
                "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\?\");",
                "    let result = escape(\"\\\\(test\\\\)\");",
                "    assert_eq!(result, \"\\\\\\\\(test\\\\\\\\)\");",
                "    let result = escape(\"foo$bar\");",
                "    assert_eq!(result, \"foo\\\\$bar\");",
                "    let result = escape(\"[a-z]\");",
                "    assert_eq!(result, \"\\\\[a-z\\\\]\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\".\");",
                "}"
              ],
              "oracle": [
                "    let result = escape(\".\"); assert_eq!(result, r\"\\.\");",
                "    let result = escape(\"+\"); assert_eq!(result, r\"\\+\");",
                "    let result = escape(\"a+b\"); assert_eq!(result, r\"a\\+b\");",
                "    let result = escape(\"abc*\"); assert_eq!(result, r\"abc\\*\");",
                "    let result = escape(\"x{2,3}\"); assert_eq!(result, r\"x\\{2,3\\}\");",
                "    let result = escape(\"~hello*world\"); assert_eq!(result, r\"~hello\\*world\");",
                "    let result = escape(\"a(bc)\"); assert_eq!(result, r\"a\\(bc\\)\");",
                "    let result = escape(\"-item\"); assert_eq!(result, r\"\\-item\");",
                "    let result = escape(\"^start\"); assert_eq!(result, r\"\\^start\");",
                "    let result = escape(\"end$\"); assert_eq!(result, r\"end\\$\");",
                "    let result = escape(\"no_meta_chars\"); assert_eq!(result, \"no_meta_chars\");"
              ],
              "code": [
                "{",
                "    let result = escape(\".\");",
                "    let result = escape(\".\"); assert_eq!(result, r\"\\.\");",
                "    let result = escape(\"+\"); assert_eq!(result, r\"\\+\");",
                "    let result = escape(\"a+b\"); assert_eq!(result, r\"a\\+b\");",
                "    let result = escape(\"abc*\"); assert_eq!(result, r\"abc\\*\");",
                "    let result = escape(\"x{2,3}\"); assert_eq!(result, r\"x\\{2,3\\}\");",
                "    let result = escape(\"~hello*world\"); assert_eq!(result, r\"~hello\\*world\");",
                "    let result = escape(\"a(bc)\"); assert_eq!(result, r\"a\\(bc\\)\");",
                "    let result = escape(\"-item\"); assert_eq!(result, r\"\\-item\");",
                "    let result = escape(\"^start\"); assert_eq!(result, r\"\\^start\");",
                "    let result = escape(\"end$\"); assert_eq!(result, r\"end\\$\");",
                "    let result = escape(\"no_meta_chars\"); assert_eq!(result, \"no_meta_chars\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\"a\");",
                "}"
              ],
              "oracle": [
                "    let result = escape(\"a\"); assert_eq!(result, \"a\");",
                "    let result = escape(\"a.b\"); assert_eq!(result, \"a\\\\.b\");",
                "    let result = escape(\"ab+c\"); assert_eq!(result, \"ab\\\\+c\");",
                "    let result = escape(\"a?b\"); assert_eq!(result, \"a\\\\?b\");",
                "    let result = escape(\"a(b)c\"); assert_eq!(result, \"a\\\\(b\\\\)c\");",
                "    let result = escape(\"a|b\"); assert_eq!(result, \"a\\\\|b\");",
                "    let result = escape(\"[abc]\"); assert_eq!(result, \"\\\\[abc\\\\]\");",
                "    let result = escape(\"{1,2}\"); assert_eq!(result, \"\\\\{1,2\\\\}\");",
                "    let result = escape(\"^start\"); assert_eq!(result, \"\\\\^start\");",
                "    let result = escape(\"end$\"); assert_eq!(result, \"end\\\\$\");",
                "    let result = escape(\"&\"); assert_eq!(result, \"&\");",
                "    let result = escape(\"-dash-\"); assert_eq!(result, \"-dash-\");",
                "    let result = escape(\"~tilde\"); assert_eq!(result, \"~tilde\");",
                "    let result = escape(\"\\\\backslash\"); assert_eq!(result, \"\\\\\\\\backslash\");"
              ],
              "code": [
                "{",
                "    let result = escape(\"a\");",
                "    let result = escape(\"a\"); assert_eq!(result, \"a\");",
                "    let result = escape(\"a.b\"); assert_eq!(result, \"a\\\\.b\");",
                "    let result = escape(\"ab+c\"); assert_eq!(result, \"ab\\\\+c\");",
                "    let result = escape(\"a?b\"); assert_eq!(result, \"a\\\\?b\");",
                "    let result = escape(\"a(b)c\"); assert_eq!(result, \"a\\\\(b\\\\)c\");",
                "    let result = escape(\"a|b\"); assert_eq!(result, \"a\\\\|b\");",
                "    let result = escape(\"[abc]\"); assert_eq!(result, \"\\\\[abc\\\\]\");",
                "    let result = escape(\"{1,2}\"); assert_eq!(result, \"\\\\{1,2\\\\}\");",
                "    let result = escape(\"^start\"); assert_eq!(result, \"\\\\^start\");",
                "    let result = escape(\"end$\"); assert_eq!(result, \"end\\\\$\");",
                "    let result = escape(\"&\"); assert_eq!(result, \"&\");",
                "    let result = escape(\"-dash-\"); assert_eq!(result, \"-dash-\");",
                "    let result = escape(\"~tilde\"); assert_eq!(result, \"~tilde\");",
                "    let result = escape(\"\\\\backslash\"); assert_eq!(result, \"\\\\\\\\backslash\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\"a.b+c*\");",
                "}"
              ],
              "oracle": [
                "    let result = escape(\"a.b+c*\");",
                "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\*\");",
                "    let result = escape(\"a(b)c\");",
                "    assert_eq!(result, \"a\\\\(b\\\\)c\");",
                "    let result = escape(\"a|b\");",
                "    assert_eq!(result, \"a\\\\|b\");",
                "    let result = escape(\"c{2}\");",
                "    assert_eq!(result, \"c\\\\{2\\\\}\");",
                "    let result = escape(\"escape \\\\$\");",
                "    assert_eq!(result, \"escape \\\\$\");",
                "    let result = escape(\"^start$\");",
                "    assert_eq!(result, \"\\\\^start\\\\$\");",
                "    let result = escape(\"~end\");",
                "    assert_eq!(result, \"\\\\~end\");",
                "    let result = escape(\"no meta\");",
                "    assert_eq!(result, \"no meta\");",
                "    let result = escape(\"[set]\");",
                "    assert_eq!(result, \"\\\\[set\\\\]\");",
                "    let result = escape(\"complex*regex+\");",
                "    assert_eq!(result, \"complex\\\\*regex\\\\+\");"
              ],
              "code": [
                "{",
                "    let result = escape(\"a.b+c*\");",
                "    let result = escape(\"a.b+c*\");",
                "    assert_eq!(result, \"a\\\\.b\\\\+c\\\\*\");",
                "    let result = escape(\"a(b)c\");",
                "    assert_eq!(result, \"a\\\\(b\\\\)c\");",
                "    let result = escape(\"a|b\");",
                "    assert_eq!(result, \"a\\\\|b\");",
                "    let result = escape(\"c{2}\");",
                "    assert_eq!(result, \"c\\\\{2\\\\}\");",
                "    let result = escape(\"escape \\\\$\");",
                "    assert_eq!(result, \"escape \\\\$\");",
                "    let result = escape(\"^start$\");",
                "    assert_eq!(result, \"\\\\^start\\\\$\");",
                "    let result = escape(\"~end\");",
                "    assert_eq!(result, \"\\\\~end\");",
                "    let result = escape(\"no meta\");",
                "    assert_eq!(result, \"no meta\");",
                "    let result = escape(\"[set]\");",
                "    assert_eq!(result, \"\\\\[set\\\\]\");",
                "    let result = escape(\"complex*regex+\");",
                "    assert_eq!(result, \"complex\\\\*regex\\\\+\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(r\"\\.+*?()|[]{}^$&#-~\");",
                "}"
              ],
              "oracle": [
                "    let expected_result = r\"\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\&\\#\\-\\~\";",
                "    assert_eq!(result, expected_result);",
                "    let result_empty = escape(\"\");",
                "    assert_eq!(result_empty, \"\");",
                "    let result_no_meta = escape(\"abc\");",
                "    assert_eq!(result_no_meta, \"abc\");",
                "    let result_partial_meta = escape(\"a.b+c?d\");",
                "    assert_eq!(result_partial_meta, \"a\\\\.b\\\\+c\\\\?d\");"
              ],
              "code": [
                "{",
                "    let result = escape(r\"\\.+*?()|[]{}^$&#-~\");",
                "    let expected_result = r\"\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\\&\\#\\-\\~\";",
                "    assert_eq!(result, expected_result);",
                "    let result_empty = escape(\"\");",
                "    assert_eq!(result_empty, \"\");",
                "    let result_no_meta = escape(\"abc\");",
                "    assert_eq!(result_no_meta, \"abc\");",
                "    let result_partial_meta = escape(\"a.b+c?d\");",
                "    assert_eq!(result_partial_meta, \"a\\\\.b\\\\+c\\\\?d\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: ch in pattern.chars() at line 14 is true\n",
        "precondition: is_meta_character(ch) at line 15 is false\n",
        "precondition: ch in pattern.chars() at line 14 is false\n",
        "expected return value/type: buf\n"
      ],
      "input_infer": "Test input conditions or ranges: empty string, string with no meta characters (e.g., \"hello\"), string with only non-meta characters (e.g., \"abcde\"), and a single character string (e.g., \"a\").\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\"\");",
                "}"
              ],
              "oracle": [
                "    let result = escape(\"\");",
                "    assert_eq!(result, \"\");",
                "    ",
                "    let result = escape(\"abc\");",
                "    assert_eq!(result, \"abc\");",
                "    ",
                "    let result = escape(\"123\");",
                "    assert_eq!(result, \"123\");",
                "    ",
                "    let result = escape(\"a1b2c3\");",
                "    assert_eq!(result, \"a1b2c3\");",
                "    ",
                "    let result = escape(\"noMetaCharsHere\");",
                "    assert_eq!(result, \"noMetaCharsHere\");",
                "    ",
                "    let result = escape(\"someRandomString\");",
                "    assert_eq!(result, \"someRandomString\");",
                "    ",
                "    let result = escape(\" \");",
                "    assert_eq!(result, \" \");",
                "    ",
                "    let result = escape(\"test string with spaces\");",
                "    assert_eq!(result, \"test string with spaces\");",
                "    ",
                "    let result = escape(\"specialChars!@#\");",
                "    assert_eq!(result, \"specialChars!@#\");"
              ],
              "code": [
                "{",
                "    let result = escape(\"\");",
                "    let result = escape(\"\");",
                "    assert_eq!(result, \"\");",
                "    ",
                "    let result = escape(\"abc\");",
                "    assert_eq!(result, \"abc\");",
                "    ",
                "    let result = escape(\"123\");",
                "    assert_eq!(result, \"123\");",
                "    ",
                "    let result = escape(\"a1b2c3\");",
                "    assert_eq!(result, \"a1b2c3\");",
                "    ",
                "    let result = escape(\"noMetaCharsHere\");",
                "    assert_eq!(result, \"noMetaCharsHere\");",
                "    ",
                "    let result = escape(\"someRandomString\");",
                "    assert_eq!(result, \"someRandomString\");",
                "    ",
                "    let result = escape(\" \");",
                "    assert_eq!(result, \" \");",
                "    ",
                "    let result = escape(\"test string with spaces\");",
                "    assert_eq!(result, \"test string with spaces\");",
                "    ",
                "    let result = escape(\"specialChars!@#\");",
                "    assert_eq!(result, \"specialChars!@#\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\"hello\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"hello\");"
              ],
              "code": [
                "{",
                "    let result = escape(\"hello\");",
                "    assert_eq!(result, \"hello\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\"abcde\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"abcde\");",
                "    assert!(result.is_empty() == false);",
                "    assert!(result.chars().all(|c| !is_meta_character(c)));",
                "    assert_eq!(result.len(), 5);",
                "    assert!(result.contains('a'));",
                "    assert!(result.contains('b'));",
                "    assert!(result.contains('c'));",
                "    assert!(result.contains('d'));",
                "    assert!(result.contains('e'));"
              ],
              "code": [
                "{",
                "    let result = escape(\"abcde\");",
                "    assert_eq!(result, \"abcde\");",
                "    assert!(result.is_empty() == false);",
                "    assert!(result.chars().all(|c| !is_meta_character(c)));",
                "    assert_eq!(result.len(), 5);",
                "    assert!(result.contains('a'));",
                "    assert!(result.contains('b'));",
                "    assert!(result.contains('c'));",
                "    assert!(result.contains('d'));",
                "    assert!(result.contains('e'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = escape(\"a\");",
                "}"
              ],
              "oracle": [
                "    let expected = \"a\";",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let result = escape(\"a\");",
                "    let expected = \"a\";",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: ch in pattern.chars() at line 14 is false\n",
        "expected return value/type: buf\n"
      ],
      "input_infer": "test input conditions or ranges: empty string, string without any meta characters, string with mixed characters (including both meta and non-meta characters), string consisting entirely of meta characters\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = \"\";",
                "    let result = escape(pattern);",
                "}"
              ],
              "oracle": [
                "    let pattern = \"\";",
                "    let result = escape(pattern);",
                "    assert_eq!(result, \"\");"
              ],
              "code": [
                "{",
                "    let pattern = \"\";",
                "    let result = escape(pattern);",
                "    let pattern = \"\";",
                "    let result = escape(pattern);",
                "    assert_eq!(result, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = \"hello\";",
                "    let result = escape(pattern);",
                "}"
              ],
              "oracle": [
                "    let pattern = \"hello\";",
                "    let expected = \"hello\";",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let pattern = \"hello\";",
                "    let result = escape(pattern);",
                "    let pattern = \"hello\";",
                "    let expected = \"hello\";",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = \"hello.world+test\";",
                "    let result = escape(pattern);",
                "}"
              ],
              "oracle": [
                "    let pattern = \"hello world\";",
                "    let expected = \"hello world\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"no meta chars\";",
                "    let expected = \"no meta chars\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"justaletter\";",
                "    let expected = \"justaletter\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"abc123\";",
                "    let expected = \"abc123\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"\";",
                "    let expected = \"\";",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let pattern = \"hello.world+test\";",
                "    let result = escape(pattern);",
                "    let pattern = \"hello world\";",
                "    let expected = \"hello world\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"no meta chars\";",
                "    let expected = \"no meta chars\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"justaletter\";",
                "    let expected = \"justaletter\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"abc123\";",
                "    let expected = \"abc123\";",
                "    assert_eq!(result, expected);",
                "    ",
                "    let pattern = \"\";",
                "    let expected = \"\";",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let pattern = \"\\\\.+*?()|[]{}^$#&~-\";",
                "    let result = escape(pattern);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"\\\\.\\\\+\\\\*\\\\?\\\\(\\\\)\\\\|\\\\[\\\\]\\\\{\\\\}\\\\^\\\\$\\\\#\\\\&\\\\~\");",
                "    assert_eq!(result.len(), pattern.len() + 12);",
                "    assert_eq!(escape(\"hello\"), \"hello\");"
              ],
              "code": [
                "{",
                "    let pattern = \"\\\\.+*?()|[]{}^$#&~-\";",
                "    let result = escape(pattern);",
                "    assert_eq!(result, \"\\\\.\\\\+\\\\*\\\\?\\\\(\\\\)\\\\|\\\\[\\\\]\\\\{\\\\}\\\\^\\\\$\\\\#\\\\&\\\\~\");",
                "    assert_eq!(result.len(), pattern.len() + 12);",
                "    assert_eq!(escape(\"hello\"), \"hello\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}