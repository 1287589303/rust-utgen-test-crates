{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::get_reverse",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:475:5:477:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "reverse: Option<bool> values as { Some(true), Some(false), None }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().reverse(true);",
                "    let result = config.get_reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let config = Config::new().reverse(false);",
                "    let result = config.get_reverse();",
                "    assert_eq!(result, false);",
                "    let config = Config::new();",
                "    let result = config.get_reverse();",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let config = Config::new().reverse(true);",
                "    let result = config.get_reverse();",
                "    assert_eq!(result, true);",
                "    let config = Config::new().reverse(false);",
                "    let result = config.get_reverse();",
                "    assert_eq!(result, false);",
                "    let config = Config::new();",
                "    let result = config.get_reverse();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().reverse(false);",
                "    let result = config.get_reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let config = Config::new().reverse(false);",
                "    let result = config.get_reverse();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let result = config.get_reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let config_with_reverse = Config::new().reverse(true);",
                "    let result_with_reverse = config_with_reverse.get_reverse();",
                "    assert_eq!(result_with_reverse, true);",
                "    let config_with_reverse_none = Config::new().reverse(None);",
                "    let result_with_reverse_none = config_with_reverse_none.get_reverse();",
                "    assert_eq!(result_with_reverse_none, false);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let result = config.get_reverse();",
                "    assert_eq!(result, false);",
                "    let config_with_reverse = Config::new().reverse(true);",
                "    let result_with_reverse = config_with_reverse.get_reverse();",
                "    assert_eq!(result_with_reverse, true);",
                "    let config_with_reverse_none = Config::new().reverse(None);",
                "    let result_with_reverse_none = config_with_reverse_none.get_reverse();",
                "    assert_eq!(result_with_reverse_none, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}