{
  "name": "regex_automata::util::captures::{impl#7}::all_group_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:2036:5:2038:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.slot_len() / 2\n"
      ],
      "input_infer": "Valid input patterns: empty string, single character \"a\", single explicit group \"(a)\", multiple explicit groups \"(a)(b)(c)\", multiple explicit and implicit groups \"(a)(b)\", \"abc\", patterns with disabled capturing \"abc\" while using NFA::config().which_captures(WhichCaptures::None)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"a\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"a\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"(a)\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::new(\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"(a)\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::new(\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    ",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"(a)(b)(c)\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"(a)(b)(c)\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"(a)(b)\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(2, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(x)\", \"(y)\", \"(z)\"])?;",
                "    assert_eq!(6, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(u)(v)(w)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"(a)(b)\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(2, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(x)\", \"(y)\", \"(z)\"])?;",
                "    assert_eq!(6, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(\"(u)(v)(w)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new(\"abc\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new(\"abc\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::compiler()",
                "        .configure(NFA::config().which_captures(WhichCaptures::None))",
                "        .build(\"abc\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::compiler()",
                "        .configure(NFA::config().which_captures(WhichCaptures::None))",
                "        .build(\"abc\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::compiler()",
                "        .configure(NFA::config().which_captures(WhichCaptures::None))",
                "        .build(\"(a)(b)(c)\")?;",
                "    nfa.group_info().all_group_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));"
              ],
              "code": [
                "{",
                "    let nfa = NFA::compiler()",
                "        .configure(NFA::config().which_captures(WhichCaptures::None))",
                "        .build(\"(a)(b)(c)\")?;",
                "    nfa.group_info().all_group_len();",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"(a)(b)(c)\")?;",
                "    assert_eq!(4, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new(r\"abc\")?;",
                "    assert_eq!(1, nfa.group_info().all_group_len());",
                "    let nfa = NFA::new_many(&[\"(a)\", \"b\", \"(c)\"])?;",
                "    assert_eq!(5, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"abc\")?;",
                "    assert_eq!(0, nfa.group_info().all_group_len());",
                "    let nfa = NFA::compiler()",
                "    .configure(NFA::config().which_captures(WhichCaptures::None))",
                "    .build(r\"(a)(b)(c)\")?;",
                "    assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}