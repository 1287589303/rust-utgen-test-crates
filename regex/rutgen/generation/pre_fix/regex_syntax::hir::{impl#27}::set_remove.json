{
  "name": "regex_syntax::hir::{impl#27}::set_remove",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2828:5:2830:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: LookSet with bits set in the range 0 to 65535 (u16), look: Look enum values from Start (1 << 0) to WordEndHalfUnicode (1 << 17)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::Start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::Start as u32);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::Start);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::Start as u32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::End);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::End as u32);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::End);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::End as u32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::StartLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.contains(Look::StartLF), false);",
                "    assert_eq!(set.len(), expected_length_after_removal);",
                "    assert!(set.bits & Look::StartLF as u32 == 0);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.contains_anchor() == expected_anchor_status_after_removal);",
                "    assert!(set.contains_word() == expected_word_status_after_removal);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::StartLF);",
                "    assert_eq!(set.contains(Look::StartLF), false);",
                "    assert_eq!(set.len(), expected_length_after_removal);",
                "    assert!(set.bits & Look::StartLF as u32 == 0);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.contains_anchor() == expected_anchor_status_after_removal);",
                "    assert!(set.contains_word() == expected_word_status_after_removal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::EndLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits & Look::EndLF as u32, 0);",
                "    assert!(!set.contains(Look::EndLF));",
                "    assert_eq!(set.len(), LookSet::full().len() - 1);",
                "    assert!(!set.is_empty());"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::EndLF);",
                "    assert_eq!(set.bits & Look::EndLF as u32, 0);",
                "    assert!(!set.contains(Look::EndLF));",
                "    assert_eq!(set.len(), LookSet::full().len() - 1);",
                "    assert!(!set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::StartCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits & Look::StartCRLF as u32, 0);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::StartCRLF);",
                "    assert_eq!(set.bits & Look::StartCRLF as u32, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::EndCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits & Look::EndCRLF as u32, 0);",
                "    assert_ne!(set.bits, LookSet::full().bits);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::EndCRLF);",
                "    assert_eq!(set.bits & Look::EndCRLF as u32, 0);",
                "    assert_ne!(set.bits, LookSet::full().bits);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordAscii as u32);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordAscii);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordAscii as u32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordAsciiNegate);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordAsciiNegate as u32);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordAsciiNegate);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordAsciiNegate as u32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordUnicode as u32);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordUnicode);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordUnicode as u32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordUnicodeNegate);",
                "}"
              ],
              "oracle": [
                "    set.contains(Look::WordUnicodeNegate) == false",
                "    set.bits == (LookSet::full().bits & !Look::WordUnicodeNegate as u32)",
                "    set.is_empty() == false",
                "    set.len() == (LookSet::full().len() - 1)",
                "    set.set_remove(Look::Start);",
                "    set.contains(Look::Start) == false",
                "    set.bits == (LookSet::full().bits & !Look::Start as u32)"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordUnicodeNegate);",
                "    set.contains(Look::WordUnicodeNegate) == false",
                "    set.bits == (LookSet::full().bits & !Look::WordUnicodeNegate as u32)",
                "    set.is_empty() == false",
                "    set.len() == (LookSet::full().len() - 1)",
                "    set.set_remove(Look::Start);",
                "    set.contains(Look::Start) == false",
                "    set.bits == (LookSet::full().bits & !Look::Start as u32)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits & Look::WordStartAscii as u32, 0);",
                "    assert!(set.contains(Look::WordStartAscii) == false);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.len() == 12);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartAscii);",
                "    assert_eq!(set.bits & Look::WordStartAscii as u32, 0);",
                "    assert!(set.contains(Look::WordStartAscii) == false);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.len() == 12);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits & Look::WordEndAscii as u32, 0);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndAscii);",
                "    assert_eq!(set.bits & Look::WordEndAscii as u32, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordStartUnicode as u32);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartUnicode);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordStartUnicode as u32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordEndUnicode.as_repr());"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndUnicode);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordEndUnicode.as_repr());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordStartHalfAscii as u32);",
                "    assert!(set.contains(Look::WordStartHalfAscii) == false);",
                "    assert!(set.len() == 16);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.contains_anchor() == false);",
                "    assert!(set.contains_word() == true);",
                "    assert!(set.contains_word_ascii() == true);",
                "    assert!(set.contains_word_unicode() == true);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartHalfAscii);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordStartHalfAscii as u32);",
                "    assert!(set.contains(Look::WordStartHalfAscii) == false);",
                "    assert!(set.len() == 16);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.contains_anchor() == false);",
                "    assert!(set.contains_word() == true);",
                "    assert!(set.contains_word_ascii() == true);",
                "    assert!(set.contains_word_unicode() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndHalfAscii);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordEndHalfAscii.as_repr());"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndHalfAscii);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordEndHalfAscii.as_repr());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits & Look::WordStartHalfUnicode as u32, 0);",
                "    assert!(set.contains(Look::WordStartHalfUnicode) == false);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.len() > 0);",
                "    assert!(set.contains_word() == true);",
                "    assert!(set.contains_word_unicode() == true);",
                "    assert!(set.contains_word_ascii() == true);",
                "    assert!(set.contains_anchor() == true);",
                "    assert!(set.contains_anchor_haystack() == true);",
                "    assert!(set.contains_anchor_line() == true);",
                "    assert!(set.contains_anchor_lf() == true);",
                "    assert!(set.contains_anchor_crlf() == true);"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordStartHalfUnicode);",
                "    assert_eq!(set.bits & Look::WordStartHalfUnicode as u32, 0);",
                "    assert!(set.contains(Look::WordStartHalfUnicode) == false);",
                "    assert!(set.is_empty() == false);",
                "    assert!(set.len() > 0);",
                "    assert!(set.contains_word() == true);",
                "    assert!(set.contains_word_unicode() == true);",
                "    assert!(set.contains_word_ascii() == true);",
                "    assert!(set.contains_anchor() == true);",
                "    assert!(set.contains_anchor_haystack() == true);",
                "    assert!(set.contains_anchor_line() == true);",
                "    assert!(set.contains_anchor_lf() == true);",
                "    assert!(set.contains_anchor_crlf() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndHalfUnicode);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordEndHalfUnicode.as_repr());"
              ],
              "code": [
                "{",
                "    let mut set = LookSet { bits: LookSet::full().bits };",
                "    set.set_remove(Look::WordEndHalfUnicode);",
                "    assert_eq!(set.bits, LookSet::full().bits & !Look::WordEndHalfUnicode.as_repr());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}