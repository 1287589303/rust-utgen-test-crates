{
  "name": "regex_lite::error::{impl#0}::new",
  "mod_info": {
    "name": "error",
    "loc": "regex-lite/src/lib.rs:876:1:876:11"
  },
  "visible": true,
  "loc": "regex-lite/src/error.rs:16:5:18:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Error { msg }\n"
      ],
      "input_infer": "msg: any non-null static string (e.g., \"\", \"error message\", \"a specific error\")\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = Error::new(\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error, Error::new(\"\"));"
              ],
              "code": [
                "{",
                "    let error = Error::new(\"\");",
                "    assert_eq!(error, Error::new(\"\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = Error::new(\"error message\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error, Error::new(\"error message\"));"
              ],
              "code": [
                "{",
                "    let error = Error::new(\"error message\");",
                "    assert_eq!(error, Error::new(\"error message\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = Error::new(\"a specific error\");",
                "}"
              ],
              "oracle": [
                "    let error = Error::new(\"a specific error\");",
                "    assert_eq!(error.msg, \"a specific error\");",
                "    assert!(error == Error::new(\"a specific error\"));",
                "    assert!(error != Error::new(\"another error\"));"
              ],
              "code": [
                "{",
                "    let error = Error::new(\"a specific error\");",
                "    let error = Error::new(\"a specific error\");",
                "    assert_eq!(error.msg, \"a specific error\");",
                "    assert!(error == Error::new(\"a specific error\"));",
                "    assert!(error != Error::new(\"another error\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = Error::new(\"a\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error, Error::new(\"a\"));",
                "    assert_eq!(error.msg, \"a\");",
                "    assert!(error.msg.is_ascii());",
                "    assert!(error.msg.len() > 0);",
                "    assert_eq!(format!(\"{:?}\", error), \"Error { msg: \\\"a\\\" }\");"
              ],
              "code": [
                "{",
                "    let error = Error::new(\"a\");",
                "    assert_eq!(error, Error::new(\"a\"));",
                "    assert_eq!(error.msg, \"a\");",
                "    assert!(error.msg.is_ascii());",
                "    assert!(error.msg.len() > 0);",
                "    assert_eq!(format!(\"{:?}\", error), \"Error { msg: \\\"a\\\" }\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = Error::new(\"this is a very long error message that should still be valid.\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error, Error::new(\"this is a very long error message that should still be valid.\"));",
                "    assert_eq!(error.msg, \"this is a very long error message that should still be valid.\");",
                "    assert_ne!(error, Error::new(\"another error message.\"));",
                "    assert!(error.msg.len() > 0);",
                "    assert!(error.msg.contains(\"this is a very long error message that should still be valid.\"));"
              ],
              "code": [
                "{",
                "    let error = Error::new(\"this is a very long error message that should still be valid.\");",
                "    assert_eq!(error, Error::new(\"this is a very long error message that should still be valid.\"));",
                "    assert_eq!(error.msg, \"this is a very long error message that should still be valid.\");",
                "    assert_ne!(error, Error::new(\"another error message.\"));",
                "    assert!(error.msg.len() > 0);",
                "    assert!(error.msg.contains(\"this is a very long error message that should still be valid.\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}