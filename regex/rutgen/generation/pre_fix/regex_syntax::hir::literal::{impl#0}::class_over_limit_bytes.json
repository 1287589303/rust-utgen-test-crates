{
  "name": "regex_syntax::hir::literal::{impl#0}::class_over_limit_bytes",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:545:5:554:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: r in cls.iter() at line 547 is true\n",
        "precondition: count > self.limit_class at line 548 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "cls should have a cumulative length exceeding self.limit_class, and it should contain at least one ClassBytesRange where r.len() + current count is greater than self.limit_class.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
                "    let range2 = ClassBytesRange::new(3, 5); // Length 3",
                "    // Cumulative length: 6 (exceeds limit 5)",
                "",
                "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
                "    ",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
                "    let range2 = ClassBytesRange::new(3, 5); // Length 3",
                "    // Cumulative length: 6 (exceeds limit 5)",
                "",
                "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
                "    ",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
                "    let range2 = ClassBytesRange::new(3, 4); // Length 2",
                "    // Cumulative length: 5 (equal to limit)",
                "",
                "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
                "    ",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
                "    let range2 = ClassBytesRange::new(3, 4); // Length 2",
                "    // Cumulative length: 5 (equal to limit)",
                "",
                "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
                "    ",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(3);",
                "",
                "    let range = ClassBytesRange::new(0, 5); // Length 6",
                "",
                "    let mut class_bytes = ClassBytes::new(vec![range]);",
                "    ",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(3);",
                "    let range = ClassBytesRange::new(0, 5); // Length 6",
                "    let mut class_bytes = ClassBytes::new(vec![range]);",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(3);",
                "",
                "    let range = ClassBytesRange::new(0, 5); // Length 6",
                "",
                "    let mut class_bytes = ClassBytes::new(vec![range]);",
                "    ",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(3);",
                "    let range = ClassBytesRange::new(0, 5); // Length 6",
                "    let mut class_bytes = ClassBytes::new(vec![range]);",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: r in cls.iter() at line 547 is true\n",
        "precondition: count > self.limit_class at line 548 is false, with bound count == self.limit_class\n",
        "precondition: r in cls.iter() at line 547 is false\n",
        "expected return value/type: count > self.limit_class\n"
      ],
      "input_infer": "limit_class set to a specific value (e.g., 5), ClassBytes constructed with one or more ranges where the total length equals limit_class, and no iteration of ranges yielding true at line 547.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHirClassBytes {",
                "        class_bytes: hir::ClassBytes,",
                "    }",
                "",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 1); // Length 2",
                "    let range2 = ClassBytesRange::new(2, 3); // Length 2",
                "    let range3 = ClassBytesRange::new(4, 4); // Length 1",
                "    let class_bytes = ClassBytes::new(vec![range1, range2, range3]);",
                "",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    let range1 = ClassBytesRange::new(0, 1); // Length 2",
                "    let range2 = ClassBytesRange::new(2, 3); // Length 2",
                "    let range3 = ClassBytesRange::new(4, 4); // Length 1",
                "    let class_bytes = ClassBytes::new(vec![range1, range2, range3]);",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
                "    ",
                "    let class_bytes_over_limit = ClassBytes::new(vec![ClassBytesRange::new(0, 6)]); // Length 7",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes_over_limit), true);",
                "    ",
                "    let empty_class_bytes = ClassBytes::empty();",
                "    assert_eq!(extractor.class_over_limit_bytes(&empty_class_bytes), false);"
              ],
              "code": [
                "{",
                "    struct TestHirClassBytes {",
                "        class_bytes: hir::ClassBytes,",
                "    }",
                "",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 1); // Length 2",
                "    let range2 = ClassBytesRange::new(2, 3); // Length 2",
                "    let range3 = ClassBytesRange::new(4, 4); // Length 1",
                "    let class_bytes = ClassBytes::new(vec![range1, range2, range3]);",
                "",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    let range1 = ClassBytesRange::new(0, 1); // Length 2",
                "    let range2 = ClassBytesRange::new(2, 3); // Length 2",
                "    let range3 = ClassBytesRange::new(4, 4); // Length 1",
                "    let class_bytes = ClassBytes::new(vec![range1, range2, range3]);",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
                "    ",
                "    let class_bytes_over_limit = ClassBytes::new(vec![ClassBytesRange::new(0, 6)]); // Length 7",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes_over_limit), true);",
                "    ",
                "    let empty_class_bytes = ClassBytes::empty();",
                "    assert_eq!(extractor.class_over_limit_bytes(&empty_class_bytes), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHirClassBytes {",
                "        class_bytes: hir::ClassBytes,",
                "    }",
                "",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 0); // Length 1",
                "    let class_bytes = ClassBytes::new(vec![range1]); // Total length is 1",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    struct TestHirClassBytes {",
                "        class_bytes: hir::ClassBytes,",
                "    }",
                "",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "",
                "    let range1 = ClassBytesRange::new(0, 0); // Length 1",
                "    let class_bytes = ClassBytes::new(vec![range1]); // Total length is 1",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHirClassBytes {",
                "        class_bytes: hir::ClassBytes,",
                "    }",
                "",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "    ",
                "    let class_bytes = ClassBytes::empty(); // No ranges",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(0, 4)]);",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    struct TestHirClassBytes {",
                "        class_bytes: hir::ClassBytes,",
                "    }",
                "",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "    ",
                "    let class_bytes = ClassBytes::empty(); // No ranges",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    let mut extractor = Extractor::new();",
                "    extractor.limit_class(5);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(0, 4)]);",
                "    let result = extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: r in cls.iter() at line 547 is false\n",
        "expected return value/type: count > self.limit_class\n"
      ],
      "input_infer": "limit_class is a non-negative integer with boundary testing (0, 1, 2, ..., N) and cls.iter() returns an empty or valid range within the limits, ensuring count remains <= limit_class.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let extractor = Extractor::new().limit_class(0);",
                "    let class_bytes = ClassBytes::empty();",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);"
              ],
              "code": [
                "{",
                "    let extractor = Extractor::new().limit_class(0);",
                "    let class_bytes = ClassBytes::empty();",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let extractor = Extractor::new().limit_class(2);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    let extractor = Extractor::new().limit_class(2);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);"
              ],
              "code": [
                "{",
                "    let extractor = Extractor::new().limit_class(2);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "    let extractor = Extractor::new().limit_class(2);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let extractor = Extractor::new().limit_class(5);",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange::new(1, 2),",
                "        ClassBytesRange::new(3, 3)",
                "    ]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    extractor.limit_class(5);",
                "    class_bytes.push(ClassBytesRange::new(1, 2));",
                "    class_bytes.push(ClassBytesRange::new(3, 3));",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);"
              ],
              "code": [
                "{",
                "    let extractor = Extractor::new().limit_class(5);",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange::new(1, 2),",
                "        ClassBytesRange::new(3, 3)",
                "    ]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "    extractor.limit_class(5);",
                "    class_bytes.push(ClassBytesRange::new(1, 2));",
                "    class_bytes.push(ClassBytesRange::new(3, 3));",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let extractor = Extractor::new().limit_class(1);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    let extractor = Extractor::new().limit_class(1);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), true);"
              ],
              "code": [
                "{",
                "    let extractor = Extractor::new().limit_class(1);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "    let extractor = Extractor::new().limit_class(1);",
                "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
                "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let extractor = Extractor::new().limit_class(3);",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange::new(1, 2),",
                "        ClassBytesRange::new(3, 4)",
                "    ]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(extractor.limit_class, 3);",
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert_eq!(class_bytes.minimum_len(), Some(2));",
                "    assert_eq!(class_bytes.maximum_len(), Some(3));",
                "    assert!(!extractor.class_over_limit_bytes(&class_bytes));"
              ],
              "code": [
                "{",
                "    let extractor = Extractor::new().limit_class(3);",
                "    let class_bytes = ClassBytes::new(vec![",
                "        ClassBytesRange::new(1, 2),",
                "        ClassBytesRange::new(3, 4)",
                "    ]);",
                "    extractor.class_over_limit_bytes(&class_bytes);",
                "    assert_eq!(extractor.limit_class, 3);",
                "    assert_eq!(class_bytes.ranges().len(), 2);",
                "    assert_eq!(class_bytes.minimum_len(), Some(2));",
                "    assert_eq!(class_bytes.maximum_len(), Some(3));",
                "    assert!(!extractor.class_over_limit_bytes(&class_bytes));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}