{
  "name": "regex_automata::util::lazy::lazy::{impl#2}::get",
  "mod_info": {
    "name": "util::lazy::lazy",
    "loc": "regex-automata/src/util/lazy.rs:98:1:223:2"
  },
  "visible": false,
  "loc": "regex-automata/src/util/lazy.rs:164:9:190:10",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(data) = self.poll() at line 165 is true\n",
        "precondition: let Err(old) = result at line 180 is true\n",
        "expected return value/type: &*ptr\n"
      ],
      "input_infer": "self.state must be LAZY_STATE_DONE, self.create must be a valid function returning type T, self.data must be an uninitialized or non-null pointer, and result must initially compare to a null pointer.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    let lazy_value = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(Some(|| TestStruct { value: 42 })),",
                "        data: Cell::new(MaybeUninit::uninit()),",
                "    };",
                "",
                "    let ptr = Box::into_raw(Box::new(TestStruct { value: 42 }));",
                "    lazy_value.data.set(MaybeUninit::new(ptr));",
                "",
                "    let result = lazy_value.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.value, 42);",
                "    assert!(lazy_value.state.load(Ordering::Acquire) == LAZY_STATE_DONE);",
                "    assert!(lazy_value.poll().is_some());",
                "    assert!(lazy_value.data.get_mut().as_ptr() != core::ptr::null_mut());"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    let lazy_value = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_DONE),",
                "        create: Cell::new(Some(|| TestStruct { value: 42 })),",
                "        data: Cell::new(MaybeUninit::uninit()),",
                "    };",
                "",
                "    let ptr = Box::into_raw(Box::new(TestStruct { value: 42 }));",
                "    lazy_value.data.set(MaybeUninit::new(ptr));",
                "",
                "    let result = lazy_value.get();",
                "    assert_eq!(result.value, 42);",
                "    assert!(lazy_value.state.load(Ordering::Acquire) == LAZY_STATE_DONE);",
                "    assert!(lazy_value.poll().is_some());",
                "    assert!(lazy_value.data.get_mut().as_ptr() != core::ptr::null_mut());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    let lazy_value = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_INIT),",
                "        create: Cell::new(Some(|| TestStruct { value: 100 })),",
                "        data: Cell::new(MaybeUninit::uninit()),",
                "    };",
                "",
                "    let result = lazy_value.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.value, 100);",
                "    assert!(lazy_value.state.load(Ordering::Acquire) == LAZY_STATE_DONE);",
                "    assert!(lazy_value.poll().is_some());",
                "    assert!(lazy_value.data.get().is_non_null());",
                "    assert!(lazy_value.create.get().is_some());"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    let lazy_value = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_INIT),",
                "        create: Cell::new(Some(|| TestStruct { value: 100 })),",
                "        data: Cell::new(MaybeUninit::uninit()),",
                "    };",
                "",
                "    let result = lazy_value.get();",
                "    assert_eq!(result.value, 100);",
                "    assert!(lazy_value.state.load(Ordering::Acquire) == LAZY_STATE_DONE);",
                "    assert!(lazy_value.poll().is_some());",
                "    assert!(lazy_value.data.get().is_non_null());",
                "    assert!(lazy_value.create.get().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    let lazy_value = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_BUSY),",
                "        create: Cell::new(Some(|| TestStruct { value: 200 })),",
                "        data: Cell::new(MaybeUninit::uninit()),",
                "    };",
                "",
                "    let ptr = Box::into_raw(Box::new(TestStruct { value: 200 }));",
                "    let _ = lazy_value.data.compare_exchange(",
                "        core::ptr::null_mut(),",
                "        ptr,",
                "        Ordering::Acquire,",
                "        Ordering::Acquire,",
                "    );",
                "",
                "    let result = lazy_value.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.value, 200);",
                "    assert!(lazy_value.state.load(Ordering::Acquire) == LAZY_STATE_DONE);",
                "    assert!(lazy_value.poll().is_some());",
                "    assert!(lazy_value.data.load(Ordering::Acquire).is_not_equal(core::ptr::null_mut()));"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    let lazy_value = Lazy {",
                "        state: AtomicU8::new(LAZY_STATE_BUSY),",
                "        create: Cell::new(Some(|| TestStruct { value: 200 })),",
                "        data: Cell::new(MaybeUninit::uninit()),",
                "    };",
                "",
                "    let ptr = Box::into_raw(Box::new(TestStruct { value: 200 }));",
                "    let _ = lazy_value.data.compare_exchange(",
                "        core::ptr::null_mut(),",
                "        ptr,",
                "        Ordering::Acquire,",
                "        Ordering::Acquire,",
                "    );",
                "",
                "    let result = lazy_value.get();",
                "    assert_eq!(result.value, 200);",
                "    assert!(lazy_value.state.load(Ordering::Acquire) == LAZY_STATE_DONE);",
                "    assert!(lazy_value.poll().is_some());",
                "    assert!(lazy_value.data.load(Ordering::Acquire).is_not_equal(core::ptr::null_mut()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}