{
  "name": "regex_syntax::hir::{impl#10}::minimum_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:950:5:955:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches Class::Bytes(ref x) at line 951 is true\n"
      ],
      "input_infer": "valid input: non-empty byte-oriented classes represented by ClassBytes, including a range of byte values (e.g., [0x00..0xFF]), maximum length of 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0x00, 0x01), // Single byte range",
                "        ClassBytesRange::new(0x50, 0x51), // Another single byte range",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_class.minimum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0x00, 0x01), // Single byte range",
                "        ClassBytesRange::new(0x50, 0x51), // Another single byte range",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "    assert_eq!(byte_class.minimum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::empty());",
                "    let _ = byte_class.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(None, byte_class.minimum_len());"
              ],
              "code": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::empty());",
                "    let _ = byte_class.minimum_len();",
                "    assert_eq!(None, byte_class.minimum_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0x10, 0x1F), // Range covering multiple bytes",
                "        ClassBytesRange::new(0x20, 0x20), // Single byte",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_class.minimum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0x10, 0x1F), // Range covering multiple bytes",
                "        ClassBytesRange::new(0x20, 0x20), // Single byte",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "    assert_eq!(byte_class.minimum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0xFF, 0xFF), // Only one byte",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_class.minimum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0xFF, 0xFF), // Only one byte",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "    assert_eq!(byte_class.minimum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0x01, 0x7E), // Standard ASCII range",
                "        ClassBytesRange::new(0x80, 0xFF), // Non-ASCII byte range",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(byte_class.minimum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let byte_class = Class::Bytes(ClassBytes::new(vec![",
                "        ClassBytesRange::new(0x01, 0x7E), // Standard ASCII range",
                "        ClassBytesRange::new(0x80, 0xFF), // Non-ASCII byte range",
                "    ]));",
                "    let _ = byte_class.minimum_len();",
                "    assert_eq!(byte_class.minimum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches Class::Unicode(ref x) at line 951 is true\n",
        "precondition: *self matches Class::Unicode(ref x) at line 951 is true\n"
      ],
      "input_infer": "Class::Unicode with a single range containing characters with lengths of 1, 2, 3, or 4 in UTF-8, and also include cases with an empty range or no ranges for testing None return value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{0000}', '\\u{0001}')]));",
                "    class_unicode.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.minimum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{0000}', '\\u{0001}')]));",
                "    class_unicode.minimum_len();",
                "    assert_eq!(class_unicode.minimum_len(), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{0100}', '\\u{0101}')]));",
                "    class_unicode.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.minimum_len(), Some(2));"
              ],
              "code": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{0100}', '\\u{0101}')]));",
                "    class_unicode.minimum_len();",
                "    assert_eq!(class_unicode.minimum_len(), Some(2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{1000}', '\\u{1002}')]));",
                "    class_unicode.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.minimum_len(), Some(1));",
                "    assert_eq!(class_unicode.minimum_len(), Some(2));",
                "    assert_eq!(class_unicode.minimum_len(), Some(3));",
                "    assert_eq!(class_unicode.minimum_len(), Some(4));",
                "    assert_eq!(class_unicode.minimum_len(), None);",
                "    assert!(class_unicode.is_utf8());",
                "    assert!(!class_unicode.is_empty());",
                "    assert_eq!(class_unicode.literal(), None);"
              ],
              "code": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{1000}', '\\u{1002}')]));",
                "    class_unicode.minimum_len();",
                "    assert_eq!(class_unicode.minimum_len(), Some(1));",
                "    assert_eq!(class_unicode.minimum_len(), Some(2));",
                "    assert_eq!(class_unicode.minimum_len(), Some(3));",
                "    assert_eq!(class_unicode.minimum_len(), Some(4));",
                "    assert_eq!(class_unicode.minimum_len(), None);",
                "    assert!(class_unicode.is_utf8());",
                "    assert!(!class_unicode.is_empty());",
                "    assert_eq!(class_unicode.literal(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{20000}', '\\u{20002}')]));",
                "    class_unicode.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.minimum_len(), Some(3));"
              ],
              "code": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\u{20000}', '\\u{20002}')]));",
                "    class_unicode.minimum_len();",
                "    assert_eq!(class_unicode.minimum_len(), Some(3));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::empty());",
                "    class_unicode.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(None, class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{0000}\"..=\"\\u{007F}\"]));",
                "    assert_eq!(Some(1), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{0400}\"..=\"\\u{04FF}\"]));",
                "    assert_eq!(Some(2), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{300}\"..=\"\\u{303}\"]));",
                "    assert_eq!(Some(1), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{1F600}\"..=\"\\u{1F64F}\"]));",
                "    assert_eq!(Some(4), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{1F300}\"..=\"\\u{1F5FF}\"]));",
                "    assert_eq!(Some(4), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![]));",
                "    assert_eq!(None, class_unicode.minimum_len());"
              ],
              "code": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::empty());",
                "    class_unicode.minimum_len();",
                "    assert_eq!(None, class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{0000}\"..=\"\\u{007F}\"]));",
                "    assert_eq!(Some(1), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{0400}\"..=\"\\u{04FF}\"]));",
                "    assert_eq!(Some(2), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{300}\"..=\"\\u{303}\"]));",
                "    assert_eq!(Some(1), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{1F600}\"..=\"\\u{1F64F}\"]));",
                "    assert_eq!(Some(4), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![\"\\u{1F300}\"..=\"\\u{1F5FF}\"]));",
                "    assert_eq!(Some(4), class_unicode.minimum_len());",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![]));",
                "    assert_eq!(None, class_unicode.minimum_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![]));",
                "    class_unicode.minimum_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.minimum_len(), None);",
                "    let class_unicode_non_empty = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a'..='z')]));",
                "    assert_eq!(class_unicode_non_empty.minimum_len(), Some(1));",
                "    let class_unicode_cyrillic = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('а'..='я')]));",
                "    assert_eq!(class_unicode_cyrillic.minimum_len(), Some(2));",
                "    let class_unicode_mixed = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a'..='z'), ClassUnicodeRange::new('А'..='Я')]));",
                "    assert_eq!(class_unicode_mixed.minimum_len(), Some(1));",
                "    let class_unicode_negated = Class::Unicode(ClassUnicode { spans: vec![], negated: true, kind: ClassUnicodeKind::SomeKind });",
                "    assert_eq!(class_unicode_negated.minimum_len(), None);",
                "    let class_unicode_empty = Class::Unicode(ClassUnicode::empty());",
                "    assert_eq!(class_unicode_empty.minimum_len(), None);"
              ],
              "code": [
                "{",
                "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![]));",
                "    class_unicode.minimum_len();",
                "    assert_eq!(class_unicode.minimum_len(), None);",
                "    let class_unicode_non_empty = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a'..='z')]));",
                "    assert_eq!(class_unicode_non_empty.minimum_len(), Some(1));",
                "    let class_unicode_cyrillic = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('а'..='я')]));",
                "    assert_eq!(class_unicode_cyrillic.minimum_len(), Some(2));",
                "    let class_unicode_mixed = Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a'..='z'), ClassUnicodeRange::new('А'..='Я')]));",
                "    assert_eq!(class_unicode_mixed.minimum_len(), Some(1));",
                "    let class_unicode_negated = Class::Unicode(ClassUnicode { spans: vec![], negated: true, kind: ClassUnicodeKind::SomeKind });",
                "    assert_eq!(class_unicode_negated.minimum_len(), None);",
                "    let class_unicode_empty = Class::Unicode(ClassUnicode::empty());",
                "    assert_eq!(class_unicode_empty.minimum_len(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}