{
  "name": "regex_automata::util::int::{impl#2}::low_u8",
  "mod_info": {
    "name": "util::int",
    "loc": "regex-automata/src/util/mod.rs:51:1:51:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/int.rs:97:5:99:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self as u8\n"
      ],
      "input_infer": "self: u32 value within the range 0 to 4294967295 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 0;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    let value: u32 = 0; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 255; assert_eq!(value.low_u8(), 255);",
                "    let value: u32 = 256; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 300; assert_eq!(value.low_u8(), 44);",
                "    let value: u32 = 1024; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 512; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 15; assert_eq!(value.low_u8(), 15);",
                "    let value: u32 = 128; assert_eq!(value.low_u8(), 128);",
                "    let value: u32 = 65535; assert_eq!(value.low_u8(), 255);",
                "    let value: u32 = 1; assert_eq!(value.low_u8(), 1);"
              ],
              "code": [
                "{",
                "    let value: u32 = 0;",
                "    let result = value.low_u8();",
                "    let value: u32 = 0; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 255; assert_eq!(value.low_u8(), 255);",
                "    let value: u32 = 256; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 300; assert_eq!(value.low_u8(), 44);",
                "    let value: u32 = 1024; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 512; assert_eq!(value.low_u8(), 0);",
                "    let value: u32 = 15; assert_eq!(value.low_u8(), 15);",
                "    let value: u32 = 128; assert_eq!(value.low_u8(), 128);",
                "    let value: u32 = 65535; assert_eq!(value.low_u8(), 255);",
                "    let value: u32 = 1; assert_eq!(value.low_u8(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 1;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);"
              ],
              "code": [
                "{",
                "    let value: u32 = 1;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 255;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 255);"
              ],
              "code": [
                "{",
                "    let value: u32 = 255;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 256;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let value: u32 = 256;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 2147483647;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 255);"
              ],
              "code": [
                "{",
                "    let value: u32 = 2147483647;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u32 = 4294967295;",
                "    let result = value.low_u8();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 255);"
              ],
              "code": [
                "{",
                "    let value: u32 = 4294967295;",
                "    let result = value.low_u8();",
                "    assert_eq!(result, 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}