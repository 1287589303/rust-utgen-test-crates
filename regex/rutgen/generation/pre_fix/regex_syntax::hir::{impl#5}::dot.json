{
  "name": "regex_syntax::hir::{impl#5}::dot",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:659:5:706:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyByteExceptCRLF at line 660 is true\n"
      ],
      "input_infer": "Dot::AnyByteExceptCRLF, byte in range [0, 255], char in range ['\\0', '\\u{10FFFF}']\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyChar);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
                "    assert_eq!(hir.props, Properties::class(&Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
                "    assert!(matches!(hir.kind, HirKind::Class(Class::Unicode(_))));",
                "    assert!(hir.props.is_empty() == false);",
                "    assert!(hir.props.minimum_len().is_none());",
                "    assert!(hir.props.maximum_len().is_none());",
                "    assert!(hir.props.literal().is_none());",
                "    assert!(hir.props.is_ascii() == false);"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyChar);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
                "    assert_eq!(hir.props, Properties::class(&Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
                "    assert!(matches!(hir.kind, HirKind::Class(Class::Unicode(_))));",
                "    assert!(hir.props.is_empty() == false);",
                "    assert!(hir.props.minimum_len().is_none());",
                "    assert!(hir.props.maximum_len().is_none());",
                "    assert!(hir.props.literal().is_none());",
                "    assert!(hir.props.is_ascii() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByte);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyCharExcept('a'));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0061'-1'), ClassUnicodeRange::new('\\u{0061'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0062'-1'), ClassUnicodeRange::new('\\u{0062'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0041'-1'), ClassUnicodeRange::new('\\u{0041'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{005A'-1'), ClassUnicodeRange::new('\\u{005A'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\n')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000A'-1'), ClassUnicodeRange::new('\\u{000B}', '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\r')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000D'-1'), ClassUnicodeRange::new('\\u{000D'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFE}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0001}', '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'a'-1'), ClassUnicodeRange::new('a'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'z'-1'), ClassUnicodeRange::new('z'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Z'-1'), ClassUnicodeRange::new('Z'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'A'-1'), ClassUnicodeRange::new('A'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('1')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '1'-1'), ClassUnicodeRange::new('1'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('9')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '9'-1'), ClassUnicodeRange::new('9'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7F')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7F'-1), ClassUnicodeRange::new('\\x7F'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'b'-1), ClassUnicodeRange::new('b'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('c')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'c'-1), ClassUnicodeRange::new('c'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Y')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Y'-1), ClassUnicodeRange::new('Y'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('X')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'X'-1), ClassUnicodeRange::new('X'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('B')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'B'-1), ClassUnicodeRange::new('B'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('C')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'C'-1), ClassUnicodeRange::new('C'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7E')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7E'-1), ClassUnicodeRange::new('\\x7E'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{FFFD}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{FFFD'-1), ClassUnicodeRange::new('\\u{FFFD'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{D800}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{D7FF}'), ClassUnicodeRange::new('\\u{D801}', '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{DFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{DFFF'-1), ClassUnicodeRange::new('\\u{DFFF'+1, '\\u{10FFFF}')])));"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyCharExcept('a'));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0061'-1'), ClassUnicodeRange::new('\\u{0061'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0062'-1'), ClassUnicodeRange::new('\\u{0062'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0041'-1'), ClassUnicodeRange::new('\\u{0041'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{005A'-1'), ClassUnicodeRange::new('\\u{005A'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\n')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000A'-1'), ClassUnicodeRange::new('\\u{000B}', '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\r')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000D'-1'), ClassUnicodeRange::new('\\u{000D'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFE}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0001}', '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'a'-1'), ClassUnicodeRange::new('a'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'z'-1'), ClassUnicodeRange::new('z'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Z'-1'), ClassUnicodeRange::new('Z'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'A'-1'), ClassUnicodeRange::new('A'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('1')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '1'-1'), ClassUnicodeRange::new('1'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('9')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '9'-1'), ClassUnicodeRange::new('9'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7F')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7F'-1), ClassUnicodeRange::new('\\x7F'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'b'-1), ClassUnicodeRange::new('b'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('c')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'c'-1), ClassUnicodeRange::new('c'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Y')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Y'-1), ClassUnicodeRange::new('Y'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('X')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'X'-1), ClassUnicodeRange::new('X'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('B')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'B'-1), ClassUnicodeRange::new('B'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('C')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'C'-1), ClassUnicodeRange::new('C'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7E')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7E'-1), ClassUnicodeRange::new('\\x7E'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{FFFD}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{FFFD'-1), ClassUnicodeRange::new('\\u{FFFD'+1, '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{D800}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{D7FF}'), ClassUnicodeRange::new('\\u{D801}', '\\u{10FFFF}')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{DFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{DFFF'-1), ClassUnicodeRange::new('\\u{DFFF'+1, '\\u{10FFFF}')])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyCharExceptLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyCharExceptLF);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyCharExceptCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')]))));"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyCharExceptCRLF);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByteExcept(100));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByteExcept(100));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByteExceptLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByteExceptLF);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByteExceptCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let hir = Hir::dot(Dot::AnyByteExceptCRLF);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyByteExceptLF at line 660 is true\n",
        "precondition: dot matches Dot::AnyByteExceptLF at line 660 is true\n"
      ],
      "input_infer": "Dot::AnyChar, Dot::AnyByte, Dot::AnyCharExcept char in range ['\\0', '\\u{10FFFF}'], Dot::AnyCharExceptLF, Dot::AnyCharExceptCRLF, Dot::AnyByteExcept u8 in range [0, 255], Dot::AnyByteExceptLF, Dot::AnyByteExceptCRLF\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyChar);",
                "}"
              ],
              "oracle": [
                "    Hir::dot(Dot::AnyChar) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')])));",
                "    Hir::dot(Dot::AnyByte) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')])));",
                "    Hir::dot(Dot::AnyCharExceptLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')])));",
                "    Hir::dot(Dot::AnyCharExceptCRLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')])));",
                "    Hir::dot(Dot::AnyByteExceptLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
                "    Hir::dot(Dot::AnyByteExceptCRLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
                "    Hir::dot(Dot::AnyCharExcept('<char>') for <char> in ['A', 'B', 'C', ...]) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('<char>', '<char>')])));",
                "    Hir::dot(Dot::AnyByteExcept(<u8>) for <u8> in [0, 1, 2, 3, ..., 255]) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(<u8>, <u8>)])));"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyChar);",
                "    Hir::dot(Dot::AnyChar) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')])));",
                "    Hir::dot(Dot::AnyByte) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')])));",
                "    Hir::dot(Dot::AnyCharExceptLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')])));",
                "    Hir::dot(Dot::AnyCharExceptCRLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')])));",
                "    Hir::dot(Dot::AnyByteExceptLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
                "    Hir::dot(Dot::AnyByteExceptCRLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
                "    Hir::dot(Dot::AnyCharExcept('<char>') for <char> in ['A', 'B', 'C', ...]) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('<char>', '<char>')])));",
                "    Hir::dot(Dot::AnyByteExcept(<u8>) for <u8> in [0, 1, 2, 3, ..., 255]) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(<u8>, <u8>)])));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyByte);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
                "    assert_eq!(result.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
                "    assert!(result.props.is_empty() == false);",
                "    assert!(result.minimum_len().is_none());",
                "    assert!(result.maximum_len().is_none());",
                "    assert!(result.literal().is_none());",
                "    assert_eq!(result.to_unicode_class(), None);"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyByte);",
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
                "    assert_eq!(result.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
                "    assert!(result.props.is_empty() == false);",
                "    assert!(result.minimum_len().is_none());",
                "    assert!(result.maximum_len().is_none());",
                "    assert!(result.literal().is_none());",
                "    assert_eq!(result.to_unicode_class(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyCharExcept('\\0'));",
                "    let result2 = Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}'));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\0')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{10FFFF}', '\\u{10FFFF}')]));"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyCharExcept('\\0'));",
                "    let result2 = Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}'));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\0')])));",
                "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{10FFFF}', '\\u{10FFFF}')]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyCharExceptLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))) );"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyCharExceptLF);",
                "    assert_eq!(result.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))) );",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyCharExceptCRLF);",
                "}"
              ],
              "oracle": [
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(expected, result);"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyCharExceptCRLF);",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(expected, result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyByteExcept(0));",
                "    let result2 = Hir::dot(Dot::AnyByteExcept(255));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
                "    assert_eq!(result2, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]));"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyByteExcept(0));",
                "    let result2 = Hir::dot(Dot::AnyByteExcept(255));",
                "    assert_eq!(result, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
                "    assert_eq!(result2, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyByteExceptLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyByteExceptLF);",
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::dot(Dot::AnyByteExceptCRLF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])),));"
              ],
              "code": [
                "{",
                "    let result = Hir::dot(Dot::AnyByteExceptCRLF);",
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])),));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyByteExcept(byte) at line 660 is true\n",
        "precondition: dot matches Dot::AnyByteExcept(byte) at line 660 is true\n"
      ],
      "input_infer": "Dot::AnyByteExcept(byte) where byte is a value from the range 0 to 255, including boundary cases for 0 and 255.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 0;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );"
              ],
              "code": [
                "{",
                "    let byte = 0;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 255;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
                "    assert!(hir.props.is_empty());"
              ],
              "code": [
                "{",
                "    let byte = 255;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
                "    assert!(hir.props.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 128;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0x09), ClassBytesRange::new(0x0B, 0xFF)]))));"
              ],
              "code": [
                "{",
                "    let byte = 128;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0x09), ClassBytesRange::new(0x0B, 0xFF)]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 64;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let byte = 64;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 100;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let byte = 100;",
                "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyCharExceptCRLF at line 660 is true\n",
        "precondition: dot matches Dot::AnyCharExceptCRLF at line 660 is true\n"
      ],
      "input_infer": "dot must be one of the variants from the Dot enum: AnyChar, AnyByte, AnyCharExcept(char), AnyCharExceptLF, AnyCharExceptCRLF, AnyByteExcept(u8), AnyByteExceptLF, AnyByteExceptCRLF; if AnyCharExcept, the char must be in the range of unicode scalar values; if AnyByteExcept, the u8 must be in the range of 0 to 255.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyChar;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
                "    assert_eq!(hir.props, Properties::class(&Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))) );",
                "    assert!(hir.kind == HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))) );",
                "    assert!(matches!(hir.kind, HirKind::Class(Class::Unicode(_))));",
                "    assert_eq!(hir.props.boxed(), expected_props.boxed());",
                "    assert!(hir.props.minimum_len().is_none());",
                "    assert!(hir.props.maximum_len().is_none());"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyChar;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
                "    assert_eq!(hir.props, Properties::class(&Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))) );",
                "    assert!(hir.kind == HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))) );",
                "    assert!(matches!(hir.kind, HirKind::Class(Class::Unicode(_))));",
                "    assert_eq!(hir.props.boxed(), expected_props.boxed());",
                "    assert!(hir.props.minimum_len().is_none());",
                "    assert!(hir.props.maximum_len().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
                "    assert_eq!(hir.props.is_empty(), false);",
                "    assert_eq!(hir.props.maximum_len(), Some(1));",
                "    assert_eq!(hir.props.minimum_len(), Some(1));",
                "    assert!(hir.props.literal().is_none());",
                "    assert!(hir.props.to_unicode_class().is_none());",
                "    assert!(hir.props.is_ascii());",
                "    assert!(hir.props.case_fold_simple().is_ok());",
                "    assert_eq!(hir.props.ranges().len(), 1);",
                "    assert_eq!(hir.props.ranges()[0].start(), b'\\0');",
                "    assert_eq!(hir.props.ranges()[0].end(), b'\\xFF');"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
                "    assert_eq!(hir.props.is_empty(), false);",
                "    assert_eq!(hir.props.maximum_len(), Some(1));",
                "    assert_eq!(hir.props.minimum_len(), Some(1));",
                "    assert!(hir.props.literal().is_none());",
                "    assert!(hir.props.to_unicode_class().is_none());",
                "    assert!(hir.props.is_ascii());",
                "    assert!(hir.props.case_fold_simple().is_ok());",
                "    assert_eq!(hir.props.ranges().len(), 1);",
                "    assert_eq!(hir.props.ranges()[0].start(), b'\\0');",
                "    assert_eq!(hir.props.ranges()[0].end(), b'\\xFF');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExcept('a');",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExcept('a');",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    let dot = Dot::AnyCharExceptLF;",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(expected, hir);"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(expected, hir);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExcept(100);",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExcept(100);",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyCharExceptLF at line 660 is true\n",
        "precondition: dot matches Dot::AnyCharExceptLF at line 660 is true\n"
      ],
      "input_infer": "Dot::AnyCharExceptLF and ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "        ClassUnicodeRange::new('\\0', '\\x09'),",
                "        ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ])));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "        ClassUnicodeRange::new('\\0', '\\x09'),",
                "        ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "        ClassUnicodeRange::new('\\0', '\\x09'),",
                "        ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "        ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ])));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "        ClassUnicodeRange::new('\\0', '\\x09'),",
                "        ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "        ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = b'a';",
                "    let dot = Dot::AnyByteExcept(byte);",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Bytes(ClassBytes::new([",
                "        ClassBytesRange::new(b'\\0', b'\\xFF'),",
                "    ])));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::dot(Dot::AnyByteExcept(b'a')), Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );"
              ],
              "code": [
                "{",
                "    let byte = b'a';",
                "    let dot = Dot::AnyByteExcept(byte);",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Bytes(ClassBytes::new([",
                "        ClassBytesRange::new(b'\\0', b'\\xFF'),",
                "    ])));",
                "    assert_eq!(Hir::dot(Dot::AnyByteExcept(b'a')), Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Bytes(ClassBytes::new([",
                "        ClassBytesRange::new(b'\\0', b'\\x09'),",
                "        ClassBytesRange::new(b'\\x0B', b'\\xFF'),",
                "    ])));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(expected, hir);"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Bytes(ClassBytes::new([",
                "        ClassBytesRange::new(b'\\0', b'\\x09'),",
                "        ClassBytesRange::new(b'\\x0B', b'\\xFF'),",
                "    ])));",
                "    assert_eq!(expected, hir);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Bytes(ClassBytes::new([",
                "        ClassBytesRange::new(b'\\0', b'\\x09'),",
                "        ClassBytesRange::new(b'\\x0B', b'\\x0C'),",
                "        ClassBytesRange::new(b'\\x0E', b'\\xFF'),",
                "    ])));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([",
                "    ClassBytesRange::new(b'\\0', b'\\x09'),",
                "    ClassBytesRange::new(b'\\x0B', b'\\x0C'),",
                "    ClassBytesRange::new(b'\\x0E', b'\\xFF'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    let expected = Hir::class(Class::Bytes(ClassBytes::new([",
                "        ClassBytesRange::new(b'\\0', b'\\x09'),",
                "        ClassBytesRange::new(b'\\x0B', b'\\x0C'),",
                "        ClassBytesRange::new(b'\\x0E', b'\\xFF'),",
                "    ])));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([",
                "    ClassBytesRange::new(b'\\0', b'\\x09'),",
                "    ClassBytesRange::new(b'\\x0B', b'\\x0C'),",
                "    ClassBytesRange::new(b'\\x0E', b'\\xFF'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyCharExcept(ch) at line 660 is true\n",
        "precondition: dot matches Dot::AnyCharExcept(ch) at line 660 is true\n"
      ],
      "input_infer": "Dot::AnyCharExcept(ch) with ch ranging from '\\u{0000}' to '\\u{10FFFF}', ensuring ch does not equal '\\n' or '\\r' for valid character exclusions.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\n'; // This should ideally never be passed to this function as per the requirements.",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\n'),",
                "    ClassUnicodeRange::new('\\u{0B}', '\\u{10FFFF}'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let ch = '\\n'; // This should ideally never be passed to this function as per the requirements.",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\n'),",
                "    ClassUnicodeRange::new('\\u{0B}', '\\u{10FFFF}'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\r'; // This should ideally never be passed to this function as per the requirements.",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\r'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));"
              ],
              "code": [
                "{",
                "    let ch = '\\r'; // This should ideally never be passed to this function as per the requirements.",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\r'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{1234}';",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{1234}', '\\u{1234}')]))));"
              ],
              "code": [
                "{",
                "    let ch = '\\u{1234}';",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{1234}', '\\u{1234}')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{0001}'; // Exclusion of the first valid Unicode character",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "}"
              ],
              "oracle": [
                "    let ch = '\\u{0001}'; // Expected character range should not include '\\u{0001}'",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\u{0000}'),",
                "    ClassUnicodeRange::new('\\u{0002}', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(expected, hir);"
              ],
              "code": [
                "{",
                "    let ch = '\\u{0001}'; // Exclusion of the first valid Unicode character",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "    let ch = '\\u{0001}'; // Expected character range should not include '\\u{0001}'",
                "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\u{0000}'),",
                "    ClassUnicodeRange::new('\\u{0002}', '\\u{10FFFF}'),",
                "    ])));",
                "    assert_eq!(expected, hir);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\u{10FFFF}'; // Exclusion of the last valid Unicode character",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\u{10FFFF}'),",
                "    ]))));",
                "    assert!(cls.iter().all(|range| range.start() == '\\0' || range.end() == '\\u{10FFFF}'));",
                "    assert!(cls.len() == 1);",
                "    assert!(cls.ranges().contains(&ClassUnicodeRange::new(ch, ch)));"
              ],
              "code": [
                "{",
                "    let ch = '\\u{10FFFF}'; // Exclusion of the last valid Unicode character",
                "    let hir = Hir::dot(Dot::AnyCharExcept(ch));",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\u{10FFFF}'),",
                "    ]))));",
                "    assert!(cls.iter().all(|range| range.start() == '\\0' || range.end() == '\\u{10FFFF}'));",
                "    assert!(cls.len() == 1);",
                "    assert!(cls.ranges().contains(&ClassUnicodeRange::new(ch, ch)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyByte at line 660 is true\n",
        "precondition: dot matches Dot::AnyByte at line 660 is true\n"
      ],
      "input_infer": "Dot variant must be one of AnyChar, AnyByte, AnyCharExcept(ch), AnyCharExceptLF, AnyCharExceptCRLF, AnyByteExcept(byte), AnyByteExceptLF, AnyByteExceptCRLF; char 'ch' must be a Unicode scalar value within '\\0' to '\\u{10FFFF}'; byte 'byte' must be in range 0x00 to 0xFF.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyChar;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))) );",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0xFF)]))) );",
                "    let dot = Dot::AnyCharExcept('a');",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', 'a'), ClassUnicodeRange::new('b', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyByteExcept(b'a');",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'a'), ClassBytesRange::new(b'a' + 1, b'\\xFF')]))));",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyChar;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))) );",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0xFF)]))) );",
                "    let dot = Dot::AnyCharExcept('a');",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', 'a'), ClassUnicodeRange::new('b', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyByteExcept(b'a');",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'a'), ClassBytesRange::new(b'a' + 1, b'\\xFF')]))));",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF)]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF)]))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExcept('a');",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')])))",
                "    assert_eq!(hir.props.is_empty(), false);",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0xFF)]))));",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExcept('a');",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')])))",
                "    assert_eq!(hir.props.is_empty(), false);",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0xFF)]))));",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExcept(0xFF);",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFE')])), hir);"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExcept(0xFF);",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFE')])), hir);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
                "    assert!(matches!(hir.kind, HirKind::Class(Class::Bytes(_))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
                "    assert!(matches!(hir.kind, HirKind::Class(Class::Bytes(_))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: dot matches Dot::AnyChar at line 660 is true\n",
        "precondition: dot matches Dot::AnyChar at line 660 is true\n"
      ],
      "input_infer": "Dot::AnyChar, Dot::AnyByte, Dot::AnyCharExcept(char), Dot::AnyCharExceptLF, Dot::AnyCharExceptCRLF, Dot::AnyByteExcept(u8), Dot::AnyByteExceptLF, Dot::AnyByteExceptCRLF where char is in the range ['\\0' to '\\u{10FFFF}'] and u8 is in the range [0 to 255]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyChar;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyChar;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))) );"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByte;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))) );",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExcept('\\u{0}');",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0}', '\\u{0}')])),));",
                "    assert!(hir.props.is_empty());",
                "    assert!(hir.props.contains(CharacterSet::AnyCharExcept('\\u{0}')));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExcept('\\u{0}');",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0}', '\\u{0}')])),));",
                "    assert!(hir.props.is_empty());",
                "    assert!(hir.props.contains(CharacterSet::AnyCharExcept('\\u{0}')));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyCharExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
                "    ClassUnicodeRange::new('\\0', '\\x09'),",
                "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
                "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
                "    ]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExcept(0);",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\0')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExcept(0);",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\0')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
                "    assert_eq!(hir.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
                "    assert!(hir.is_empty() == false);",
                "    assert_eq!(hir.maximum_len(), None);",
                "    assert_eq!(hir.minimum_len(), Some(1));"
              ],
              "code": [
                "{",
                "    let dot = Dot::AnyByteExceptCRLF;",
                "    let hir = Hir::dot(dot);",
                "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
                "    assert_eq!(hir.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
                "    assert!(hir.is_empty() == false);",
                "    assert_eq!(hir.maximum_len(), None);",
                "    assert_eq!(hir.minimum_len(), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}