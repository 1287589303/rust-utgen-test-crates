{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::current_pattern_id",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:669:5:671:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid test inputs include the scenario where `start_pattern` has been called but `finish_pattern` has not, and the expected return is a valid `PatternID`. Test inputs should also include the scenario where `current_pattern_id` is called without prior invocation of `start_pattern`, which is expected to panic.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let _ = builder.start_pattern().unwrap();",
                "    let pattern_id = builder.current_pattern_id();",
                "}"
              ],
              "oracle": [
                "    assert!(builder.pattern_id.is_some());",
                "    assert_eq!(builder.current_pattern_id(), pattern_id);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let _ = builder.start_pattern().unwrap();",
                "    let pattern_id = builder.current_pattern_id();",
                "    assert!(builder.pattern_id.is_some());",
                "    assert_eq!(builder.current_pattern_id(), pattern_id);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let builder = Builder::new();",
                "    let _ = builder.current_pattern_id();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.current_pattern_id().expect_err(\"expected panic\"), \"must call 'start_pattern' first\");"
              ],
              "code": [
                "{",
                "    let builder = Builder::new();",
                "    let _ = builder.current_pattern_id();",
                "    assert_eq!(builder.current_pattern_id().expect_err(\"expected panic\"), \"must call 'start_pattern' first\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}