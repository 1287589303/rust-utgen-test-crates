{
  "name": "regex_automata::util::look::{impl#1}::full",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:268:5:270:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: LookSet { bits: !0 }\n"
      ],
      "input_infer": "Test input conditions/ranges: none (as the function `full()` does not take any input parameters and always returns LookSet { bits: !0 })\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::full();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, LookSet { bits: !0 });",
                "    assert!(result.bits != 0);",
                "    assert!(result.len() > 0);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains_anchor());",
                "    assert!(result.contains_word());",
                "    assert!(result.contains_word_unicode());",
                "    assert!(result.contains_word_ascii());"
              ],
              "code": [
                "{",
                "    let result = LookSet::full();",
                "    assert_eq!(result, LookSet { bits: !0 });",
                "    assert!(result.bits != 0);",
                "    assert!(result.len() > 0);",
                "    assert!(!result.is_empty());",
                "    assert!(result.contains_anchor());",
                "    assert!(result.contains_word());",
                "    assert!(result.contains_word_unicode());",
                "    assert!(result.contains_word_ascii());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = LookSet::full();",
                "    assert_eq!(result.bits, !0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(LookSet::full().bits, !0);"
              ],
              "code": [
                "{",
                "    let result = LookSet::full();",
                "    assert_eq!(result.bits, !0);",
                "    assert_eq!(LookSet::full().bits, !0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}