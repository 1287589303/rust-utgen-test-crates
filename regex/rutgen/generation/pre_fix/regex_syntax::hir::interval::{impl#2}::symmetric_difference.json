{
  "name": "regex_syntax::hir::interval::{impl#2}::symmetric_difference",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:284:5:290:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid test input conditions or ranges include: \n- Non-empty IntervalSet<I> with distinct intervals for both self and other, each containing at least one overlapping and one non-overlapping interval for comprehensive testing of symmetric difference; \n- Empty IntervalSet<I> for self or other to validate edge cases; \n- Single interval in self or other that completely overlaps with another to check for correct removal in symmetric difference; \n- Identical intervals in both sets to ensure that the result is empty; \n- Varying sizes of intervals and different types of bounds for exhaustive coverage, including lower and upper bounds where lower equals upper (single-point intervals).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 1, upper: 3 },",
                "        IntInterval { lower: 4, upper: 6 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 2, upper: 5 },",
                "        IntInterval { lower: 7, upper: 8 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set_a.intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 6, upper: 6 }, IntInterval { lower: 7, upper: 8 }]);",
                "    assert!(set_a.folded);",
                "    assert_eq!(set_b.intervals(), vec![IntInterval { lower: 2, upper: 5 }, IntInterval { lower: 7, upper: 8 }]);",
                "    assert!(set_b.folded);",
                "    assert_eq!(set_a.union(&set_b).intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 2, upper: 5 }, IntInterval { lower: 6, upper: 6 }, IntInterval { lower: 7, upper: 8 }]);"
              ],
              "code": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 1, upper: 3 },",
                "        IntInterval { lower: 4, upper: 6 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 2, upper: 5 },",
                "        IntInterval { lower: 7, upper: 8 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 6, upper: 6 }, IntInterval { lower: 7, upper: 8 }]);",
                "    assert!(set_a.folded);",
                "    assert_eq!(set_b.intervals(), vec![IntInterval { lower: 2, upper: 5 }, IntInterval { lower: 7, upper: 8 }]);",
                "    assert!(set_b.folded);",
                "    assert_eq!(set_a.union(&set_b).intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 2, upper: 5 }, IntInterval { lower: 6, upper: 6 }, IntInterval { lower: 7, upper: 8 }]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![]);",
                "    let set_b = IntervalSet::new(vec![]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set_a.intervals(), &[]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 1, upper: 5 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 3, upper: 7 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 1, upper: 2 }, IntInterval { lower: 6, upper: 7 }]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 1, upper: 5 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 1, upper: 5 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 1, upper: 3 }, IntInterval { lower: 5, upper: 7 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 2, upper: 6 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 4, upper: 6 }]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 2, upper: 4 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 4, upper: 6 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 2, upper: 3 }, IntInterval { lower: 4, upper: 6 }]);",
                "    assert_eq!(set_a.folded, false);"
              ],
              "code": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![]);",
                "    let set_b = IntervalSet::new(vec![]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 1, upper: 5 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 3, upper: 7 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 1, upper: 2 }, IntInterval { lower: 6, upper: 7 }]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 1, upper: 5 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 1, upper: 5 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 1, upper: 3 }, IntInterval { lower: 5, upper: 7 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 2, upper: 6 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 4, upper: 6 }]);",
                "    assert_eq!(set_a.folded, false);",
                "    ",
                "    let mut set_a = IntervalSet::new(vec![IntInterval { lower: 2, upper: 4 }]);",
                "    let set_b = IntervalSet::new(vec![IntInterval { lower: 4, upper: 6 }]);",
                "    ",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 2, upper: 3 }, IntInterval { lower: 4, upper: 6 }]);",
                "    assert_eq!(set_a.folded, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 1, upper: 5 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 1, upper: 5 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set_a.intervals(), &[]);",
                "    assert!(set_a.ranges.is_empty());",
                "    assert!(set_b.intervals().is_empty());",
                "    assert!(set_b.ranges.is_empty());",
                "    ",
                "    let mut set_c = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 3 },",
                "    ]);",
                "    ",
                "    let set_d = IntervalSet::new(vec![",
                "    IntInterval { lower: 4, upper: 6 },",
                "    ]);",
                "    ",
                "    set_c.symmetric_difference(&set_d);",
                "    assert_eq!(set_c.intervals(), &[IntInterval { lower: 2, upper: 3 }, IntInterval { lower: 4, upper: 6 }]);",
                "    ",
                "    let mut set_e = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 3 },",
                "    ]);",
                "    ",
                "    let set_f = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "    ",
                "    set_e.symmetric_difference(&set_f);",
                "    assert_eq!(set_e.intervals(), &[IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 4, upper: 4 }]);",
                "    ",
                "    let mut set_g = IntervalSet::new(vec![",
                "    IntInterval { lower: 5, upper: 8 },",
                "    ]);",
                "    ",
                "    let set_h = IntervalSet::new(vec![",
                "    IntInterval { lower: 3, upper: 6 },",
                "    ]);",
                "    ",
                "    set_g.symmetric_difference(&set_h);",
                "    assert_eq!(set_g.intervals(), &[IntInterval { lower: 3, upper: 3 }, IntInterval { lower: 6, upper: 8 }]);"
              ],
              "code": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 1, upper: 5 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 1, upper: 5 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[]);",
                "    assert!(set_a.ranges.is_empty());",
                "    assert!(set_b.intervals().is_empty());",
                "    assert!(set_b.ranges.is_empty());",
                "    ",
                "    let mut set_c = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 3 },",
                "    ]);",
                "    ",
                "    let set_d = IntervalSet::new(vec![",
                "    IntInterval { lower: 4, upper: 6 },",
                "    ]);",
                "    ",
                "    set_c.symmetric_difference(&set_d);",
                "    assert_eq!(set_c.intervals(), &[IntInterval { lower: 2, upper: 3 }, IntInterval { lower: 4, upper: 6 }]);",
                "    ",
                "    let mut set_e = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 3 },",
                "    ]);",
                "    ",
                "    let set_f = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "    ",
                "    set_e.symmetric_difference(&set_f);",
                "    assert_eq!(set_e.intervals(), &[IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 4, upper: 4 }]);",
                "    ",
                "    let mut set_g = IntervalSet::new(vec![",
                "    IntInterval { lower: 5, upper: 8 },",
                "    ]);",
                "    ",
                "    let set_h = IntervalSet::new(vec![",
                "    IntInterval { lower: 3, upper: 6 },",
                "    ]);",
                "    ",
                "    set_g.symmetric_difference(&set_h);",
                "    assert_eq!(set_g.intervals(), &[IntInterval { lower: 3, upper: 3 }, IntInterval { lower: 6, upper: 8 }]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 2, upper: 4 }]);",
                "    assert!(set_a.intervals().len() == 0); // Check that set_a is empty after symmetric difference",
                "    ",
                "    let mut set_c = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 3 },",
                "    ]);",
                "    ",
                "    let set_d = IntervalSet::new(vec![",
                "    IntInterval { lower: 3, upper: 5 },",
                "    ]);",
                "    ",
                "    set_c.symmetric_difference(&set_d);",
                "    assert_eq!(set_c.intervals(), &[IntInterval { lower: 1, upper: 3 }, IntInterval { lower: 3, upper: 5 }]);",
                "    ",
                "    let mut set_e = IntervalSet::new(vec![",
                "    IntInterval { lower: 5, upper: 7 },",
                "    ]);",
                "    ",
                "    let set_f = IntervalSet::new(vec![",
                "    IntInterval { lower: 6, upper: 8 },",
                "    ]);",
                "    ",
                "    set_e.symmetric_difference(&set_f);",
                "    assert_eq!(set_e.intervals(), &[IntInterval { lower: 5, upper: 5 }, IntInterval { lower: 6, upper: 8 }]);",
                "    ",
                "    let mut set_g = IntervalSet::new(vec![",
                "    IntInterval { lower: 10, upper: 12 },",
                "    ]);",
                "    ",
                "    let set_h = IntervalSet::new(vec![",
                "    IntInterval { lower: 12, upper: 14 },",
                "    ]);",
                "    ",
                "    set_g.symmetric_difference(&set_h);",
                "    assert_eq!(set_g.intervals(), &[IntInterval { lower: 10, upper: 10 }, IntInterval { lower: 12, upper: 14 }]);",
                "    ",
                "    let mut set_i = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 10 },",
                "    ]);",
                "    ",
                "    let set_j = IntervalSet::new(vec![",
                "    IntInterval { lower: 5, upper: 15 },",
                "    ]);",
                "    ",
                "    set_i.symmetric_difference(&set_j);",
                "    assert_eq!(set_i.intervals(), &[IntInterval { lower: 1, upper: 4 }, IntInterval { lower: 11, upper: 15 }]);"
              ],
              "code": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), &[IntInterval { lower: 2, upper: 4 }]);",
                "    assert!(set_a.intervals().len() == 0); // Check that set_a is empty after symmetric difference",
                "    ",
                "    let mut set_c = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 3 },",
                "    ]);",
                "    ",
                "    let set_d = IntervalSet::new(vec![",
                "    IntInterval { lower: 3, upper: 5 },",
                "    ]);",
                "    ",
                "    set_c.symmetric_difference(&set_d);",
                "    assert_eq!(set_c.intervals(), &[IntInterval { lower: 1, upper: 3 }, IntInterval { lower: 3, upper: 5 }]);",
                "    ",
                "    let mut set_e = IntervalSet::new(vec![",
                "    IntInterval { lower: 5, upper: 7 },",
                "    ]);",
                "    ",
                "    let set_f = IntervalSet::new(vec![",
                "    IntInterval { lower: 6, upper: 8 },",
                "    ]);",
                "    ",
                "    set_e.symmetric_difference(&set_f);",
                "    assert_eq!(set_e.intervals(), &[IntInterval { lower: 5, upper: 5 }, IntInterval { lower: 6, upper: 8 }]);",
                "    ",
                "    let mut set_g = IntervalSet::new(vec![",
                "    IntInterval { lower: 10, upper: 12 },",
                "    ]);",
                "    ",
                "    let set_h = IntervalSet::new(vec![",
                "    IntInterval { lower: 12, upper: 14 },",
                "    ]);",
                "    ",
                "    set_g.symmetric_difference(&set_h);",
                "    assert_eq!(set_g.intervals(), &[IntInterval { lower: 10, upper: 10 }, IntInterval { lower: 12, upper: 14 }]);",
                "    ",
                "    let mut set_i = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 10 },",
                "    ]);",
                "    ",
                "    let set_j = IntervalSet::new(vec![",
                "    IntInterval { lower: 5, upper: 15 },",
                "    ]);",
                "    ",
                "    set_i.symmetric_difference(&set_j);",
                "    assert_eq!(set_i.intervals(), &[IntInterval { lower: 1, upper: 4 }, IntInterval { lower: 11, upper: 15 }]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 5, upper: 5 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 5, upper: 5 },",
                "        IntInterval { lower: 10, upper: 12 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set_a.intervals(), vec![IntInterval { lower: 10, upper: 12 }]);",
                "    assert!(set_a.folded);",
                "    assert_eq!(set_b.intervals(), vec![IntInterval { lower: 5, upper: 5 }, IntInterval { lower: 10, upper: 12 }]);",
                "    assert!(set_b.folded);",
                "    ",
                "    let mut set_c = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 3 },",
                "    IntInterval { lower: 4, upper: 6 },",
                "    ]);",
                "    ",
                "    let set_d = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 5 },",
                "    ]);",
                "    ",
                "    set_c.symmetric_difference(&set_d);",
                "    assert_eq!(set_c.intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 6, upper: 6 }]);",
                "    ",
                "    let mut empty_set = IntervalSet::new::<Vec<IntInterval>>(vec![]);",
                "    let non_empty_set = IntervalSet::new(vec![IntInterval { lower: 0, upper: 0 }]);",
                "    empty_set.symmetric_difference(&non_empty_set);",
                "    assert_eq!(empty_set.intervals(), vec![IntInterval { lower: 0, upper: 0 }]);",
                "    ",
                "    let set_e = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 2 },",
                "    IntInterval { lower: 4, upper: 5 },",
                "    ]);",
                "    ",
                "    let set_f = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "    ",
                "    set_e.symmetric_difference(&set_f);",
                "    assert_eq!(set_e.intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 5, upper: 5 }]);",
                "    assert!(!set_e.folded);"
              ],
              "code": [
                "{",
                "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
                "    struct IntInterval {",
                "        lower: i32,",
                "        upper: i32,",
                "    }",
                "",
                "    impl Interval for IntInterval {",
                "        type Bound = i32;",
                "",
                "        fn lower(&self) -> Self::Bound { self.lower }",
                "        fn upper(&self) -> Self::Bound { self.upper }",
                "        fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
                "        fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
                "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
                "        fn is_contiguous(&self, _: &Self) -> bool { true }",
                "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
                "        fn is_subset(&self, _: &Self) -> bool { false }",
                "    }",
                "",
                "    let mut set_a = IntervalSet::new(vec![",
                "        IntInterval { lower: 5, upper: 5 },",
                "    ]);",
                "",
                "    let set_b = IntervalSet::new(vec![",
                "        IntInterval { lower: 5, upper: 5 },",
                "        IntInterval { lower: 10, upper: 12 },",
                "    ]);",
                "",
                "    set_a.symmetric_difference(&set_b);",
                "    assert_eq!(set_a.intervals(), vec![IntInterval { lower: 10, upper: 12 }]);",
                "    assert!(set_a.folded);",
                "    assert_eq!(set_b.intervals(), vec![IntInterval { lower: 5, upper: 5 }, IntInterval { lower: 10, upper: 12 }]);",
                "    assert!(set_b.folded);",
                "    ",
                "    let mut set_c = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 3 },",
                "    IntInterval { lower: 4, upper: 6 },",
                "    ]);",
                "    ",
                "    let set_d = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 5 },",
                "    ]);",
                "    ",
                "    set_c.symmetric_difference(&set_d);",
                "    assert_eq!(set_c.intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 6, upper: 6 }]);",
                "    ",
                "    let mut empty_set = IntervalSet::new::<Vec<IntInterval>>(vec![]);",
                "    let non_empty_set = IntervalSet::new(vec![IntInterval { lower: 0, upper: 0 }]);",
                "    empty_set.symmetric_difference(&non_empty_set);",
                "    assert_eq!(empty_set.intervals(), vec![IntInterval { lower: 0, upper: 0 }]);",
                "    ",
                "    let set_e = IntervalSet::new(vec![",
                "    IntInterval { lower: 1, upper: 2 },",
                "    IntInterval { lower: 4, upper: 5 },",
                "    ]);",
                "    ",
                "    let set_f = IntervalSet::new(vec![",
                "    IntInterval { lower: 2, upper: 4 },",
                "    ]);",
                "    ",
                "    set_e.symmetric_difference(&set_f);",
                "    assert_eq!(set_e.intervals(), vec![IntInterval { lower: 1, upper: 1 }, IntInterval { lower: 5, upper: 5 }]);",
                "    assert!(!set_e.folded);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}