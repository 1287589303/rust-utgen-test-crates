{
  "name": "regex_syntax::hir::{impl#20}::len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1593:5:1597:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "start and end as u8 within the range 0 to 255, ensuring start <= end for valid ranges and testing the edges where start equals end (0, 0) and start is one less than end (254, 255) for boundary conditions.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange::new(0, 100);",
                "    let result = range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 101);",
                "    let range = ClassBytesRange::new(50, 60);",
                "    let result = range.len();",
                "    assert_eq!(result, 11);",
                "    let range = ClassBytesRange::new(255, 255);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);",
                "    let range = ClassBytesRange::new(100, 0);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange::new(0, 100);",
                "    let result = range.len();",
                "    assert_eq!(result, 101);",
                "    let range = ClassBytesRange::new(50, 60);",
                "    let result = range.len();",
                "    assert_eq!(result, 11);",
                "    let range = ClassBytesRange::new(255, 255);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);",
                "    let range = ClassBytesRange::new(100, 0);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange::new(0, 0);",
                "    let result = range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    let range = ClassBytesRange::new(1, 1);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);",
                "    let range = ClassBytesRange::new(0, 10);",
                "    let result = range.len();",
                "    assert_eq!(result, 11);",
                "    let range = ClassBytesRange::new(5, 15);",
                "    let result = range.len();",
                "    assert_eq!(result, 11);",
                "    let range = ClassBytesRange::new(10, 5);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange::new(0, 0);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);",
                "    let range = ClassBytesRange::new(1, 1);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);",
                "    let range = ClassBytesRange::new(0, 10);",
                "    let result = range.len();",
                "    assert_eq!(result, 11);",
                "    let range = ClassBytesRange::new(5, 15);",
                "    let result = range.len();",
                "    assert_eq!(result, 11);",
                "    let range = ClassBytesRange::new(10, 5);",
                "    let result = range.len();",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange::new(254, 255);",
                "    let result = range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 2);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange::new(254, 255);",
                "    let result = range.len();",
                "    assert_eq!(result, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange::new(0, 255);",
                "    let result = range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 256);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange::new(0, 255);",
                "    let result = range.len();",
                "    assert_eq!(result, 256);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ClassBytesRange::new(128, 200);",
                "    let result = range.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 73);"
              ],
              "code": [
                "{",
                "    let range = ClassBytesRange::new(128, 200);",
                "    let result = range.len();",
                "    assert_eq!(result, 73);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}