{
  "name": "regex::builders::{impl#1}::line_terminator",
  "mod_info": {
    "name": "builders",
    "loc": "src/lib.rs:1331:1:1331:14"
  },
  "visible": false,
  "loc": "src/builders.rs:158:5:162:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "byte: 0-255 (all possible byte values, including edge cases 0 and 255)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder {",
                "        pats: vec![],",
                "        metac: meta::Config::default(),",
                "        syntaxc: syntax::Config::default(),",
                "    };",
                "    builder.line_terminator(0);",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder {",
                "    pats: vec![],",
                "    metac: meta::Config::default(),",
                "    syntaxc: syntax::Config::default(),",
                "    };",
                "    let returned_builder = builder.line_terminator(0);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));",
                "    ",
                "    let returned_builder = builder.line_terminator(10);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));",
                "    ",
                "    let returned_builder = builder.line_terminator(255);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));",
                "    ",
                "    let returned_builder = builder.line_terminator(1);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder {",
                "        pats: vec![],",
                "        metac: meta::Config::default(),",
                "        syntaxc: syntax::Config::default(),",
                "    };",
                "    builder.line_terminator(0);",
                "    let mut builder = Builder {",
                "    pats: vec![],",
                "    metac: meta::Config::default(),",
                "    syntaxc: syntax::Config::default(),",
                "    };",
                "    let returned_builder = builder.line_terminator(0);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));",
                "    ",
                "    let returned_builder = builder.line_terminator(10);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));",
                "    ",
                "    let returned_builder = builder.line_terminator(255);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));",
                "    ",
                "    let returned_builder = builder.line_terminator(1);",
                "    assert!(std::ptr::eq(&returned_builder, &builder));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder {",
                "        pats: vec![],",
                "        metac: meta::Config::default(),",
                "        syntaxc: syntax::Config::default(),",
                "    };",
                "    builder.line_terminator(128);",
                "}"
              ],
              "oracle": [
                "    let builder = Builder {",
                "    pats: vec![],",
                "    metac: meta::Config::default(),",
                "    syntaxc: syntax::Config::default(),",
                "    };",
                "    assert_eq!(builder.line_terminator(128), &builder);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder {",
                "        pats: vec![],",
                "        metac: meta::Config::default(),",
                "        syntaxc: syntax::Config::default(),",
                "    };",
                "    builder.line_terminator(128);",
                "    let builder = Builder {",
                "    pats: vec![],",
                "    metac: meta::Config::default(),",
                "    syntaxc: syntax::Config::default(),",
                "    };",
                "    assert_eq!(builder.line_terminator(128), &builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder {",
                "        pats: vec![],",
                "        metac: meta::Config::default(),",
                "        syntaxc: syntax::Config::default(),",
                "    };",
                "    builder.line_terminator(255);",
                "}"
              ],
              "oracle": [
                "    builder.line_terminator(0); // Validate line terminator with byte 0",
                "    builder.line_terminator(1); // Validate line terminator with byte 1",
                "    builder.line_terminator(127); // Validate line terminator with byte 127",
                "    builder.line_terminator(128); // Validate line terminator with byte 128",
                "    builder.line_terminator(255); // Validate line terminator with byte 255",
                "    builder.line_terminator(10); // Validate line terminator with byte 10 (newline)",
                "    builder.line_terminator(13); // Validate line terminator with byte 13 (carriage return)",
                "    builder.line_terminator(32); // Validate line terminator with byte 32 (space)",
                "    builder.line_terminator(100); // Validate line terminator with byte 100"
              ],
              "code": [
                "{",
                "    let mut builder = Builder {",
                "        pats: vec![],",
                "        metac: meta::Config::default(),",
                "        syntaxc: syntax::Config::default(),",
                "    };",
                "    builder.line_terminator(255);",
                "    builder.line_terminator(0); // Validate line terminator with byte 0",
                "    builder.line_terminator(1); // Validate line terminator with byte 1",
                "    builder.line_terminator(127); // Validate line terminator with byte 127",
                "    builder.line_terminator(128); // Validate line terminator with byte 128",
                "    builder.line_terminator(255); // Validate line terminator with byte 255",
                "    builder.line_terminator(10); // Validate line terminator with byte 10 (newline)",
                "    builder.line_terminator(13); // Validate line terminator with byte 13 (carriage return)",
                "    builder.line_terminator(32); // Validate line terminator with byte 32 (space)",
                "    builder.line_terminator(100); // Validate line terminator with byte 100",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}