{
  "name": "regex::builders::bytes::{impl#0}::nest_limit",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:1953:9:1956:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "limit: 0 to maximum valid u32 value (0, 1, 2, maximum valid u32)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().as_str(), \"a\");",
                "    let result_ab = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert!(result_ab.is_err());"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().as_str(), \"a\");",
                "    let result_ab = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert!(result_ab.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"ab\").nest_limit(1).build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().as_str(), r\"ab\");",
                "    ",
                "    let result2 = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert!(result2.is_err());"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"ab\").nest_limit(1).build();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().as_str(), r\"ab\");",
                "    ",
                "    let result2 = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert!(result2.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"(ab)\").nest_limit(2).build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert_eq!(regex.is_match(\"ab\"), true);",
                "    let result = RegexBuilder::new(r\"(ab)\").nest_limit(0).build();",
                "    assert!(result.is_err());",
                "    let result = RegexBuilder::new(r\"(a(bc))\").nest_limit(2).build();",
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert_eq!(regex.is_match(\"abc\"), true);",
                "    let result = RegexBuilder::new(r\"(a(bc))\").nest_limit(1).build();",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"(ab)\").nest_limit(2).build();",
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert_eq!(regex.is_match(\"ab\"), true);",
                "    let result = RegexBuilder::new(r\"(ab)\").nest_limit(0).build();",
                "    assert!(result.is_err());",
                "    let result = RegexBuilder::new(r\"(a(bc))\").nest_limit(2).build();",
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert_eq!(regex.is_match(\"abc\"), true);",
                "    let result = RegexBuilder::new(r\"(a(bc))\").nest_limit(1).build();",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"((a)(b))\").nest_limit(u32::MAX).build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert!(result.as_ref().unwrap().is_match(b\"ab\"));",
                "    assert!(result.as_ref().unwrap().is_match(b\"((a)(b))\"));",
                "    assert!(result.as_ref().unwrap().is_match(b\"((a)(b)(c))\"));",
                "    assert!(result.as_ref().unwrap().is_match(b\"((a)(b)((c)(d)))\"));",
                "    assert!(result.as_ref().unwrap().as_str() == r\"((a)(b))\");"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"((a)(b))\").nest_limit(u32::MAX).build();",
                "    assert!(result.is_ok());",
                "    assert!(result.as_ref().unwrap().is_match(b\"ab\"));",
                "    assert!(result.as_ref().unwrap().is_match(b\"((a)(b))\"));",
                "    assert!(result.as_ref().unwrap().is_match(b\"((a)(b)(c))\"));",
                "    assert!(result.as_ref().unwrap().is_match(b\"((a)(b)((c)(d)))\"));",
                "    assert!(result.as_ref().unwrap().as_str() == r\"((a)(b))\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}