{
  "name": "regex_syntax::ast::parse::{impl#2}::ignore_whitespace",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/parse.rs:223:5:226:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "boolean values for 'yes' (true, false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(true);",
                "}"
              ],
              "oracle": [
                "    assert!(builder.ignore_whitespace);",
                "    assert_eq!(builder.ignore_whitespace, true);",
                "    let builder_after_ignore = builder.ignore_whitespace(false);",
                "    assert!(!builder_after_ignore.ignore_whitespace);",
                "    assert_eq!(builder_after_ignore.ignore_whitespace, false);"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(true);",
                "    assert!(builder.ignore_whitespace);",
                "    assert_eq!(builder.ignore_whitespace, true);",
                "    let builder_after_ignore = builder.ignore_whitespace(false);",
                "    assert!(!builder_after_ignore.ignore_whitespace);",
                "    assert_eq!(builder_after_ignore.ignore_whitespace, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.ignore_whitespace, false);",
                "    assert_eq!(builder.ignore_whitespace(true).ignore_whitespace, true);"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(false);",
                "    assert_eq!(builder.ignore_whitespace, false);",
                "    assert_eq!(builder.ignore_whitespace(true).ignore_whitespace, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}