{
  "name": "regex_lite::hir::{impl#1}::class",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:240:5:248:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Hir {\n            kind,\n            is_start_anchored: false,\n            is_match_empty: false,\n            static_explicit_captures_len: Some(0),\n        }\n"
      ],
      "input_infer": "Class instances with varying ranges including empty ranges, single character ranges, multiple character ranges, and overlapping ranges, while ensuring at least one valid range is present.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class {",
                "        ranges: vec![],",
                "    };",
                "    let result = Hir::class(class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let class = Class {",
                "        ranges: vec![],",
                "    };",
                "    let result = Hir::class(class);",
                "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class {",
                "        ranges: vec![ClassRange { start: 'a', end: 'a' }],",
                "    };",
                "    let result = Hir::class(class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'a' }] }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let class = Class {",
                "        ranges: vec![ClassRange { start: 'a', end: 'a' }],",
                "    };",
                "    let result = Hir::class(class);",
                "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'a' }] }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class {",
                "        ranges: vec![",
                "            ClassRange { start: 'a', end: 'c' },",
                "            ClassRange { start: 'e', end: 'g' },",
                "        ],",
                "    };",
                "    let result = Hir::class(class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'c' }, ClassRange { start: 'e', end: 'g' }] }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let class = Class {",
                "        ranges: vec![",
                "            ClassRange { start: 'a', end: 'c' },",
                "            ClassRange { start: 'e', end: 'g' },",
                "        ],",
                "    };",
                "    let result = Hir::class(class);",
                "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'c' }, ClassRange { start: 'e', end: 'g' }] }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class {",
                "        ranges: vec![",
                "            ClassRange { start: 'a', end: 'd' },",
                "            ClassRange { start: 'c', end: 'f' },",
                "        ],",
                "    };",
                "    let result = Hir::class(class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'd' }, ClassRange { start: 'c', end: 'f' }] }));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, false);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));"
              ],
              "code": [
                "{",
                "    let class = Class {",
                "        ranges: vec![",
                "            ClassRange { start: 'a', end: 'd' },",
                "            ClassRange { start: 'c', end: 'f' },",
                "        ],",
                "    };",
                "    let result = Hir::class(class);",
                "    assert_eq!(result.kind, HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'd' }, ClassRange { start: 'c', end: 'f' }] }));",
                "    assert_eq!(result.is_start_anchored, false);",
                "    assert_eq!(result.is_match_empty, false);",
                "    assert_eq!(result.static_explicit_captures_len, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class = Class {",
                "        ranges: vec![",
                "            ClassRange { start: 'a', end: 'b' },",
                "            ClassRange { start: 'd', end: 'e' },",
                "        ],",
                "    };",
                "    let result = Hir::class(class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &HirKind::Class(Class {",
                "    ranges: vec![",
                "    ClassRange { start: 'a', end: 'b' },",
                "    ClassRange { start: 'd', end: 'e' }",
                "    ]",
                "    }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
              ],
              "code": [
                "{",
                "    let class = Class {",
                "        ranges: vec![",
                "            ClassRange { start: 'a', end: 'b' },",
                "            ClassRange { start: 'd', end: 'e' },",
                "        ],",
                "    };",
                "    let result = Hir::class(class);",
                "    assert_eq!(result.kind(), &HirKind::Class(Class {",
                "    ranges: vec![",
                "    ClassRange { start: 'a', end: 'b' },",
                "    ClassRange { start: 'd', end: 'e' }",
                "    ]",
                "    }));",
                "    assert!(!result.is_start_anchored());",
                "    assert!(!result.is_match_empty());",
                "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}