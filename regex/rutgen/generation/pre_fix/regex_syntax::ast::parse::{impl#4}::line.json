{
  "name": "regex_syntax::ast::parse::{impl#4}::line",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:423:5:425:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.parser().pos.get().line\n"
      ],
      "input_infer": "1 <= line number <= maximum number of lines in the pattern, where the pattern is a non-empty string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let parser = Parser {",
                "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 64,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    let parser_i = ParserI::new(&parser, \"test pattern\");",
                "    parser_i.line();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser_i.line(), 1);",
                "    parser_i.pos.set(Position { offset: 0, line: 2, column: 1 });",
                "    assert_eq!(parser_i.line(), 2);",
                "    parser_i.pos.set(Position { offset: 0, line: 5, column: 1 });",
                "    assert_eq!(parser_i.line(), 5);",
                "    parser_i.pos.set(Position { offset: 0, line: 0, column: 1 });",
                "    assert_eq!(parser_i.line(), 0);"
              ],
              "code": [
                "{",
                "    let parser = Parser {",
                "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 64,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    let parser_i = ParserI::new(&parser, \"test pattern\");",
                "    parser_i.line();",
                "    assert_eq!(parser_i.line(), 1);",
                "    parser_i.pos.set(Position { offset: 0, line: 2, column: 1 });",
                "    assert_eq!(parser_i.line(), 2);",
                "    parser_i.pos.set(Position { offset: 0, line: 5, column: 1 });",
                "    assert_eq!(parser_i.line(), 5);",
                "    parser_i.pos.set(Position { offset: 0, line: 0, column: 1 });",
                "    assert_eq!(parser_i.line(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let parser = Parser {",
                "        pos: Cell::new(Position { offset: 5, line: 2, column: 6 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 64,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    let parser_i = ParserI::new(&parser, \"test pattern\\nnext line\");",
                "    parser_i.line();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser_i.line(), 2);"
              ],
              "code": [
                "{",
                "    let parser = Parser {",
                "        pos: Cell::new(Position { offset: 5, line: 2, column: 6 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 64,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    let parser_i = ParserI::new(&parser, \"test pattern\\nnext line\");",
                "    parser_i.line();",
                "    assert_eq!(parser_i.line(), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let parser = Parser {",
                "        pos: Cell::new(Position { offset: 14, line: 3, column: 1 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 64,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    let parser_i = ParserI::new(&parser, \"first line\\nsecond line\\nthird line\");",
                "    parser_i.line();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser_i.line(), 3);"
              ],
              "code": [
                "{",
                "    let parser = Parser {",
                "        pos: Cell::new(Position { offset: 14, line: 3, column: 1 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 64,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    let parser_i = ParserI::new(&parser, \"first line\\nsecond line\\nthird line\");",
                "    parser_i.line();",
                "    assert_eq!(parser_i.line(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}