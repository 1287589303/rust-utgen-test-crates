{
  "name": "regex_lite::string::{impl#7}::captures_at",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1151:5:1174:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: matched at line 1170 is true\n",
        "expected return value/type: Some(caps)\n"
      ],
      "input_infer": "haystack: non-empty string; start: 0 to haystack.len() - 1, where haystack contains a match for the regex pattern specified in Regex; ensure start does not exceed haystack length.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 0;",
                "    let _ = re.captures_at(hay, start);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_at(hay, start).is_some());",
                "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 0;",
                "    let _ = re.captures_at(hay, start);",
                "    assert!(re.captures_at(hay, start).is_some());",
                "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 1;",
                "    let _ = re.captures_at(hay, start);",
                "}"
              ],
              "oracle": [
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 1;",
                "    assert_eq!(re.captures_at(hay, start).is_some(), true);",
                "    assert_eq!(re.captures_at(hay, start).unwrap().haystack, hay);",
                "    assert_eq!(re.captures_at(hay, start).unwrap().slots.0.len(), expected_slots_length);",
                "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 1;",
                "    let _ = re.captures_at(hay, start);",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 1;",
                "    assert_eq!(re.captures_at(hay, start).is_some(), true);",
                "    assert_eq!(re.captures_at(hay, start).unwrap().haystack, hay);",
                "    assert_eq!(re.captures_at(hay, start).unwrap().slots.0.len(), expected_slots_length);",
                "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 2;",
                "    let _ = re.captures_at(hay, start);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_at(hay, start).is_some());",
                "    let captures = re.captures_at(hay, start).unwrap();",
                "    assert_eq!(&captures.haystack[start..], \"chew\");"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = 2;",
                "    let _ = re.captures_at(hay, start);",
                "    assert!(re.captures_at(hay, start).is_some());",
                "    let captures = re.captures_at(hay, start).unwrap();",
                "    assert_eq!(&captures.haystack[start..], \"chew\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = hay.len() - 1;",
                "    let _ = re.captures_at(hay, start);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_at(hay, start).is_some());",
                "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
                "    assert_eq!(re.captures_at(hay, hay.len()).is_none(), true);",
                "    assert_eq!(re.captures_at(hay, hay.len() - 2).unwrap()[0], \"chew\");",
                "    assert_eq!(re.captures_at(hay, 0).unwrap()[0], \"chew\");"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = hay.len() - 1;",
                "    let _ = re.captures_at(hay, start);",
                "    assert!(re.captures_at(hay, start).is_some());",
                "    assert_eq!(re.captures_at(hay, start).unwrap()[0], \"chew\");",
                "    assert_eq!(re.captures_at(hay, hay.len()).is_none(), true);",
                "    assert_eq!(re.captures_at(hay, hay.len() - 2).unwrap()[0], \"chew\");",
                "    assert_eq!(re.captures_at(hay, 0).unwrap()[0], \"chew\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = hay.len(); // This should panic",
                "    let _ = re.captures_at(hay, start);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_at(hay, start).is_none());",
                "    assert!(re.captures_at(\"eschew\", 0).is_some());",
                "    assert!(re.captures_at(\"eschew\", 2).is_none());",
                "    assert_eq!(re.captures_at(\"eschew\", 3).unwrap()[0], \"chew\");",
                "    assert!(re.captures_at(hay, start - 1).is_some());",
                "    assert!(re.captures_at(hay, hay.len() - 1).is_none());",
                "    assert!(re.captures_at(hay, 1).is_some());",
                "    assert!(re.captures_at(hay, hay.len() + 1).is_none());"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = \"eschew\";",
                "    let start = hay.len(); // This should panic",
                "    let _ = re.captures_at(hay, start);",
                "    assert!(re.captures_at(hay, start).is_none());",
                "    assert!(re.captures_at(\"eschew\", 0).is_some());",
                "    assert!(re.captures_at(\"eschew\", 2).is_none());",
                "    assert_eq!(re.captures_at(\"eschew\", 3).unwrap()[0], \"chew\");",
                "    assert!(re.captures_at(hay, start - 1).is_some());",
                "    assert!(re.captures_at(hay, hay.len() - 1).is_none());",
                "    assert!(re.captures_at(hay, 1).is_some());",
                "    assert!(re.captures_at(hay, hay.len() + 1).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: matched at line 1170 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "start: usize values such that start >= haystack.len() + 1 or start > haystack.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex {",
                "        pikevm: Arc::new(PikeVM::new(NFA::default())),",
                "        pool: CachePool::default(),",
                "    };",
                "    let haystack = \"test\";",
                "    let start = haystack.len() + 1; // start is out of bounds",
                "    let result = regex.captures_at(haystack, start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let regex = Regex {",
                "        pikevm: Arc::new(PikeVM::new(NFA::default())),",
                "        pool: CachePool::default(),",
                "    };",
                "    let haystack = \"test\";",
                "    let start = haystack.len() + 1; // start is out of bounds",
                "    let result = regex.captures_at(haystack, start);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex {",
                "        pikevm: Arc::new(PikeVM::new(NFA::default())),",
                "        pool: CachePool::default(),",
                "    };",
                "    let haystack = \"example\";",
                "    let start = haystack.len() + 1; // start is out of bounds",
                "    let result = regex.captures_at(haystack, start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let regex = Regex {",
                "        pikevm: Arc::new(PikeVM::new(NFA::default())),",
                "        pool: CachePool::default(),",
                "    };",
                "    let haystack = \"example\";",
                "    let start = haystack.len() + 1; // start is out of bounds",
                "    let result = regex.captures_at(haystack, start);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex {",
                "        pikevm: Arc::new(PikeVM::new(NFA::default())),",
                "        pool: CachePool::default(),",
                "    };",
                "    let haystack = \"\";",
                "    let start = 1; // start is greater than haystack length",
                "    let result = regex.captures_at(haystack, start);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_none());"
              ],
              "code": [
                "{",
                "    let regex = Regex {",
                "        pikevm: Arc::new(PikeVM::new(NFA::default())),",
                "        pool: CachePool::default(),",
                "    };",
                "    let haystack = \"\";",
                "    let start = 1; // start is greater than haystack length",
                "    let result = regex.captures_at(haystack, start);",
                "    assert!(result.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}