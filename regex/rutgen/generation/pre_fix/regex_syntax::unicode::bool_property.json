{
  "name": "regex_syntax::unicode::bool_property",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:783:1:804:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: canonical_name matches \"Decimal_Number\" at line 800 is true\n",
        "precondition: canonical_name matches \"Decimal_Number\" at line 799 is true\n"
      ],
      "input_infer": "canonical_name = \"Decimal_Number\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let canonical_name: &'static str = \"Decimal_Number\";",
                "    let result = bool_property(canonical_name);",
                "}"
              ],
              "oracle": [
                "    result.is_ok();",
                "    let class_unicode = result.unwrap();",
                "    assert_eq!(class_unicode, expected_class_unicode);",
                "    assert!(matches!(result, Ok(_)));",
                "    assert_ne!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let canonical_name: &'static str = \"Decimal_Number\";",
                "    let result = bool_property(canonical_name);",
                "    result.is_ok();",
                "    let class_unicode = result.unwrap();",
                "    assert_eq!(class_unicode, expected_class_unicode);",
                "    assert!(matches!(result, Ok(_)));",
                "    assert_ne!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let canonical_name: &'static str = \"Non_Existent_Property\";",
                "    let result = bool_property(canonical_name);",
                "}"
              ],
              "oracle": [
                "    let canonical_name: &'static str = \"Decimal_Number\";",
                "    let result = bool_property(canonical_name);",
                "    assert!(result.is_ok());",
                "    let class_unicode = result.unwrap();",
                "    assert_eq!(class_unicode, hir_class(DECIMAL_NUMBER));"
              ],
              "code": [
                "{",
                "    let canonical_name: &'static str = \"Non_Existent_Property\";",
                "    let result = bool_property(canonical_name);",
                "    let canonical_name: &'static str = \"Decimal_Number\";",
                "    let result = bool_property(canonical_name);",
                "    assert!(result.is_ok());",
                "    let class_unicode = result.unwrap();",
                "    assert_eq!(class_unicode, hir_class(DECIMAL_NUMBER));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: canonical_name matches \"Decimal_Number\" at line 800 is false\n",
        "precondition: canonical_name matches \"White_Space\" at line 801 is true\n",
        "precondition: canonical_name matches \"White_Space\" at line 799 is true\n"
      ],
      "input_infer": "canonical_name = \"White_Space\" or any other string that is not \"Decimal_Number\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bool_property(\"White_Space\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), hir_class(crate::unicode_tables::property_bool::WHITE_SPACE));"
              ],
              "code": [
                "{",
                "    let result = bool_property(\"White_Space\");",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), hir_class(crate::unicode_tables::property_bool::WHITE_SPACE));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bool_property(\"Invalid_Name\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let result = bool_property(\"Invalid_Name\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: canonical_name matches \"Decimal_Number\" at line 800 is false\n",
        "precondition: canonical_name matches \"White_Space\" at line 801 is false\n"
      ],
      "input_infer": "canonical_name should be any string other than \"Decimal_Number\" or \"White_Space\" including invalid names and empty strings\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bool_property(\"\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::PropertyNotFound);"
              ],
              "code": [
                "{",
                "    let result = bool_property(\"\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), Error::PropertyNotFound);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bool_property(\"Invalid_Property_Name\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let result = bool_property(\"Invalid_Property_Name\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bool_property(\"!@#$%^&*()\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let result = bool_property(\"!@#$%^&*()\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bool_property(\"12345\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let result = bool_property(\"12345\");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bool_property(\"     \");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyNotFound));"
              ],
              "code": [
                "{",
                "    let result = bool_property(\"     \");",
                "    assert_eq!(result, Err(Error::PropertyNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}