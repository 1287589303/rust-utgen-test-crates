{
  "name": "regex_automata::util::wire::check_slice_len",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:786:1:795:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: slice.len() < at_least_len at line 791 is true\n",
        "expected return value/type: Err(DeserializeError::buffer_too_small(what))\n"
      ],
      "input_infer": "slice: [T; 0..(at_least_len-1)], at_least_len: 1..usize::MAX, what: any static string\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Vec<u8> = vec![];",
                "    let at_least_len = 1;",
                "    let what = \"empty slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
                "    assert!(matches!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(\"empty slice\"))));"
              ],
              "code": [
                "{",
                "    let slice: Vec<u8> = vec![];",
                "    let at_least_len = 1;",
                "    let what = \"empty slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
                "    assert!(matches!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(\"empty slice\"))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Vec<u8> = vec![1];",
                "    let at_least_len = 2;",
                "    let what = \"single element slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(what)));"
              ],
              "code": [
                "{",
                "    let slice: Vec<u8> = vec![1];",
                "    let at_least_len = 2;",
                "    let what = \"single element slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "    assert_eq!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(what)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Vec<u8> = vec![1, 2];",
                "    let at_least_len = 3;",
                "    let what = \"small slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert!(check_slice_len(&slice, at_least_len, what).is_err());",
                "    match check_slice_len(&slice, at_least_len, what) {",
                "    Err(DeserializeError::buffer_too_small(message)) => assert_eq!(message, what),",
                "    _ => panic!(\"Expected Err with buffer_too_small\"),",
                "    }"
              ],
              "code": [
                "{",
                "    let slice: Vec<u8> = vec![1, 2];",
                "    let at_least_len = 3;",
                "    let what = \"small slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "    assert!(check_slice_len(&slice, at_least_len, what).is_err());",
                "    match check_slice_len(&slice, at_least_len, what) {",
                "    Err(DeserializeError::buffer_too_small(message)) => assert_eq!(message, what),",
                "    _ => panic!(\"Expected Err with buffer_too_small\"),",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let at_least_len = 6;",
                "    let what = \"large slice under bound\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
                "    assert_eq!(check_slice_len(&slice, at_least_len, what).unwrap_err(), DeserializeError::buffer_too_small(\"large slice under bound\"));"
              ],
              "code": [
                "{",
                "    let slice: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let at_least_len = 6;",
                "    let what = \"large slice under bound\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
                "    assert_eq!(check_slice_len(&slice, at_least_len, what).unwrap_err(), DeserializeError::buffer_too_small(\"large slice under bound\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Vec<u8> = vec![1, 2, 3];",
                "    let at_least_len = 4;",
                "    let what = \"boundary case slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    Err(DeserializeError::buffer_too_small(\"boundary case slice\"))"
              ],
              "code": [
                "{",
                "    let slice: Vec<u8> = vec![1, 2, 3];",
                "    let at_least_len = 4;",
                "    let what = \"boundary case slice\";",
                "    check_slice_len(&slice, at_least_len, what);",
                "    Err(DeserializeError::buffer_too_small(\"boundary case slice\"))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: slice.len() < at_least_len at line 791 is false, with bound slice.len() == at_least_len\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "slice.len() = at_least_len, where at_least_len is a non-negative integer; slice is a slice of any type T, and what is a static string.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = &[1, 2, 3]; // length is 3",
                "    let at_least_len = 3; // setting bound to the same length",
                "    let what = \"test slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(()));"
              ],
              "code": [
                "{",
                "    let slice = &[1, 2, 3]; // length is 3",
                "    let at_least_len = 3; // setting bound to the same length",
                "    let what = \"test slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "    assert_eq!(_result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[i32] = &[]; // empty slice",
                "    let at_least_len = 0; // setting bound to 0",
                "    let what = \"empty slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(()));"
              ],
              "code": [
                "{",
                "    let slice: &[i32] = &[]; // empty slice",
                "    let at_least_len = 0; // setting bound to 0",
                "    let what = \"empty slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "    assert_eq!(_result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = &[0u8; 100]; // slice of length 100",
                "    let at_least_len = 100; // setting bound to the same length",
                "    let what = \"large slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(()));"
              ],
              "code": [
                "{",
                "    let slice = &[0u8; 100]; // slice of length 100",
                "    let at_least_len = 100; // setting bound to the same length",
                "    let what = \"large slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "    assert_eq!(_result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = &[42]; // single element slice",
                "    let at_least_len = 1; // setting bound to the same length",
                "    let what = \"single element slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(()));"
              ],
              "code": [
                "{",
                "    let slice = &[42]; // single element slice",
                "    let at_least_len = 1; // setting bound to the same length",
                "    let what = \"single element slice\"; // descriptive string",
                "    let _result = check_slice_len(slice, at_least_len, what);",
                "    assert_eq!(_result, Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}