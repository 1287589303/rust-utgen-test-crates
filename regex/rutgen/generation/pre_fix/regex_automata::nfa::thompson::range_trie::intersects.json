{
  "name": "regex_automata::nfa::thompson::range_trie::intersects",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:912:1:914:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: r1.end < r2.start at line 913 is true\n",
        "expected return value/type: !(r1.end < r2.start || r2.end < r1.start)\n"
      ],
      "input_infer": "r1: Utf8Range with start <= end, r2: Utf8Range with start > end, r1.end < r2.start, r2.end >= r1.start\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 0, end: 1 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 2, end: 3 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }), false);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 0, end: 1 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 2, end: 3 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 5, end: 10 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 11, end: 15 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 5, end: 10 }, Utf8Range { start: 11, end: 15 }), false);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 5, end: 10 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 11, end: 15 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 5, end: 10 }, Utf8Range { start: 11, end: 15 }), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 100, end: 200 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 201, end: 300 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 100, end: 200 }, Utf8Range { start: 201, end: 300 }), false);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 100, end: 200 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 201, end: 300 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 100, end: 200 }, Utf8Range { start: 201, end: 300 }), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 20, end: 30 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 31, end: 40 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 20, end: 30 }, Utf8Range { start: 31, end: 40 }), false);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 20, end: 30 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 31, end: 40 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 20, end: 30 }, Utf8Range { start: 31, end: 40 }), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 0, end: 5 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 6, end: 10 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 0, end: 5 }, Utf8Range { start: 6, end: 10 }), false);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 0, end: 5 }; // r1.end < r2.start",
                "    let r2 = Utf8Range { start: 6, end: 10 }; // r2.start is greater than r1.end",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 0, end: 5 }, Utf8Range { start: 6, end: 10 }), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: r1.end < r2.start at line 913 is false, with bound r1.end == r2.start\n",
        "expected return value/type: !(r1.end < r2.start || r2.end < r1.start)\n"
      ],
      "input_infer": "r1: Utf8Range { start: 0, end: 5 }, r2: Utf8Range { start: 5, end: 10 }\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 0, end: 5 };",
                "    let r2 = Utf8Range { start: 5, end: 10 };",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert!(intersects(Utf8Range { start: 0, end: 5 }, Utf8Range { start: 5, end: 10 }));"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 0, end: 5 };",
                "    let r2 = Utf8Range { start: 5, end: 10 };",
                "    intersects(r1, r2);",
                "    assert!(intersects(Utf8Range { start: 0, end: 5 }, Utf8Range { start: 5, end: 10 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 3, end: 7 };",
                "    let r2 = Utf8Range { start: 7, end: 12 };",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 3, end: 7 }, Utf8Range { start: 7, end: 12 }), true);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 3, end: 7 };",
                "    let r2 = Utf8Range { start: 7, end: 12 };",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 3, end: 7 }, Utf8Range { start: 7, end: 12 }), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 1, end: 4 };",
                "    let r2 = Utf8Range { start: 4, end: 8 };",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 1, end: 4 }, Utf8Range { start: 4, end: 8 }), true);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 1, end: 4 };",
                "    let r2 = Utf8Range { start: 4, end: 8 };",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 1, end: 4 }, Utf8Range { start: 4, end: 8 }), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let r1 = Utf8Range { start: 10, end: 20 };",
                "    let r2 = Utf8Range { start: 20, end: 30 };",
                "    intersects(r1, r2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(intersects(Utf8Range { start: 10, end: 20 }, Utf8Range { start: 20, end: 30 }), true);"
              ],
              "code": [
                "{",
                "    let r1 = Utf8Range { start: 10, end: 20 };",
                "    let r2 = Utf8Range { start: 20, end: 30 };",
                "    intersects(r1, r2);",
                "    assert_eq!(intersects(Utf8Range { start: 10, end: 20 }, Utf8Range { start: 20, end: 30 }), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}