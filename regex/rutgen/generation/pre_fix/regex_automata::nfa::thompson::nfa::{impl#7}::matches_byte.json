{
  "name": "regex_automata::nfa::thompson::nfa::{impl#7}::matches_byte",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1922:5:1929:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: next == StateID::ZERO at line 1924 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "byte: 0 to 255 where self.transitions[byte] == StateID::ZERO\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let dense_transitions = DenseTransitions { transitions };",
                "",
                "    let result = dense_transitions.matches_byte(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let dense_transitions = DenseTransitions { transitions };",
                "",
                "    let result = dense_transitions.matches_byte(0);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let dense_transitions = DenseTransitions { transitions };",
                "",
                "    let result = dense_transitions.matches_byte(128);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let dense_transitions = DenseTransitions { transitions };",
                "",
                "    let result = dense_transitions.matches_byte(128);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let dense_transitions = DenseTransitions { transitions };",
                "",
                "    let result = dense_transitions.matches_byte(255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let dense_transitions = DenseTransitions { transitions };",
                "",
                "    let result = dense_transitions.matches_byte(255);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: next == StateID::ZERO at line 1924 is false\n",
        "expected return value/type: Some(next)\n"
      ],
      "input_infer": "byte: u8 in the range [1, 255] where transitions[usize::from(byte)] is not equal to StateID::ZERO\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let valid_state_id = StateID(SmallIndex(1));",
                "    let mut transitions_vec = Vec::from(transitions.as_ref());",
                "    transitions_vec[1] = valid_state_id; // Setting a valid transition for byte 1",
                "    let dense_transitions = DenseTransitions {",
                "        transitions: transitions_vec.into_boxed_slice(),",
                "    };",
                "    let _result = dense_transitions.matches_byte(1);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.is_some());",
                "    assert_eq!(_result.unwrap(), valid_state_id);",
                "    assert_eq!(dense_transitions.matches_byte(1), Some(valid_state_id));"
              ],
              "code": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let valid_state_id = StateID(SmallIndex(1));",
                "    let mut transitions_vec = Vec::from(transitions.as_ref());",
                "    transitions_vec[1] = valid_state_id; // Setting a valid transition for byte 1",
                "    let dense_transitions = DenseTransitions {",
                "        transitions: transitions_vec.into_boxed_slice(),",
                "    };",
                "    let _result = dense_transitions.matches_byte(1);",
                "    assert!(_result.is_some());",
                "    assert_eq!(_result.unwrap(), valid_state_id);",
                "    assert_eq!(dense_transitions.matches_byte(1), Some(valid_state_id));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let valid_state_id = StateID(SmallIndex(2));",
                "    let mut transitions_vec = Vec::from(transitions.as_ref());",
                "    transitions_vec[2] = valid_state_id; // Setting a valid transition for byte 2",
                "    let dense_transitions = DenseTransitions {",
                "        transitions: transitions_vec.into_boxed_slice(),",
                "    };",
                "    let _result = dense_transitions.matches_byte(2);",
                "}"
              ],
              "oracle": [
                "    _result.unwrap() == Some(StateID(SmallIndex(2)))"
              ],
              "code": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let valid_state_id = StateID(SmallIndex(2));",
                "    let mut transitions_vec = Vec::from(transitions.as_ref());",
                "    transitions_vec[2] = valid_state_id; // Setting a valid transition for byte 2",
                "    let dense_transitions = DenseTransitions {",
                "        transitions: transitions_vec.into_boxed_slice(),",
                "    };",
                "    let _result = dense_transitions.matches_byte(2);",
                "    _result.unwrap() == Some(StateID(SmallIndex(2)))",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let valid_state_id = StateID(SmallIndex(3));",
                "    let mut transitions_vec = Vec::from(transitions.as_ref());",
                "    transitions_vec[255] = valid_state_id; // Setting a valid transition for byte 255",
                "    let dense_transitions = DenseTransitions {",
                "        transitions: transitions_vec.into_boxed_slice(),",
                "    };",
                "    let _result = dense_transitions.matches_byte(255);",
                "}"
              ],
              "oracle": [
                "    assert!(_result == Some(valid_state_id));"
              ],
              "code": [
                "{",
                "    let transitions = Box::new([StateID::ZERO; 256]);",
                "    let valid_state_id = StateID(SmallIndex(3));",
                "    let mut transitions_vec = Vec::from(transitions.as_ref());",
                "    transitions_vec[255] = valid_state_id; // Setting a valid transition for byte 255",
                "    let dense_transitions = DenseTransitions {",
                "        transitions: transitions_vec.into_boxed_slice(),",
                "    };",
                "    let _result = dense_transitions.matches_byte(255);",
                "    assert!(_result == Some(valid_state_id));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}