{
  "name": "regex_syntax::unicode::property_values",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:587:1:620:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "canonical_property_name should be a valid string representing a Unicode property name or an invalid string to test error handling; ranges include the shortest possible non-empty string (length 1) up to a long valid property name (e.g., \"unicode-general-category\") and also include an empty string to verify behavior for no input.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = property_values(\"L\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Some(expected_value)));",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.is_some());",
                "    assert!(matches!(result, Ok(Some(_))));",
                "    assert!(matches!(result, Err(Error::PropertyValueNotFound)).not());",
                "    assert!(result.unwrap().len() > 0);",
                "    assert_eq!(result.unwrap(), expected_property_values);"
              ],
              "code": [
                "{",
                "    let result = property_values(\"L\");",
                "    assert_eq!(result, Ok(Some(expected_value)));",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.is_some());",
                "    assert!(matches!(result, Ok(Some(_))));",
                "    assert!(matches!(result, Err(Error::PropertyValueNotFound)).not());",
                "    assert!(result.unwrap().len() > 0);",
                "    assert_eq!(result.unwrap(), expected_property_values);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = property_values(\"unicode-general-category\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    if let Some(property_values) = result.unwrap() {",
                "    assert!(!property_values.is_empty());",
                "    } else {",
                "    panic!(\"Expected Some(PropertyValues), got None\");",
                "    }",
                "    ",
                "    let result_invalid = property_values(\"invalid-property-name\");",
                "    assert!(result_invalid.is_err());",
                "    assert_eq!(result_invalid.err(), Some(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let result = property_values(\"unicode-general-category\");",
                "    assert!(result.is_ok());",
                "    if let Some(property_values) = result.unwrap() {",
                "    assert!(!property_values.is_empty());",
                "    } else {",
                "    panic!(\"Expected Some(PropertyValues), got None\");",
                "    }",
                "    ",
                "    let result_invalid = property_values(\"invalid-property-name\");",
                "    assert!(result_invalid.is_err());",
                "    assert_eq!(result_invalid.err(), Some(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = property_values(\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let result = property_values(\"\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = property_values(\"invalid-property-name\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let result = property_values(\"invalid-property-name\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = property_values(\"Cc\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(Some(expected_property_values_for_Cc)));",
                "    ",
                "    let result = property_values(\"Zs\");",
                "    assert_eq!(result, Ok(Some(expected_property_values_for_Zs)));",
                "    ",
                "    let result = property_values(\"InvalidProperty\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let result = property_values(\"\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let result = property_values(\"Cc\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let result = property_values(\"OtherProperty\");",
                "    assert!(result.is_ok());",
                "    ",
                "    #[cfg(not(any(feature = \"unicode-age\", feature = \"unicode-bool\", feature = \"unicode-gencat\", feature = \"unicode-perl\", feature = \"unicode-script\", feature = \"unicode-segment\")))]",
                "    let result = property_values(\"Cc\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));"
              ],
              "code": [
                "{",
                "    let result = property_values(\"Cc\");",
                "    assert_eq!(result, Ok(Some(expected_property_values_for_Cc)));",
                "    ",
                "    let result = property_values(\"Zs\");",
                "    assert_eq!(result, Ok(Some(expected_property_values_for_Zs)));",
                "    ",
                "    let result = property_values(\"InvalidProperty\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let result = property_values(\"\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "    ",
                "    let result = property_values(\"Cc\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let result = property_values(\"OtherProperty\");",
                "    assert!(result.is_ok());",
                "    ",
                "    #[cfg(not(any(feature = \"unicode-age\", feature = \"unicode-bool\", feature = \"unicode-gencat\", feature = \"unicode-perl\", feature = \"unicode-script\", feature = \"unicode-segment\")))]",
                "    let result = property_values(\"Cc\");",
                "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}