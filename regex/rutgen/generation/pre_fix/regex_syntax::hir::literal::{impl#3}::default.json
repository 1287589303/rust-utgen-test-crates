{
  "name": "regex_syntax::hir::literal::{impl#3}::default",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:664:5:666:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ExtractKind::Prefix\n"
      ],
      "input_infer": "test input conditions: None, as the function has no parameters and always returns ExtractKind::Prefix\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ExtractKind::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, ExtractKind::Prefix);",
                "    assert!(matches!(result, ExtractKind::Prefix));",
                "    assert!(result.is::<ExtractKind>());"
              ],
              "code": [
                "{",
                "    let result = ExtractKind::default();",
                "    assert_eq!(result, ExtractKind::Prefix);",
                "    assert!(matches!(result, ExtractKind::Prefix));",
                "    assert!(result.is::<ExtractKind>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ExtractKind::default();",
                "    let _clone = result.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, ExtractKind::Prefix);",
                "    assert!(matches!(result, ExtractKind::Prefix));",
                "    assert!(result.clone() == ExtractKind::Prefix);",
                "    assert!(format!(\"{:?}\", result) == \"Prefix\");",
                "    assert_ne!(result, ExtractKind::Suffix);"
              ],
              "code": [
                "{",
                "    let result = ExtractKind::default();",
                "    let _clone = result.clone();",
                "    assert_eq!(result, ExtractKind::Prefix);",
                "    assert!(matches!(result, ExtractKind::Prefix));",
                "    assert!(result.clone() == ExtractKind::Prefix);",
                "    assert!(format!(\"{:?}\", result) == \"Prefix\");",
                "    assert_ne!(result, ExtractKind::Suffix);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = ExtractKind::default();",
                "    let _debug_str = format!(\"{:?}\", result);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, ExtractKind::Prefix);",
                "    assert_eq!(_debug_str, \"Prefix\");",
                "    assert!(matches!(result, ExtractKind::Prefix));",
                "    assert!(matches!(result, ExtractKind::default()));"
              ],
              "code": [
                "{",
                "    let result = ExtractKind::default();",
                "    let _debug_str = format!(\"{:?}\", result);",
                "    assert_eq!(result, ExtractKind::Prefix);",
                "    assert_eq!(_debug_str, \"Prefix\");",
                "    assert!(matches!(result, ExtractKind::Prefix));",
                "    assert!(matches!(result, ExtractKind::default()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}