{
  "name": "regex::regex::string::{impl#12}::name",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:1708:5:1712:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Haystack input containing strings with various combinations of lowercase letters, uppercase letters, and digits; capture group names that exist and do not exist; valid and invalid regular expressions; haystack with no matches; haystack with multiple matches; and an empty haystack string.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result = caps.name(\"numbers\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().start, 3);",
                "    assert_eq!(result.unwrap().end, 6);",
                "    assert_eq!(result.unwrap().as_str(), \"123\");",
                "    ",
                "    let letters_result = caps.name(\"letters\");",
                "    assert!(letters_result.is_none());"
              ],
              "code": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result = caps.name(\"numbers\");",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().start, 3);",
                "    assert_eq!(result.unwrap().end, 6);",
                "    assert_eq!(result.unwrap().as_str(), \"123\");",
                "    ",
                "    let letters_result = caps.name(\"letters\");",
                "    assert!(letters_result.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"ABC\").unwrap();",
                "    let result = caps.name(\"letters\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let caps_numbers = re.captures(\"abc123\").unwrap();",
                "    let result_numbers = caps_numbers.name(\"numbers\");",
                "    assert_eq!(result_numbers.map(|m| m.start), Some(3));",
                "    assert_eq!(result_numbers.map(|m| m.end), Some(6));",
                "    let caps_letters = re.captures(\"abcXYZ\").unwrap();",
                "    let result_letters = caps_letters.name(\"letters\");",
                "    assert_eq!(result_letters.map(|m| m.start), Some(6));",
                "    assert_eq!(result_letters.map(|m| m.end), Some(9));",
                "    let caps_both = re.captures(\"abc123XYZ\").unwrap();",
                "    let result_both_numbers = caps_both.name(\"numbers\");",
                "    let result_both_letters = caps_both.name(\"letters\");",
                "    assert_eq!(result_both_numbers.map(|m| m.as_str()), Some(\"123\"));",
                "    assert_eq!(result_both_letters.map(|m| m.as_str()), Some(\"XYZ\"));",
                "    let caps_empty = re.captures(\"\").unwrap();",
                "    let result_empty = caps_empty.name(\"numbers\");",
                "    assert_eq!(result_empty, None);"
              ],
              "code": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"ABC\").unwrap();",
                "    let result = caps.name(\"letters\");",
                "    assert_eq!(result, None);",
                "    let caps_numbers = re.captures(\"abc123\").unwrap();",
                "    let result_numbers = caps_numbers.name(\"numbers\");",
                "    assert_eq!(result_numbers.map(|m| m.start), Some(3));",
                "    assert_eq!(result_numbers.map(|m| m.end), Some(6));",
                "    let caps_letters = re.captures(\"abcXYZ\").unwrap();",
                "    let result_letters = caps_letters.name(\"letters\");",
                "    assert_eq!(result_letters.map(|m| m.start), Some(6));",
                "    assert_eq!(result_letters.map(|m| m.end), Some(9));",
                "    let caps_both = re.captures(\"abc123XYZ\").unwrap();",
                "    let result_both_numbers = caps_both.name(\"numbers\");",
                "    let result_both_letters = caps_both.name(\"letters\");",
                "    assert_eq!(result_both_numbers.map(|m| m.as_str()), Some(\"123\"));",
                "    assert_eq!(result_both_letters.map(|m| m.as_str()), Some(\"XYZ\"));",
                "    let caps_empty = re.captures(\"\").unwrap();",
                "    let result_empty = caps_empty.name(\"numbers\");",
                "    assert_eq!(result_empty, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result = caps.name(\"invalid_group\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result = caps.name(\"invalid_group\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"abc\").unwrap();",
                "    let result = caps.name(\"numbers\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result_numbers = caps.name(\"numbers\");",
                "    assert_eq!(result_numbers.unwrap().as_str(), \"123\");",
                "    let result_letters = caps.name(\"letters\");",
                "    assert_eq!(result_letters, None);",
                "    let caps_empty = re.captures(\"\").unwrap();",
                "    assert_eq!(caps_empty.name(\"numbers\"), None);",
                "    assert_eq!(caps_empty.name(\"letters\"), None);",
                "    let caps_no_match = re.captures(\"ABC\").unwrap();",
                "    let result_numbers_no_match = caps_no_match.name(\"numbers\");",
                "    assert_eq!(result_numbers_no_match, None);",
                "    let result_letters_no_match = caps_no_match.name(\"letters\");",
                "    assert_eq!(result_letters_no_match.unwrap().as_str(), \"ABC\");"
              ],
              "code": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"abc\").unwrap();",
                "    let result = caps.name(\"numbers\");",
                "    assert_eq!(result, None);",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result_numbers = caps.name(\"numbers\");",
                "    assert_eq!(result_numbers.unwrap().as_str(), \"123\");",
                "    let result_letters = caps.name(\"letters\");",
                "    assert_eq!(result_letters, None);",
                "    let caps_empty = re.captures(\"\").unwrap();",
                "    assert_eq!(caps_empty.name(\"numbers\"), None);",
                "    assert_eq!(caps_empty.name(\"letters\"), None);",
                "    let caps_no_match = re.captures(\"ABC\").unwrap();",
                "    let result_numbers_no_match = caps_no_match.name(\"numbers\");",
                "    assert_eq!(result_numbers_no_match, None);",
                "    let result_letters_no_match = caps_no_match.name(\"letters\");",
                "    assert_eq!(result_letters_no_match.unwrap().as_str(), \"ABC\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"\").unwrap();",
                "    let result = caps.name(\"numbers\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    ",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result_numbers = caps.name(\"numbers\");",
                "    assert!(result_numbers.is_some());",
                "    ",
                "    let result_letters = caps.name(\"letters\");",
                "    assert!(result_letters.is_some());",
                "    ",
                "    assert_eq!(result_numbers.unwrap().start, 3);",
                "    assert_eq!(result_numbers.unwrap().end, 6);",
                "    assert_eq!(result_letters.unwrap().start, 0);",
                "    assert_eq!(result_letters.unwrap().end, 0);"
              ],
              "code": [
                "{",
                "    let re = regex::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
                "    let caps = re.captures(\"\").unwrap();",
                "    let result = caps.name(\"numbers\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let caps = re.captures(\"abc123\").unwrap();",
                "    let result_numbers = caps.name(\"numbers\");",
                "    assert!(result_numbers.is_some());",
                "    ",
                "    let result_letters = caps.name(\"letters\");",
                "    assert!(result_letters.is_some());",
                "    ",
                "    assert_eq!(result_numbers.unwrap().start, 3);",
                "    assert_eq!(result_numbers.unwrap().end, 6);",
                "    assert_eq!(result_letters.unwrap().start, 0);",
                "    assert_eq!(result_letters.unwrap().end, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = regex::Regex::new(r\"(?<digit>[0-9])\").unwrap();",
                "    let caps = re.captures(\"123\").unwrap();",
                "    let result = caps.name(\"digit\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.as_ref().map(|m| m.start), Some(0));",
                "    assert_eq!(result.as_ref().map(|m| m.end), Some(1));",
                "    assert_eq!(result.as_ref().map(|m| m.haystack), Some(\"123\"));"
              ],
              "code": [
                "{",
                "    let re = regex::Regex::new(r\"(?<digit>[0-9])\").unwrap();",
                "    let caps = re.captures(\"123\").unwrap();",
                "    let result = caps.name(\"digit\");",
                "    assert!(result.is_some());",
                "    assert_eq!(result.as_ref().map(|m| m.start), Some(0));",
                "    assert_eq!(result.as_ref().map(|m| m.end), Some(1));",
                "    assert_eq!(result.as_ref().map(|m| m.haystack), Some(\"123\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}