{
  "name": "regex_syntax::hir::{impl#12}::negate",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1132:5:1134:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "1. Input a `ClassUnicode` instance with no ranges (empty set) to verify negation creates a full range set; \n2. Input a `ClassUnicode` instance with a single range (e.g., `ClassUnicodeRange { start: 'a', end: 'z' }`) to check negation results in the inclusion of all characters outside this range; \n3. Input a `ClassUnicode` instance with overlapping ranges (e.g., `ClassUnicodeRange { start: 'A', end: 'C' }` and `ClassUnicodeRange { start: 'B', end: 'D' }`) to ensure negation correctly calculates the non-overlapping sections; \n4. Input a `ClassUnicode` instance with a range covering all Unicode scalar values (e.g., `ClassUnicodeRange { start: '\\u{0}', end: '\\u{10FFFF}' }`) to check negation results in an empty set; \n5. Input a `ClassUnicode` instance that contains non-contiguous ranges (e.g., `ClassUnicodeRange { start: '0', end: '9' }` and `ClassUnicodeRange { start: 'A', end: 'F' }`) to verify the negation captures all other characters correctly.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    class_unicode.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.is_ascii(), false);",
                "    assert_eq!(class_unicode.minimum_len(), Some(0));",
                "    assert_eq!(class_unicode.maximum_len(), Some(Option::None));",
                "    assert_eq!(class_unicode.literal(), None);",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0], ClassUnicodeRange{ start: char::MIN, end: char::MAX });"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::empty();",
                "    class_unicode.negate();",
                "    assert_eq!(class_unicode.is_ascii(), false);",
                "    assert_eq!(class_unicode.minimum_len(), Some(0));",
                "    assert_eq!(class_unicode.maximum_len(), Some(Option::None));",
                "    assert_eq!(class_unicode.literal(), None);",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0], ClassUnicodeRange{ start: char::MIN, end: char::MAX });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
                "    class_unicode.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.is_ascii(), false);",
                "    assert!(class_unicode.ranges().is_empty());",
                "    assert_eq!(class_unicode.minimum_len(), Some(0));",
                "    assert_eq!(class_unicode.maximum_len(), Some(1));",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
                "    class_unicode.negate();",
                "    assert_eq!(class_unicode.is_ascii(), false);",
                "    assert!(class_unicode.ranges().is_empty());",
                "    assert_eq!(class_unicode.minimum_len(), Some(0));",
                "    assert_eq!(class_unicode.maximum_len(), Some(1));",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: 'A', end: 'C' },",
                "        ClassUnicodeRange { start: 'B', end: 'D' },",
                "    ]);",
                "    class_unicode.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.ranges().len(), expected_len);",
                "    assert!(!class_unicode.is_ascii());",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());",
                "    assert!(class_unicode.iter().all(|r| r.start > 'C' || r.end < 'A'));",
                "    assert!(class_unicode.set.folded);",
                "    assert_eq!(class_unicode.ranges(), expected_ranges);"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: 'A', end: 'C' },",
                "        ClassUnicodeRange { start: 'B', end: 'D' },",
                "    ]);",
                "    class_unicode.negate();",
                "    assert_eq!(class_unicode.ranges().len(), expected_len);",
                "    assert!(!class_unicode.is_ascii());",
                "    assert!(class_unicode.minimum_len().is_none());",
                "    assert!(class_unicode.maximum_len().is_none());",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());",
                "    assert!(class_unicode.iter().all(|r| r.start > 'C' || r.end < 'A'));",
                "    assert!(class_unicode.set.folded);",
                "    assert_eq!(class_unicode.ranges(), expected_ranges);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: '\\u{0}', end: '\\u{10FFFF}' }]);",
                "    class_unicode.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.is_ascii(), false);",
                "    assert_eq!(class_unicode.minimum_len(), None);",
                "    assert_eq!(class_unicode.maximum_len(), Some(1));",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
                "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
                "    class_unicode.negate(); // Test idempotency",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert!(class_unicode.is_ascii()); // After negation with the full range",
                "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
                "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: '\\u{0}', end: '\\u{10FFFF}' }]);",
                "    class_unicode.negate();",
                "    assert_eq!(class_unicode.is_ascii(), false);",
                "    assert_eq!(class_unicode.minimum_len(), None);",
                "    assert_eq!(class_unicode.maximum_len(), Some(1));",
                "    assert!(class_unicode.literal().is_none());",
                "    assert!(class_unicode.to_byte_class().is_none());",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
                "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
                "    class_unicode.negate(); // Test idempotency",
                "    assert_eq!(class_unicode.ranges().len(), 1);",
                "    assert!(class_unicode.is_ascii()); // After negation with the full range",
                "    assert_eq!(class_unicode.ranges()[0].start, '\\u{0}');",
                "    assert_eq!(class_unicode.ranges()[0].end, '\\u{10FFFF}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: '0', end: '9' },",
                "        ClassUnicodeRange { start: 'A', end: 'F' },",
                "    ]);",
                "    class_unicode.negate();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.ranges().len(), 2);",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: '\\u{0}', end: '9' }));",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'G', end: '\\u{10FFFF}' }));",
                "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: '0', end: '9' }));",
                "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'F' }));"
              ],
              "code": [
                "{",
                "    let mut class_unicode = ClassUnicode::new(vec![",
                "        ClassUnicodeRange { start: '0', end: '9' },",
                "        ClassUnicodeRange { start: 'A', end: 'F' },",
                "    ]);",
                "    class_unicode.negate();",
                "    assert_eq!(class_unicode.ranges().len(), 2);",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: '\\u{0}', end: '9' }));",
                "    assert!(class_unicode.ranges().contains(&ClassUnicodeRange { start: 'G', end: '\\u{10FFFF}' }));",
                "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: '0', end: '9' }));",
                "    assert!(!class_unicode.ranges().contains(&ClassUnicodeRange { start: 'A', end: 'F' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}