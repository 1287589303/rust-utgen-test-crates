{
  "name": "regex_lite::pikevm::{impl#7}::capacity",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:837:5:839:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capacity() should return a usize which is non-negative and represents the length of the dense Vec, hence test input conditions should cover values of capacity from 0 to a predefined upper limit (e.g., 1 to 2^16-1) and check edge cases like newly created SparseSet, sparse populated SparseSet, and full SparseSet scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let _capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let _capacity = sparse_set.capacity();",
                "    assert_eq!(sparse_set.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    let _ = sparse_set.insert(1);",
                "    let _ = sparse_set.insert(2);",
                "    let _capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    sparse_set.insert(1);",
                "    assert_eq!(sparse_set.capacity(), 1);",
                "    sparse_set.insert(2);",
                "    assert_eq!(sparse_set.capacity(), 2);",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    sparse_set.resize(10);",
                "    assert_eq!(sparse_set.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    let _ = sparse_set.insert(1);",
                "    let _ = sparse_set.insert(2);",
                "    let _capacity = sparse_set.capacity();",
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    sparse_set.insert(1);",
                "    assert_eq!(sparse_set.capacity(), 1);",
                "    sparse_set.insert(2);",
                "    assert_eq!(sparse_set.capacity(), 2);",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    sparse_set.resize(10);",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    for id in 0..10 {",
                "        let _ = sparse_set.insert(id);",
                "    }",
                "    let _capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    for id in 0..10 {",
                "        let _ = sparse_set.insert(id);",
                "    }",
                "    let _capacity = sparse_set.capacity();",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(65535);",
                "    for id in 0..65535 {",
                "        let _ = sparse_set.insert(id);",
                "    }",
                "    let _capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), 65535);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(65535);",
                "    for id in 0..65535 {",
                "        let _ = sparse_set.insert(id);",
                "    }",
                "    let _capacity = sparse_set.capacity();",
                "    assert_eq!(sparse_set.capacity(), 65535);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    let _ = sparse_set.insert(1);",
                "    sparse_set.clear();",
                "    let _capacity = sparse_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    sparse_set.insert(1);",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    sparse_set.insert(2);",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    sparse_set.resize(20);",
                "    assert_eq!(sparse_set.capacity(), 20);",
                "    sparse_set.resize(10);",
                "    assert_eq!(sparse_set.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(10);",
                "    let _ = sparse_set.insert(1);",
                "    sparse_set.clear();",
                "    let _capacity = sparse_set.capacity();",
                "    assert_eq!(sparse_set.capacity(), 0);",
                "    sparse_set.insert(1);",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    sparse_set.insert(2);",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    sparse_set.clear();",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "    sparse_set.resize(20);",
                "    assert_eq!(sparse_set.capacity(), 20);",
                "    sparse_set.resize(10);",
                "    assert_eq!(sparse_set.capacity(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}