{
  "name": "regex_automata::util::captures::{impl#8}::small_slot_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": false,
  "loc": "regex-automata/src/util/captures.rs:2316:5:2324:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Self.slot_ranges must be a non-empty vector of tuples containing SmallIndex values, where the end value of the last tuple must be less than or equal to the maximum value of SmallIndex (u32); otherwise, return SmallIndex::ZERO.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: Vec::new(),",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(0));"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: Vec::new(),",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![(SmallIndex(0), SmallIndex(5))],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(5));"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![(SmallIndex(0), SmallIndex(5))],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![",
                "            (SmallIndex(0), SmallIndex(3)),",
                "            (SmallIndex(3), SmallIndex(7)),",
                "            (SmallIndex(7), SmallIndex(10)),",
                "        ],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(10));"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![",
                "            (SmallIndex(0), SmallIndex(3)),",
                "            (SmallIndex(3), SmallIndex(7)),",
                "            (SmallIndex(7), SmallIndex(10)),",
                "        ],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(10));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_small_index = SmallIndex(u32::MAX);",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![",
                "            (SmallIndex(0), SmallIndex(u32::MAX - 1)),",
                "            (SmallIndex(u32::MAX - 1), max_small_index),",
                "        ],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(u32::MAX));"
              ],
              "code": [
                "{",
                "    let max_small_index = SmallIndex(u32::MAX);",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![",
                "            (SmallIndex(0), SmallIndex(u32::MAX - 1)),",
                "            (SmallIndex(u32::MAX - 1), max_small_index),",
                "        ],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(u32::MAX));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![",
                "            (SmallIndex(0), SmallIndex(3)),",
                "            (SmallIndex(3), SmallIndex(3)),",
                "            (SmallIndex(3), SmallIndex(5)),",
                "        ],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(5));",
                "    assert_eq!(group_info.slot_ranges.len(), 3);",
                "    assert!(group_info.slot_ranges.iter().all(|&(start, end)| start <= end));"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfoInner {",
                "        slot_ranges: vec![",
                "            (SmallIndex(0), SmallIndex(3)),",
                "            (SmallIndex(3), SmallIndex(3)),",
                "            (SmallIndex(3), SmallIndex(5)),",
                "        ],",
                "        ..Default::default()",
                "    };",
                "    group_info.small_slot_len();",
                "    assert_eq!(group_info.small_slot_len(), SmallIndex(5));",
                "    assert_eq!(group_info.slot_ranges.len(), 3);",
                "    assert!(group_info.slot_ranges.iter().all(|&(start, end)| start <= end));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}