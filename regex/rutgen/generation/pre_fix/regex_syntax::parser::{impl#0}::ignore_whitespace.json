{
  "name": "regex_syntax::parser::{impl#0}::ignore_whitespace",
  "mod_info": {
    "name": "parser",
    "loc": "regex-syntax/src/lib.rs:191:1:191:12"
  },
  "visible": true,
  "loc": "regex-syntax/src/parser.rs:119:5:122:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "boolean values for the `yes` parameter of the ignore_whitespace method (true or false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.ignore_whitespace, true);",
                "    assert!(builder.ast.ignore_whitespace_enabled());",
                "    assert!(std::ptr::eq(builder.ignore_whitespace(true), &builder));",
                "    assert_eq!(builder.nest_limit, 0);",
                "    assert_eq!(builder.octal, false);",
                "    assert_eq!(builder.empty_min_range, false);"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(true);",
                "    assert_eq!(builder.ignore_whitespace, true);",
                "    assert!(builder.ast.ignore_whitespace_enabled());",
                "    assert!(std::ptr::eq(builder.ignore_whitespace(true), &builder));",
                "    assert_eq!(builder.nest_limit, 0);",
                "    assert_eq!(builder.octal, false);",
                "    assert_eq!(builder.empty_min_range, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(false);",
                "}"
              ],
              "oracle": [
                "    builder.ignore_whitespace(true);",
                "    assert!(builder.ignore_whitespace);",
                "    builder.ignore_whitespace(false);",
                "    assert!(!builder.ignore_whitespace);",
                "    let result = builder.ignore_whitespace(true);",
                "    assert_eq!(result, &mut builder);"
              ],
              "code": [
                "{",
                "    let mut builder = ParserBuilder::new();",
                "    builder.ignore_whitespace(false);",
                "    builder.ignore_whitespace(true);",
                "    assert!(builder.ignore_whitespace);",
                "    builder.ignore_whitespace(false);",
                "    assert!(!builder.ignore_whitespace);",
                "    let result = builder.ignore_whitespace(true);",
                "    assert_eq!(result, &mut builder);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}