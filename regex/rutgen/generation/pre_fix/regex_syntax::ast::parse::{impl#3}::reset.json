{
  "name": "regex_syntax::ast::parse::{impl#3}::reset",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:380:5:388:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid initial values for `initial_ignore_whitespace` (true, false); valid stack sizes for `stack_group` and `stack_class` (0 to maximum capacity); `comments` must be an initialized Vec (empty or containing Comment structs); `pos` should be reset to Position(offset: 0, line: 1, column: 1) on each reset invocation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 5, line: 2, column: 3 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 10,",
                "        octal: true,",
                "        initial_ignore_whitespace: true,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![Comment { span: Span { start: 0, end: 5 }, comment: String::from(\"example comment\") }]),",
                "        stack_group: RefCell::new(vec![GroupState::Group { concat: ast::Concat { items: vec![] }, group: ast::Group { name: String::from(\"test_group\"), span: Span { start: 0, end: 10 } }, ignore_whitespace: false }]),",
                "        stack_class: RefCell::new(vec![ClassState::Open { union: ast::ClassSetUnion { items: vec![] }, set: ast::ClassBracketed { items: vec![] } }]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    parser.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), true);",
                "    assert_eq!(parser.comments.borrow().len(), 0);",
                "    assert_eq!(parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(parser.stack_class.borrow().len(), 0);"
              ],
              "code": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 5, line: 2, column: 3 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 10,",
                "        octal: true,",
                "        initial_ignore_whitespace: true,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![Comment { span: Span { start: 0, end: 5 }, comment: String::from(\"example comment\") }]),",
                "        stack_group: RefCell::new(vec![GroupState::Group { concat: ast::Concat { items: vec![] }, group: ast::Group { name: String::from(\"test_group\"), span: Span { start: 0, end: 10 } }, ignore_whitespace: false }]),",
                "        stack_class: RefCell::new(vec![ClassState::Open { union: ast::ClassSetUnion { items: vec![] }, set: ast::ClassBracketed { items: vec![] } }]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    parser.reset();",
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), true);",
                "    assert_eq!(parser.comments.borrow().len(), 0);",
                "    assert_eq!(parser.stack_group.borrow().len(), 0);",
                "    assert_eq!(parser.stack_class.borrow().len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 10, line: 3, column: 5 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 5,",
                "        octal: false,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: true,",
                "        ignore_whitespace: Cell::new(true),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![GroupState::Alternate(ast::Alternation { branches: vec![] })]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::from(\"sample\")),",
                "    };",
                "    parser.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), false);",
                "    assert!(parser.comments.borrow().is_empty());",
                "    assert!(parser.stack_group.borrow().is_empty());",
                "    assert!(parser.stack_class.borrow().is_empty());"
              ],
              "code": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 10, line: 3, column: 5 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 5,",
                "        octal: false,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: true,",
                "        ignore_whitespace: Cell::new(true),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![GroupState::Alternate(ast::Alternation { branches: vec![] })]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::from(\"sample\")),",
                "    };",
                "    parser.reset();",
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), false);",
                "    assert!(parser.comments.borrow().is_empty());",
                "    assert!(parser.stack_group.borrow().is_empty());",
                "    assert!(parser.stack_class.borrow().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 1, line: 1, column: 1 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 7,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    parser.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), false);",
                "    assert!(parser.comments.borrow().is_empty());",
                "    assert!(parser.stack_group.borrow().is_empty());",
                "    assert!(parser.stack_class.borrow().is_empty());"
              ],
              "code": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 1, line: 1, column: 1 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 7,",
                "        octal: true,",
                "        initial_ignore_whitespace: false,",
                "        empty_min_range: false,",
                "        ignore_whitespace: Cell::new(false),",
                "        comments: RefCell::new(vec![]),",
                "        stack_group: RefCell::new(vec![]),",
                "        stack_class: RefCell::new(vec![]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::new()),",
                "    };",
                "    parser.reset();",
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), false);",
                "    assert!(parser.comments.borrow().is_empty());",
                "    assert!(parser.stack_group.borrow().is_empty());",
                "    assert!(parser.stack_class.borrow().is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 20, line: 4, column: 2 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 15,",
                "        octal: false,",
                "        initial_ignore_whitespace: true,",
                "        empty_min_range: true,",
                "        ignore_whitespace: Cell::new(true),",
                "        comments: RefCell::new(vec![Comment { span: Span { start: 0, end: 5 }, comment: String::from(\"comment 1\") }]),",
                "        stack_group: RefCell::new(vec![GroupState::Group { concat: ast::Concat { items: vec![] }, group: ast::Group { name: String::from(\"group1\"), span: Span { start: 0, end: 10 } }, ignore_whitespace: true }, GroupState::Group { concat: ast::Concat { items: vec![] }, group: ast::Group { name: String::from(\"group2\"), span: Span { start: 0, end: 10 } }, ignore_whitespace: false }]),",
                "        stack_class: RefCell::new(vec![ClassState::Open { union: ast::ClassSetUnion { items: vec![] }, set: ast::ClassBracketed { items: vec![] } }]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::from(\"scratch data\")),",
                "    };",
                "    parser.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), parser.initial_ignore_whitespace);",
                "    assert!(parser.comments.borrow().is_empty());",
                "    assert!(parser.stack_group.borrow().is_empty());",
                "    assert!(parser.stack_class.borrow().is_empty());"
              ],
              "code": [
                "{",
                "    let mut parser = Parser {",
                "        pos: Cell::new(Position { offset: 20, line: 4, column: 2 }),",
                "        capture_index: Cell::new(0),",
                "        nest_limit: 15,",
                "        octal: false,",
                "        initial_ignore_whitespace: true,",
                "        empty_min_range: true,",
                "        ignore_whitespace: Cell::new(true),",
                "        comments: RefCell::new(vec![Comment { span: Span { start: 0, end: 5 }, comment: String::from(\"comment 1\") }]),",
                "        stack_group: RefCell::new(vec![GroupState::Group { concat: ast::Concat { items: vec![] }, group: ast::Group { name: String::from(\"group1\"), span: Span { start: 0, end: 10 } }, ignore_whitespace: true }, GroupState::Group { concat: ast::Concat { items: vec![] }, group: ast::Group { name: String::from(\"group2\"), span: Span { start: 0, end: 10 } }, ignore_whitespace: false }]),",
                "        stack_class: RefCell::new(vec![ClassState::Open { union: ast::ClassSetUnion { items: vec![] }, set: ast::ClassBracketed { items: vec![] } }]),",
                "        capture_names: RefCell::new(vec![]),",
                "        scratch: RefCell::new(String::from(\"scratch data\")),",
                "    };",
                "    parser.reset();",
                "    assert_eq!(parser.pos.get(), Position { offset: 0, line: 1, column: 1 });",
                "    assert_eq!(parser.ignore_whitespace.get(), parser.initial_ignore_whitespace);",
                "    assert!(parser.comments.borrow().is_empty());",
                "    assert!(parser.stack_group.borrow().is_empty());",
                "    assert!(parser.stack_class.borrow().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}