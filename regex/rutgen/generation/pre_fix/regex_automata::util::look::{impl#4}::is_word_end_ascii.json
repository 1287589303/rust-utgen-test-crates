{
  "name": "regex_automata::util::look::{impl#4}::is_word_end_ascii",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1114:5:1119:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: at > 0 at line 1115 is true\n",
        "precondition: at < haystack.len() at line 1117 is true\n",
        "precondition: word_before at line 1118 is true\n",
        "expected return value/type: !word_after\n"
      ],
      "input_infer": "at > 0 and at < haystack.len() and haystack[at - 1] is a word byte and haystack[at] is not a word byte\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = b\"hello_world\";",
                "    let at = 11; // at is equal to haystack.len(), should not panic and return false",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let haystack = b\"hello_world\";",
                "    let at = 11; // at is equal to haystack.len(), should not panic and return false",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = b\"hello_world\";",
                "    let at = 10; // at < haystack.len() and haystack[at - 1] is a word byte ('d'), haystack[at] is not a word byte ('\\0')",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
                "    haystack = b\"hello_world\\0\";",
                "    at = 10;",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
                "    at = 1;",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
                "    at = 11;",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let haystack = b\"hello_world\";",
                "    let at = 10; // at < haystack.len() and haystack[at - 1] is a word byte ('d'), haystack[at] is not a word byte ('\\0')",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
                "    haystack = b\"hello_world\\0\";",
                "    at = 10;",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
                "    at = 1;",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
                "    at = 11;",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = b\"hello_world!\";",
                "    let at = 11; // at < haystack.len() (11) and haystack[at - 1] is a word byte ('d'), haystack[at] is '!', not a word byte",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    matcher.is_word_end_ascii(haystack, at) == false;"
              ],
              "code": [
                "{",
                "    let haystack = b\"hello_world!\";",
                "    let at = 11; // at < haystack.len() (11) and haystack[at - 1] is a word byte ('d'), haystack[at] is '!', not a word byte",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "    matcher.is_word_end_ascii(haystack, at) == false;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let haystack = b\"hello_\";",
                "    let at = 6; // at < haystack.len() (6) and haystack[at - 1] is a word byte ('_'), haystack[at] is not a word byte (out of bounds)",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let haystack = b\"hello_\";",
                "    let at = 6; // at < haystack.len() (6) and haystack[at - 1] is a word byte ('_'), haystack[at] is not a word byte (out of bounds)",
                "    let matcher = LookMatcher::new();",
                "    matcher.is_word_end_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: at > 0 at line 1115 is false, with bound at == 0\n",
        "precondition: at < haystack.len() at line 1117 is false, with bound at == haystack.len()\n",
        "precondition: word_before at line 1118 is false\n",
        "expected return value/type: word_before && !word_after\n"
      ],
      "input_infer": "at = 0, haystack = [], at = haystack.len(), at = len(haystack) - 1 with a non-word byte at haystack[at - 1] and at < haystack.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\"; // empty haystack",
                "    let at = 0;",
                "    matcher.is_word_end_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);  // at == 0, word_before is false",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, haystack.len()), false); // at == haystack.len(), word_after is false",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, 1), false);  // at > 0, haystack is empty, should panic",
                "    assert!(std::panic::catch_unwind(|| matcher.is_word_end_ascii(haystack, 1)).is_err());  // ensure panic when at is out of bounds"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\"; // empty haystack",
                "    let at = 0;",
                "    matcher.is_word_end_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);  // at == 0, word_before is false",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, haystack.len()), false); // at == haystack.len(), word_after is false",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, 1), false);  // at > 0, haystack is empty, should panic",
                "    assert!(std::panic::catch_unwind(|| matcher.is_word_end_ascii(haystack, 1)).is_err());  // ensure panic when at is out of bounds",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\"; // empty haystack",
                "    let at = haystack.len(); // at == len(haystack)",
                "    matcher.is_word_end_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\"\"; // empty haystack",
                "    let at = haystack.len(); // at == len(haystack)",
                "    matcher.is_word_end_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\".\"; // non-word byte before the specified position",
                "    let at = 1; // at == haystack.len() - 1 (1) with non-word byte",
                "    matcher.is_word_end_ascii(haystack, at);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(matcher.is_word_end_ascii(haystack, 0), false); // at == 0, expected return false",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc\", 3), false); // at == haystack.len(), expected return false",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc_\", 3), true); // at == haystack.len() with word byte before, expected return true",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc\", 2), true); // at=2, word before and no word after, expected return true",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc_\", 2), false); // at=2, word before and word after, expected return false"
              ],
              "code": [
                "{",
                "    let matcher = LookMatcher::new();",
                "    let haystack: &[u8] = b\".\"; // non-word byte before the specified position",
                "    let at = 1; // at == haystack.len() - 1 (1) with non-word byte",
                "    matcher.is_word_end_ascii(haystack, at);",
                "    assert_eq!(matcher.is_word_end_ascii(haystack, 0), false); // at == 0, expected return false",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc\", 3), false); // at == haystack.len(), expected return false",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc_\", 3), true); // at == haystack.len() with word byte before, expected return true",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc\", 2), true); // at=2, word before and no word after, expected return true",
                "    assert_eq!(matcher.is_word_end_ascii(b\"abc_\", 2), false); // at=2, word before and word after, expected return false",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}