{
  "name": "regex_automata::util::search::{impl#3}::contains",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:840:5:842:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_empty() at line 841 is true\n",
        "expected return value/type: !self.is_empty() && self.start <= offset && offset <= self.end\n"
      ],
      "input_infer": "self.start = self.end; offset = any value (e.g., 0, self.start, self.end, self.end + 1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 0;",
                "    span.contains(offset);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.is_empty(), true);",
                "    assert_eq!(span.contains(offset), false);",
                "    assert!(span.start > offset);",
                "    assert!(offset > span.end);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 0;",
                "    span.contains(offset);",
                "    assert_eq!(span.is_empty(), true);",
                "    assert_eq!(span.contains(offset), false);",
                "    assert!(span.start > offset);",
                "    assert!(offset > span.end);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 0;",
                "    span.contains(offset);",
                "}"
              ],
              "oracle": [
                "    assert!(span.is_empty());",
                "    assert_eq!(span.contains(offset), false);",
                "    assert!(span.start >= span.end);",
                "    assert!(span.start <= offset);",
                "    assert!(offset <= span.end);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 0;",
                "    span.contains(offset);",
                "    assert!(span.is_empty());",
                "    assert_eq!(span.contains(offset), false);",
                "    assert!(span.start >= span.end);",
                "    assert!(span.start <= offset);",
                "    assert!(offset <= span.end);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 0;",
                "    span.contains(offset);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.is_empty(), true);",
                "    assert_eq!(span.contains(offset), false);",
                "    assert!(span.contains(offset) == (offset >= span.start && offset < span.end));",
                "    assert!(span.contains(offset) == false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 0;",
                "    span.contains(offset);",
                "    assert_eq!(span.is_empty(), true);",
                "    assert_eq!(span.contains(offset), false);",
                "    assert!(span.contains(offset) == (offset >= span.start && offset < span.end));",
                "    assert!(span.contains(offset) == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 1;",
                "    span.contains(offset);",
                "}"
              ],
              "oracle": [
                "    assert!(span.is_empty());",
                "    assert!(!span.contains(offset));"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = 1;",
                "    span.contains(offset);",
                "    assert!(span.is_empty());",
                "    assert!(!span.contains(offset));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = usize::MAX;",
                "    span.contains(offset);",
                "}"
              ],
              "oracle": [
                "    assert!(span.is_empty());",
                "    assert!(span.contains(offset) == false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let offset = usize::MAX;",
                "    span.contains(offset);",
                "    assert!(span.is_empty());",
                "    assert!(span.contains(offset) == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_empty() at line 841 is false\n",
        "precondition: self.start <= offset at line 841 is true, with bound self.start == offset\n",
        "expected return value/type: offset <= self.end\n"
      ],
      "input_infer": "self.start = 0, offset = self.start, self.end = 1; self.start = 1, offset = self.start, self.end = 2; self.start = 0, offset = self.start + 1, self.end = 5; self.start = 3, offset = self.start + 2, self.end = 3; self.start = 100, offset = self.start, self.end = 200; self.start = 200, offset = self.start, self.end = 200; self.start = 0, offset = 0, self.end = 0; self.start = 0, offset = 0, self.end = 1; self.start = 10, offset = 10, self.end = 11; self.start = 15, offset = 15, self.end = 15\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = span.contains(span.start);",
                "}"
              ],
              "oracle": [
                "    let span = Span { start: 0, end: 1 };",
                "    let result = span.contains(span.start);",
                "    assert_eq!(result, true);",
                "    let span = Span { start: 3, end: 5 };",
                "    let result = span.contains(span.start);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = span.contains(span.start);",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = span.contains(span.start);",
                "    assert_eq!(result, true);",
                "    let span = Span { start: 3, end: 5 };",
                "    let result = span.contains(span.start);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 1, end: 2 };",
                "    let result = span.contains(span.start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 1, end: 2 };",
                "    let result = span.contains(span.start);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 5 };",
                "    let result = span.contains(span.start + 1);",
                "}"
              ],
              "oracle": [
                "    assert!(result);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 5 };",
                "    let result = span.contains(span.start + 1);",
                "    assert!(result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 3, end: 3 };",
                "    let result = span.contains(span.start + 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= span.start + 2);",
                "    assert!(span.start + 2 <= span.end);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 3, end: 3 };",
                "    let result = span.contains(span.start + 2);",
                "    assert_eq!(result, false);",
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= span.start + 2);",
                "    assert!(span.start + 2 <= span.end);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let result = span.contains(span.start);",
                "}"
              ],
              "oracle": [
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= span.start);",
                "    assert!(span.start <= span.end);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let result = span.contains(span.start);",
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= span.start);",
                "    assert!(span.start <= span.end);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 200, end: 200 };",
                "    let result = span.contains(span.start);",
                "}"
              ],
              "oracle": [
                "    assert!(!span.is_empty());",
                "    assert_eq!(span.start, span.start);",
                "    assert!(span.contains(span.start));",
                "    assert!(span.start <= span.end);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 200, end: 200 };",
                "    let result = span.contains(span.start);",
                "    assert!(!span.is_empty());",
                "    assert_eq!(span.start, span.start);",
                "    assert!(span.contains(span.start));",
                "    assert!(span.start <= span.end);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let result = span.contains(0);",
                "}"
              ],
              "oracle": [
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= 0);",
                "    assert!(0 <= span.end);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let result = span.contains(0);",
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= 0);",
                "    assert!(0 <= span.end);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = span.contains(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 1 };",
                "    let result = span.contains(0);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 10, end: 11 };",
                "    let result = span.contains(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(span.start <= 10);",
                "    assert!(span.end > 10);",
                "    assert!(!span.is_empty());"
              ],
              "code": [
                "{",
                "    let span = Span { start: 10, end: 11 };",
                "    let result = span.contains(10);",
                "    assert_eq!(result, true);",
                "    assert!(span.start <= 10);",
                "    assert!(span.end > 10);",
                "    assert!(!span.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 15, end: 15 };",
                "    let result = span.contains(15);",
                "}"
              ],
              "oracle": [
                "    assert!(!span.is_empty());",
                "    assert_eq!(span.start, 15);",
                "    assert!(span.contains(15));",
                "    assert!(15 <= span.end);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 15, end: 15 };",
                "    let result = span.contains(15);",
                "    assert!(!span.is_empty());",
                "    assert_eq!(span.start, 15);",
                "    assert!(span.contains(15));",
                "    assert!(15 <= span.end);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: self.is_empty() at line 841 is false\n",
        "precondition: self.start <= offset at line 841 is false\n",
        "expected return value/type: !self.is_empty() && self.start <= offset && offset <= self.end\n"
      ],
      "input_infer": "start: 1, end: 5; offset: 1, 2, 3, 4; start: 5, end: 5; offset: 5; start: 10, end: 15; offset: 10, 15, 16; start: 0, end: 0; offset: 0, 1; start: 100, end: 200; offset: 99, 100, 200, 201\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 1, end: 5 };",
                "    let _ = span.contains(1);",
                "    let _ = span.contains(2);",
                "    let _ = span.contains(3);",
                "    let _ = span.contains(4);",
                "}"
              ],
              "oracle": [
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(1), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(2), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(3), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(4), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(0), false);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(5), false);",
                "    let span = Span { start: 3, end: 3 }; assert_eq!(span.contains(3), false);",
                "    let span = Span { start: 10, end: 15 }; assert_eq!(span.contains(5), false);",
                "    let span = Span { start: 5, end: 10 }; assert_eq!(span.contains(5), true);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 1, end: 5 };",
                "    let _ = span.contains(1);",
                "    let _ = span.contains(2);",
                "    let _ = span.contains(3);",
                "    let _ = span.contains(4);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(1), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(2), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(3), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(4), true);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(0), false);",
                "    let span = Span { start: 1, end: 5 }; assert_eq!(span.contains(5), false);",
                "    let span = Span { start: 3, end: 3 }; assert_eq!(span.contains(3), false);",
                "    let span = Span { start: 10, end: 15 }; assert_eq!(span.contains(5), false);",
                "    let span = Span { start: 5, end: 10 }; assert_eq!(span.contains(5), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 5, end: 5 };",
                "    let _ = span.contains(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.is_empty(), true);",
                "    assert_eq!(span.contains(5), false);",
                "    assert_eq!(span.contains(4), false);",
                "    assert_eq!(span.contains(6), false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 5, end: 5 };",
                "    let _ = span.contains(5);",
                "    assert_eq!(span.is_empty(), true);",
                "    assert_eq!(span.contains(5), false);",
                "    assert_eq!(span.contains(4), false);",
                "    assert_eq!(span.contains(6), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 10, end: 15 };",
                "    let _ = span.contains(16);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.contains(16), false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 10, end: 15 };",
                "    let _ = span.contains(16);",
                "    assert_eq!(span.contains(16), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let _ = span.contains(0);",
                "    let _ = span.contains(1);",
                "}"
              ],
              "oracle": [
                "    let span = Span { start: 0, end: 10 }; assert!(span.contains(0) == true);",
                "    let span = Span { start: 0, end: 10 }; assert!(span.contains(5) == true);",
                "    let span = Span { start: 0, end: 10 }; assert!(span.contains(10) == false);",
                "    let span = Span { start: 5, end: 10 }; assert!(span.contains(5) == true);",
                "    let span = Span { start: 5, end: 10 }; assert!(span.contains(0) == false);",
                "    let span = Span { start: 5, end: 10 }; assert!(span.contains(10) == false);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(3) == true);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(1) == true);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(5) == false);",
                "    let span = Span { start: 10, end: 10 }; assert!(span.contains(10) == false);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(0) == false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 0, end: 0 };",
                "    let _ = span.contains(0);",
                "    let _ = span.contains(1);",
                "    let span = Span { start: 0, end: 10 }; assert!(span.contains(0) == true);",
                "    let span = Span { start: 0, end: 10 }; assert!(span.contains(5) == true);",
                "    let span = Span { start: 0, end: 10 }; assert!(span.contains(10) == false);",
                "    let span = Span { start: 5, end: 10 }; assert!(span.contains(5) == true);",
                "    let span = Span { start: 5, end: 10 }; assert!(span.contains(0) == false);",
                "    let span = Span { start: 5, end: 10 }; assert!(span.contains(10) == false);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(3) == true);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(1) == true);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(5) == false);",
                "    let span = Span { start: 10, end: 10 }; assert!(span.contains(10) == false);",
                "    let span = Span { start: 1, end: 5 }; assert!(span.contains(0) == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(99);",
                "}"
              ],
              "oracle": [
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= 99);",
                "    assert!(99 <= span.end);",
                "    assert_eq!(span.contains(99), false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(99);",
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= 99);",
                "    assert!(99 <= span.end);",
                "    assert_eq!(span.contains(99), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(100);",
                "}"
              ],
              "oracle": [
                "    let span = Span { start: 100, end: 200 };",
                "    assert!(span.contains(100) == true);",
                "    let span = Span { start: 100, end: 200 };",
                "    assert!(span.contains(200) == false);",
                "    let span = Span { start: 100, end: 200 };",
                "    assert!(span.contains(99) == false);",
                "    let span = Span { start: 100, end: 100 };",
                "    assert!(span.contains(100) == false);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(200) == true);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(250) == true);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(300) == false);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(199) == false);",
                "    let span = Span { start: 150, end: 250 };",
                "    assert!(span.contains(150) == true);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(100);",
                "    let span = Span { start: 100, end: 200 };",
                "    assert!(span.contains(100) == true);",
                "    let span = Span { start: 100, end: 200 };",
                "    assert!(span.contains(200) == false);",
                "    let span = Span { start: 100, end: 200 };",
                "    assert!(span.contains(99) == false);",
                "    let span = Span { start: 100, end: 100 };",
                "    assert!(span.contains(100) == false);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(200) == true);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(250) == true);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(300) == false);",
                "    let span = Span { start: 200, end: 300 };",
                "    assert!(span.contains(199) == false);",
                "    let span = Span { start: 150, end: 250 };",
                "    assert!(span.contains(150) == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(200);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(span.contains(150), true);",
                "    assert_eq!(span.contains(100), true);",
                "    assert_eq!(span.contains(199), true);",
                "    assert_eq!(span.contains(99), false);",
                "    assert_eq!(span.contains(200), false);",
                "    assert_eq!(span.is_empty(), false);",
                "    assert_eq!(span.len(), 100);",
                "    assert_eq!(span.range(), 100..200);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(200);",
                "    assert_eq!(span.contains(150), true);",
                "    assert_eq!(span.contains(100), true);",
                "    assert_eq!(span.contains(199), true);",
                "    assert_eq!(span.contains(99), false);",
                "    assert_eq!(span.contains(200), false);",
                "    assert_eq!(span.is_empty(), false);",
                "    assert_eq!(span.len(), 100);",
                "    assert_eq!(span.range(), 100..200);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(201);",
                "}"
              ],
              "oracle": [
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= 201);",
                "    assert!(201 <= span.end);",
                "    assert_eq!(span.contains(201), false);",
                "    assert_eq!(span.contains(100), true);",
                "    assert_eq!(span.contains(150), true);",
                "    assert_eq!(span.contains(99), false);"
              ],
              "code": [
                "{",
                "    let span = Span { start: 100, end: 200 };",
                "    let _ = span.contains(201);",
                "    assert!(!span.is_empty());",
                "    assert!(span.start <= 201);",
                "    assert!(201 <= span.end);",
                "    assert_eq!(span.contains(201), false);",
                "    assert_eq!(span.contains(100), true);",
                "    assert_eq!(span.contains(150), true);",
                "    assert_eq!(span.contains(99), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}