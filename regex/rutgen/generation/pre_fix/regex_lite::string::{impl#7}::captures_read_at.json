{
  "name": "regex_lite::string::{impl#7}::captures_read_at",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1250:5:1270:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: matched at line 1265 is true\n",
        "expected return value/type: Some(Match::new(haystack, start, end))\n"
      ],
      "input_infer": "haystack: non-empty string; locs: valid CaptureLocations created by the same Regex; start: valid index in range 0 to haystack.len() (inclusive, while capturing a match occurs)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = 0;",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "}"
              ],
              "oracle": [
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = 0;",
                "    assert!(re.captures_read_at(&mut locs, haystack, start).is_some());",
                "    let m = re.captures_read_at(&mut locs, haystack, start).unwrap();",
                "    assert_eq!(m.start(), 0);",
                "    assert_eq!(m.end(), 5);",
                "    assert_eq!(m.as_str(), \"hello\");"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = 0;",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = 0;",
                "    assert!(re.captures_read_at(&mut locs, haystack, start).is_some());",
                "    let m = re.captures_read_at(&mut locs, haystack, start).unwrap();",
                "    assert_eq!(m.start(), 0);",
                "    assert_eq!(m.end(), 5);",
                "    assert_eq!(m.as_str(), \"hello\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = 6;",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_read_at(&mut locs, haystack, 6).is_some());",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().start(), 6);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().end(), 11);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().as_str(), \"world\");"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = 6;",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "    assert!(re.captures_read_at(&mut locs, haystack, 6).is_some());",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().start(), 6);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().end(), 11);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().as_str(), \"world\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    ",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = haystack.len() - 5; // \"world\"",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).is_some(), true);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().start(), start);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().end(), haystack.len());",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().as_str(), \"world\");"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    ",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = haystack.len() - 5; // \"world\"",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).is_some(), true);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().start(), start);",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().end(), haystack.len());",
                "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().as_str(), \"world\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = haystack.len(); // Out of bounds index",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_read_at(&mut locs, haystack, start).is_none());",
                "    assert!(re.captures_read_at(&mut locs, haystack, start - 1).is_some());",
                "    assert!(re.captures_read_at(&mut locs, haystack, start - 2).is_some());",
                "    assert!(re.captures_read_at(&mut locs, haystack, 0).is_some());",
                "    assert!(re.captures_read_at(&mut locs, haystack, 1).is_some());"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\w+\").unwrap();",
                "    let haystack = \"hello world\";",
                "    let mut locs = re.captures_at(haystack, 0).unwrap();",
                "    let start = haystack.len(); // Out of bounds index",
                "    let _ = re.captures_read_at(&mut locs, haystack, start);",
                "    assert!(re.captures_read_at(&mut locs, haystack, start).is_none());",
                "    assert!(re.captures_read_at(&mut locs, haystack, start - 1).is_some());",
                "    assert!(re.captures_read_at(&mut locs, haystack, start - 2).is_some());",
                "    assert!(re.captures_read_at(&mut locs, haystack, 0).is_some());",
                "    assert!(re.captures_read_at(&mut locs, haystack, 1).is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: matched at line 1265 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "start < 0 or start >= haystack.len() + 1 or CaptureLocations not created by this regex or haystack is empty\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"eschew\";",
                "    let mut locs = regex.capture_locations();",
                "    let result = regex.captures_read_at(&mut locs, haystack, haystack.len() + 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"eschew\";",
                "    let mut locs = regex.capture_locations();",
                "    let result = regex.captures_read_at(&mut locs, haystack, haystack.len() + 1);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"eschew\";",
                "    let mut locs = regex.capture_locations();",
                "    let result = regex.captures_read_at(&mut locs, haystack, usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_none());"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"eschew\";",
                "    let mut locs = regex.capture_locations();",
                "    let result = regex.captures_read_at(&mut locs, haystack, usize::MAX);",
                "    assert!(result.is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"\";",
                "    let mut locs = regex.capture_locations();",
                "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"\";",
                "    let mut locs = regex.capture_locations();",
                "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct IncorrectCaptureLocations(Vec<Option<NonMaxUsize>>);",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"eschew\";",
                "    let mut locs = IncorrectCaptureLocations(vec![None; 2]); // Incorrect instance",
                "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct IncorrectCaptureLocations(Vec<Option<NonMaxUsize>>);",
                "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let haystack = \"eschew\";",
                "    let mut locs = IncorrectCaptureLocations(vec![None; 2]); // Incorrect instance",
                "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}