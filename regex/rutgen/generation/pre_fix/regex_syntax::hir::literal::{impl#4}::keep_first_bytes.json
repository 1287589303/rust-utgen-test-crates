{
  "name": "regex_syntax::hir::literal::{impl#4}::keep_first_bytes",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:1489:5:1495:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(ref mut lits) = self.literals at line 1490 is true\n",
        "precondition: m in lits.iter_mut() at line 1491 is true\n",
        "precondition: m in lits.iter_mut() at line 1491 is false\n"
      ],
      "input_infer": "Seq with literals: Some(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]), len: 0 to x â‰¤ max_literal_len(Seq) where x is inclusive of potential lengths from 0 up to the maximum literal length in the literals.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"a\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"foo\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"quux\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_exact());"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(0);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"a\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"foo\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"quux\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_exact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"a\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"f\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"q\");",
                "    assert!(seq.literals().unwrap()[2].is_inexact());"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(1);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"a\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"f\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"q\");",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::inexact(b\"qu\")]));",
                "    assert!(seq.literals().unwrap()[0].is_exact());",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    assert_eq!(seq.literals().unwrap()[0].len(), 1);",
                "    assert_eq!(seq.literals().unwrap()[1].len(), 2);",
                "    assert_eq!(seq.literals().unwrap()[2].len(), 2);"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(3);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::inexact(b\"qu\")]));",
                "    assert!(seq.literals().unwrap()[0].is_exact());",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    assert_eq!(seq.literals().unwrap()[0].len(), 1);",
                "    assert_eq!(seq.literals().unwrap()[1].len(), 2);",
                "    assert_eq!(seq.literals().unwrap()[2].len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(5);",
                "}"
              ],
              "oracle": [
                "    seq.keep_first_bytes(5);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(3);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::inexact(b\"qu\")]));",
                "    ",
                "    seq.keep_first_bytes(2);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"fo\"), Literal::inexact(b\"qu\")]));",
                "    ",
                "    seq.keep_first_bytes(0);",
                "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"\"), Literal::inexact(b\"\"), Literal::inexact(b\"\")]));",
                "    ",
                "    seq.keep_first_bytes(10);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(1);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"f\"), Literal::inexact(b\"q\")]));",
                "    ",
                "    seq.keep_first_bytes(4);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::inexact(b\"quu\")]));",
                "    ",
                "    seq.keep_first_bytes(6);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(7);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(2);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"fo\"), Literal::inexact(b\"qu\")]));"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    seq.keep_first_bytes(5);",
                "    seq.keep_first_bytes(5);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(3);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::inexact(b\"qu\")]));",
                "    ",
                "    seq.keep_first_bytes(2);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"fo\"), Literal::inexact(b\"qu\")]));",
                "    ",
                "    seq.keep_first_bytes(0);",
                "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"\"), Literal::inexact(b\"\"), Literal::inexact(b\"\")]));",
                "    ",
                "    seq.keep_first_bytes(10);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(1);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"f\"), Literal::inexact(b\"q\")]));",
                "    ",
                "    seq.keep_first_bytes(4);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::inexact(b\"quu\")]));",
                "    ",
                "    seq.keep_first_bytes(6);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(7);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]));",
                "    ",
                "    seq.keep_first_bytes(2);",
                "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::inexact(b\"fo\"), Literal::inexact(b\"qu\")]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    let max_len = seq.max_literal_len().unwrap();",
                "    seq.keep_first_bytes(max_len);",
                "}"
              ],
              "oracle": [
                "    assert!(seq.literals().is_some());",
                "    assert_eq!(seq.literals().unwrap().len(), 3);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"a\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"fo\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"qu\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    assert!(!seq.literals().unwrap()[0].is_inexact());",
                "    assert_eq!(seq.literals().unwrap()[0].len(), 1);",
                "    assert_eq!(seq.literals().unwrap()[1].len(), 2);",
                "    assert_eq!(seq.literals().unwrap()[2].len(), 2);"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(vec![Literal::exact(b\"a\"), Literal::inexact(b\"foo\"), Literal::exact(b\"quux\")]);",
                "    let max_len = seq.max_literal_len().unwrap();",
                "    seq.keep_first_bytes(max_len);",
                "    assert!(seq.literals().is_some());",
                "    assert_eq!(seq.literals().unwrap().len(), 3);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"a\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"fo\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"qu\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    assert!(!seq.literals().unwrap()[0].is_inexact());",
                "    assert_eq!(seq.literals().unwrap()[0].len(), 1);",
                "    assert_eq!(seq.literals().unwrap()[1].len(), 2);",
                "    assert_eq!(seq.literals().unwrap()[2].len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Some(ref mut lits) = self.literals at line 1490 is true\n",
        "precondition: m in lits.iter_mut() at line 1491 is false\n"
      ],
      "input_infer": "let len be a positive integer range from 0 to maximum data length of literals, where literals is a non-empty vector of Literal instances with varying byte lengths\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(&[b\"abc\", b\"defg\", b\"hijkl\"]);",
                "    seq.keep_first_bytes(2);",
                "}"
              ],
              "oracle": [
                "    let mut seq = Seq::new(&[b\"abc\", b\"defg\", b\"hijkl\"]);",
                "    seq.keep_first_bytes(2);",
                "    let expected_seq = Seq::new(&[b\"ab\", b\"de\", b\"hi\"]);",
                "    assert_eq!(expected_seq.literals(), seq.literals());",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    assert!(seq.is_finite());"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(&[b\"abc\", b\"defg\", b\"hijkl\"]);",
                "    seq.keep_first_bytes(2);",
                "    let mut seq = Seq::new(&[b\"abc\", b\"defg\", b\"hijkl\"]);",
                "    seq.keep_first_bytes(2);",
                "    let expected_seq = Seq::new(&[b\"ab\", b\"de\", b\"hi\"]);",
                "    assert_eq!(expected_seq.literals(), seq.literals());",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    assert!(seq.is_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(&[b\"x\", b\"yzabc\", b\"foo\", b\"quuxxx\"]);",
                "    seq.keep_first_bytes(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().unwrap().len(), 4);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"x\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"yz\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"foo\");",
                "    assert_eq!(seq.literals().unwrap()[3].as_bytes(), b\"quu\");"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(&[b\"x\", b\"yzabc\", b\"foo\", b\"quuxxx\"]);",
                "    seq.keep_first_bytes(3);",
                "    assert_eq!(seq.literals().unwrap().len(), 4);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"x\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"yz\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"foo\");",
                "    assert_eq!(seq.literals().unwrap()[3].as_bytes(), b\"quu\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(&[b\"short\", b\"exact\", b\"match\"]);",
                "    seq.keep_first_bytes(6);",
                "}"
              ],
              "oracle": [
                "    assert!(seq.literals().is_some());",
                "    assert_eq!(seq.literals().unwrap().len(), 3);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"short\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"exact\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"match\");",
                "    ",
                "    seq.keep_first_bytes(6);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"short\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    ",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"exact\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"match\");"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(&[b\"short\", b\"exact\", b\"match\"]);",
                "    seq.keep_first_bytes(6);",
                "    assert!(seq.literals().is_some());",
                "    assert_eq!(seq.literals().unwrap().len(), 3);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"short\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"exact\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"match\");",
                "    ",
                "    seq.keep_first_bytes(6);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"short\");",
                "    assert!(seq.literals().unwrap()[1].is_inexact());",
                "    assert!(seq.literals().unwrap()[2].is_inexact());",
                "    ",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"exact\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"match\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(&[b\"nonempty\", b\"literals\", b\"here\"]);",
                "    seq.keep_first_bytes(0);",
                "}"
              ],
              "oracle": [
                "    let mut seq = Seq::new(&[b\"nonempty\", b\"literals\", b\"here\"]);",
                "    seq.keep_first_bytes(0);",
                "    assert_eq!(seq.literals().unwrap().len(), 3);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"nonempty\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"literals\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"here\");"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(&[b\"nonempty\", b\"literals\", b\"here\"]);",
                "    seq.keep_first_bytes(0);",
                "    let mut seq = Seq::new(&[b\"nonempty\", b\"literals\", b\"here\"]);",
                "    seq.keep_first_bytes(0);",
                "    assert_eq!(seq.literals().unwrap().len(), 3);",
                "    assert_eq!(seq.literals().unwrap()[0].as_bytes(), b\"nonempty\");",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), b\"literals\");",
                "    assert_eq!(seq.literals().unwrap()[2].as_bytes(), b\"here\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seq = Seq::new(&[b\"\", b\"nonempty\"]);",
                "    seq.keep_first_bytes(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(seq.literals().is_some(), true);",
                "    assert_eq!(seq.literals().unwrap().len(), 2);",
                "    assert_eq!(seq.literals().unwrap()[0].len(), 0);",
                "    assert_eq!(seq.literals().unwrap()[1].len(), 1);",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), &[b'n']);",
                "    assert_eq!(seq.literals().unwrap()[0].is_exact(), true);",
                "    assert_eq!(seq.literals().unwrap()[1].is_exact(), false);"
              ],
              "code": [
                "{",
                "    let mut seq = Seq::new(&[b\"\", b\"nonempty\"]);",
                "    seq.keep_first_bytes(1);",
                "    assert_eq!(seq.literals().is_some(), true);",
                "    assert_eq!(seq.literals().unwrap().len(), 2);",
                "    assert_eq!(seq.literals().unwrap()[0].len(), 0);",
                "    assert_eq!(seq.literals().unwrap()[1].len(), 1);",
                "    assert_eq!(seq.literals().unwrap()[1].as_bytes(), &[b'n']);",
                "    assert_eq!(seq.literals().unwrap()[0].is_exact(), true);",
                "    assert_eq!(seq.literals().unwrap()[1].is_exact(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}