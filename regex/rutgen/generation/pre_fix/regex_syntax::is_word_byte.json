{
  "name": "regex_syntax::is_word_byte",
  "mod_info": {
    "name": "",
    "loc": "regex-syntax/src/lib.rs:1:1:431:2"
  },
  "visible": true,
  "loc": "regex-syntax/src/lib.rs:376:1:381:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: c matches b'_' at line 378 is true\n",
        "precondition: c matches b'0'..=b'9' at line 378 is true\n",
        "precondition: c matches b'0'..=b'9' at line 378 is true\n",
        "precondition: c matches b'a'..=b'z' or b'A'..=b'Z' or b'_' or b'0'..=b'9' at line 377 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "c = [b'_', b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9', b'a', b'b', b'c', b'd', b'e', b'f', b'g', b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o', b'p', b'q', b'r', b's', b't', b'u', b'v', b'w', b'x', b'y', b'z', b'A', b'B', b'C', b'D', b'E', b'F', b'G', b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O', b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W', b'X', b'Y', b'Z']\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'_');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'0');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'0');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'0');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'0');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'1');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'9');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'1');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'9');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'2');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_') == true);",
                "    assert!(is_word_byte(b'0') == true);",
                "    assert!(is_word_byte(b'5') == true);",
                "    assert!(is_word_byte(b'a') == true);",
                "    assert!(is_word_byte(b'z') == true);",
                "    assert!(is_word_byte(b'A') == true);",
                "    assert!(is_word_byte(b'Z') == true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'2');",
                "    assert!(is_word_byte(b'_') == true);",
                "    assert!(is_word_byte(b'0') == true);",
                "    assert!(is_word_byte(b'5') == true);",
                "    assert!(is_word_byte(b'a') == true);",
                "    assert!(is_word_byte(b'z') == true);",
                "    assert!(is_word_byte(b'A') == true);",
                "    assert!(is_word_byte(b'Z') == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'3');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'9');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'3');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'9');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'4');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'__');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'4');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'__');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'5');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'5');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'6');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'6');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'7');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'9');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'7');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'9');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'8');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'8');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'9');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'0');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'9');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'0');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'a');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'b');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'b');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'c');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'c');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'd');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'd');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'e');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'e');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'f');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'f');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'g');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'g');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'h');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'h');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'i');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'i');",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'j');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'3'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'j');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'3'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'k');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'k');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'l');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'l');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'm');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'm');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'n');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'n');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'o');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'o');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'p');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_') == true);",
                "    assert!(is_word_byte(b'0') == true);",
                "    assert!(is_word_byte(b'9') == true);",
                "    assert!(is_word_byte(b'a') == true);",
                "    assert!(is_word_byte(b'z') == true);",
                "    assert!(is_word_byte(b'A') == true);",
                "    assert!(is_word_byte(b'Z') == true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'p');",
                "    assert!(is_word_byte(b'_') == true);",
                "    assert!(is_word_byte(b'0') == true);",
                "    assert!(is_word_byte(b'9') == true);",
                "    assert!(is_word_byte(b'a') == true);",
                "    assert!(is_word_byte(b'z') == true);",
                "    assert!(is_word_byte(b'A') == true);",
                "    assert!(is_word_byte(b'Z') == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'q');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'q');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'r');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'r');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b's');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b's');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b't');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b't');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'u');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'u');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'v');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'v');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'w');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'w');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'x');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'x');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'y');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'y');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'z');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'0');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'z');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'A');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'0');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'A');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'A');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'B');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'B');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'C');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'C');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'D');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'D');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'E');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'E');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'F');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'F');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'G');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'G');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'H');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'H');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'I');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'I');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'J');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'J');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'K');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'K');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'L');",
                "}"
              ],
              "oracle": [
                "    let result = is_word_byte(b'_'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'0'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'9'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'a'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'z'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'A'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z'); assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'L');",
                "    let result = is_word_byte(b'_'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'0'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'9'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'a'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'z'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'A'); assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z'); assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'M');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'M');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'N');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'N');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'O');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'O');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'P');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'P');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'Q');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'Q');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'_');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'5');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'a');",
                "    assert_eq!(result, true);",
                "    let result = is_word_byte(b'Z');",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'R');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_') == true);",
                "    assert!(is_word_byte(b'0') == true);",
                "    assert!(is_word_byte(b'9') == true);",
                "    assert!(is_word_byte(b'a') == true);",
                "    assert!(is_word_byte(b'z') == true);",
                "    assert!(is_word_byte(b'A') == true);",
                "    assert!(is_word_byte(b'Z') == true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'R');",
                "    assert!(is_word_byte(b'_') == true);",
                "    assert!(is_word_byte(b'0') == true);",
                "    assert!(is_word_byte(b'9') == true);",
                "    assert!(is_word_byte(b'a') == true);",
                "    assert!(is_word_byte(b'z') == true);",
                "    assert!(is_word_byte(b'A') == true);",
                "    assert!(is_word_byte(b'Z') == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'S');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'S');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'T');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'T');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'U');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'U');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'V');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'V');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'9'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'W');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'W');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'5'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'X');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'X');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'Y');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'Y');",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = is_word_byte(b'Z');",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'Z'));",
                "    assert!(is_word_byte(b'A'));"
              ],
              "code": [
                "{",
                "    let result = is_word_byte(b'Z');",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'0'));",
                "    assert!(is_word_byte(b'5'));",
                "    assert!(is_word_byte(b'a'));",
                "    assert!(is_word_byte(b'z'));",
                "    assert!(is_word_byte(b'Z'));",
                "    assert!(is_word_byte(b'A'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: c matches b'_' at line 378 is true\n",
        "precondition: c matches b'0'..=b'9' at line 378 is false\n",
        "precondition: c matches b'a'..=b'z' at line 378 is true\n",
        "precondition: c matches b'a'..=b'z' at line 378 is true\n",
        "precondition: c matches b'a'..=b'z' or b'A'..=b'Z' or b'_' or b'0'..=b'9' at line 377 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Test input conditions:  b'_' (underscore), b'a' to b'z' (lowercase letters), b'A' to b'Z' (uppercase letters)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = b'_';",
                "    is_word_byte(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'1'), false);",
                "    assert_eq!(is_word_byte(b'!'), false);"
              ],
              "code": [
                "{",
                "    let input = b'_';",
                "    is_word_byte(input);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'1'), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = b'a';",
                "    is_word_byte(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'B'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'@'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);"
              ],
              "code": [
                "{",
                "    let input = b'a';",
                "    is_word_byte(input);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'B'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'@'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = b'z';",
                "    is_word_byte(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'`'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "    assert_eq!(is_word_byte(b'-'), false);"
              ],
              "code": [
                "{",
                "    let input = b'z';",
                "    is_word_byte(input);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'`'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "    assert_eq!(is_word_byte(b'-'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = b'A';",
                "    is_word_byte(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), false);"
              ],
              "code": [
                "{",
                "    let input = b'A';",
                "    is_word_byte(input);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = b'Z';",
                "    is_word_byte(input);",
                "}"
              ],
              "oracle": [
                "    is_word_byte(b'Z') == true",
                "    is_word_byte(b'_') == true",
                "    is_word_byte(b'a') == true",
                "    is_word_byte(b'b') == true",
                "    is_word_byte(b'0') == false",
                "    is_word_byte(b'#') == false",
                "    is_word_byte(b' ') == false",
                "    is_word_byte(b'z') == true"
              ],
              "code": [
                "{",
                "    let input = b'Z';",
                "    is_word_byte(input);",
                "    is_word_byte(b'Z') == true",
                "    is_word_byte(b'_') == true",
                "    is_word_byte(b'a') == true",
                "    is_word_byte(b'b') == true",
                "    is_word_byte(b'0') == false",
                "    is_word_byte(b'#') == false",
                "    is_word_byte(b' ') == false",
                "    is_word_byte(b'z') == true",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 13,
      "prompt_conds": [
        "precondition: c matches b'_' at line 378 is true\n",
        "precondition: c matches b'0'..=b'9' at line 378 is false\n",
        "precondition: c matches b'a'..=b'z' at line 378 is false\n",
        "precondition: c matches b'A'..=b'Z' at line 378 is true\n",
        "precondition: c matches b'A'..=b'Z' at line 378 is true\n",
        "precondition: c matches b'a'..=b'z' or b'A'..=b'Z' or b'_' or b'0'..=b'9' at line 377 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Test input conditions or ranges: c = b'A', c = b'_', c = b'Z' for true; c = b'!', c = b'@', c = b'a' - 1, c = b'9' + 1 for false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'_';",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'a'), false);",
                "    assert_eq!(is_word_byte(b'9'), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'_';",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'a'), false);",
                "    assert_eq!(is_word_byte(b'9'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'A';",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), false);",
                "    assert_eq!(is_word_byte(b'z'), false);",
                "    assert_eq!(is_word_byte(b'1'), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'A';",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), false);",
                "    assert_eq!(is_word_byte(b'z'), false);",
                "    assert_eq!(is_word_byte(b'1'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'Z';",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'Z'), true);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'Z';",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let c: u8 = b'!';",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b' '), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'!';",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let c: u8 = b'@';",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'@'), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b' '), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'@';",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'@'), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let c: u8 = b'a' - 1;",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'a' - 1), false);",
                "    assert_eq!(is_word_byte(b'9' + 1), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'a' - 1;",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'a' - 1), false);",
                "    assert_eq!(is_word_byte(b'9' + 1), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let c: u8 = b'9' + 1;",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "    assert!(!is_word_byte(b'9'));"
              ],
              "code": [
                "{",
                "    let c: u8 = b'9' + 1;",
                "    is_word_byte(c);",
                "    assert!(is_word_byte(b'_'));",
                "    assert!(is_word_byte(b'A'));",
                "    assert!(is_word_byte(b'Z'));",
                "    assert!(!is_word_byte(b'9'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 15,
      "prompt_conds": [
        "precondition: c matches b'_' at line 378 is true\n",
        "precondition: c matches b'0'..=b'9' at line 378 is false\n",
        "precondition: c matches b'a'..=b'z' at line 378 is false\n",
        "precondition: c matches b'A'..=b'Z' at line 378 is false\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Test input conditions or ranges: c = any u8 value not equal to b'_' and not in the range of b'0'..=b'9' and not in the range of b'a'..=b'z' and not in the range of b'A'..=b'Z', including boundary cases like b'/', b'`', b'{', b'~'.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'/'; // not matching b'_'",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'/'), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'/'; // not matching b'_'",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'/'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'!'; // not in b'0'..=b'9'",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b '!'), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'!'; // not in b'0'..=b'9'",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b '!'), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'`'; // not in b'a'..=b'z'",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'`'), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "    assert_eq!(is_word_byte(b'\\n'), false);",
                "    assert_eq!(is_word_byte(b'.'), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'`'; // not in b'a'..=b'z'",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'_'), true);",
                "    assert_eq!(is_word_byte(b'0'), true);",
                "    assert_eq!(is_word_byte(b'9'), true);",
                "    assert_eq!(is_word_byte(b'a'), true);",
                "    assert_eq!(is_word_byte(b'z'), true);",
                "    assert_eq!(is_word_byte(b'A'), true);",
                "    assert_eq!(is_word_byte(b'Z'), true);",
                "    assert_eq!(is_word_byte(b'`'), false);",
                "    assert_eq!(is_word_byte(b'!'), false);",
                "    assert_eq!(is_word_byte(b' '), false);",
                "    assert_eq!(is_word_byte(b'\\n'), false);",
                "    assert_eq!(is_word_byte(b'.'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'{'; // not in b'A'..=b'Z'",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert!(!is_word_byte(b'{'));"
              ],
              "code": [
                "{",
                "    let c: u8 = b'{'; // not in b'A'..=b'Z'",
                "    is_word_byte(c);",
                "    assert!(!is_word_byte(b'{'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c: u8 = b'~'; // not matching any in the specified ranges",
                "    is_word_byte(c);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(is_word_byte(b'~'), false);"
              ],
              "code": [
                "{",
                "    let c: u8 = b'~'; // not matching any in the specified ranges",
                "    is_word_byte(c);",
                "    assert_eq!(is_word_byte(b'~'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}