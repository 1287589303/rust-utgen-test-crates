{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::clear",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:237:5:241:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "mut self must be a valid mutable reference to an instance of RangeTrie with at least one State currently in states, ensuring states is not empty; the states vector can contain a mix of various State types but must not exceed its allocated size to prevent panics in add_empty; check behavior when called on an already cleared RangeTrie.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range_trie = RangeTrie::new();",
                "    range_trie.insert(&[Utf8Range::from(0..=5), Utf8Range::from(10..=15)]);",
                "    range_trie.clear();",
                "}"
              ],
              "oracle": [
                "    assert!(range_trie.free.len() > 0);",
                "    assert_eq!(range_trie.states.len(), 2);",
                "    assert!(range_trie.states[0].transitions.is_empty());",
                "    assert!(range_trie.states[1].transitions.is_empty());",
                "    assert_eq!(range_trie.iter_ranges.borrow().len(), 0);",
                "    assert_eq!(range_trie.iter_stack.borrow().len(), 0);",
                "    assert_eq!(range_trie.dupe_stack.len(), 0);",
                "    assert_eq!(range_trie.insert_stack.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut range_trie = RangeTrie::new();",
                "    range_trie.insert(&[Utf8Range::from(0..=5), Utf8Range::from(10..=15)]);",
                "    range_trie.clear();",
                "    assert!(range_trie.free.len() > 0);",
                "    assert_eq!(range_trie.states.len(), 2);",
                "    assert!(range_trie.states[0].transitions.is_empty());",
                "    assert!(range_trie.states[1].transitions.is_empty());",
                "    assert_eq!(range_trie.iter_ranges.borrow().len(), 0);",
                "    assert_eq!(range_trie.iter_stack.borrow().len(), 0);",
                "    assert_eq!(range_trie.dupe_stack.len(), 0);",
                "    assert_eq!(range_trie.insert_stack.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range_trie = RangeTrie::new();",
                "    range_trie.insert(&[Utf8Range::from(0..=5)]);",
                "    range_trie.clear();",
                "    range_trie.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range_trie.states.len(), 2); // Expect two states: final and root after two clears",
                "    assert!(range_trie.free.is_empty()); // Expect free list to be empty after two clears",
                "    assert_eq!(range_trie.states[0].transitions.len(), 0); // Expect final state to have no transitions",
                "    assert_eq!(range_trie.states[1].transitions.len(), 0); // Expect root state to have no transitions",
                "    assert!(range_trie.iter_ranges.borrow().is_empty()); // Expect iter_ranges to be empty after clears",
                "    assert!(range_trie.iter_stack.borrow().is_empty()); // Expect iter_stack to be empty after clears",
                "    assert!(range_trie.dupe_stack.is_empty()); // Expect dupe_stack to be empty after clears",
                "    assert!(range_trie.insert_stack.is_empty()); // Expect insert_stack to be empty after clears"
              ],
              "code": [
                "{",
                "    let mut range_trie = RangeTrie::new();",
                "    range_trie.insert(&[Utf8Range::from(0..=5)]);",
                "    range_trie.clear();",
                "    range_trie.clear();",
                "    assert_eq!(range_trie.states.len(), 2); // Expect two states: final and root after two clears",
                "    assert!(range_trie.free.is_empty()); // Expect free list to be empty after two clears",
                "    assert_eq!(range_trie.states[0].transitions.len(), 0); // Expect final state to have no transitions",
                "    assert_eq!(range_trie.states[1].transitions.len(), 0); // Expect root state to have no transitions",
                "    assert!(range_trie.iter_ranges.borrow().is_empty()); // Expect iter_ranges to be empty after clears",
                "    assert!(range_trie.iter_stack.borrow().is_empty()); // Expect iter_stack to be empty after clears",
                "    assert!(range_trie.dupe_stack.is_empty()); // Expect dupe_stack to be empty after clears",
                "    assert!(range_trie.insert_stack.is_empty()); // Expect insert_stack to be empty after clears",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range_trie = RangeTrie::new();",
                "    range_trie.states.push(State::ByteRange { trans: Transition::new(0..=5) });",
                "    range_trie.states.push(State::Sparse { transitions: vec![] });",
                "    range_trie.clear();",
                "}"
              ],
              "oracle": [
                "    assert!(range_trie.free.len() > 0);",
                "    assert_eq!(range_trie.states.len(), 2);",
                "    assert!(matches!(range_trie.states[0], State::Empty { .. }));",
                "    assert!(matches!(range_trie.states[1], State::Empty { .. }));",
                "    assert!(range_trie.states[0].transitions.is_empty());",
                "    assert!(range_trie.states[1].transitions.is_empty());",
                "    assert_eq!(range_trie.free.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut range_trie = RangeTrie::new();",
                "    range_trie.states.push(State::ByteRange { trans: Transition::new(0..=5) });",
                "    range_trie.states.push(State::Sparse { transitions: vec![] });",
                "    range_trie.clear();",
                "    assert!(range_trie.free.len() > 0);",
                "    assert_eq!(range_trie.states.len(), 2);",
                "    assert!(matches!(range_trie.states[0], State::Empty { .. }));",
                "    assert!(matches!(range_trie.states[1], State::Empty { .. }));",
                "    assert!(range_trie.states[0].transitions.is_empty());",
                "    assert!(range_trie.states[1].transitions.is_empty());",
                "    assert_eq!(range_trie.free.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}