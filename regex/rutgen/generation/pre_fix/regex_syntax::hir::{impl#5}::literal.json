{
  "name": "regex_syntax::hir::{impl#5}::literal",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:342:5:351:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: bytes.is_empty() at line 344 is true\n"
      ],
      "input_infer": "test input conditions: input `lit` must be an empty type convertible to `Box<[u8]>`, such as `&[]`, `Vec<u8>::new()`, or an empty string `\"\"`\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::literal(&[]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::literal(&[]).kind, HirKind::Empty);"
              ],
              "code": [
                "{",
                "    let result = Hir::literal(&[]);",
                "    assert_eq!(Hir::literal(&[]).kind, HirKind::Empty);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::literal(Vec::<u8>::new());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind(), &HirKind::Empty);"
              ],
              "code": [
                "{",
                "    let result = Hir::literal(Vec::<u8>::new());",
                "    assert_eq!(result.kind(), &HirKind::Empty);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Hir::literal(\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Hir::literal(\"\").kind, HirKind::Empty);",
                "    assert!(Hir::literal(\"\").properties().is_utf8());",
                "    assert_eq!(Hir::literal(\"\").properties().minimum_len, None);",
                "    assert_eq!(Hir::literal(\"\").properties().maximum_len, None);"
              ],
              "code": [
                "{",
                "    let result = Hir::literal(\"\");",
                "    assert_eq!(Hir::literal(\"\").kind, HirKind::Empty);",
                "    assert!(Hir::literal(\"\").properties().is_utf8());",
                "    assert_eq!(Hir::literal(\"\").properties().minimum_len, None);",
                "    assert_eq!(Hir::literal(\"\").properties().maximum_len, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: bytes.is_empty() at line 344 is false\n",
        "expected return value/type: Hir { kind: HirKind::Literal(lit), props }\n"
      ],
      "input_infer": "non-empty byte arrays of varying lengths (1 to 4 bytes for valid UTF-8, including boundary cases like [0x00], [0xFF], and multi-byte sequences)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Box::from([0x00]); // Single byte",
                "    let result = Hir::literal(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0x00]))));",
                "    assert!(result.props.utf8);",
                "    assert_eq!(result.props.minimum_len, Some(1));",
                "    assert_eq!(result.props.maximum_len, Some(1));"
              ],
              "code": [
                "{",
                "    let input = Box::from([0x00]); // Single byte",
                "    let result = Hir::literal(input);",
                "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0x00]))));",
                "    assert!(result.props.utf8);",
                "    assert_eq!(result.props.minimum_len, Some(1));",
                "    assert_eq!(result.props.maximum_len, Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Box::from([0xE2, 0x98, 0x83]); // Multi-byte UTF-8 for '☃'",
                "    let result = Hir::literal(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xE2, 0x98, 0x83]))));",
                "    assert!(result.props.is_utf8());",
                "    assert_ne!(result.props.minimum_len, None);",
                "    assert_eq!(result.props.minimum_len.unwrap(), 3);",
                "    assert_eq!(result.props.maximum_len.unwrap(), 3);"
              ],
              "code": [
                "{",
                "    let input = Box::from([0xE2, 0x98, 0x83]); // Multi-byte UTF-8 for '☃'",
                "    let result = Hir::literal(input);",
                "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xE2, 0x98, 0x83]))));",
                "    assert!(result.props.is_utf8());",
                "    assert_ne!(result.props.minimum_len, None);",
                "    assert_eq!(result.props.minimum_len.unwrap(), 3);",
                "    assert_eq!(result.props.maximum_len.unwrap(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Box::from([0x01]); // Minimum non-empty byte array",
                "    let result = Hir::literal(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(HirKind::Literal(Literal(Box::from([0x01]))), result.kind);",
                "    assert!(result.props.is_utf8());",
                "    assert!(result.props.minimum_len == Some(1));",
                "    assert!(result.props.maximum_len == Some(1));"
              ],
              "code": [
                "{",
                "    let input = Box::from([0x01]); // Minimum non-empty byte array",
                "    let result = Hir::literal(input);",
                "    assert_eq!(HirKind::Literal(Literal(Box::from([0x01]))), result.kind);",
                "    assert!(result.props.is_utf8());",
                "    assert!(result.props.minimum_len == Some(1));",
                "    assert!(result.props.maximum_len == Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Box::from([0xFF]); // Single byte at upper boundary",
                "    let result = Hir::literal(input);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result.kind, HirKind::Literal(_)));",
                "    assert_eq!(result.props.0.minimum_len, Some(1));",
                "    assert_eq!(result.props.0.maximum_len, Some(1));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.literal, true);",
                "    assert_eq!(result.props.0.alternation_literal, true);"
              ],
              "code": [
                "{",
                "    let input = Box::from([0xFF]); // Single byte at upper boundary",
                "    let result = Hir::literal(input);",
                "    assert!(matches!(result.kind, HirKind::Literal(_)));",
                "    assert_eq!(result.props.0.minimum_len, Some(1));",
                "    assert_eq!(result.props.0.maximum_len, Some(1));",
                "    assert!(result.props.0.utf8);",
                "    assert_eq!(result.props.0.literal, true);",
                "    assert_eq!(result.props.0.alternation_literal, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = Box::from([0xC3, 0xA9]); // Multi-byte UTF-8 for 'é'",
                "    let result = Hir::literal(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xC3, 0xA9]))));",
                "    assert!(result.props.utf8);"
              ],
              "code": [
                "{",
                "    let input = Box::from([0xC3, 0xA9]); // Multi-byte UTF-8 for 'é'",
                "    let result = Hir::literal(input);",
                "    assert_eq!(result.kind, HirKind::Literal(Literal(Box::from([0xC3, 0xA9]))));",
                "    assert!(result.props.utf8);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}