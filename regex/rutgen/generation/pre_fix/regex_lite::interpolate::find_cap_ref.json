{
  "name": "regex_lite::interpolate::find_cap_ref",
  "mod_info": {
    "name": "interpolate",
    "loc": "regex-lite/src/lib.rs:879:1:879:17"
  },
  "visible": false,
  "loc": "regex-lite/src/interpolate.rs:213:1:243:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: rep.len() <= 1 at line 216 is true, with bound rep.len() == 1\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "rep.len() == 1, rep[0] != b'$'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"a\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"a\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"@\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\"@\";",
                "    let expected: Option<CaptureRef> = None;",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"@\";",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\"@\";",
                "    let expected: Option<CaptureRef> = None;",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\" \";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\" \";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\" \";",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\" \";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: rep.len() <= 1 at line 216 is false\n",
        "precondition: rep[0] != b'$' at line 216 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "replacement: [b'a'], [b'$'], [b'{}'], [b'$1'], [b'$0abc'], [b'$abc{}'], [b'$abc{def}'], [b'$abc{']\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'a'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'a'];",
                "    find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = &[b'$'];",
                "    assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$'];",
                "    find_cap_ref(replacement);",
                "    let replacement: &[u8] = &[b'$'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
                "    find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'1'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'1'];",
                "    find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'0', b'a', b'b', b'c'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(&[b'$', b'0', b'a', b'b', b'c']), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'0', b'a', b'b', b'c'];",
                "    find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(&[b'$', b'0', b'a', b'b', b'c']), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'}'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(&[b'a', b'b', b'c', b'{', b'}']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c']), None);",
                "    assert_eq!(find_cap_ref(&[b'$']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'1', b'2', b'3']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'{']), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'}'];",
                "    find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(&[b'a', b'b', b'c', b'{', b'}']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c']), None);",
                "    assert_eq!(find_cap_ref(&[b'$']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'1', b'2', b'3']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'{']), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'd', b'e', b'f', b'}'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(&[b'a']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'a']), None);",
                "    assert_eq!(find_cap_ref(&[b'$']), None);",
                "    assert_eq!(find_cap_ref(&[b'b', b'$', b'a']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c', b'}']), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{', b'd', b'e', b'f', b'}'];",
                "    find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(&[b'a']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'a']), None);",
                "    assert_eq!(find_cap_ref(&[b'$']), None);",
                "    assert_eq!(find_cap_ref(&[b'b', b'$', b'a']), None);",
                "    assert_eq!(find_cap_ref(&[b'$', b'a', b'b', b'c', b'}']), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{'];",
                "    find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = &[b'a', b'b', b'c', b'{'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3', b'{' ];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'}'];",
                "    assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'{'];",
                "    find_cap_ref(replacement);",
                "    let replacement: &[u8] = &[b'a', b'b', b'c', b'{'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3', b'{' ];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = &[b'$', b'a', b'b', b'c', b'}'];",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: rep.len() <= 1 at line 216 is false\n",
        "precondition: rep[0] != b'$' at line 216 is false\n",
        "precondition: rep[i] == b'{' at line 220 is false\n"
      ],
      "input_infer": "replacement: byte arrays starting with '$', longer than 1 byte, and ending with valid ASCII letters or valid braced capture name (e.g., \"$1\", \"${name}\", \"$abc\", \"$2d\", \"$[a-zA-Z0-9]\")\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$1\";",
                "    let _ = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    let replacement: &[u8] = b\"$name\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    let replacement: &[u8] = b\"${name}\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
                "    let replacement: &[u8] = b\"${\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = b\"$\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = b\"\";",
                "    assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$1\";",
                "    let _ = find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    let replacement: &[u8] = b\"$name\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    let replacement: &[u8] = b\"${name}\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
                "    let replacement: &[u8] = b\"${\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = b\"$\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    let replacement: &[u8] = b\"\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$name\";",
                "    let _ = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${index}\"), Some(CaptureRef { cap: Ref::Named(\"index\"), end: 8 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"\"), None);",
                "    assert_eq!(find_cap_ref(b\"abc\"), None);",
                "    assert_eq!(find_cap_ref(b\"$$name\"), None);",
                "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$name\";",
                "    let _ = find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${index}\"), Some(CaptureRef { cap: Ref::Named(\"index\"), end: 8 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"\"), None);",
                "    assert_eq!(find_cap_ref(b\"abc\"), None);",
                "    assert_eq!(find_cap_ref(b\"$$name\"), None);",
                "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${name}\";",
                "    let _ = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$0\"), Some(CaptureRef { cap: Ref::Number(0), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${1}\"), Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"${name} extra text\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"$!\"), None);",
                "    assert_eq!(find_cap_ref(b\"$Invalid!\"), None);",
                "    assert_eq!(find_cap_ref(b\"${\"), None);",
                "    assert_eq!(find_cap_ref(b\"$}\"), None);",
                "    assert_eq!(find_cap_ref(b\"Test\"), None);",
                "    assert_eq!(find_cap_ref(b\"\"), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${name}\";",
                "    let _ = find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$0\"), Some(CaptureRef { cap: Ref::Number(0), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${1}\"), Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"${name} extra text\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$name\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"$!\"), None);",
                "    assert_eq!(find_cap_ref(b\"$Invalid!\"), None);",
                "    assert_eq!(find_cap_ref(b\"${\"), None);",
                "    assert_eq!(find_cap_ref(b\"$}\"), None);",
                "    assert_eq!(find_cap_ref(b\"Test\"), None);",
                "    assert_eq!(find_cap_ref(b\"\"), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${123}\";",
                "    let _ = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\"${123}\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
                "    ",
                "    let replacement: &[u8] = b\"$name\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = b\"$\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    ",
                "    let replacement: &[u8] = b\"${}\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    ",
                "    let replacement: &[u8] = b\"$1\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = b\"$name$other\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = b\"$$\";",
                "    assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${123}\";",
                "    let _ = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\"${123}\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
                "    ",
                "    let replacement: &[u8] = b\"$name\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = b\"$\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    ",
                "    let replacement: &[u8] = b\"${}\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "    ",
                "    let replacement: &[u8] = b\"$1\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = b\"$name$other\";",
                "    assert_eq!(find_cap_ref(replacement), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = b\"$$\";",
                "    assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$abc\";",
                "    let _ = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"$A\"), Some(CaptureRef { cap: Ref::Named(\"A\"), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"abc\"), None);",
                "    assert_eq!(find_cap_ref(b\"${\"), None);",
                "    assert_eq!(find_cap_ref(b\"${\"), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$abc\";",
                "    let _ = find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"$A\"), Some(CaptureRef { cap: Ref::Named(\"A\"), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"abc\"), None);",
                "    assert_eq!(find_cap_ref(b\"${\"), None);",
                "    assert_eq!(find_cap_ref(b\"${\"), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$2d\";",
                "    let _ = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(b\"$2d\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
                "    assert_eq!(find_cap_ref(b\"$d\"), Some(CaptureRef { cap: Ref::Named(\"d\"), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"2d\"), None);",
                "    assert_eq!(find_cap_ref(b\"$2$\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);",
                "    assert_eq!(find_cap_ref(b\"$2{\" ), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$2d\";",
                "    let _ = find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(b\"$2d\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
                "    assert_eq!(find_cap_ref(b\"$d\"), Some(CaptureRef { cap: Ref::Named(\"d\"), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${name}\"), Some(CaptureRef { cap: Ref::Named(\"name\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"2d\"), None);",
                "    assert_eq!(find_cap_ref(b\"$2$\"), Some(CaptureRef { cap: Ref::Number(2), end: 3 }));",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);",
                "    assert_eq!(find_cap_ref(b\"$2{\" ), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$[a-zA-Z0-9]\";",
                "    let _ = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(find_cap_ref(b\"$[a-zA-Z0-9]\"), Some(CaptureRef { cap: Ref::Named(\"[a-zA-Z0-9]\"), end: 12 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);",
                "    assert_eq!(find_cap_ref(b\"${test}\"), Some(CaptureRef { cap: Ref::Named(\"test\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$12a\"), Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
                "    assert_eq!(find_cap_ref(b\"${abc123}\"), Some(CaptureRef { cap: Ref::Named(\"abc123\"), end: 10 }));",
                "    assert_eq!(find_cap_ref(b\"no dollar sign\"), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$[a-zA-Z0-9]\";",
                "    let _ = find_cap_ref(replacement);",
                "    assert_eq!(find_cap_ref(b\"$[a-zA-Z0-9]\"), Some(CaptureRef { cap: Ref::Named(\"[a-zA-Z0-9]\"), end: 12 }));",
                "    assert_eq!(find_cap_ref(b\"$\"), None);",
                "    assert_eq!(find_cap_ref(b\"$1\"), Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    assert_eq!(find_cap_ref(b\"${}\"), None);",
                "    assert_eq!(find_cap_ref(b\"${test}\"), Some(CaptureRef { cap: Ref::Named(\"test\"), end: 7 }));",
                "    assert_eq!(find_cap_ref(b\"$123\"), Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$abc\"), Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
                "    assert_eq!(find_cap_ref(b\"$12a\"), Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
                "    assert_eq!(find_cap_ref(b\"${abc123}\"), Some(CaptureRef { cap: Ref::Named(\"abc123\"), end: 10 }));",
                "    assert_eq!(find_cap_ref(b\"no dollar sign\"), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: rep.len() <= 1 at line 216 is false\n",
        "precondition: rep[0] != b'$' at line 216 is false\n",
        "precondition: rep[i] == b'{' at line 220 is true\n",
        "precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) at line 224 is true\n",
        "precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) at line 224 is false\n",
        "precondition: cap_end == i at line 227 is false\n",
        "precondition: cap.parse::<usize>() matches Ok(i) at line 237 is true\n",
        "precondition: cap.parse::<usize>() matches Ok(i) at line 237 is true\n",
        "expected return value/type: Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n"
      ],
      "input_infer": "replacement: [b'$', b'1'] \n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'1'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'a'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'1', b'2'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{' b'a', b'1'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b\"$\"];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'1'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'1'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'a'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a\"), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'1', b'2'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(12), end: 3 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{' b'a', b'1'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b\"$\"];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'1'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'a', b'b'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(0), end: 3 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{' , b'a', b'0', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a0\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 6 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'c', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"c\"), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'a'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'{', b'a', b'b'}];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'a', b'b'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(0), end: 3 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{' , b'a', b'0', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a0\"), end: 5 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'c', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 6 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'1', b'2', b'3'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'{', b'c', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"c\"), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = &[b'$', b'a'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'{', b'a', b'b'}];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}', b'c'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
                "    let replacement: &[u8] = &[b'$', b'2', b'c'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
                "    let replacement: &[u8] = &[b'$', b'1', b'b', b'c'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 3 }));",
                "    let replacement: &[u8] = &[b'$', b'{' ,b'a', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"12\"), end: 5 }));",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'_', b'b', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a_b\"), end: 6 }));",
                "    let replacement: &[u8] = &[b'$', b'{', b'c', b'@', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    let replacement: &[u8] = &[b'$', b'{' ];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}', b'c'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 5 }));",
                "    let replacement: &[u8] = &[b'$', b'2', b'c'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(2), end: 2 }));",
                "    let replacement: &[u8] = &[b'$', b'1', b'b', b'c'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 3 }));",
                "    let replacement: &[u8] = &[b'$', b'{' ,b'a', b'1', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a1\"), end: 5 }));",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'2', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"12\"), end: 5 }));",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'_', b'b', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"a_b\"), end: 6 }));",
                "    let replacement: &[u8] = &[b'$', b'{', b'c', b'@', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    let replacement: &[u8] = &[b'$', b'{' ];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = &[b'$']; // precondition: rep.len() <= 1 is false",
                "    let replacement: &[u8] = &[b'$', b'{' ]; // precondition: rep[0] != b'$' is false",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep[i] == b'{' is true",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is true",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is false",
                "    let replacement: &[u8] = &[b'$', b'a']; // precondition: cap_end == i is false",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is true",
                "    let replacement: &[u8] = &[b'$', b'{', b'sample', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is false",
                "    let expected = Some(CaptureRef { cap: Ref::Number(1), end: 4 }); // expected return value/type for valid capture number",
                "    let expected = Some(CaptureRef { cap: Ref::Named(\"sample\"), end: 7 }); // expected return value/type for valid named capture",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, expected); // validate result against expected value/type"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = &[b'$']; // precondition: rep.len() <= 1 is false",
                "    let replacement: &[u8] = &[b'$', b'{' ]; // precondition: rep[0] != b'$' is false",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep[i] == b'{' is true",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is true",
                "    let replacement: &[u8] = &[b'$', b'{', b'a', b'b', b'}']; // precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) is false",
                "    let replacement: &[u8] = &[b'$', b'a']; // precondition: cap_end == i is false",
                "    let replacement: &[u8] = &[b'$', b'{', b'1', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is true",
                "    let replacement: &[u8] = &[b'$', b'{', b'sample', b'}']; // precondition: cap.parse::<usize>() matches Ok(i) is false",
                "    let expected = Some(CaptureRef { cap: Ref::Number(1), end: 4 }); // expected return value/type for valid capture number",
                "    let expected = Some(CaptureRef { cap: Ref::Named(\"sample\"), end: 7 }); // expected return value/type for valid named capture",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, expected); // validate result against expected value/type",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: rep.len() <= 1 at line 216 is false\n",
        "precondition: rep[0] != b'$' at line 216 is false\n",
        "precondition: rep[i] == b'{' at line 220 is true\n",
        "precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) at line 224 is false\n",
        "precondition: cap_end == i at line 227 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "replacement input as: [b'$'] or [b'${'] or [b'${}'] or any other byte array with length <= 1 or starting with b'$' followed by a character not valid for capture group reference\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c',b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'''];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'1',b'2',b'3',b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'0',b'1',b'2',b'{'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[];",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'a',b'b',b'c',b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'''];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'1',b'2',b'3',b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{',b'0',b'1',b'2',b'{'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','a','b','c','}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','1','2','3','}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$',b'1'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','a','b','3','}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','1','2','3'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = &[b'$'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','a','b','c','}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','1','2','3','}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$',b'1'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','a','b','3','}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = &[b'$','{','1','2','3'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = &[b'$', b'{']; assert_eq!(find_cap_ref(replacement), None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{'];",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = &[b'$', b'{']; assert_eq!(find_cap_ref(replacement), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = &[b'$', b'{', b'}'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'A'];",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = &[b'$', b'A'];",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: rep.len() <= 1 at line 216 is false\n",
        "precondition: rep[0] != b'$' at line 216 is false\n",
        "precondition: rep[i] == b'{' at line 220 is true\n",
        "precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) at line 224 is false\n",
        "precondition: cap_end == i at line 227 is false\n",
        "precondition: cap.parse::<usize>() matches Err(_) at line 237 is true\n",
        "expected return value/type: Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n"
      ],
      "input_infer": "$${ValidName}\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$ValidName\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 10 }));",
                "    ",
                "    let replacement_braced: &[u8] = b\"${ValidName}\";",
                "    let result_braced = find_cap_ref(replacement_braced);",
                "    assert_eq!(result_braced, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 11 }));",
                "    ",
                "    let replacement_invalid: &[u8] = b\"$123Invalid\";",
                "    let result_invalid = find_cap_ref(replacement_invalid);",
                "    assert_eq!(result_invalid, Some(CaptureRef { cap: Ref::Number(123), end: 12 }));",
                "    ",
                "    let replacement_empty: &[u8] = b\"$\";",
                "    let result_empty = find_cap_ref(replacement_empty);",
                "    assert_eq!(result_empty, None);",
                "    ",
                "    let replacement_no_capture: &[u8] = b\"ValidName\";",
                "    let result_no_capture = find_cap_ref(replacement_no_capture);",
                "    assert_eq!(result_no_capture, None);",
                "    ",
                "    let replacement_invalid_braced: &[u8] = b\"${InvalidName\";",
                "    let result_invalid_braced = find_cap_ref(replacement_invalid_braced);",
                "    assert_eq!(result_invalid_braced, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$ValidName\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 10 }));",
                "    ",
                "    let replacement_braced: &[u8] = b\"${ValidName}\";",
                "    let result_braced = find_cap_ref(replacement_braced);",
                "    assert_eq!(result_braced, Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 11 }));",
                "    ",
                "    let replacement_invalid: &[u8] = b\"$123Invalid\";",
                "    let result_invalid = find_cap_ref(replacement_invalid);",
                "    assert_eq!(result_invalid, Some(CaptureRef { cap: Ref::Number(123), end: 12 }));",
                "    ",
                "    let replacement_empty: &[u8] = b\"$\";",
                "    let result_empty = find_cap_ref(replacement_empty);",
                "    assert_eq!(result_empty, None);",
                "    ",
                "    let replacement_no_capture: &[u8] = b\"ValidName\";",
                "    let result_no_capture = find_cap_ref(replacement_no_capture);",
                "    assert_eq!(result_no_capture, None);",
                "    ",
                "    let replacement_invalid_braced: &[u8] = b\"${InvalidName\";",
                "    let result_invalid_braced = find_cap_ref(replacement_invalid_braced);",
                "    assert_eq!(result_invalid_braced, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${ValidName}\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\"${ValidName}\";",
                "    let expected = Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 12 });",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${ValidName}\";",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\"${ValidName}\";",
                "    let expected = Some(CaptureRef { cap: Ref::Named(\"ValidName\"), end: 12 });",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$123\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\"$123\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result.is_some(), true);",
                "    if let Some(capture_ref) = result {",
                "    assert_eq!(capture_ref.cap, Ref::Number(123));",
                "    assert_eq!(capture_ref.end, 4);",
                "    }"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$123\";",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\"$123\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result.is_some(), true);",
                "    if let Some(capture_ref) = result {",
                "    assert_eq!(capture_ref.cap, Ref::Number(123));",
                "    assert_eq!(capture_ref.end, 4);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$Invalid@Name\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\"$Invalid@Name\";",
                "    let expected = Some(CaptureRef {",
                "    cap: Ref::Named(\"Invalid@Name\"),",
                "    end: 14,",
                "    });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$Invalid@Name\";",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\"$Invalid@Name\";",
                "    let expected = Some(CaptureRef {",
                "    cap: Ref::Named(\"Invalid@Name\"),",
                "    end: 14,",
                "    });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"$\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\"$1\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = b\"${name}\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
                "    ",
                "    let replacement: &[u8] = b\"$abc\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = b\"$123\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = b\"$${not_a_capture}\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"not_a_capture\"), end: 16 }));",
                "    ",
                "    let replacement: &[u8] = b\"${\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = b\"$invalid\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = b\"$\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"$\";",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\"$1\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 2 }));",
                "    ",
                "    let replacement: &[u8] = b\"${name}\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"name\"), end: 6 }));",
                "    ",
                "    let replacement: &[u8] = b\"$abc\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"abc\"), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = b\"$123\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 4 }));",
                "    ",
                "    let replacement: &[u8] = b\"$${not_a_capture}\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"not_a_capture\"), end: 16 }));",
                "    ",
                "    let replacement: &[u8] = b\"${\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = b\"$invalid\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "    ",
                "    let replacement: &[u8] = b\"$\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: rep.len() <= 1 at line 216 is false\n",
        "precondition: rep[0] != b'$' at line 216 is false\n",
        "precondition: rep[i] == b'{' at line 220 is true\n",
        "precondition: rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) at line 224 is false\n",
        "precondition: cap_end == i at line 227 is false\n",
        "precondition: cap.parse::<usize>() matches Ok(i) at line 237 is true\n",
        "precondition: cap.parse::<usize>() matches Ok(i) at line 237 is true\n",
        "expected return value/type: Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n"
      ],
      "input_infer": "Test input conditions or ranges: replacement array with length greater than 1, first element must be '$', second element must be '{', followed by valid ASCII digits only, and no special characters or spaces before closing '}'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${123}\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().cap, Ref::Number(123));",
                "    assert_eq!(result.unwrap().end, 5);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${123}\";",
                "    let result = find_cap_ref(replacement);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().cap, Ref::Number(123));",
                "    assert_eq!(result.unwrap().end, 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${4567}\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let replacement: &[u8] = b\"${4567}\";",
                "    let expected = Some(CaptureRef { cap: Ref::Number(4567), end: 6 });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${4567}\";",
                "    let result = find_cap_ref(replacement);",
                "    let replacement: &[u8] = b\"${4567}\";",
                "    let expected = Some(CaptureRef { cap: Ref::Number(4567), end: 6 });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${0}\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(CaptureRef {",
                "    cap: Ref::Number(0),",
                "    end: 4,",
                "    }));"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${0}\";",
                "    let result = find_cap_ref(replacement);",
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(CaptureRef {",
                "    cap: Ref::Number(0),",
                "    end: 4,",
                "    }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${9}\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_some(), true);",
                "    assert_eq!(result.unwrap().cap, Ref::Number(9));",
                "    assert_eq!(result.unwrap().end, 4);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${9}\";",
                "    let result = find_cap_ref(replacement);",
                "    assert_eq!(result.is_some(), true);",
                "    assert_eq!(result.unwrap().cap, Ref::Number(9));",
                "    assert_eq!(result.unwrap().end, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let replacement: &[u8] = b\"${42}\";",
                "    let result = find_cap_ref(replacement);",
                "}"
              ],
              "oracle": [
                "    let expected = Some(CaptureRef { cap: Ref::Number(42), end: 5 });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let replacement: &[u8] = b\"${42}\";",
                "    let result = find_cap_ref(replacement);",
                "    let expected = Some(CaptureRef { cap: Ref::Number(42), end: 5 });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}