{
  "name": "regex_automata::util::memchr::inner::memchr2",
  "mod_info": {
    "name": "util::memchr::inner",
    "loc": "regex-automata/src/util/memchr.rs:10:1:50:2"
  },
  "visible": true,
  "loc": "regex-automata/src/util/memchr.rs:17:5:19:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: n1 and n2 are distinct values between 0 and 255 (inclusive), haystack can be an empty array, a single-element array containing either n1 or n2, or multi-element arrays that include both n1 and n2 at various positions.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[]), None);"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[1];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[4, 5]), None);",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[0, 1, 2]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[2, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(255, 2, &[1, 2, 255]), Some(2));",
                "    assert_eq!(memchr2(1, 255, &[255, 0, 1]), Some(2));",
                "    assert_eq!(memchr2(0, 255, &[0, 1]), Some(0));"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[1];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[4, 5]), None);",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[0, 1, 2]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[2, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(255, 2, &[1, 2, 255]), Some(2));",
                "    assert_eq!(memchr2(1, 255, &[255, 0, 1]), Some(2));",
                "    assert_eq!(memchr2(0, 255, &[0, 1]), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[2];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 3]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 2]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1, 1]), Some(0));"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[2];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 3]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 2]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1, 1]), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[1, 3, 4];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[1, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 3, 4]), None);",
                "    assert_eq!(memchr2(1, 2, &[2, 1, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 1, 4]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 2]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(255, 254, &[254, 255, 0]), Some(0));",
                "    assert_eq!(memchr2(0, 0, &[0, 0, 0]), Some(0));",
                "    assert_eq!(memchr2(3, 4, &[2, 2, 2]), None);",
                "    assert_eq!(memchr2(5, 6, &[5, 7, 6]), Some(0));"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[1, 3, 4];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[1, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 3, 4]), None);",
                "    assert_eq!(memchr2(1, 2, &[2, 1, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 1, 4]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 2]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(255, 254, &[254, 255, 0]), Some(0));",
                "    assert_eq!(memchr2(0, 0, &[0, 0, 0]), Some(0));",
                "    assert_eq!(memchr2(3, 4, &[2, 2, 2]), None);",
                "    assert_eq!(memchr2(5, 6, &[5, 7, 6]), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 2, 4];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[3, 2, 4]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[3, 3, 4]), None);",
                "    assert_eq!(memchr2(1, 1, &[1, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(2, 2, &[1, 2, 2]), Some(1));",
                "    assert_eq!(memchr2(0, 255, &[1, 2, 3]), None);",
                "    assert_eq!(memchr2(255, 255, &[255, 255]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 2, 1]), Some(0));",
                "    assert_eq!(memchr2(2, 1, &[2, 2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[4, 5, 6]), None);"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 2, 4];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[3, 2, 4]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[3, 3, 4]), None);",
                "    assert_eq!(memchr2(1, 1, &[1, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(2, 2, &[1, 2, 2]), Some(1));",
                "    assert_eq!(memchr2(0, 255, &[1, 2, 3]), None);",
                "    assert_eq!(memchr2(255, 255, &[255, 255]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[1, 2, 1]), Some(0));",
                "    assert_eq!(memchr2(2, 1, &[2, 2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[4, 5, 6]), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 4, 1];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[3, 4, 1]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[1, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[4, 5, 6]), None);",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(0, 0, &[0, 0, 0]), Some(0));",
                "    assert_eq!(memchr2(255, 254, &[255, 254, 253]), Some(0));",
                "    assert_eq!(memchr2(255, 0, &[1, 2, 3]), None);",
                "    assert_eq!(memchr2(5, 6, &[7, 8, 9]), None);",
                "    assert_eq!(memchr2(5, 5, &[5, 5, 5]), Some(0));"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 4, 1];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 1]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[1, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[2, 3, 4]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[4, 5, 6]), None);",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(0, 0, &[0, 0, 0]), Some(0));",
                "    assert_eq!(memchr2(255, 254, &[255, 254, 253]), Some(0));",
                "    assert_eq!(memchr2(255, 0, &[1, 2, 3]), None);",
                "    assert_eq!(memchr2(5, 6, &[7, 8, 9]), None);",
                "    assert_eq!(memchr2(5, 5, &[5, 5, 5]), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 4, 2];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[3, 4, 2]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[1, 4, 2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 1]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 5]), None);",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1]), Some(0));",
                "    assert_eq!(memchr2(3, 4, &[3, 4, 5]), Some(0));"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 4, 2];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 2]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[1, 4, 2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 1]), Some(2));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 5]), None);",
                "    assert_eq!(memchr2(1, 2, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[2]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1]), Some(0));",
                "    assert_eq!(memchr2(3, 4, &[3, 4, 5]), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 1, 4, 2];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[3, 1, 4, 2]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 5]), None);",
                "    assert_eq!(memchr2(3, 4, &[3, 1, 4, 2]), Some(0));",
                "    assert_eq!(memchr2(2, 3, &[5, 6, 7]), None);",
                "    assert_eq!(memchr2(255, 0, &[0, 1, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(0, 1, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1, 1, 1]), Some(0));",
                "    assert_eq!(memchr2(2, 2, &[1, 2]), Some(1));",
                "    assert_eq!(memchr2(100, 200, &[100, 50, 200]), Some(0));"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[3, 1, 4, 2];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[3, 1, 4, 2]), Some(1));",
                "    assert_eq!(memchr2(1, 2, &[3, 4, 5]), None);",
                "    assert_eq!(memchr2(3, 4, &[3, 1, 4, 2]), Some(0));",
                "    assert_eq!(memchr2(2, 3, &[5, 6, 7]), None);",
                "    assert_eq!(memchr2(255, 0, &[0, 1, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(0, 1, &[]), None);",
                "    assert_eq!(memchr2(1, 2, &[2, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 2, &[1, 1, 1]), Some(0));",
                "    assert_eq!(memchr2(2, 2, &[1, 2]), Some(1));",
                "    assert_eq!(memchr2(100, 200, &[100, 50, 200]), Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[2, 3, 4, 1];",
                "    let _ = memchr2(n1, n2, haystack);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(memchr2(1, 2, &[2, 3, 4, 1]), Some(0));",
                "    assert_eq!(memchr2(2, 1, &[2, 3, 4, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 3, &[2, 3, 4, 1]), Some(3));",
                "    assert_eq!(memchr2(5, 6, &[2, 3, 4, 1]), None);",
                "    assert_eq!(memchr2(2, 3, &[]), None);",
                "    assert_eq!(memchr2(1, 1, &[1, 1, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(2, 2, &[1, 2, 2, 3]), Some(1));",
                "    assert_eq!(memchr2(0, 1, &[0, 1, 2]), Some(0));",
                "    assert_eq!(memchr2(3, 2, &[2, 3]), Some(1));",
                "    assert_eq!(memchr2(2, 2, &[1, 2, 2]), Some(1));"
              ],
              "code": [
                "{",
                "    let n1 = 1;",
                "    let n2 = 2;",
                "    let haystack: &[u8] = &[2, 3, 4, 1];",
                "    let _ = memchr2(n1, n2, haystack);",
                "    assert_eq!(memchr2(1, 2, &[2, 3, 4, 1]), Some(0));",
                "    assert_eq!(memchr2(2, 1, &[2, 3, 4, 1]), Some(0));",
                "    assert_eq!(memchr2(1, 3, &[2, 3, 4, 1]), Some(3));",
                "    assert_eq!(memchr2(5, 6, &[2, 3, 4, 1]), None);",
                "    assert_eq!(memchr2(2, 3, &[]), None);",
                "    assert_eq!(memchr2(1, 1, &[1, 1, 2, 3]), Some(0));",
                "    assert_eq!(memchr2(2, 2, &[1, 2, 2, 3]), Some(1));",
                "    assert_eq!(memchr2(0, 1, &[0, 1, 2]), Some(0));",
                "    assert_eq!(memchr2(3, 2, &[2, 3]), Some(1));",
                "    assert_eq!(memchr2(2, 2, &[1, 2, 2]), Some(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}