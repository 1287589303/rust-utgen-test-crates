{
  "name": "regex_automata::util::primitives::{impl#2}::from_ne_bytes",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:244:5:252:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: id > SmallIndex::MAX.as_u32() at line 248 is true\n",
        "expected return value/type: Err(SmallIndexError { attempted: u64::from(id) })\n"
      ],
      "input_infer": "bytes array where the decoded u32 value exceeds SmallIndex::MAX.as_u32(), e.g., [0xFF, 0xFF, 0xFF, 0xFF] for a 32-bit target\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFF];",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    match result {",
                "    Err(e) => assert_eq!(e.attempted, 0xFFFFFFFF);",
                "    _ => panic!(\"Expected an error\");",
                "    }"
              ],
              "code": [
                "{",
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFF];",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    assert!(result.is_err());",
                "    match result {",
                "    Err(e) => assert_eq!(e.attempted, 0xFFFFFFFF);",
                "    _ => panic!(\"Expected an error\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
                "    let expected = Err(SmallIndexError { attempted: 2147483648 }); // 2^31",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
                "    let expected = Err(SmallIndexError { attempted: 2147483648 }); // 2^31",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFE]; // Value exceeding max",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, 4294967294);",
                "    }"
              ],
              "code": [
                "{",
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFE]; // Value exceeding max",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, 4294967294);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD]; // Just above max value for a 32-bit signed integer",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD];",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, u64::from(0xFFFFFFFF));",
                "    }"
              ],
              "code": [
                "{",
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD]; // Just above max value for a 32-bit signed integer",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD];",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    assert!(result.is_err());",
                "    if let Err(e) = result {",
                "    assert_eq!(e.attempted, u64::from(0xFFFFFFFF));",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: id > SmallIndex::MAX.as_u32() at line 248 is false, with bound id == SmallIndex::MAX.as_u32()\n",
        "expected return value/type: Ok(SmallIndex::new_unchecked(id.as_usize()))\n"
      ],
      "input_infer": "bytes: [0, 0, 0, 0] to [0xFF, 0xFF, 0xFF, 0xFF] where the decoded u32 value is <= SmallIndex::MAX as u32\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes: [u8; 4] = [0, 0, 0, 0];",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    let bytes: [u8; 4] = SmallIndex::MAX.to_ne_bytes();",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::MAX);"
              ],
              "code": [
                "{",
                "    let bytes: [u8; 4] = [0, 0, 0, 0];",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "    let bytes: [u8; 4] = SmallIndex::MAX.to_ne_bytes();",
                "    let result = SmallIndex::from_ne_bytes(bytes);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_value = SmallIndex::MAX.as_u32();",
                "    let bytes: [u8; 4] = max_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(SmallIndex::from_ne_bytes([max_value.to_ne_bytes()]), Ok(SmallIndex::new_unchecked(max_value as usize)));"
              ],
              "code": [
                "{",
                "    let max_value = SmallIndex::MAX.as_u32();",
                "    let bytes: [u8; 4] = max_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "    assert_eq!(SmallIndex::from_ne_bytes([max_value.to_ne_bytes()]), Ok(SmallIndex::new_unchecked(max_value as usize)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mid_value = SmallIndex::MAX.as_u32() / 2;",
                "    let bytes: [u8; 4] = mid_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(SmallIndex::from_ne_bytes(bytes), Ok(SmallIndex::new_unchecked(mid_value)));",
                "    assert!(SmallIndex::from_ne_bytes(bytes).is_ok());",
                "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_u32(), mid_value);",
                "    assert!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize() <= SmallIndex::MAX.as_usize());",
                "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize(), mid_value as usize);"
              ],
              "code": [
                "{",
                "    let mid_value = SmallIndex::MAX.as_u32() / 2;",
                "    let bytes: [u8; 4] = mid_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "    assert_eq!(SmallIndex::from_ne_bytes(bytes), Ok(SmallIndex::new_unchecked(mid_value)));",
                "    assert!(SmallIndex::from_ne_bytes(bytes).is_ok());",
                "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_u32(), mid_value);",
                "    assert!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize() <= SmallIndex::MAX.as_usize());",
                "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize(), mid_value as usize);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let near_max_value = SmallIndex::MAX.as_u32() - 1;",
                "    let bytes: [u8; 4] = near_max_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize())));",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]), Err(SmallIndexError { attempted: 2147483648 }));",
                "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]).is_ok());",
                "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFE]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1)));"
              ],
              "code": [
                "{",
                "    let near_max_value = SmallIndex::MAX.as_u32() - 1;",
                "    let bytes: [u8; 4] = near_max_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize())));",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]), Err(SmallIndexError { attempted: 2147483648 }));",
                "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]).is_ok());",
                "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFE]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ranged_value = 123456;",
                "    let bytes: [u8; 4] = ranged_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_unwrap(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0x7F])), Ok(SmallIndex::new_unchecked(123456)));",
                "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]), Ok(SmallIndex::new_unchecked(0)));",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x01]), Ok(SmallIndex::new_unchecked(1)));",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x02]), Ok(SmallIndex::new_unchecked(2)));",
                "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x80]).is_ok());",
                "    assert!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]).is_err());",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(core::u32::MAX as usize)));",
                "    assert!(SmallIndex::from_ne_bytes_unchecked([0x00, 0x00, 0x00, 0xFF]).as_usize() == 255);",
                "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());"
              ],
              "code": [
                "{",
                "    let ranged_value = 123456;",
                "    let bytes: [u8; 4] = ranged_value.to_ne_bytes();",
                "    let _ = SmallIndex::from_ne_bytes(bytes);",
                "    assert_eq!(_unwrap(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0x7F])), Ok(SmallIndex::new_unchecked(123456)));",
                "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]), Ok(SmallIndex::new_unchecked(0)));",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x01]), Ok(SmallIndex::new_unchecked(1)));",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x02]), Ok(SmallIndex::new_unchecked(2)));",
                "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x80]).is_ok());",
                "    assert!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]).is_err());",
                "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(core::u32::MAX as usize)));",
                "    assert!(SmallIndex::from_ne_bytes_unchecked([0x00, 0x00, 0x00, 0xFF]).as_usize() == 255);",
                "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}