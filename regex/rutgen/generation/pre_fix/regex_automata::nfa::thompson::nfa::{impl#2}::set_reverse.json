{
  "name": "regex_automata::nfa::thompson::nfa::{impl#2}::set_reverse",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1409:5:1411:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions or ranges: boolean values for `yes` parameter (e.g., true, false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut inner = Inner::default();",
                "    inner.set_reverse(true);",
                "}"
              ],
              "oracle": [
                "    assert!(inner.reverse == true);",
                "    inner.set_reverse(false);",
                "    assert!(inner.reverse == false);",
                "    inner.set_reverse(true);",
                "    assert_eq!(inner.reverse, true);"
              ],
              "code": [
                "{",
                "    let mut inner = Inner::default();",
                "    inner.set_reverse(true);",
                "    assert!(inner.reverse == true);",
                "    inner.set_reverse(false);",
                "    assert!(inner.reverse == false);",
                "    inner.set_reverse(true);",
                "    assert_eq!(inner.reverse, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut inner = Inner::default();",
                "    inner.set_reverse(false);",
                "}"
              ],
              "oracle": [
                "    assert!(!inner.reverse);",
                "    inner.set_reverse(true);",
                "    assert!(inner.reverse);",
                "    inner.set_reverse(false);",
                "    assert!(!inner.reverse);",
                "    inner.set_reverse(true);",
                "    assert!(inner.reverse);",
                "    inner.set_reverse(false);",
                "    assert!(!inner.reverse);"
              ],
              "code": [
                "{",
                "    let mut inner = Inner::default();",
                "    inner.set_reverse(false);",
                "    assert!(!inner.reverse);",
                "    inner.set_reverse(true);",
                "    assert!(inner.reverse);",
                "    inner.set_reverse(false);",
                "    assert!(!inner.reverse);",
                "    inner.set_reverse(true);",
                "    assert!(inner.reverse);",
                "    inner.set_reverse(false);",
                "    assert!(!inner.reverse);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}