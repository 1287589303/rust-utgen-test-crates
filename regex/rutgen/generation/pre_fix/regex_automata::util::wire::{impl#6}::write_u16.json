{
  "name": "regex_automata::util::wire::{impl#6}::write_u16",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:883:5:885:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "u16 values in the range 0 to 65535 and a destination buffer dst with at least 2 bytes for output\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(0, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, [0, 0]);",
                "    LE::write_u16(1, &mut buffer);",
                "    assert_eq!(buffer, [1, 0]);",
                "    LE::write_u16(255, &mut buffer);",
                "    assert_eq!(buffer, [255, 0]);",
                "    LE::write_u16(256, &mut buffer);",
                "    assert_eq!(buffer, [0, 1]);",
                "    LE::write_u16(65535, &mut buffer);",
                "    assert_eq!(buffer, [255, 255]);"
              ],
              "code": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(0, &mut buffer);",
                "    assert_eq!(buffer, [0, 0]);",
                "    LE::write_u16(1, &mut buffer);",
                "    assert_eq!(buffer, [1, 0]);",
                "    LE::write_u16(255, &mut buffer);",
                "    assert_eq!(buffer, [255, 0]);",
                "    LE::write_u16(256, &mut buffer);",
                "    assert_eq!(buffer, [0, 1]);",
                "    LE::write_u16(65535, &mut buffer);",
                "    assert_eq!(buffer, [255, 255]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(65535, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, [255, 255]);",
                "    assert_eq!(buffer.len(), 2);",
                "    assert!(buffer.iter().all(|&x| x <= 255));",
                "    LE::write_u16(1, &mut buffer);",
                "    assert_eq!(buffer, [1, 0]);",
                "    LE::write_u16(0, &mut buffer);",
                "    assert_eq!(buffer, [0, 0]);",
                "    LE::write_u16(32768, &mut buffer);",
                "    assert_eq!(buffer, [0, 128]);"
              ],
              "code": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(65535, &mut buffer);",
                "    assert_eq!(buffer, [255, 255]);",
                "    assert_eq!(buffer.len(), 2);",
                "    assert!(buffer.iter().all(|&x| x <= 255));",
                "    LE::write_u16(1, &mut buffer);",
                "    assert_eq!(buffer, [1, 0]);",
                "    LE::write_u16(0, &mut buffer);",
                "    assert_eq!(buffer, [0, 0]);",
                "    LE::write_u16(32768, &mut buffer);",
                "    assert_eq!(buffer, [0, 128]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(32768, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, [0, 128]);",
                "    assert_eq!(buffer.len(), 2);",
                "    assert_ne!(buffer[0], buffer[1]);",
                "    assert!(buffer.iter().all(|&x| x <= 255));",
                "    assert!(buffer.iter().all(|&x| x >= 0));"
              ],
              "code": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(32768, &mut buffer);",
                "    assert_eq!(buffer, [0, 128]);",
                "    assert_eq!(buffer.len(), 2);",
                "    assert_ne!(buffer[0], buffer[1]);",
                "    assert!(buffer.iter().all(|&x| x <= 255));",
                "    assert!(buffer.iter().all(|&x| x >= 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(1, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer[0], 1);",
                "    assert_eq!(buffer[1], 0);"
              ],
              "code": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(1, &mut buffer);",
                "    assert_eq!(buffer[0], 1);",
                "    assert_eq!(buffer[1], 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(65534, &mut buffer);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer, [254, 255]);"
              ],
              "code": [
                "{",
                "    let mut buffer = [0u8; 2];",
                "    LE::write_u16(65534, &mut buffer);",
                "    assert_eq!(buffer, [254, 255]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}