{
  "name": "regex_lite::string::{impl#40}::size_limit",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2930:5:2933:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid size limits: 0 (minimum), 1 (minimum non-zero), maximum usize value (boundary), values like 50, 100, 1000 (arbitrary valid sizes), and 10000 (exceeding the default limit)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(0);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(0);",
                "    let result = builder.build();",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(0);",
                "    let _ = builder.build();",
                "    builder.size_limit(0);",
                "    let result = builder.build();",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(1);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(0);",
                "    assert!(builder.build().is_err());",
                "    builder.size_limit(100);",
                "    assert!(builder.build().is_ok());",
                "    builder.size_limit(50);",
                "    assert!(builder.build().is_err());",
                "    builder.size_limit(300);",
                "    assert!(builder.build().is_ok());",
                "    builder.size_limit(200);",
                "    builder.size_limit(0);",
                "    assert!(builder.build().is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(1);",
                "    let _ = builder.build();",
                "    builder.size_limit(0);",
                "    assert!(builder.build().is_err());",
                "    builder.size_limit(100);",
                "    assert!(builder.build().is_ok());",
                "    builder.size_limit(50);",
                "    assert!(builder.build().is_err());",
                "    builder.size_limit(300);",
                "    assert!(builder.build().is_ok());",
                "    builder.size_limit(200);",
                "    builder.size_limit(0);",
                "    assert!(builder.build().is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(50);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.size_limit(50), &mut builder);",
                "    assert_eq!(builder.size_limit(100), &mut builder);",
                "    assert!(builder.size_limit(0).build().is_err());",
                "    assert!(builder.size_limit(1).build().is_err());",
                "    assert!(builder.size_limit(200).build().is_ok());",
                "    assert!(builder.size_limit(150).build().is_ok());",
                "    assert!(builder.size_limit(250).build().is_ok());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(50);",
                "    let _ = builder.build();",
                "    assert_eq!(builder.size_limit(50), &mut builder);",
                "    assert_eq!(builder.size_limit(100), &mut builder);",
                "    assert!(builder.size_limit(0).build().is_err());",
                "    assert!(builder.size_limit(1).build().is_err());",
                "    assert!(builder.size_limit(200).build().is_ok());",
                "    assert!(builder.size_limit(150).build().is_ok());",
                "    assert!(builder.size_limit(250).build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(100);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(50); // should return &mut RegexBuilder",
                "    builder.size_limit(200); // should return &mut RegexBuilder",
                "    builder.size_limit(0);  // should return &mut RegexBuilder",
                "    builder.size_limit(usize::MAX); // should return &mut RegexBuilder",
                "    builder.size_limit(1000); // should return &mut RegexBuilder"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(100);",
                "    let _ = builder.build();",
                "    builder.size_limit(50); // should return &mut RegexBuilder",
                "    builder.size_limit(200); // should return &mut RegexBuilder",
                "    builder.size_limit(0);  // should return &mut RegexBuilder",
                "    builder.size_limit(usize::MAX); // should return &mut RegexBuilder",
                "    builder.size_limit(1000); // should return &mut RegexBuilder",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(1000);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(0);",
                "    builder.size_limit(100);",
                "    builder.size_limit(1000);",
                "    builder.size_limit(10000);",
                "    builder.size_limit(usize::MAX);",
                "    builder.size_limit(500);",
                "    builder.size_limit(256);",
                "    builder.size_limit(1024);",
                "    builder.size_limit(2048);",
                "    builder.size_limit(4096);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(1000);",
                "    let _ = builder.build();",
                "    builder.size_limit(0);",
                "    builder.size_limit(100);",
                "    builder.size_limit(1000);",
                "    builder.size_limit(10000);",
                "    builder.size_limit(usize::MAX);",
                "    builder.size_limit(500);",
                "    builder.size_limit(256);",
                "    builder.size_limit(1024);",
                "    builder.size_limit(2048);",
                "    builder.size_limit(4096);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(10000);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(0);",
                "    builder.size_limit(1);",
                "    builder.size_limit(100);",
                "    builder.size_limit(100000);",
                "    builder.size_limit(usize::MAX);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(10000);",
                "    let _ = builder.build();",
                "    builder.size_limit(0);",
                "    builder.size_limit(1);",
                "    builder.size_limit(100);",
                "    builder.size_limit(100000);",
                "    builder.size_limit(usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(std::usize::MAX);",
                "    let _ = builder.build();",
                "}"
              ],
              "oracle": [
                "    builder.size_limit(100).build().is_err();",
                "    builder.size_limit(500).build().is_ok();",
                "    builder.size_limit(0).build().is_err();",
                "    builder.size_limit(1000).build().is_ok();",
                "    builder.size_limit(std::usize::MIN).build().is_err();"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.size_limit(std::usize::MAX);",
                "    let _ = builder.build();",
                "    builder.size_limit(100).build().is_err();",
                "    builder.size_limit(500).build().is_ok();",
                "    builder.size_limit(0).build().is_err();",
                "    builder.size_limit(1000).build().is_ok();",
                "    builder.size_limit(std::usize::MIN).build().is_err();",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}