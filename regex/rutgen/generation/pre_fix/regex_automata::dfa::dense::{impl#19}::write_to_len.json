{
  "name": "regex_automata::dfa::dense::{impl#19}::write_to_len",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4124:5:4132:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.kind.write_to_len()\n        + self.start_map.write_to_len()\n        + size_of::<u32>() // stride\n        + size_of::<u32>() // # patterns\n        + size_of::<u32>() // universal unanchored start\n        + size_of::<u32>() // universal anchored start\n        + (self.table().len() * StateID::SIZE)\n"
      ],
      "input_infer": "kind: StartKind variants (Both, Unanchored, Anchored); start_map: valid length 256; stride: values from 0 to max usize; pattern_len: None or values from 0 to max usize; universal_start_unanchored and universal_start_anchored: None or valid StateID values; table: lengths varying from 0 to a maximum value of allocated StateID::SIZE instances\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 4;",
                "    let pattern_len: Option<usize> = Some(2);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table = vec![0; 12]; // 12 is an arbitrary number to represent StateID instances",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "}"
              ],
              "oracle": [
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride = 4;",
                "    let pattern_len = Some(2);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table = vec![0; 12];",
                "    let expected_length = kind.write_to_len() + start_map.write_to_len() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + (table.len() * StateID::SIZE);",
                "    assert_eq!(start_table.write_to_len(), expected_length);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 4;",
                "    let pattern_len: Option<usize> = Some(2);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table = vec![0; 12]; // 12 is an arbitrary number to represent StateID instances",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride = 4;",
                "    let pattern_len = Some(2);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table = vec![0; 12];",
                "    let expected_length = kind.write_to_len() + start_map.write_to_len() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + (table.len() * StateID::SIZE);",
                "    assert_eq!(start_table.write_to_len(), expected_length);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Unanchored;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 2;",
                "    let pattern_len: Option<usize> = Some(1);",
                "    let universal_start_unanchored: Option<StateID> = Some(StateID::default());",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table = vec![0; 8];",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(start_table.kind.write_to_len() + start_table.start_map.write_to_len() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + (start_table.table.len() * StateID::SIZE), expected_length);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Unanchored;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 2;",
                "    let pattern_len: Option<usize> = Some(1);",
                "    let universal_start_unanchored: Option<StateID> = Some(StateID::default());",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table = vec![0; 8];",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "    assert_eq!(start_table.kind.write_to_len() + start_table.start_map.write_to_len() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + size_of::<u32>() + (start_table.table.len() * StateID::SIZE), expected_length);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 1;",
                "    let pattern_len: Option<usize> = None;",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = Some(StateID::default());",
                "    let table = vec![0; 4];",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "}"
              ],
              "oracle": [
                "    let kind_len = StartKind::Anchored.write_to_len();",
                "    let start_map_len = start_map.write_to_len();",
                "    let expected_len = kind_len + start_map_len + size_of::<u32>() * 4 + (start_table.table().len() * StateID::SIZE);",
                "    assert_eq!(start_table.write_to_len(), expected_len);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Anchored;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 1;",
                "    let pattern_len: Option<usize> = None;",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = Some(StateID::default());",
                "    let table = vec![0; 4];",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "    let kind_len = StartKind::Anchored.write_to_len();",
                "    let start_map_len = start_map.write_to_len();",
                "    let expected_len = kind_len + start_map_len + size_of::<u32>() * 4 + (start_table.table().len() * StateID::SIZE);",
                "    assert_eq!(start_table.write_to_len(), expected_len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 0;",
                "    let pattern_len: Option<usize> = Some(0);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table: Vec<u32> = vec![];",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "}"
              ],
              "oracle": [
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 0;",
                "    let pattern_len: Option<usize> = Some(0);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table: Vec<u32> = vec![];",
                "    let expected_len = kind.write_to_len() + start_map.write_to_len() + size_of::<u32>() * 4 + (table.len() * StateID::SIZE);",
                "    assert_eq!(start_table.write_to_len(), expected_len);"
              ],
              "code": [
                "{",
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 0;",
                "    let pattern_len: Option<usize> = Some(0);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table: Vec<u32> = vec![];",
                "",
                "    let start_table = StartTable {",
                "        table: table,",
                "        kind: kind,",
                "        start_map: start_map,",
                "        stride: stride,",
                "        pattern_len: pattern_len,",
                "        universal_start_unanchored: universal_start_unanchored,",
                "        universal_start_anchored: universal_start_anchored,",
                "    };",
                "",
                "    start_table.write_to_len();",
                "    let kind = StartKind::Both;",
                "    let start_map = StartByteMap::new(&LookMatcher::default());",
                "    let stride: usize = 0;",
                "    let pattern_len: Option<usize> = Some(0);",
                "    let universal_start_unanchored: Option<StateID> = None;",
                "    let universal_start_anchored: Option<StateID> = None;",
                "    let table: Vec<u32> = vec![];",
                "    let expected_len = kind.write_to_len() + start_map.write_to_len() + size_of::<u32>() * 4 + (table.len() * StateID::SIZE);",
                "    assert_eq!(start_table.write_to_len(), expected_len);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}