{
  "name": "regex_automata::dfa::sparse::{impl#18}::next_at",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2312:5:2317:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "i must be within the range [0, (self.next.len() / StateID::SIZE) - 1] to access valid state transitions, ensuring that self.next has sufficient length of at least StateID::SIZE bytes for the given i.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 1,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0], // 1 StateID represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, StateID::from_ne_bytes_unchecked([0, 0, 0, 0]));"
              ],
              "code": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 1,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0], // 1 StateID represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(0);",
                "    assert_eq!(result, StateID::from_ne_bytes_unchecked([0, 0, 0, 0]));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 2,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0, 1, 0, 0, 0], // 2 StateIDs represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(1);",
                "}"
              ],
              "oracle": [
                "    let expected_result = StateID::from_ne_bytes_unchecked([1, 0, 0, 0]);",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 2,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0, 1, 0, 0, 0], // 2 StateIDs represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(1);",
                "    let expected_result = StateID::from_ne_bytes_unchecked([1, 0, 0, 0]);",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 1,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0], // 1 StateID represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(1); // Out of bounds",
                "}"
              ],
              "oracle": [
                "    let state = State { id: StateID::default(), is_match: false, ntrans: 1, input_ranges: &[], next: &[0, 0, 0, 0], pattern_ids: &[], accel: &[] };",
                "    let result = state.next_at(1);",
                "    assert_eq!(result, StateID::default());"
              ],
              "code": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 1,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0], // 1 StateID represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(1); // Out of bounds",
                "    let state = State { id: StateID::default(), is_match: false, ntrans: 1, input_ranges: &[], next: &[0, 0, 0, 0], pattern_ids: &[], accel: &[] };",
                "    let result = state.next_at(1);",
                "    assert_eq!(result, StateID::default());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 1,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0], // 1 StateID represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(usize::MAX); // Out of bounds",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| state.next_at(usize::MAX)).is_err());"
              ],
              "code": [
                "{",
                "    let state = State {",
                "        id: StateID::default(),",
                "        is_match: false,",
                "        ntrans: 1,",
                "        input_ranges: &[],",
                "        next: &[0, 0, 0, 0], // 1 StateID represented in bytes",
                "        pattern_ids: &[],",
                "        accel: &[],",
                "    };",
                "    let result = state.next_at(usize::MAX); // Out of bounds",
                "    assert!(std::panic::catch_unwind(|| state.next_at(usize::MAX)).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}