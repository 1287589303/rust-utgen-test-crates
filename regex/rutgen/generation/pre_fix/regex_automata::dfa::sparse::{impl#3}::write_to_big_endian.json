{
  "name": "regex_automata::dfa::sparse::{impl#3}::write_to_big_endian",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:722:5:727:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input slice `dst` should be a non-empty array of `u8` with a minimum size equal to or greater than the serialized size of the DFA (which must be calculated or constrained by the DFA properties), while ensuring the serialized DFA fits in the size of `dst`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[cfg(test)]",
            "fn test_write_to_big_endian_valid() {",
            "    let dfa = DFA {",
            "        tt: Transitions {",
            "            sparse: vec![0u8; 10],",
            "            classes: ByteClasses::default(),",
            "            state_len: 1,",
            "            pattern_len: 1,",
            "        },",
            "        st: StartTable {",
            "            table: vec![0u32; 8],",
            "            kind: StartKind::Both,",
            "            start_map: StartByteMap::default(),",
            "            stride: 1,",
            "            pattern_len: Some(1),",
            "            universal_start_unanchored: Some(0),",
            "            universal_start_anchored: Some(1),",
            "        },",
            "        special: Special {",
            "            max: 1,",
            "            quit_id: 2,",
            "            min_match: 3,",
            "            max_match: 4,",
            "            min_accel: 5,",
            "            max_accel: 6,",
            "            min_start: 7,",
            "            max_start: 8,",
            "        },",
            "        pre: None,",
            "        quitset: ByteSet::default(),",
            "        flags: Flags {",
            "            has_empty: false,",
            "            is_utf8: true,",
            "            is_always_start_anchored: false,",
            "        },",
            "    };",
            "    ",
            "    let mut buf = [0u8; 256]; // Sufficient size to store serialized DFA",
            "    let _ = dfa.write_to_big_endian(&mut buf);",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_write_to_big_endian_insufficient_space() {",
            "    let dfa = DFA {",
            "        tt: Transitions {",
            "            sparse: vec![0u8; 10],",
            "            classes: ByteClasses::default(),",
            "            state_len: 1,",
            "            pattern_len: 1,",
            "        },",
            "        st: StartTable {",
            "            table: vec![0u32; 8],",
            "            kind: StartKind::Both,",
            "            start_map: StartByteMap::default(),",
            "            stride: 1,",
            "            pattern_len: Some(1),",
            "            universal_start_unanchored: Some(0),",
            "            universal_start_anchored: Some(1),",
            "        },",
            "        special: Special {",
            "            max: 1,",
            "            quit_id: 2,",
            "            min_match: 3,",
            "            max_match: 4,",
            "            min_accel: 5,",
            "            max_accel: 6,",
            "            min_start: 7,",
            "            max_start: 8,",
            "        },",
            "        pre: None,",
            "        quitset: ByteSet::default(),",
            "        flags: Flags {",
            "            has_empty: false,",
            "            is_utf8: true,",
            "            is_always_start_anchored: false,",
            "        },",
            "    };",
            "    ",
            "    let mut buf = [0u8; 10]; // Insufficient size to store serialized DFA",
            "    let result = dfa.write_to_big_endian(&mut buf);",
            "    assert!(result.is_err());",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_write_to_big_endian_empty_buffer() {",
            "    let dfa = DFA {",
            "        tt: Transitions {",
            "            sparse: vec![0u8; 10],",
            "            classes: ByteClasses::default(),",
            "            state_len: 1,",
            "            pattern_len: 1,",
            "        },",
            "        st: StartTable {",
            "            table: vec![0u32; 8],",
            "            kind: StartKind::Both,",
            "            start_map: StartByteMap::default(),",
            "            stride: 1,",
            "            pattern_len: Some(1),",
            "            universal_start_unanchored: Some(0),",
            "            universal_start_anchored: Some(1),",
            "        },",
            "        special: Special {",
            "            max: 1,",
            "            quit_id: 2,",
            "            min_match: 3,",
            "            max_match: 4,",
            "            min_accel: 5,",
            "            max_accel: 6,",
            "            min_start: 7,",
            "            max_start: 8,",
            "        },",
            "        pre: None,",
            "        quitset: ByteSet::default(),",
            "        flags: Flags {",
            "            has_empty: false,",
            "            is_utf8: true,",
            "            is_always_start_anchored: false,",
            "        },",
            "    };",
            "    ",
            "    let mut buf: Vec<u8> = Vec::new(); // Empty buffer",
            "    let result = dfa.write_to_big_endian(&mut buf);",
            "    assert!(result.is_err());",
            "}"
          ],
          "chain_tests": []
        }
      ]
    }
  ]
}