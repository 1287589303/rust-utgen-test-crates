{
  "name": "regex_syntax::hir::{impl#27}::contains_anchor_lf",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2752:5:2754:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.contains(Look::StartLF) at line 2753 is true\n",
        "expected return value/type: self.contains(Look::StartLF) || self.contains(Look::EndLF)\n"
      ],
      "input_infer": "self.bits must include Look::StartLF (1 << 2) and may or may not include Look::EndLF (1 << 3), so valid input ranges are 0b00000100 to 0b00000111 (4 to 7 in decimal).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
                "    let _ = look_set.contains_anchor_lf();",
                "}"
              ],
              "oracle": [
                "    let look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
                "    assert!(look_set.contains(Look::StartLF)); // precondition is true",
                "    assert!(!look_set.contains(Look::EndLF)); // ensure EndLF is not present",
                "    assert_eq!(look_set.contains_anchor_lf(), true); // expected return value is true"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
                "    let _ = look_set.contains_anchor_lf();",
                "    let look_set = LookSet { bits: 0b00000100 }; // contains Look::StartLF",
                "    assert!(look_set.contains(Look::StartLF)); // precondition is true",
                "    assert!(!look_set.contains(Look::EndLF)); // ensure EndLF is not present",
                "    assert_eq!(look_set.contains_anchor_lf(), true); // expected return value is true",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet { bits: 0b00000110 }; // contains Look::StartLF and Look::EndLF",
                "    let _ = look_set.contains_anchor_lf();",
                "}"
              ],
              "oracle": [
                "    assert!(look_set.contains_anchor_lf());",
                "    assert_eq!(look_set.contains_anchor_lf(), true);",
                "    look_set.set_insert(Look::EndLF);",
                "    look_set.bits = 0b00000110;",
                "    assert!(look_set.contains(Look::StartLF));",
                "    assert!(look_set.contains(Look::EndLF));",
                "    assert!(look_set.contains_anchor_lf());",
                "    look_set.set_remove(Look::EndLF);",
                "    assert!(look_set.contains_anchor_lf());"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet { bits: 0b00000110 }; // contains Look::StartLF and Look::EndLF",
                "    let _ = look_set.contains_anchor_lf();",
                "    assert!(look_set.contains_anchor_lf());",
                "    assert_eq!(look_set.contains_anchor_lf(), true);",
                "    look_set.set_insert(Look::EndLF);",
                "    look_set.bits = 0b00000110;",
                "    assert!(look_set.contains(Look::StartLF));",
                "    assert!(look_set.contains(Look::EndLF));",
                "    assert!(look_set.contains_anchor_lf());",
                "    look_set.set_remove(Look::EndLF);",
                "    assert!(look_set.contains_anchor_lf());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet { bits: 0b00000000 }; // does not contain Look::StartLF, should not be valid",
                "    look_set.set_insert(Look::EndLF); // contains Look::EndLF",
                "    let _ = look_set.contains_anchor_lf();",
                "}"
              ],
              "oracle": [
                "    assert!(!look_set.contains_anchor_lf()); // expected false when Look::StartLF is not present",
                "    look_set.set_insert(Look::StartLF); // now contains Look::StartLF",
                "    assert!(look_set.contains_anchor_lf()); // expected true when Look::StartLF is present",
                "    look_set.set_remove(Look::EndLF); // removes Look::EndLF",
                "    assert!(look_set.contains_anchor_lf()); // expected true, still contains Look::StartLF",
                "    look_set.set_remove(Look::StartLF); // removes Look::StartLF",
                "    assert!(!look_set.contains_anchor_lf()); // expected false, neither Look::StartLF nor Look::EndLF are present",
                "    look_set.set_insert(Look::EndLF); // contains Look::EndLF again",
                "    assert!(look_set.contains_anchor_lf()); // expected true when Look::EndLF is now present"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet { bits: 0b00000000 }; // does not contain Look::StartLF, should not be valid",
                "    look_set.set_insert(Look::EndLF); // contains Look::EndLF",
                "    let _ = look_set.contains_anchor_lf();",
                "    assert!(!look_set.contains_anchor_lf()); // expected false when Look::StartLF is not present",
                "    look_set.set_insert(Look::StartLF); // now contains Look::StartLF",
                "    assert!(look_set.contains_anchor_lf()); // expected true when Look::StartLF is present",
                "    look_set.set_remove(Look::EndLF); // removes Look::EndLF",
                "    assert!(look_set.contains_anchor_lf()); // expected true, still contains Look::StartLF",
                "    look_set.set_remove(Look::StartLF); // removes Look::StartLF",
                "    assert!(!look_set.contains_anchor_lf()); // expected false, neither Look::StartLF nor Look::EndLF are present",
                "    look_set.set_insert(Look::EndLF); // contains Look::EndLF again",
                "    assert!(look_set.contains_anchor_lf()); // expected true when Look::EndLF is now present",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.contains(Look::StartLF) at line 2753 is false\n"
      ],
      "input_infer": "self.bits = 0b00000000000000000000000000000000 (no anchors set) and self.bits = 0b00000000000000000000000000000010 (only Look::EndLF set)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_set = LookSet::empty();",
                "    let result = look_set.contains_anchor_lf();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let look_set = LookSet::empty();",
                "    let result = look_set.contains_anchor_lf();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::EndLF);",
                "    let result = look_set.contains_anchor_lf();",
                "}"
              ],
              "oracle": [
                "    assert!(result == true);",
                "    assert!(look_set.contains(Look::EndLF) == true);",
                "    assert!(look_set.contains(Look::StartLF) == false);",
                "    assert!(look_set.contains_anchor() == false);"
              ],
              "code": [
                "{",
                "    let mut look_set = LookSet::empty();",
                "    look_set.set_insert(Look::EndLF);",
                "    let result = look_set.contains_anchor_lf();",
                "    assert!(result == true);",
                "    assert!(look_set.contains(Look::EndLF) == true);",
                "    assert!(look_set.contains(Look::StartLF) == false);",
                "    assert!(look_set.contains_anchor() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}