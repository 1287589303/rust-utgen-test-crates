{
  "name": "regex_lite::pikevm::{impl#7}::iter",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:892:5:894:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SparseSetIter(self.dense[..self.len()].iter())\n"
      ],
      "input_infer": "Test input conditions or ranges: capacity > 0, initial len = 0, len = capacity, id within valid StateID range (0 to capacity-1), empty state (len = 0), populated state (1 <= len <= capacity)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    let iter = sparse_set.iter();",
                "}"
              ],
              "oracle": [
                "    let capacity = 5;",
                "    let sparse_set = SparseSet::new(capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    let iter = sparse_set.iter();",
                "    assert!(iter.0.len() == 0);",
                "    assert!(iter.0.as_slice().is_empty());"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    let iter = sparse_set.iter();",
                "    let capacity = 5;",
                "    let sparse_set = SparseSet::new(capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    let iter = sparse_set.iter();",
                "    assert!(iter.0.len() == 0);",
                "    assert!(iter.0.as_slice().is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    let id: StateID = 0; ",
                "    sparse_set.insert(id);",
                "    let iter = sparse_set.iter();",
                "}"
              ],
              "oracle": [
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    let id: StateID = 0;",
                "    assert!(sparse_set.insert(id));",
                "    let iter = sparse_set.iter();",
                "    assert!(iter.0.clone().count() == 1);",
                "    assert!(sparse_set.contains(id));",
                "    assert!(sparse_set.len() == 1);",
                "    assert!(!sparse_set.is_empty());",
                "    assert_eq!(sparse_set.dense[0], id);"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    let id: StateID = 0; ",
                "    sparse_set.insert(id);",
                "    let iter = sparse_set.iter();",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    let id: StateID = 0;",
                "    assert!(sparse_set.insert(id));",
                "    let iter = sparse_set.iter();",
                "    assert!(iter.0.clone().count() == 1);",
                "    assert!(sparse_set.contains(id));",
                "    assert!(sparse_set.len() == 1);",
                "    assert!(!sparse_set.is_empty());",
                "    assert_eq!(sparse_set.dense[0], id);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    for id in 0..3 {",
                "        sparse_set.insert(id);",
                "    }",
                "    let iter = sparse_set.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.0.len(), 3);",
                "    assert_eq!(iter.0.collect::<Vec<_>>(), vec![0, 1, 2]);",
                "    assert!(sparse_set.len() == 3);",
                "    assert!(!sparse_set.is_empty());"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    for id in 0..3 {",
                "        sparse_set.insert(id);",
                "    }",
                "    let iter = sparse_set.iter();",
                "    assert_eq!(iter.0.len(), 3);",
                "    assert_eq!(iter.0.collect::<Vec<_>>(), vec![0, 1, 2]);",
                "    assert!(sparse_set.len() == 3);",
                "    assert!(!sparse_set.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    for id in 0..capacity {",
                "        sparse_set.insert(id);",
                "    }",
                "    let iter = sparse_set.iter();",
                "}"
              ],
              "oracle": [
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    for id in 0..capacity {",
                "    assert!(sparse_set.insert(id));",
                "    }",
                "    assert_eq!(sparse_set.len(), capacity);",
                "    let iter = sparse_set.iter();",
                "    let ids: Vec<StateID> = iter.collect();",
                "    assert_eq!(ids, (0..capacity).collect::<Vec<_>>());"
              ],
              "code": [
                "{",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    for id in 0..capacity {",
                "        sparse_set.insert(id);",
                "    }",
                "    let iter = sparse_set.iter();",
                "    let capacity = 5;",
                "    let mut sparse_set = SparseSet::new(capacity);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    assert!(sparse_set.is_empty());",
                "    for id in 0..capacity {",
                "    assert!(sparse_set.insert(id));",
                "    }",
                "    assert_eq!(sparse_set.len(), capacity);",
                "    let iter = sparse_set.iter();",
                "    let ids: Vec<StateID> = iter.collect();",
                "    assert_eq!(ids, (0..capacity).collect::<Vec<_>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}