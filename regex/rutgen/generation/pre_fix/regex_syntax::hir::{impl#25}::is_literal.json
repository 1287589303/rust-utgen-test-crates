{
  "name": "regex_syntax::hir::{impl#25}::is_literal",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2216:5:2218:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.literal\n"
      ],
      "input_infer": "self.0.literal must be tested with both true and false values; check combinations with different values of self.0.literal.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestProperties {",
                "        minimum_len: Option<usize>,",
                "        maximum_len: Option<usize>,",
                "        literal: bool,",
                "    }",
                "",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "",
                "    let result = props.is_literal();",
                "}"
              ],
              "oracle": [
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: false,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = false;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(1),",
                "    maximum_len: Some(1),",
                "    literal: true,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(1),",
                "    maximum_len: Some(5),",
                "    literal: false,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = false;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: true,",
                "    alternation_literal: true,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: true,",
                "    maximum_len: Some(0),",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: false,",
                "    maximum_len: Some(0),",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = false;",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    struct TestProperties {",
                "        minimum_len: Option<usize>,",
                "        maximum_len: Option<usize>,",
                "        literal: bool,",
                "    }",
                "",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: true,",
                "        alternation_literal: false,",
                "    }));",
                "",
                "    let result = props.is_literal();",
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: false,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = false;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(1),",
                "    maximum_len: Some(1),",
                "    literal: true,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    minimum_len: Some(1),",
                "    maximum_len: Some(5),",
                "    literal: false,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = false;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: true,",
                "    alternation_literal: true,",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: true,",
                "    maximum_len: Some(0),",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = true;",
                "    assert_eq!(result, expected);",
                "    ",
                "    let props = Properties(Box::new(PropertiesI {",
                "    literal: false,",
                "    maximum_len: Some(0),",
                "    ..Default::default()",
                "    }));",
                "    let result = props.is_literal();",
                "    let expected = false;",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestProperties {",
                "        minimum_len: Option<usize>,",
                "        maximum_len: Option<usize>,",
                "        literal: bool,",
                "    }",
                "",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "",
                "    let result = props.is_literal();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.is_literal(), false);",
                "    ",
                "    let props_literal_true = Properties(Box::new(PropertiesI {",
                "    literal: true,",
                "    ..Default::default()",
                "    }));",
                "    ",
                "    assert_eq!(props_literal_true.is_literal(), true);",
                "    ",
                "    let props_literal_false = Properties(Box::new(PropertiesI {",
                "    literal: false,",
                "    ..Default::default()",
                "    }));",
                "    ",
                "    assert_eq!(props_literal_false.is_literal(), false);"
              ],
              "code": [
                "{",
                "    struct TestProperties {",
                "        minimum_len: Option<usize>,",
                "        maximum_len: Option<usize>,",
                "        literal: bool,",
                "    }",
                "",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "",
                "    let result = props.is_literal();",
                "    assert_eq!(props.is_literal(), false);",
                "    ",
                "    let props_literal_true = Properties(Box::new(PropertiesI {",
                "    literal: true,",
                "    ..Default::default()",
                "    }));",
                "    ",
                "    assert_eq!(props_literal_true.is_literal(), true);",
                "    ",
                "    let props_literal_false = Properties(Box::new(PropertiesI {",
                "    literal: false,",
                "    ..Default::default()",
                "    }));",
                "    ",
                "    assert_eq!(props_literal_false.is_literal(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}