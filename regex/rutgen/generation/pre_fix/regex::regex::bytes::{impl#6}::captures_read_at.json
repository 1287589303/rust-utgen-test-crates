{
  "name": "regex::regex::bytes::{impl#6}::captures_read_at",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1235:5:1244:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "haystack: non-empty byte slice (e.g., `b\"example\"`), start: 0 to length of haystack (inclusive), locs: initialized CaptureLocations\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bexample\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, 0);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert!(locs.0.len() > 0);",
                "    assert_eq!(locs.0.get_match().map(|m| m.start()), Some(0));",
                "    assert_eq!(locs.0.get_match().map(|m| m.end()), Some(7));",
                "    assert!(re.captures_read_at(&mut locs, hay, 1).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 8).is_none());",
                "    assert_panics!(re.captures_read_at(&mut locs, hay, hay.len() + 1));"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bexample\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, 0);",
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert!(locs.0.len() > 0);",
                "    assert_eq!(locs.0.get_match().map(|m| m.start()), Some(0));",
                "    assert_eq!(locs.0.get_match().map(|m| m.end()), Some(7));",
                "    assert!(re.captures_read_at(&mut locs, hay, 1).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 8).is_none());",
                "    assert_panics!(re.captures_read_at(&mut locs, hay, hay.len() + 1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bexample\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, hay.len());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.captures_read_at(&mut locs, hay, hay.len()), None);",
                "    assert_panics!(re.captures_read_at(&mut locs, hay, hay.len() + 1));",
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert_eq!(re.captures_read_at(&mut locs, hay, 1), None);",
                "    assert!(re.captures_read_at(&mut locs, hay, 2).is_none());"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bexample\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, hay.len());",
                "    assert_eq!(re.captures_read_at(&mut locs, hay, hay.len()), None);",
                "    assert_panics!(re.captures_read_at(&mut locs, hay, hay.len() + 1));",
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert_eq!(re.captures_read_at(&mut locs, hay, 1), None);",
                "    assert!(re.captures_read_at(&mut locs, hay, 2).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bexam\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(re.captures_read_at(&mut locs, hay, 3), None);",
                "    assert_eq!(re.captures_read_at(&mut locs, hay, 0), Some(Match::new(hay, 1, 5)));",
                "    assert!(re.captures_read_at(&mut locs, hay, 4).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
                "    assert!(panic::catch_unwind(|| re.captures_read_at(&mut locs, hay, hay.len() + 1)).is_err());"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bexam\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, 3);",
                "    assert_eq!(re.captures_read_at(&mut locs, hay, 3), None);",
                "    assert_eq!(re.captures_read_at(&mut locs, hay, 0), Some(Match::new(hay, 1, 5)));",
                "    assert!(re.captures_read_at(&mut locs, hay, 4).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
                "    assert!(panic::catch_unwind(|| re.captures_read_at(&mut locs, hay, hay.len() + 1)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bexample\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, hay.len() + 1);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, 1).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, 2).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 3).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len() - 1).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len() - 2).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
                "    let empty_hay = b\"\";",
                "    assert!(re.captures_read_at(&mut locs, empty_hay, 0).is_none());",
                "    assert!(re.captures_read_at(&mut locs, empty_hay, 1).is_none());"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bexample\\b\").unwrap();",
                "    let hay = b\"example\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, hay.len() + 1);",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, 1).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, 2).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 3).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len() - 1).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len() - 2).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
                "    let empty_hay = b\"\";",
                "    assert!(re.captures_read_at(&mut locs, empty_hay, 0).is_none());",
                "    assert!(re.captures_read_at(&mut locs, empty_hay, 1).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = b\"eschew\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, 2);",
                "}"
              ],
              "oracle": [
                "    assert!(re.captures_read_at(&mut locs, hay, 2).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len() + 1).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 1).is_some());"
              ],
              "code": [
                "{",
                "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
                "    let hay = b\"eschew\";",
                "    let mut locs = CaptureLocations(captures::Captures::new());",
                "    let _ = re.captures_read_at(&mut locs, hay, 2);",
                "    assert!(re.captures_read_at(&mut locs, hay, 2).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 0).is_some());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len()).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, hay.len() + 1).is_none());",
                "    assert!(re.captures_read_at(&mut locs, hay, 1).is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}