{
  "name": "regex_syntax::utf8::{impl#9}::is_ascii",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/utf8.rs:426:5:428:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_valid() at line 427 is true\n",
        "expected return value/type: self.end <= 0x7f\n"
      ],
      "input_infer": "self.start in the range [0, 0x7f] and self.end in the range [self.start, 0x7f]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0, end: 127 };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0, end: 127 };",
                "    range.is_ascii();",
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 10, end: 50 };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 10, end: 50 };",
                "    range.is_ascii();",
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 60, end: 100 };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 60, end: 100 };",
                "    range.is_ascii();",
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0x7f, end: 0x7f };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0x7f, end: 0x7f };",
                "    range.is_ascii();",
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 1, end: 1 };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 1, end: 1 };",
                "    range.is_ascii();",
                "    assert!(range.is_valid());",
                "    assert!(range.end <= 0x7f);",
                "    assert_eq!(range.is_ascii(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_valid() at line 427 is false\n",
        "expected return value/type: self.is_valid() && self.end <= 0x7f\n"
      ],
      "input_infer": "self.start > self.end or self.end > 0x7f (where self.start and self.end are in the range of 0 to 0x10FFFF, covering invalid cases and values exceeding ASCII range)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 5, end: 1 };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(!range.is_valid());",
                "    assert_eq!(range.is_ascii(), false);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 5, end: 1 };",
                "    range.is_ascii();",
                "    assert!(!range.is_valid());",
                "    assert_eq!(range.is_ascii(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0x20, end: 0x80 };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.is_valid(), false);",
                "    assert_eq!(range.end, 0x80);",
                "    assert_eq!(range.is_ascii(), false);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0x20, end: 0x80 };",
                "    range.is_ascii();",
                "    assert_eq!(range.is_valid(), false);",
                "    assert_eq!(range.end, 0x80);",
                "    assert_eq!(range.is_ascii(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0x81, end: 0xFF };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.is_valid(), false);",
                "    assert_eq!(range.end, 0xFF);",
                "    assert_eq!(range.is_ascii(), false);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0x81, end: 0xFF };",
                "    range.is_ascii();",
                "    assert_eq!(range.is_valid(), false);",
                "    assert_eq!(range.end, 0xFF);",
                "    assert_eq!(range.is_ascii(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range = ScalarRange { start: 0x80, end: 0x10FFFF };",
                "    range.is_ascii();",
                "}"
              ],
              "oracle": [
                "    assert!(!range.is_valid());",
                "    assert_eq!(range.is_ascii(), false);"
              ],
              "code": [
                "{",
                "    let range = ScalarRange { start: 0x80, end: 0x10FFFF };",
                "    range.is_ascii();",
                "    assert!(!range.is_valid());",
                "    assert_eq!(range.is_ascii(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}