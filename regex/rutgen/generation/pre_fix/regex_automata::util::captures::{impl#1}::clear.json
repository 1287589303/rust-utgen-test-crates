{
  "name": "regex_automata::util::captures::{impl#1}::clear",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1071:5:1076:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: slot in self.slots.iter_mut() at line 1073 is true\n",
        "precondition: slot in self.slots.iter_mut() at line 1073 is false\n"
      ],
      "input_infer": "self.slots should be an empty vector, a vector with None values, and a vector with Some(NonMaxUsize) values while pid can be None or Some(PatternID)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: None,",
                "        slots: Vec::new(),",
                "    };",
                "    captures.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.pid, None);",
                "    assert!(captures.slots.is_empty());",
                "    ",
                "    let mut captures_with_slots = Captures {",
                "    group_info: GroupInfo::default(),",
                "    pid: Some(PatternID(SmallIndex::default())),",
                "    slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))],",
                "    };",
                "    captures_with_slots.clear();",
                "    assert_eq!(captures_with_slots.pid, None);",
                "    assert_eq!(captures_with_slots.slots, vec![None]);"
              ],
              "code": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: None,",
                "        slots: Vec::new(),",
                "    };",
                "    captures.clear();",
                "    assert_eq!(captures.pid, None);",
                "    assert!(captures.slots.is_empty());",
                "    ",
                "    let mut captures_with_slots = Captures {",
                "    group_info: GroupInfo::default(),",
                "    pid: Some(PatternID(SmallIndex::default())),",
                "    slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))],",
                "    };",
                "    captures_with_slots.clear();",
                "    assert_eq!(captures_with_slots.pid, None);",
                "    assert_eq!(captures_with_slots.slots, vec![None]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(1))),",
                "        slots: vec![None, None, None],",
                "    };",
                "    captures.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots, vec![None, None, None]);",
                "    assert!(!captures.is_match());",
                "    assert!(captures.slots().iter().all(|&s| s.is_none()));"
              ],
              "code": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(1))),",
                "        slots: vec![None, None, None],",
                "    };",
                "    captures.clear();",
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots, vec![None, None, None]);",
                "    assert!(!captures.is_match());",
                "    assert!(captures.slots().iter().all(|&s| s.is_none()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(2))),",
                "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))],",
                "    };",
                "    captures.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots, vec![None, None]);",
                "    assert!(!captures.is_match());"
              ],
              "code": [
                "{",
                "    let mut captures = Captures {",
                "        group_info: GroupInfo::default(),",
                "        pid: Some(PatternID(SmallIndex(2))),",
                "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))],",
                "    };",
                "    captures.clear();",
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots, vec![None, None]);",
                "    assert!(!captures.is_match());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: slot in self.slots.iter_mut() at line 1073 is false\n"
      ],
      "input_infer": "self.slots must be a Vec<Option<NonMaxUsize>> with at least one element, containing at least one Some(NonMaxUsize) value before invoking clear().\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "",
                "    captures.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots(), &[None]);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "",
                "    captures.clear();",
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots(), &[None]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![",
                "        Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())),",
                "        Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())),",
                "        None,",
                "    ];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "",
                "    captures.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots.len(), 3);",
                "    assert!(captures.slots()[0].is_none());",
                "    assert!(captures.slots()[1].is_none());",
                "    assert!(captures.slots()[2].is_none());"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![",
                "        Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())),",
                "        Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())),",
                "        None,",
                "    ];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "",
                "    captures.clear();",
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots.len(), 3);",
                "    assert!(captures.slots()[0].is_none());",
                "    assert!(captures.slots()[1].is_none());",
                "    assert!(captures.slots()[2].is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap()))];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "",
                "    captures.clear();",
                "}"
              ],
              "oracle": [
                "    assert!(captures.pid.is_none());",
                "    assert_eq!(captures.slots(), &[None]);"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap()))];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "",
                "    captures.clear();",
                "    assert!(captures.pid.is_none());",
                "    assert_eq!(captures.slots(), &[None]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), None];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "    ",
                "    captures.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots, vec![None, None]);",
                "    assert!(!captures.is_match());"
              ],
              "code": [
                "{",
                "    let group_info = GroupInfo::default();",
                "    let pattern_id = Some(PatternID(SmallIndex::default()));",
                "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), None];",
                "    let mut captures = Captures {",
                "        group_info,",
                "        pid: pattern_id,",
                "        slots,",
                "    };",
                "    ",
                "    captures.clear();",
                "    assert_eq!(captures.pid, None);",
                "    assert_eq!(captures.slots, vec![None, None]);",
                "    assert!(!captures.is_match());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}