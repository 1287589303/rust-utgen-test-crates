{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_look",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:813:5:819:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "next: valid StateID (0 to maximum StateID), look: valid Look variant (Start, End, ..., WordEndHalfUnicode)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(0).unwrap());",
                "    let look = Look::Start;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    assert!(builder.states.len() == 1);",
                "    assert!(matches!(builder.states[0], State::Look { look: Look::Start, next }));",
                "    assert!(builder.get_utf8() == false);",
                "    assert!(builder.get_reverse() == false);",
                "    assert!(builder.get_size_limit().is_none());",
                "    assert!(builder.memory_usage() > 0);",
                "    assert!(builder.memory_states > 0);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(0).unwrap());",
                "    let look = Look::Start;",
                "    let _ = builder.add_look(next, look);",
                "    assert!(builder.states.len() == 1);",
                "    assert!(matches!(builder.states[0], State::Look { look: Look::Start, next }));",
                "    assert!(builder.get_utf8() == false);",
                "    assert!(builder.get_reverse() == false);",
                "    assert!(builder.get_size_limit().is_none());",
                "    assert!(builder.memory_usage() > 0);",
                "    assert!(builder.memory_states > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(1).unwrap());",
                "    let look = Look::End;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::new();",
                "    let next_valid = StateID(SmallIndex::new(1).unwrap());",
                "    let look_valid = Look::End;",
                "    let result_valid = builder.add_look(next_valid, look_valid);",
                "    assert!(result_valid.is_ok());",
                "    ",
                "    let next_invalid = StateID(SmallIndex::new(usize::MAX).unwrap());",
                "    let look_invalid = Look::Start;",
                "    let result_invalid = builder.add_look(next_invalid, look_invalid);",
                "    assert!(result_invalid.is_err());",
                "    ",
                "    let mut builder_with_size_limit = Builder::new();",
                "    builder_with_size_limit.set_size_limit(Some(0)).unwrap();",
                "    let next_limited = StateID(SmallIndex::new(1).unwrap());",
                "    let look_limited = Look::WordAscii;",
                "    let result_limited = builder_with_size_limit.add_look(next_limited, look_limited);",
                "    assert!(result_limited.is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(1).unwrap());",
                "    let look = Look::End;",
                "    let _ = builder.add_look(next, look);",
                "    let mut builder = Builder::new();",
                "    let next_valid = StateID(SmallIndex::new(1).unwrap());",
                "    let look_valid = Look::End;",
                "    let result_valid = builder.add_look(next_valid, look_valid);",
                "    assert!(result_valid.is_ok());",
                "    ",
                "    let next_invalid = StateID(SmallIndex::new(usize::MAX).unwrap());",
                "    let look_invalid = Look::Start;",
                "    let result_invalid = builder.add_look(next_invalid, look_invalid);",
                "    assert!(result_invalid.is_err());",
                "    ",
                "    let mut builder_with_size_limit = Builder::new();",
                "    builder_with_size_limit.set_size_limit(Some(0)).unwrap();",
                "    let next_limited = StateID(SmallIndex::new(1).unwrap());",
                "    let look_limited = Look::WordAscii;",
                "    let result_limited = builder_with_size_limit.add_look(next_limited, look_limited);",
                "    assert!(result_limited.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(2).unwrap());",
                "    let look = Look::StartLF;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    builder = Builder::new();",
                "    next_zero = StateID(SmallIndex::new(0).unwrap());",
                "    look_start = Look::Start;",
                "    assert!(builder.add_look(next_zero, look_start).is_ok());",
                "    ",
                "    next_invalid = StateID(SmallIndex::new(usize::MAX).unwrap());",
                "    look_end = Look::End;",
                "    assert!(builder.add_look(next_invalid, look_end).is_err());",
                "    ",
                "    builder.set_size_limit(Some(1));",
                "    next_valid = StateID(SmallIndex::new(1).unwrap());",
                "    look_word_ascii = Look::WordAscii;",
                "    assert!(builder.add_look(next_valid, look_word_ascii).is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(2).unwrap());",
                "    let look = Look::StartLF;",
                "    let _ = builder.add_look(next, look);",
                "    builder = Builder::new();",
                "    next_zero = StateID(SmallIndex::new(0).unwrap());",
                "    look_start = Look::Start;",
                "    assert!(builder.add_look(next_zero, look_start).is_ok());",
                "    ",
                "    next_invalid = StateID(SmallIndex::new(usize::MAX).unwrap());",
                "    look_end = Look::End;",
                "    assert!(builder.add_look(next_invalid, look_end).is_err());",
                "    ",
                "    builder.set_size_limit(Some(1));",
                "    next_valid = StateID(SmallIndex::new(1).unwrap());",
                "    look_word_ascii = Look::WordAscii;",
                "    assert!(builder.add_look(next_valid, look_word_ascii).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(3).unwrap());",
                "    let look = Look::EndLF;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    assert!(builder.states.len() > 0);",
                "    assert!(builder.states.last().unwrap().is_look());",
                "    assert_eq!(builder.current_pattern_id(), PatternID(SmallIndex::new(0).unwrap()));",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::default());",
                "    assert_eq!(builder.get_utf8(), false);",
                "    assert_eq!(builder.memory_usage(), 0);",
                "    assert!(builder.get_size_limit().is_none());",
                "    assert!(builder.memory_states > 0);",
                "    assert!(builder.states.iter().all(|state| matches!(state, State::Look { .. })));"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(3).unwrap());",
                "    let look = Look::EndLF;",
                "    let _ = builder.add_look(next, look);",
                "    assert!(builder.states.len() > 0);",
                "    assert!(builder.states.last().unwrap().is_look());",
                "    assert_eq!(builder.current_pattern_id(), PatternID(SmallIndex::new(0).unwrap()));",
                "    assert_eq!(builder.get_look_matcher().lineterm, DebugByte::default());",
                "    assert_eq!(builder.get_utf8(), false);",
                "    assert_eq!(builder.memory_usage(), 0);",
                "    assert!(builder.get_size_limit().is_none());",
                "    assert!(builder.memory_states > 0);",
                "    assert!(builder.states.iter().all(|state| matches!(state, State::Look { .. })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(4).unwrap());",
                "    let look = Look::WordAscii;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.states.len(), 1);",
                "    assert!(builder.memory_states > 0);",
                "    assert_eq!(builder.get_utf8(), false);",
                "    assert_eq!(builder.get_reverse(), false);",
                "    assert_eq!(builder.get_size_limit(), None);",
                "    assert!(builder.captures.is_empty());",
                "    assert!(builder.start_pattern.is_empty());",
                "    assert_eq!(builder.current_pattern_id(), PatternID(SmallIndex::new(0).unwrap()));",
                "    assert!(builder.add(State::Look { look, next }).is_ok());",
                "    assert!(builder.add_look(StateID::ZERO, look).is_ok());",
                "    assert!(builder.add_look(StateID(SmallIndex::new(100).unwrap()), look).is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(4).unwrap());",
                "    let look = Look::WordAscii;",
                "    let _ = builder.add_look(next, look);",
                "    assert_eq!(builder.states.len(), 1);",
                "    assert!(builder.memory_states > 0);",
                "    assert_eq!(builder.get_utf8(), false);",
                "    assert_eq!(builder.get_reverse(), false);",
                "    assert_eq!(builder.get_size_limit(), None);",
                "    assert!(builder.captures.is_empty());",
                "    assert!(builder.start_pattern.is_empty());",
                "    assert_eq!(builder.current_pattern_id(), PatternID(SmallIndex::new(0).unwrap()));",
                "    assert!(builder.add(State::Look { look, next }).is_ok());",
                "    assert!(builder.add_look(StateID::ZERO, look).is_ok());",
                "    assert!(builder.add_look(StateID(SmallIndex::new(100).unwrap()), look).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(5).unwrap());",
                "    let look = Look::WordUnicode;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(5).unwrap());",
                "    let look = Look::WordUnicode;",
                "    let result = builder.add_look(next, look);",
                "    assert!(result.is_ok());",
                "    let state_id = result.unwrap();",
                "    assert_eq!(state_id, StateID(SmallIndex::new(0).unwrap()));",
                "    assert_eq!(builder.pattern_len(), 1);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(5).unwrap());",
                "    let look = Look::WordUnicode;",
                "    let _ = builder.add_look(next, look);",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(5).unwrap());",
                "    let look = Look::WordUnicode;",
                "    let result = builder.add_look(next, look);",
                "    assert!(result.is_ok());",
                "    let state_id = result.unwrap();",
                "    assert_eq!(state_id, StateID(SmallIndex::new(0).unwrap()));",
                "    assert_eq!(builder.pattern_len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(6).unwrap());",
                "    let look = Look::WordEndHalfAscii;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(6).unwrap());",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = builder.add_look(next, look);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), StateID(SmallIndex::new(0).unwrap())); // Assuming first state ID is returned",
                "    builder.clear(); // Ensuring builder state reset for next test"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(6).unwrap());",
                "    let look = Look::WordEndHalfAscii;",
                "    let _ = builder.add_look(next, look);",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(6).unwrap());",
                "    let look = Look::WordEndHalfAscii;",
                "    let result = builder.add_look(next, look);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), StateID(SmallIndex::new(0).unwrap())); // Assuming first state ID is returned",
                "    builder.clear(); // Ensuring builder state reset for next test",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(u32::MAX as usize).unwrap());",
                "    let look = Look::End;",
                "    let _ = builder.add_look(next, look);",
                "}"
              ],
              "oracle": [
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(u32::MAX as usize).unwrap());",
                "    let look = Look::End;",
                "    let result = builder.add_look(next, look);",
                "    assert!(result.is_err());",
                "    let error = result.unwrap_err();",
                "    assert_eq!(error.kind, BuildErrorKind::StateIDExhausted);"
              ],
              "code": [
                "{",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(u32::MAX as usize).unwrap());",
                "    let look = Look::End;",
                "    let _ = builder.add_look(next, look);",
                "    let mut builder = Builder::new();",
                "    let next = StateID(SmallIndex::new(u32::MAX as usize).unwrap());",
                "    let look = Look::End;",
                "    let result = builder.add_look(next, look);",
                "    assert!(result.is_err());",
                "    let error = result.unwrap_err();",
                "    assert_eq!(error.kind, BuildErrorKind::StateIDExhausted);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}