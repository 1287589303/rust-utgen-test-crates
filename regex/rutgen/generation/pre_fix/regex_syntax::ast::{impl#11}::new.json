{
  "name": "regex_syntax::ast::{impl#11}::new",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:426:5:428:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Position { offset, line, column }\n"
      ],
      "input_infer": "offset: 0 to 1000, line: 1 to 100, column: 1 to 80\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position::new(0, 1, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 0);",
                "    assert_eq!(position.line, 1);",
                "    assert_eq!(position.column, 1);"
              ],
              "code": [
                "{",
                "    let position = Position::new(0, 1, 1);",
                "    assert_eq!(position.offset, 0);",
                "    assert_eq!(position.line, 1);",
                "    assert_eq!(position.column, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position::new(500, 50, 40);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 500);",
                "    assert_eq!(position.line, 50);",
                "    assert_eq!(position.column, 40);"
              ],
              "code": [
                "{",
                "    let position = Position::new(500, 50, 40);",
                "    assert_eq!(position.offset, 500);",
                "    assert_eq!(position.line, 50);",
                "    assert_eq!(position.column, 40);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position::new(1000, 10, 20);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 1000);",
                "    assert_eq!(position.line, 10);",
                "    assert_eq!(position.column, 20);"
              ],
              "code": [
                "{",
                "    let position = Position::new(1000, 10, 20);",
                "    assert_eq!(position.offset, 1000);",
                "    assert_eq!(position.line, 10);",
                "    assert_eq!(position.column, 20);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position::new(100, 100, 5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 100);",
                "    assert_eq!(position.line, 100);",
                "    assert_eq!(position.column, 5);"
              ],
              "code": [
                "{",
                "    let position = Position::new(100, 100, 5);",
                "    assert_eq!(position.offset, 100);",
                "    assert_eq!(position.line, 100);",
                "    assert_eq!(position.column, 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position::new(200, 5, 80);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 200);",
                "    assert_eq!(position.line, 5);",
                "    assert_eq!(position.column, 80);"
              ],
              "code": [
                "{",
                "    let position = Position::new(200, 5, 80);",
                "    assert_eq!(position.offset, 200);",
                "    assert_eq!(position.line, 5);",
                "    assert_eq!(position.column, 80);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position = Position::new(250, 25, 30);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(position.offset, 250);",
                "    assert_eq!(position.line, 25);",
                "    assert_eq!(position.column, 30);"
              ],
              "code": [
                "{",
                "    let position = Position::new(250, 25, 30);",
                "    assert_eq!(position.offset, 250);",
                "    assert_eq!(position.line, 25);",
                "    assert_eq!(position.column, 30);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let position1 = Position::new(0, 1, 1);",
                "    let position2 = Position::new(1000, 100, 80);",
                "}"
              ],
              "oracle": [
                "    Position::new(0, 1, 1); // assert position1 == Position { offset: 0, line: 1, column: 1 }",
                "    Position::new(1000, 100, 80); // assert position2 == Position { offset: 1000, line: 100, column: 80 }"
              ],
              "code": [
                "{",
                "    let position1 = Position::new(0, 1, 1);",
                "    let position2 = Position::new(1000, 100, 80);",
                "    Position::new(0, 1, 1); // assert position1 == Position { offset: 0, line: 1, column: 1 }",
                "    Position::new(1000, 100, 80); // assert position2 == Position { offset: 1000, line: 100, column: 80 }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}