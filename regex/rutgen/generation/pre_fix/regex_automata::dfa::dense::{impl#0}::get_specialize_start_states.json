{
  "name": "regex_automata::dfa::dense::{impl#0}::get_specialize_start_states",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:1011:5:1013:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "specialize_start_states: [None, Some(true), Some(false)]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        specialize_start_states: None,",
                "        ..Config::default()",
                "    };",
                "    let _ = config.get_specialize_start_states();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_specialize_start_states(), false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        specialize_start_states: None,",
                "        ..Config::default()",
                "    };",
                "    let _ = config.get_specialize_start_states();",
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        specialize_start_states: Some(true),",
                "        ..Config::default()",
                "    };",
                "    let _ = config.get_specialize_start_states();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_specialize_start_states(), true);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: Some(false),",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: None,",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        specialize_start_states: Some(true),",
                "        ..Config::default()",
                "    };",
                "    let _ = config.get_specialize_start_states();",
                "    assert_eq!(config.get_specialize_start_states(), true);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: Some(false),",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: None,",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config {",
                "        specialize_start_states: Some(false),",
                "        ..Config::default()",
                "    };",
                "    let _ = config.get_specialize_start_states();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: Some(true),",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), true);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: None,",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), false);"
              ],
              "code": [
                "{",
                "    let config = Config {",
                "        specialize_start_states: Some(false),",
                "        ..Config::default()",
                "    };",
                "    let _ = config.get_specialize_start_states();",
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: Some(true),",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), true);",
                "    ",
                "    let config = Config {",
                "    specialize_start_states: None,",
                "    ..Config::default()",
                "    };",
                "    assert_eq!(config.get_specialize_start_states(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}