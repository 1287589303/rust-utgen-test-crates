{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#1}::clear",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:602:5:604:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions: Invoke the clear function on a State instance with varying numbers of transitions (0, 1, and multiple transitions), ensuring to also test with transitions having byte ranges at the minimum (0-0) and maximum (255-255) valid boundary values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state = State { transitions: vec![] };",
                "    state.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state.transitions.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut state = State { transitions: vec![] };",
                "    state.clear();",
                "    assert_eq!(state.transitions.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state = State {",
                "        transitions: vec![Transition {",
                "            range: Utf8Range { start: 0, end: 0 },",
                "            next_id: StateID::new_unchecked(2),",
                "        }],",
                "    };",
                "    state.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state.transitions.len(), 0);",
                "    assert!(state.transitions.is_empty());",
                "    assert!(state.transitions.iter().all(|t| t.next_id != StateID::new_unchecked(2)));",
                "    assert!(state.transitions.iter().find(|t| t.next_id == StateID::new_unchecked(2)).is_none());",
                "    assert!(state.transitions.iter().find(|t| t.range.start == 0).is_none());",
                "    assert!(state.transitions.iter().find(|t| t.range.end == 0).is_none());"
              ],
              "code": [
                "{",
                "    let mut state = State {",
                "        transitions: vec![Transition {",
                "            range: Utf8Range { start: 0, end: 0 },",
                "            next_id: StateID::new_unchecked(2),",
                "        }],",
                "    };",
                "    state.clear();",
                "    assert_eq!(state.transitions.len(), 0);",
                "    assert!(state.transitions.is_empty());",
                "    assert!(state.transitions.iter().all(|t| t.next_id != StateID::new_unchecked(2)));",
                "    assert!(state.transitions.iter().find(|t| t.next_id == StateID::new_unchecked(2)).is_none());",
                "    assert!(state.transitions.iter().find(|t| t.range.start == 0).is_none());",
                "    assert!(state.transitions.iter().find(|t| t.range.end == 0).is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state = State {",
                "        transitions: vec![",
                "            Transition {",
                "                range: Utf8Range { start: 0, end: 0 },",
                "                next_id: StateID::new_unchecked(2),",
                "            },",
                "            Transition {",
                "                range: Utf8Range { start: 255, end: 255 },",
                "                next_id: StateID::new_unchecked(3),",
                "            },",
                "        ],",
                "    };",
                "    state.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state.transitions.len(), 0);",
                "    assert!(state.transitions.is_empty());",
                "    assert_ne!(state.transitions.len(), 2);",
                "    assert_eq!(state.transitions.get(0), None);",
                "    assert_eq!(state.transitions.get(1), None);"
              ],
              "code": [
                "{",
                "    let mut state = State {",
                "        transitions: vec![",
                "            Transition {",
                "                range: Utf8Range { start: 0, end: 0 },",
                "                next_id: StateID::new_unchecked(2),",
                "            },",
                "            Transition {",
                "                range: Utf8Range { start: 255, end: 255 },",
                "                next_id: StateID::new_unchecked(3),",
                "            },",
                "        ],",
                "    };",
                "    state.clear();",
                "    assert_eq!(state.transitions.len(), 0);",
                "    assert!(state.transitions.is_empty());",
                "    assert_ne!(state.transitions.len(), 2);",
                "    assert_eq!(state.transitions.get(0), None);",
                "    assert_eq!(state.transitions.get(1), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut state = State {",
                "        transitions: vec![",
                "            Transition {",
                "                range: Utf8Range { start: 0, end: 0 },",
                "                next_id: StateID::new_unchecked(1),",
                "            },",
                "            Transition {",
                "                range: Utf8Range { start: 255, end: 255 },",
                "                next_id: StateID::new_unchecked(4),",
                "            },",
                "            Transition {",
                "                range: Utf8Range { start: 1, end: 254 },",
                "                next_id: StateID::new_unchecked(5),",
                "            },",
                "        ],",
                "    };",
                "    state.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(state.transitions.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut state = State {",
                "        transitions: vec![",
                "            Transition {",
                "                range: Utf8Range { start: 0, end: 0 },",
                "                next_id: StateID::new_unchecked(1),",
                "            },",
                "            Transition {",
                "                range: Utf8Range { start: 255, end: 255 },",
                "                next_id: StateID::new_unchecked(4),",
                "            },",
                "            Transition {",
                "                range: Utf8Range { start: 1, end: 254 },",
                "                next_id: StateID::new_unchecked(5),",
                "            },",
                "        ],",
                "    };",
                "    state.clear();",
                "    assert_eq!(state.transitions.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}