{
  "name": "regex_syntax::hir::{impl#15}::set_lower",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1278:5:1280:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.start must accept a valid Unicode character, which includes any character within the range of U+0000 to U+10FFFF; boundary cases at U+0000 and U+10FFFF must be tested to verify proper handling of extreme values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('A');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start, 'A');",
                "    assert!(range.lower() == 'A');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('A');",
                "    assert_eq!(range.start, 'A');",
                "    assert!(range.lower() == 'A');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('\\u{0000}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start, '\\u{0000}');",
                "    range.set_lower('\\u{007F}');",
                "    assert_eq!(range.start, '\\u{007F}');",
                "    range.set_lower('\\u{FFFE}');",
                "    assert_eq!(range.start, '\\u{FFFE}');",
                "    range.set_lower('\\u{D800}');",
                "    assert_eq!(range.start, '\\u{D800}');",
                "    range.set_lower('\\u{0020}');",
                "    assert_eq!(range.start, '\\u{0020}');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('\\u{0000}');",
                "    assert_eq!(range.start, '\\u{0000}');",
                "    range.set_lower('\\u{007F}');",
                "    assert_eq!(range.start, '\\u{007F}');",
                "    range.set_lower('\\u{FFFE}');",
                "    assert_eq!(range.start, '\\u{FFFE}');",
                "    range.set_lower('\\u{D800}');",
                "    assert_eq!(range.start, '\\u{D800}');",
                "    range.set_lower('\\u{0020}');",
                "    assert_eq!(range.start, '\\u{0020}');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('\\u{10FFFF}');",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range.start, '\\u{10FFFF}');"
              ],
              "code": [
                "{",
                "    let mut range = ClassUnicodeRange::default();",
                "    range.set_lower('\\u{10FFFF}');",
                "    assert_eq!(range.start, '\\u{10FFFF}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}