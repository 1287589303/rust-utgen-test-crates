{
  "name": "regex_syntax::hir::{impl#25}::explicit_captures_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2164:5:2166:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.explicit_captures_len\n"
      ],
      "input_infer": "Test input conditions or ranges: Valid regex strings with varying explicit capturing groups, including no groups (e.g., \"a\", \"b\") returning 0; a single group (e.g., \"(a)\", \"(b)\") returning 1; multiple groups (e.g., \"(a)(b)\", \"(c|d)\") returning counts greater than 1; and edge cases with empty strings, malformed regex, or nested groups returning counts up to the expected maximum based on regex complexity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, props.explicit_captures_len());",
                "    let props_with_one_capture = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 1,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(1, props_with_one_capture.explicit_captures_len());",
                "    let props_with_five_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 5,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(5, props_with_five_captures.explicit_captures_len());",
                "    let props_with_max_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: usize::MAX,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(usize::MAX, props_with_max_captures.explicit_captures_len());",
                "    let props_with_static_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(0, props_with_static_captures.explicit_captures_len());",
                "    let props_with_none_static_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(0, props_with_none_static_captures.explicit_captures_len());"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "    assert_eq!(0, props.explicit_captures_len());",
                "    let props_with_one_capture = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 1,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(1, props_with_one_capture.explicit_captures_len());",
                "    let props_with_five_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 5,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(5, props_with_five_captures.explicit_captures_len());",
                "    let props_with_max_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: usize::MAX,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(usize::MAX, props_with_max_captures.explicit_captures_len());",
                "    let props_with_static_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: Some(0),",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(0, props_with_static_captures.explicit_captures_len());",
                "    let props_with_none_static_captures = Properties(Box::new(PropertiesI {",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    ..Default::default()",
                "    }));",
                "    assert_eq!(0, props_with_none_static_captures.explicit_captures_len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.explicit_captures_len(), 1);",
                "    props.0.explicit_captures_len = 0;",
                "    assert_eq!(props.explicit_captures_len(), 0);",
                "    props.0.explicit_captures_len = 5;",
                "    assert_eq!(props.explicit_captures_len(), 5);",
                "    props.0.explicit_captures_len = usize::MAX;",
                "    assert_eq!(props.explicit_captures_len(), usize::MAX);",
                "    props.0.explicit_captures_len = 10;",
                "    assert_eq!(props.explicit_captures_len(), 10);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 1,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "    assert_eq!(props.explicit_captures_len(), 1);",
                "    props.0.explicit_captures_len = 0;",
                "    assert_eq!(props.explicit_captures_len(), 0);",
                "    props.0.explicit_captures_len = 5;",
                "    assert_eq!(props.explicit_captures_len(), 5);",
                "    props.0.explicit_captures_len = usize::MAX;",
                "    assert_eq!(props.explicit_captures_len(), usize::MAX);",
                "    props.0.explicit_captures_len = 10;",
                "    assert_eq!(props.explicit_captures_len(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(props.explicit_captures_len(), 2);"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 2,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "    assert_eq!(props.explicit_captures_len(), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 3,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(3, props.explicit_captures_len());",
                "    let props_empty = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(0, props_empty.explicit_captures_len());",
                "    let props_one = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(1, props_one.explicit_captures_len());"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 3,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "    assert_eq!(3, props.explicit_captures_len());",
                "    let props_empty = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 0,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(0, props_empty.explicit_captures_len());",
                "    let props_one = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(1, props_one.explicit_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, props.explicit_captures_len());",
                "    ",
                "    let props_2 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(1, props_2.explicit_captures_len());",
                "    ",
                "    let props_3 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: true,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: None,",
                "    literal: true,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(2, props_3.explicit_captures_len());",
                "    ",
                "    let props_4 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 5,",
                "    static_explicit_captures_len: Some(3),",
                "    literal: true,",
                "    alternation_literal: true,",
                "    }));",
                "    assert_eq!(5, props_4.explicit_captures_len());"
              ],
              "code": [
                "{",
                "    let props = Properties(Box::new(PropertiesI {",
                "        minimum_len: None,",
                "        maximum_len: None,",
                "        look_set: LookSet::default(),",
                "        look_set_prefix: LookSet::default(),",
                "        look_set_suffix: LookSet::default(),",
                "        look_set_prefix_any: LookSet::default(),",
                "        look_set_suffix_any: LookSet::default(),",
                "        utf8: false,",
                "        explicit_captures_len: 0,",
                "        static_explicit_captures_len: None,",
                "        literal: false,",
                "        alternation_literal: false,",
                "    }));",
                "    let _ = props.explicit_captures_len();",
                "    assert_eq!(0, props.explicit_captures_len());",
                "    ",
                "    let props_2 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 1,",
                "    static_explicit_captures_len: None,",
                "    literal: false,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(1, props_2.explicit_captures_len());",
                "    ",
                "    let props_3 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: true,",
                "    explicit_captures_len: 2,",
                "    static_explicit_captures_len: None,",
                "    literal: true,",
                "    alternation_literal: false,",
                "    }));",
                "    assert_eq!(2, props_3.explicit_captures_len());",
                "    ",
                "    let props_4 = Properties(Box::new(PropertiesI {",
                "    minimum_len: None,",
                "    maximum_len: None,",
                "    look_set: LookSet::default(),",
                "    look_set_prefix: LookSet::default(),",
                "    look_set_suffix: LookSet::default(),",
                "    look_set_prefix_any: LookSet::default(),",
                "    look_set_suffix_any: LookSet::default(),",
                "    utf8: false,",
                "    explicit_captures_len: 5,",
                "    static_explicit_captures_len: Some(3),",
                "    literal: true,",
                "    alternation_literal: true,",
                "    }));",
                "    assert_eq!(5, props_4.explicit_captures_len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}