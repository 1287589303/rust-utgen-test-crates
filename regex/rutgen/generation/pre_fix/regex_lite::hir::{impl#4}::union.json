{
  "name": "regex_lite::hir::{impl#4}::union",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:551:5:558:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_contiguous(other) at line 552 is true\n",
        "expected return value/type: Some(ClassRange { start, end })\n"
      ],
      "input_infer": "ClassRange instances where start and end characters are contiguous (e.g., ('a', 'c'), ('1', '2'), ('x', 'x')), including boundary cases such as start equal to end and cases where characters are directly adjacent.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'c' };",
                "    let range2 = ClassRange { start: 'b', end: 'd' };",
                "    let result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'd' }));"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'c' };",
                "    let range2 = ClassRange { start: 'b', end: 'd' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'd' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: '1', end: '3' };",
                "    let range2 = ClassRange { start: '3', end: '5' };",
                "    let result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: '1', end: '5' }));"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: '1', end: '3' };",
                "    let range2 = ClassRange { start: '3', end: '5' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: '1', end: '5' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'x', end: 'x' };",
                "    let range2 = ClassRange { start: 'x', end: 'y' };",
                "    let result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'x', end: 'y' }));"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'x', end: 'x' };",
                "    let range2 = ClassRange { start: 'x', end: 'y' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'x', end: 'y' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'y', end: 'y' };",
                "    let range2 = ClassRange { start: 'z', end: 'z' };",
                "    let result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let expected = ClassRange { start: 'y', end: 'z' };",
                "    assert_eq!(result.unwrap(), expected);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'y', end: 'y' };",
                "    let range2 = ClassRange { start: 'z', end: 'z' };",
                "    let result = range1.union(&range2);",
                "    assert!(result.is_some());",
                "    let expected = ClassRange { start: 'y', end: 'z' };",
                "    assert_eq!(result.unwrap(), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'e' };",
                "    let range2 = ClassRange { start: 'b', end: 'd' };",
                "    let result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), ClassRange { start: 'a', end: 'e' });"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'e' };",
                "    let range2 = ClassRange { start: 'b', end: 'd' };",
                "    let result = range1.union(&range2);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), ClassRange { start: 'a', end: 'e' });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'a' };",
                "    let range2 = ClassRange { start: 'a', end: 'a' };",
                "    let result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'a' }));",
                "    let range1 = ClassRange { start: 'a', end: 'b' };",
                "    let range2 = ClassRange { start: 'b', end: 'c' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'c' }));",
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'a', end: 'w' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
                "    let range1 = ClassRange { start: 'm', end: 'n' };",
                "    let range2 = ClassRange { start: 'n', end: 'o' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'm', end: 'o' }));"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'a' };",
                "    let range2 = ClassRange { start: 'a', end: 'a' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'a' }));",
                "    let range1 = ClassRange { start: 'a', end: 'b' };",
                "    let range2 = ClassRange { start: 'b', end: 'c' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'c' }));",
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'a', end: 'w' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
                "    let range1 = ClassRange { start: 'm', end: 'n' };",
                "    let range2 = ClassRange { start: 'n', end: 'o' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'm', end: 'o' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'A', end: 'Z' };",
                "    let range2 = ClassRange { start: 'Z', end: 'Z' };",
                "    let result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'A', end: 'Z' };",
                "    let range2 = ClassRange { start: 'Z', end: 'Z' };",
                "    let result = range1.union(&range2);",
                "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_contiguous(other) at line 552 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.start = 'a', self.end = 'c', other.start = 'e', other.end = 'f'\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'c' };",
                "    let range2 = ClassRange { start: 'e', end: 'f' };",
                "    let _result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, None);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'a', end: 'c' };",
                "    let range2 = ClassRange { start: 'e', end: 'f' };",
                "    let _result = range1.union(&range2);",
                "    assert_eq!(_result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'a', end: 'b' };",
                "    let _result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range1.union(&range2), None);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'x', end: 'z' };",
                "    let range2 = ClassRange { start: 'a', end: 'b' };",
                "    let _result = range1.union(&range2);",
                "    assert_eq!(range1.union(&range2), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: '1', end: '3' };",
                "    let range2 = ClassRange { start: '5', end: '7' };",
                "    let _result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    let range1 = ClassRange { start: '1', end: '3' };",
                "    let range2 = ClassRange { start: '5', end: '7' };",
                "    assert_eq!(_result, None);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: '1', end: '3' };",
                "    let range2 = ClassRange { start: '5', end: '7' };",
                "    let _result = range1.union(&range2);",
                "    let range1 = ClassRange { start: '1', end: '3' };",
                "    let range2 = ClassRange { start: '5', end: '7' };",
                "    assert_eq!(_result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let range1 = ClassRange { start: 'A', end: 'C' };",
                "    let range2 = ClassRange { start: 'E', end: 'F' };",
                "    let _result = range1.union(&range2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(range1.union(&range2), None);"
              ],
              "code": [
                "{",
                "    let range1 = ClassRange { start: 'A', end: 'C' };",
                "    let range2 = ClassRange { start: 'E', end: 'F' };",
                "    let _result = range1.union(&range2);",
                "    assert_eq!(range1.union(&range2), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}