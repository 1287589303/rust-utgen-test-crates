{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::get_which_captures",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:497:5:499:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "which_captures: None, Implicit, All, None; utf8: true, false; reverse: true, false; nfa_size_limit: Some(0), Some(1), Some(usize::MAX), None; shrink: true, false; unanchored_prefix: true, false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    let config2 = Config { which_captures: Some(WhichCaptures::Implicit), ..Config::new() };",
                "    assert_eq!(config2.get_which_captures(), WhichCaptures::Implicit);",
                "    let config3 = Config { which_captures: Some(WhichCaptures::None), ..Config::new() };",
                "    assert_eq!(config3.get_which_captures(), WhichCaptures::None);",
                "    let config4 = Config { which_captures: None, ..Config::new() };",
                "    assert_eq!(config4.get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    let config2 = Config { which_captures: Some(WhichCaptures::Implicit), ..Config::new() };",
                "    assert_eq!(config2.get_which_captures(), WhichCaptures::Implicit);",
                "    let config3 = Config { which_captures: Some(WhichCaptures::None), ..Config::new() };",
                "    assert_eq!(config3.get_which_captures(), WhichCaptures::None);",
                "    let config4 = Config { which_captures: None, ..Config::new() };",
                "    assert_eq!(config4.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new().which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().utf8(true).which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new().utf8(true).which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().reverse(true).which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new().reverse(true).which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(1)).which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);"
              ],
              "code": [
                "{",
                "    let config = Config::new().nfa_size_limit(Some(1)).which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new().shrink(true).which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().unanchored_prefix(true).which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new().unanchored_prefix(true).which_captures(WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "    let config = Config::new().which_captures(WhichCaptures::None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    let config = Config::new();",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}