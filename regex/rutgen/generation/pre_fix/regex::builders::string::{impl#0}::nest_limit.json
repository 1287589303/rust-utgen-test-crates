{
  "name": "regex::builders::string::{impl#0}::nest_limit",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:774:9:777:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "limit: 0, 1, 10, UINT32_MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().as_str(), \"a\");",
                "    let result_invalid = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert_eq!(result_invalid.is_err(), true);"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().as_str(), \"a\");",
                "    let result_invalid = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert_eq!(result_invalid.is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"ab\").nest_limit(1).build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().into_string().unwrap(), r\"ab\");",
                "    assert_eq!(result.unwrap().nest_limit(), 1);",
                "    ",
                "    let result = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert_eq!(result.is_err(), true);",
                "    ",
                "    let result = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().into_string().unwrap(), r\"a\");",
                "    assert_eq!(result.unwrap().nest_limit(), 0);"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"ab\").nest_limit(1).build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().into_string().unwrap(), r\"ab\");",
                "    assert_eq!(result.unwrap().nest_limit(), 1);",
                "    ",
                "    let result = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert_eq!(result.is_err(), true);",
                "    ",
                "    let result = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap().into_string().unwrap(), r\"a\");",
                "    assert_eq!(result.unwrap().nest_limit(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\").nest_limit(10).build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().to_string(), r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\");",
                "    ",
                "    let result_limit_zero = RegexBuilder::new(r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\").nest_limit(0).build();",
                "    assert!(result_limit_zero.is_err());",
                "    ",
                "    let result_limit_one = RegexBuilder::new(r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\").nest_limit(1).build();",
                "    assert!(result_limit_one.is_err());",
                "    ",
                "    let result_no_nesting = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "    assert!(result_no_nesting.is_ok());",
                "    ",
                "    let result_min_nesting = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert!(result_min_nesting.is_err());"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\").nest_limit(10).build();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().to_string(), r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\");",
                "    ",
                "    let result_limit_zero = RegexBuilder::new(r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\").nest_limit(0).build();",
                "    assert!(result_limit_zero.is_err());",
                "    ",
                "    let result_limit_one = RegexBuilder::new(r\"((a)(b)(c)(d)(e)(f)(g)(h)(i)(j))\").nest_limit(1).build();",
                "    assert!(result_limit_one.is_err());",
                "    ",
                "    let result_no_nesting = RegexBuilder::new(r\"a\").nest_limit(0).build();",
                "    assert!(result_no_nesting.is_ok());",
                "    ",
                "    let result_min_nesting = RegexBuilder::new(r\"ab\").nest_limit(0).build();",
                "    assert!(result_min_nesting.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = RegexBuilder::new(r\"(((((a)))))\").nest_limit(u32::MAX).build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().is_some());"
              ],
              "code": [
                "{",
                "    let result = RegexBuilder::new(r\"(((((a)))))\").nest_limit(u32::MAX).build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert!(result.unwrap().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}