{
  "name": "regex_syntax::ast::{impl#19}::is_negated",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:909:5:917:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.kind matches ClassUnicodeKind::NamedValue {\n                op: ClassUnicodeOpKind::NotEqual,\n                ..\n            } at line 910 is true\n",
        "precondition: self.kind matches ClassUnicodeKind::NamedValue {\n                op: ClassUnicodeOpKind::NotEqual,\n                ..\n            } at line 911 is false\n",
        "precondition: self.kind matches _ at line 915 is true\n",
        "expected return value/type: self.negated\n"
      ],
      "input_infer": "self.kind with ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: any non-empty string, value: any non-empty string }, self.negated true; self.kind with ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: any non-empty string, value: any non-empty string }, self.negated false; self.kind other than ClassUnicodeKind::NamedValue, self.negated true; self.kind other than ClassUnicodeKind::NamedValue, self.negated false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: true,",
                "        kind: ClassUnicodeKind::NamedValue {",
                "            op: ClassUnicodeOpKind::NotEqual,",
                "            name: String::from(\"scx\"),",
                "            value: String::from(\"Katakana\"),",
                "        },",
                "    };",
                "    class_unicode.is_negated();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    let class_unicode_negated_false = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(5) },",
                "    negated: false,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::NotEqual,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_negated_false.is_negated(), true);",
                "    ",
                "    let class_unicode_non_negated = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(5) },",
                "    negated: true,",
                "    kind: ClassUnicodeKind::Named(String::from(\"Scalars\")),",
                "    };",
                "    assert_eq!(class_unicode_non_negated.is_negated(), true);",
                "    ",
                "    let class_unicode_named_value_equal = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(5) },",
                "    negated: false,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::Equal,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_named_value_equal.is_negated(), false);"
              ],
              "code": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: true,",
                "        kind: ClassUnicodeKind::NamedValue {",
                "            op: ClassUnicodeOpKind::NotEqual,",
                "            name: String::from(\"scx\"),",
                "            value: String::from(\"Katakana\"),",
                "        },",
                "    };",
                "    class_unicode.is_negated();",
                "    assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    let class_unicode_negated_false = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(5) },",
                "    negated: false,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::NotEqual,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_negated_false.is_negated(), true);",
                "    ",
                "    let class_unicode_non_negated = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(5) },",
                "    negated: true,",
                "    kind: ClassUnicodeKind::Named(String::from(\"Scalars\")),",
                "    };",
                "    assert_eq!(class_unicode_non_negated.is_negated(), true);",
                "    ",
                "    let class_unicode_named_value_equal = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(5) },",
                "    negated: false,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::Equal,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_named_value_equal.is_negated(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: false,",
                "        kind: ClassUnicodeKind::NamedValue {",
                "            op: ClassUnicodeOpKind::NotEqual,",
                "            name: String::from(\"scx\"),",
                "            value: String::from(\"Katakana\"),",
                "        },",
                "    };",
                "    class_unicode.is_negated();",
                "}"
              ],
              "oracle": [
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: false, kind: ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\"), }, }; assert_eq!(class_unicode.is_negated(), true);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: true, kind: ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\"), }, }; assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: false, kind: ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::Equal, name: String::from(\"scx\"), value: String::from(\"Katakana\"), }, }; assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: true, kind: ClassUnicodeKind::OneLetter('N'), }; assert_eq!(class_unicode.is_negated(), true);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: false, kind: ClassUnicodeKind::Named(String::from(\"some_property\")), }; assert_eq!(class_unicode.is_negated(), false);"
              ],
              "code": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: false,",
                "        kind: ClassUnicodeKind::NamedValue {",
                "            op: ClassUnicodeOpKind::NotEqual,",
                "            name: String::from(\"scx\"),",
                "            value: String::from(\"Katakana\"),",
                "        },",
                "    };",
                "    class_unicode.is_negated();",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: false, kind: ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\"), }, }; assert_eq!(class_unicode.is_negated(), true);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: true, kind: ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\"), }, }; assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: false, kind: ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::Equal, name: String::from(\"scx\"), value: String::from(\"Katakana\"), }, }; assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: true, kind: ClassUnicodeKind::OneLetter('N'), }; assert_eq!(class_unicode.is_negated(), true);",
                "    ",
                "    let class_unicode = ClassUnicode { span: Span { start: Position(0), end: Position(5) }, negated: false, kind: ClassUnicodeKind::Named(String::from(\"some_property\")), }; assert_eq!(class_unicode.is_negated(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: true,",
                "        kind: ClassUnicodeKind::OneLetter('N'),",
                "    };",
                "    class_unicode.is_negated();",
                "}"
              ],
              "oracle": [
                "    class_unicode.kind = ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\") };",
                "    class_unicode.negated = true;",
                "    assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    class_unicode.kind = ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\") };",
                "    class_unicode.negated = false;",
                "    assert_eq!(class_unicode.is_negated(), true);",
                "    ",
                "    class_unicode.kind = ClassUnicodeKind::OneLetter('N');",
                "    class_unicode.negated = true;",
                "    assert_eq!(class_unicode.is_negated(), true);"
              ],
              "code": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: true,",
                "        kind: ClassUnicodeKind::OneLetter('N'),",
                "    };",
                "    class_unicode.is_negated();",
                "    class_unicode.kind = ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\") };",
                "    class_unicode.negated = true;",
                "    assert_eq!(class_unicode.is_negated(), false);",
                "    ",
                "    class_unicode.kind = ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, name: String::from(\"scx\"), value: String::from(\"Katakana\") };",
                "    class_unicode.negated = false;",
                "    assert_eq!(class_unicode.is_negated(), true);",
                "    ",
                "    class_unicode.kind = ClassUnicodeKind::OneLetter('N');",
                "    class_unicode.negated = true;",
                "    assert_eq!(class_unicode.is_negated(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: false,",
                "        kind: ClassUnicodeKind::Named(String::from(\"category\")),",
                "    };",
                "    class_unicode.is_negated();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class_unicode.is_negated(), false); // Test when kind is Named",
                "    ",
                "    let class_unicode_negated = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(10) },",
                "    negated: true,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::NotEqual,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_negated.is_negated(), false); // Test when kind is NamedValue with NotEqual",
                "    ",
                "    let class_unicode_not_negated = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(15) },",
                "    negated: true,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::Equal,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_not_negated.is_negated(), true); // Test when kind is NamedValue with Equal",
                "    ",
                "    let class_unicode_default = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(20) },",
                "    negated: false,",
                "    kind: ClassUnicodeKind::OneLetter('A'),",
                "    };",
                "    assert_eq!(class_unicode_default.is_negated(), false); // Test when kind is OneLetter"
              ],
              "code": [
                "{",
                "    let class_unicode = ClassUnicode {",
                "        span: Span { start: Position(0), end: Position(5) },",
                "        negated: false,",
                "        kind: ClassUnicodeKind::Named(String::from(\"category\")),",
                "    };",
                "    class_unicode.is_negated();",
                "    assert_eq!(class_unicode.is_negated(), false); // Test when kind is Named",
                "    ",
                "    let class_unicode_negated = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(10) },",
                "    negated: true,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::NotEqual,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_negated.is_negated(), false); // Test when kind is NamedValue with NotEqual",
                "    ",
                "    let class_unicode_not_negated = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(15) },",
                "    negated: true,",
                "    kind: ClassUnicodeKind::NamedValue {",
                "    op: ClassUnicodeOpKind::Equal,",
                "    name: String::from(\"scx\"),",
                "    value: String::from(\"Katakana\"),",
                "    },",
                "    };",
                "    assert_eq!(class_unicode_not_negated.is_negated(), true); // Test when kind is NamedValue with Equal",
                "    ",
                "    let class_unicode_default = ClassUnicode {",
                "    span: Span { start: Position(0), end: Position(20) },",
                "    negated: false,",
                "    kind: ClassUnicodeKind::OneLetter('A'),",
                "    };",
                "    assert_eq!(class_unicode_default.is_negated(), false); // Test when kind is OneLetter",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}