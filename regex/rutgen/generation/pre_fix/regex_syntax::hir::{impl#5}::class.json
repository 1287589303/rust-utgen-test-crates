{
  "name": "regex_syntax::hir::{impl#5}::class",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:359:5:367:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: class.is_empty() at line 360 is true\n"
      ],
      "input_infer": "class: Class::Bytes(ClassBytes::empty()), Class::Unicode(ClassUnicode::empty())\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
                "    let _result = Hir::class(empty_unicode_class);",
                "}"
              ],
              "oracle": [
                "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
                "    let result = Hir::class(empty_unicode_class);",
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));",
                "    assert!(result.props.is_empty());"
              ],
              "code": [
                "{",
                "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
                "    let _result = Hir::class(empty_unicode_class);",
                "    let empty_unicode_class = Class::Unicode(ClassUnicode::empty());",
                "    let result = Hir::class(empty_unicode_class);",
                "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));",
                "    assert!(result.props.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_bytes_class = Class::Bytes(ClassBytes::empty());",
                "    let _result = Hir::class(empty_bytes_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.kind, HirKind::Class(empty_bytes_class));",
                "    assert!(class.is_empty());",
                "    assert_eq!(_result.props, Properties::empty());",
                "    assert_eq!(_result, Hir::fail());"
              ],
              "code": [
                "{",
                "    let empty_bytes_class = Class::Bytes(ClassBytes::empty());",
                "    let _result = Hir::class(empty_bytes_class);",
                "    assert_eq!(_result.kind, HirKind::Class(empty_bytes_class));",
                "    assert!(class.is_empty());",
                "    assert_eq!(_result.props, Properties::empty());",
                "    assert_eq!(_result, Hir::fail());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: class.is_empty() at line 360 is false\n",
        "precondition: let Some(bytes) = class.literal() at line 362 is true\n"
      ],
      "input_infer": "Class must be a non-empty Unicode or Bytes object that contains a literal byte value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
                "    let hir = Hir::class(unicode_class);",
                "}"
              ],
              "oracle": [
                "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
                "    assert_eq!(hir.kind, HirKind::Class(unicode_class));",
                "    assert!(hir.props.0.minimum_len.is_some());",
                "    assert!(hir.props.0.maximum_len.is_some());",
                "    assert!(hir.props.0.utf8);",
                "    assert!(!hir.props.0.literal);"
              ],
              "code": [
                "{",
                "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
                "    let hir = Hir::class(unicode_class);",
                "    let unicode_class = Class::Unicode(ClassUnicode::from_literal(vec![b'a', b'b', b'c']));",
                "    assert_eq!(hir.kind, HirKind::Class(unicode_class));",
                "    assert!(hir.props.0.minimum_len.is_some());",
                "    assert!(hir.props.0.maximum_len.is_some());",
                "    assert!(hir.props.0.utf8);",
                "    assert!(!hir.props.0.literal);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_class = Class::Bytes(ClassBytes::from_literal(vec![b'x', b'y', b'z']));",
                "    let hir = Hir::class(bytes_class);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hir.kind, HirKind::Class(bytes_class));",
                "    assert!(hir.props.0.literal == false);",
                "    assert!(hir.props.0.minimum_len.is_none());",
                "    assert!(hir.props.0.maximum_len.is_none());",
                "    assert!(hir.props.0.utf8 == false);"
              ],
              "code": [
                "{",
                "    let bytes_class = Class::Bytes(ClassBytes::from_literal(vec![b'x', b'y', b'z']));",
                "    let hir = Hir::class(bytes_class);",
                "    assert_eq!(hir.kind, HirKind::Class(bytes_class));",
                "    assert!(hir.props.0.literal == false);",
                "    assert!(hir.props.0.minimum_len.is_none());",
                "    assert!(hir.props.0.maximum_len.is_none());",
                "    assert!(hir.props.0.utf8 == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}