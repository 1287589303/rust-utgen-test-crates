{
  "name": "regex_automata::dfa::onepass::{impl#0}::new",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:76:5:78:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions: Validate that a call to Config::new() returns a Config instance with all fields set to their default values (match_kind is None, starts_for_each_pattern is None, byte_classes is None, size_limit is None)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_size_limit(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let match_kind = config.get_match_kind();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.match_kind, None);",
                "    assert_eq!(config.starts_for_each_pattern, None);",
                "    assert_eq!(config.byte_classes, None);",
                "    assert_eq!(config.size_limit, None);",
                "    assert_eq!(match_kind, MatchKind::All);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let match_kind = config.get_match_kind();",
                "    assert_eq!(config.match_kind, None);",
                "    assert_eq!(config.starts_for_each_pattern, None);",
                "    assert_eq!(config.byte_classes, None);",
                "    assert_eq!(config.size_limit, None);",
                "    assert_eq!(match_kind, MatchKind::All);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let starts_for_each_pattern = config.get_starts_for_each_pattern();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(starts_for_each_pattern, false);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let starts_for_each_pattern = config.get_starts_for_each_pattern();",
                "    assert_eq!(starts_for_each_pattern, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let byte_classes = config.get_byte_classes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_size_limit(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let byte_classes = config.get_byte_classes();",
                "    assert_eq!(config.get_match_kind(), MatchKind::All);",
                "    assert_eq!(config.get_starts_for_each_pattern(), false);",
                "    assert_eq!(config.get_byte_classes(), false);",
                "    assert_eq!(config.get_size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new();",
                "    let size_limit = config.get_size_limit();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().get_size_limit(), None);"
              ],
              "code": [
                "{",
                "    let config = Config::new();",
                "    let size_limit = config.get_size_limit();",
                "    assert_eq!(Config::new().get_size_limit(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}