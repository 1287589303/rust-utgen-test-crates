{
  "name": "regex_automata::nfa::thompson::map::{impl#1}::new",
  "mod_info": {
    "name": "nfa::thompson::map",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:65:1:65:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/map.rs:233:5:236:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: capacity > 0 at line 234 is true\n",
        "expected return value/type: Utf8SuffixMap { version: 0, capacity, map: vec![] }\n"
      ],
      "input_infer": "capacity: 1 to 10,000 (minimum boundary case of 1 and typical upper range for capacity)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 1;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, 1);",
                "    assert!(map.map.is_empty());",
                "    assert!(capacity > 0);"
              ],
              "code": [
                "{",
                "    let capacity = 1;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, 1);",
                "    assert!(map.map.is_empty());",
                "    assert!(capacity > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 10;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, capacity);",
                "    assert_eq!(map.map.len(), 0);"
              ],
              "code": [
                "{",
                "    let capacity = 10;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, capacity);",
                "    assert_eq!(map.map.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 100;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, 100);",
                "    assert_eq!(map.map, vec![]);"
              ],
              "code": [
                "{",
                "    let capacity = 100;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, 100);",
                "    assert_eq!(map.map, vec![]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 1000;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, 1000);",
                "    assert_eq!(map.map.len(), 0);"
              ],
              "code": [
                "{",
                "    let capacity = 1000;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, 1000);",
                "    assert_eq!(map.map.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = 10000;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, capacity);",
                "    assert!(map.map.is_empty());"
              ],
              "code": [
                "{",
                "    let capacity = 10000;",
                "    let map = Utf8SuffixMap::new(capacity);",
                "    assert_eq!(map.version, 0);",
                "    assert_eq!(map.capacity, capacity);",
                "    assert!(map.map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: capacity > 0 at line 234 is false, with bound capacity == 0\n"
      ],
      "input_infer": "capacity <= 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let _map = Utf8SuffixMap::new(0);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| Utf8SuffixMap::new(0)).is_err());",
                "    assert_eq!(std::panic::catch_unwind(|| Utf8SuffixMap::new(0)).is_err(), true);",
                "    let result = std::panic::catch_unwind(|| Utf8SuffixMap::new(0));",
                "    assert!(result.is_err());",
                "    let panic_result = std::panic::catch_unwind(|| Utf8SuffixMap::new(0));",
                "    assert!(panic_result.is_err(), \"Expected panic when initializing with capacity 0\");"
              ],
              "code": [
                "{",
                "    let _map = Utf8SuffixMap::new(0);",
                "    assert!(std::panic::catch_unwind(|| Utf8SuffixMap::new(0)).is_err());",
                "    assert_eq!(std::panic::catch_unwind(|| Utf8SuffixMap::new(0)).is_err(), true);",
                "    let result = std::panic::catch_unwind(|| Utf8SuffixMap::new(0));",
                "    assert!(result.is_err());",
                "    let panic_result = std::panic::catch_unwind(|| Utf8SuffixMap::new(0));",
                "    assert!(panic_result.is_err(), \"Expected panic when initializing with capacity 0\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let _map = Utf8SuffixMap::new(!0); // Using a negative capacity by inverting 0",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Utf8SuffixMap::new(1).capacity, 1);",
                "    assert_eq!(Utf8SuffixMap::new(10).capacity, 10);",
                "    assert_eq!(Utf8SuffixMap::new(100).capacity, 100);",
                "    let result = std::panic::catch_unwind(|| Utf8SuffixMap::new(0));",
                "    assert!(result.is_err());",
                "    assert_eq!(Utf8SuffixMap::new(10).version, 0);",
                "    assert!(Utf8SuffixMap::new(5).map.is_empty());"
              ],
              "code": [
                "{",
                "    let _map = Utf8SuffixMap::new(!0); // Using a negative capacity by inverting 0",
                "    assert_eq!(Utf8SuffixMap::new(1).capacity, 1);",
                "    assert_eq!(Utf8SuffixMap::new(10).capacity, 10);",
                "    assert_eq!(Utf8SuffixMap::new(100).capacity, 100);",
                "    let result = std::panic::catch_unwind(|| Utf8SuffixMap::new(0));",
                "    assert!(result.is_err());",
                "    assert_eq!(Utf8SuffixMap::new(10).version, 0);",
                "    assert!(Utf8SuffixMap::new(5).map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}