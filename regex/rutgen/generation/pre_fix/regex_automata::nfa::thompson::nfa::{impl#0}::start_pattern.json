{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::start_pattern",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:545:5:547:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid `PatternID` inputs from 0 to `nfa.pattern_len() - 1`, and invalid `PatternID` inputs outside this range.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
                "    let pid = PatternID::must(0);",
                "    let _result = nfa.start_pattern(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
                "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
                "    let pid = PatternID::must(0);",
                "    let _result = nfa.start_pattern(pid);",
                "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
                "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
                "    let pid = PatternID::must(1);",
                "    let _result = nfa.start_pattern(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
                "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
                "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());",
                "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
                "    assert!(nfa.start_pattern(PatternID::must(3)).is_none());"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
                "    let pid = PatternID::must(1);",
                "    let _result = nfa.start_pattern(pid);",
                "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
                "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
                "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());",
                "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
                "    assert!(nfa.start_pattern(PatternID::must(3)).is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
                "    let pid = PatternID::must(2);",
                "    let _result = nfa.start_pattern(pid);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
                "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
                "    assert!(nfa.pattern_len() >= 2);",
                "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
                "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());"
              ],
              "code": [
                "{",
                "    let nfa = NFA::new_many(&[\"^a\", \"^b\"]).unwrap();",
                "    let pid = PatternID::must(2);",
                "    let _result = nfa.start_pattern(pid);",
                "    assert_eq!(nfa.start_pattern(PatternID::must(0)), Some(nfa.start_anchored()));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(1)), Some(nfa.start_anchored()));",
                "    assert_eq!(nfa.start_pattern(PatternID::must(2)), None);",
                "    assert_ne!(nfa.start_pattern(PatternID::must(0)), nfa.start_pattern(PatternID::must(1)));",
                "    assert!(nfa.pattern_len() >= 2);",
                "    assert!(nfa.start_pattern(PatternID::must(0)).is_some());",
                "    assert!(nfa.start_pattern(PatternID::must(1)).is_some());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}