{
  "name": "regex_automata::dfa::sparse::{impl#8}::to_owned",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1480:5:1487:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Transitions {\n            sparse: self.sparse().to_vec(),\n            classes: self.classes.clone(),\n            state_len: self.state_len,\n            pattern_len: self.pattern_len,\n        }\n"
      ],
      "input_infer": "sparse input as either Vec<u8> or &[u8], classes with a length of 256 bytes, state_len >= 1, pattern_len >= 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_sparse: &[u8] = &[];",
                "    let classes = ByteClasses([0; 256]);",
                "    let state_len = 1;",
                "    let pattern_len = 0;",
                "    ",
                "    let transitions = Transitions {",
                "        sparse: empty_sparse,",
                "        classes,",
                "        state_len,",
                "        pattern_len,",
                "    };",
                "    ",
                "    let owned = transitions.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(owned.sparse, transitions.sparse.to_vec());",
                "    assert_eq!(owned.classes, transitions.classes.clone());",
                "    assert_eq!(owned.state_len, transitions.state_len);",
                "    assert_eq!(owned.pattern_len, transitions.pattern_len);"
              ],
              "code": [
                "{",
                "    let empty_sparse: &[u8] = &[];",
                "    let classes = ByteClasses([0; 256]);",
                "    let state_len = 1;",
                "    let pattern_len = 0;",
                "    ",
                "    let transitions = Transitions {",
                "        sparse: empty_sparse,",
                "        classes,",
                "        state_len,",
                "        pattern_len,",
                "    };",
                "    ",
                "    let owned = transitions.to_owned();",
                "    assert_eq!(owned.sparse, transitions.sparse.to_vec());",
                "    assert_eq!(owned.classes, transitions.classes.clone());",
                "    assert_eq!(owned.state_len, transitions.state_len);",
                "    assert_eq!(owned.pattern_len, transitions.pattern_len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let non_empty_sparse: &[u8] = &[1, 2, 3, 4, 5];",
                "    let classes = ByteClasses([1; 256]);",
                "    let state_len = 1;",
                "    let pattern_len = 2;",
                "    ",
                "    let transitions = Transitions {",
                "        sparse: non_empty_sparse,",
                "        classes,",
                "        state_len,",
                "        pattern_len,",
                "    };",
                "    ",
                "    let owned = transitions.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(owned.sparse(), non_empty_sparse.to_vec());",
                "    assert_eq!(owned.classes, classes);",
                "    assert_eq!(owned.state_len, state_len);",
                "    assert_eq!(owned.pattern_len, pattern_len);"
              ],
              "code": [
                "{",
                "    let non_empty_sparse: &[u8] = &[1, 2, 3, 4, 5];",
                "    let classes = ByteClasses([1; 256]);",
                "    let state_len = 1;",
                "    let pattern_len = 2;",
                "    ",
                "    let transitions = Transitions {",
                "        sparse: non_empty_sparse,",
                "        classes,",
                "        state_len,",
                "        pattern_len,",
                "    };",
                "    ",
                "    let owned = transitions.to_owned();",
                "    assert_eq!(owned.sparse(), non_empty_sparse.to_vec());",
                "    assert_eq!(owned.classes, classes);",
                "    assert_eq!(owned.state_len, state_len);",
                "    assert_eq!(owned.pattern_len, pattern_len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_data: &[u8] = &[10, 20, 30];",
                "    let classes = ByteClasses([2; 256]);",
                "    let state_len = 2;",
                "    let pattern_len = 1;",
                "    ",
                "    let transitions = Transitions {",
                "        sparse: sparse_data,",
                "        classes,",
                "        state_len,",
                "        pattern_len,",
                "    };",
                "    ",
                "    let owned = transitions.to_owned();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(owned.sparse.as_slice(), vec![10, 20, 30]);",
                "    assert_eq!(owned.classes, ByteClasses([2; 256]));",
                "    assert_eq!(owned.state_len, 2);",
                "    assert_eq!(owned.pattern_len, 1);"
              ],
              "code": [
                "{",
                "    let sparse_data: &[u8] = &[10, 20, 30];",
                "    let classes = ByteClasses([2; 256]);",
                "    let state_len = 2;",
                "    let pattern_len = 1;",
                "    ",
                "    let transitions = Transitions {",
                "        sparse: sparse_data,",
                "        classes,",
                "        state_len,",
                "        pattern_len,",
                "    };",
                "    ",
                "    let owned = transitions.to_owned();",
                "    assert_eq!(owned.sparse.as_slice(), vec![10, 20, 30]);",
                "    assert_eq!(owned.classes, ByteClasses([2; 256]));",
                "    assert_eq!(owned.state_len, 2);",
                "    assert_eq!(owned.pattern_len, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}