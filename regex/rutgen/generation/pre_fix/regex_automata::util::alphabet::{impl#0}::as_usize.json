{
  "name": "regex_automata::util::alphabet::{impl#0}::as_usize",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:148:5:153:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.0 matches UnitKind::EOI(eoi) at line 149 is true\n"
      ],
      "input_infer": "self.0 should be set to UnitKind::EOI(eoi) with eoi values in the range of 0 to 256 inclusive.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::EOI(0));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::EOI(255));",
                "    assert_eq!(unit.as_usize(), 255);",
                "    let unit = Unit(UnitKind::EOI(256));",
                "    assert_eq!(unit.as_usize(), 256);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::EOI(0));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::EOI(255));",
                "    assert_eq!(unit.as_usize(), 255);",
                "    let unit = Unit(UnitKind::EOI(256));",
                "    assert_eq!(unit.as_usize(), 256);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::EOI(1));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 1);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::EOI(1));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::EOI(256));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 256);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::EOI(256));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 256);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::EOI(128));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 128);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::EOI(128));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 128);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::EOI(255));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 255);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::EOI(255));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.0 matches UnitKind::U8(b) at line 149 is true\n",
        "precondition: self.0 matches UnitKind::U8(b) at line 149 is true\n"
      ],
      "input_infer": "self.0 matches UnitKind::U8(b) where b is in the range 0 to 255, and self.0 matches UnitKind::EOI(eoi) where eoi is in the range 0 to 256\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::U8(0));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::U8(255));",
                "    assert_eq!(unit.as_usize(), 255);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::U8(0));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::U8(255));",
                "    assert_eq!(unit.as_usize(), 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::U8(255));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 255);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::U8(255));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::EOI(0));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::U8(255));",
                "    assert_eq!(unit.as_usize(), 255);",
                "    let unit = Unit(UnitKind::U8(0));",
                "    assert_eq!(unit.as_usize(), 0);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::EOI(0));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::U8(255));",
                "    assert_eq!(unit.as_usize(), 255);",
                "    let unit = Unit(UnitKind::U8(0));",
                "    assert_eq!(unit.as_usize(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let unit = Unit(UnitKind::EOI(256));",
                "    unit.as_usize();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unit.as_usize(), 256);",
                "    let unit = Unit(UnitKind::U8(0));",
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::U8(255));",
                "    assert_eq!(unit.as_usize(), 255);",
                "    let unit = Unit(UnitKind::EOI(1));",
                "    assert_eq!(unit.as_usize(), 1);"
              ],
              "code": [
                "{",
                "    let unit = Unit(UnitKind::EOI(256));",
                "    unit.as_usize();",
                "    assert_eq!(unit.as_usize(), 256);",
                "    let unit = Unit(UnitKind::U8(0));",
                "    assert_eq!(unit.as_usize(), 0);",
                "    let unit = Unit(UnitKind::U8(255));",
                "    assert_eq!(unit.as_usize(), 255);",
                "    let unit = Unit(UnitKind::EOI(1));",
                "    assert_eq!(unit.as_usize(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}