{
  "name": "regex_automata::hybrid::dfa::{impl#0}::byte_classes",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:402:5:404:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &self.classes\n"
      ],
      "input_infer": "valid StateMap with between 1 to 256 byte classes, where each byte class can represent from 1 to 256 distinct bytes, ensuring Config::byte_classes is enabled\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "}"
              ],
              "oracle": [
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "    config,",
                "    nfa: thompson::NFA::default(),",
                "    stride2: 0,",
                "    start_map: StartByteMap { map: [Default::default(); 256] },",
                "    classes,",
                "    quitset: byte_set,",
                "    cache_capacity: 0,",
                "    };",
                "    assert_eq!(dfa.byte_classes(), &dfa.classes);"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "    config,",
                "    nfa: thompson::NFA::default(),",
                "    stride2: 0,",
                "    start_map: StartByteMap { map: [Default::default(); 256] },",
                "    classes,",
                "    quitset: byte_set,",
                "    cache_capacity: 0,",
                "    };",
                "    assert_eq!(dfa.byte_classes(), &dfa.classes);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([1; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "}"
              ],
              "oracle": [
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([1; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA { config, nfa: thompson::NFA::default(), stride2: 0, start_map: StartByteMap { map: [Default::default(); 256] }, classes, quitset: byte_set, cache_capacity: 0 };",
                "    assert_eq!(dfa.byte_classes(), &dfa.classes);",
                "    assert_eq!(dfa.byte_classes().0, [1; 256]);",
                "    assert!(dfa.config.byte_classes.is_some());",
                "    assert!(dfa.classes.0.iter().all(|&x| x == 1));"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([1; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([1; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA { config, nfa: thompson::NFA::default(), stride2: 0, start_map: StartByteMap { map: [Default::default(); 256] }, classes, quitset: byte_set, cache_capacity: 0 };",
                "    assert_eq!(dfa.byte_classes(), &dfa.classes);",
                "    assert_eq!(dfa.byte_classes().0, [1; 256]);",
                "    assert!(dfa.config.byte_classes.is_some());",
                "    assert!(dfa.classes.0.iter().all(|&x| x == 1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "}"
              ],
              "oracle": [
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "    config,",
                "    nfa: thompson::NFA::default(),",
                "    stride2: 0,",
                "    start_map: StartByteMap { map: [Default::default(); 256] },",
                "    classes,",
                "    quitset: byte_set,",
                "    cache_capacity: 0,",
                "    };",
                "    assert_eq!(dfa.byte_classes(), &classes);"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "    config,",
                "    nfa: thompson::NFA::default(),",
                "    stride2: 0,",
                "    start_map: StartByteMap { map: [Default::default(); 256] },",
                "    classes,",
                "    quitset: byte_set,",
                "    cache_capacity: 0,",
                "    };",
                "    assert_eq!(dfa.byte_classes(), &classes);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(false), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.byte_classes(), &dfa.classes);",
                "    assert!(dfa.byte_classes().0.iter().all(|&x| x == 0));",
                "    assert_eq!(dfa.config.byte_classes, Some(false));",
                "    assert_eq!(dfa.memory_usage(), size_of::<DFA>());",
                "    assert_eq!(dfa.pattern_len(), 256);",
                "    assert!(dfa.always_match().is_ok());",
                "    assert!(dfa.never_match().is_ok());"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet([true; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(false), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "    assert_eq!(dfa.byte_classes(), &dfa.classes);",
                "    assert!(dfa.byte_classes().0.iter().all(|&x| x == 0));",
                "    assert_eq!(dfa.config.byte_classes, Some(false));",
                "    assert_eq!(dfa.memory_usage(), size_of::<DFA>());",
                "    assert_eq!(dfa.pattern_len(), 256);",
                "    assert!(dfa.always_match().is_ok());",
                "    assert!(dfa.never_match().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte_set = ByteSet([false; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "}"
              ],
              "oracle": [
                "    let byte_set = ByteSet([false; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "    config,",
                "    nfa: thompson::NFA::default(),",
                "    stride2: 0,",
                "    start_map: StartByteMap { map: [Default::default(); 256] },",
                "    classes,",
                "    quitset: byte_set,",
                "    cache_capacity: 0,",
                "    };",
                "    assert_eq!(dfa.byte_classes(), &classes);"
              ],
              "code": [
                "{",
                "    let byte_set = ByteSet([false; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "        config,",
                "        nfa: thompson::NFA::default(),",
                "        stride2: 0,",
                "        start_map: StartByteMap { map: [Default::default(); 256] },",
                "        classes,",
                "        quitset: byte_set,",
                "        cache_capacity: 0,",
                "    };",
                "    let _result = dfa.byte_classes();",
                "    let byte_set = ByteSet([false; 256]);",
                "    let classes = ByteClasses([0; 256]);",
                "    let config = Config { byte_classes: Some(true), ..Default::default() };",
                "    let dfa = DFA {",
                "    config,",
                "    nfa: thompson::NFA::default(),",
                "    stride2: 0,",
                "    start_map: StartByteMap { map: [Default::default(); 256] },",
                "    classes,",
                "    quitset: byte_set,",
                "    cache_capacity: 0,",
                "    };",
                "    assert_eq!(dfa.byte_classes(), &classes);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}