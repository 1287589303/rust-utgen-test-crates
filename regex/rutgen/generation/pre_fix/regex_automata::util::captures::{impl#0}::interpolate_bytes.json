{
  "name": "regex_automata::util::captures::{impl#0}::interpolate_bytes",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:824:5:832:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: dst\n"
      ],
      "input_infer": "Valid test input conditions/ranges: haystack with varying lengths (0 to 1000 bytes), replacement with multiple patterns (valid, invalid, empty), ensure capture groups match (valid/invalid span cases including boundary match cases), and varying byte content (ASCII and non-ASCII, with special characters)\n",
      "answers": [
        {
          "uses": [
            "use std::sync::Arc;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let mut captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(&captures.interpolate_bytes(haystack, replacement), b\"year=2010, month=03, day=14\");",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement).len(), 37);",
                "    assert_ne!(captures.interpolate_bytes(haystack, replacement), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), captures.interpolate_bytes(haystack, replacement));",
                "    assert!(captures.interpolate_bytes(haystack, replacement).iter().all(|&x| x.is_ascii()));",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement).get(0..4), Some(&b\"year\"[..]));"
              ],
              "code": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let mut captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "    assert_eq!(&captures.interpolate_bytes(haystack, replacement), b\"year=2010, month=03, day=14\");",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement).len(), 37);",
                "    assert_ne!(captures.interpolate_bytes(haystack, replacement), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), captures.interpolate_bytes(haystack, replacement));",
                "    assert!(captures.interpolate_bytes(haystack, replacement).iter().all(|&x| x.is_ascii()));",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement).get(0..4), Some(&b\"year\"[..]));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::empty(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), Vec::<u8>::new());",
                "    ",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "    let expected_result = b\"year=, month=, day=\"; // Modify this based on actual behavior",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), expected_result.to_vec());",
                "    ",
                "    let haystack: &[u8] = b\"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), expected_result.to_vec());",
                "    ",
                "    let haystack: &[u8] = b\"Sample text without captures.\";",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), expected_result.to_vec());"
              ],
              "code": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::empty(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), Vec::<u8>::new());",
                "    ",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$year, month=$month, day=$day\";",
                "    let expected_result = b\"year=, month=, day=\"; // Modify this based on actual behavior",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), expected_result.to_vec());",
                "    ",
                "    let haystack: &[u8] = b\"On 2010-03-14, I became a Tenneessee lamb.\";",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), expected_result.to_vec());",
                "    ",
                "    let haystack: &[u8] = b\"Sample text without captures.\";",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), expected_result.to_vec());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), Vec::<u8>::new());"
              ],
              "code": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), Vec::<u8>::new());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$invalid, month=$month, day=$day\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), b\"\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"year=$year, month=$month, day=$day\"), b\"year=, month=, day=\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"year=$year, month=$month, day=$day\"), b\"year=2010, month=03, day=14\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"day=$day, month=$month, year=$year\"), b\"day=14, month=03, year=2010\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(b\"\", b\"year=$year, month=$month, day=$day\"), b\"year=, month=, day=\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"year=$year\"), b\"year=2010\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"month=$month\"), b\"month=03\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"day=$day\"), b\"day=14\"[..]);"
              ],
              "code": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
                "    let replacement: &[u8] = b\"year=$invalid, month=$month, day=$day\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), b\"\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"year=$year, month=$month, day=$day\"), b\"year=, month=, day=\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"year=$year, month=$month, day=$day\"), b\"year=2010, month=03, day=14\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"day=$day, month=$month, year=$year\"), b\"day=14, month=03, year=2010\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(b\"\", b\"year=$year, month=$month, day=$day\"), b\"year=, month=, day=\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"year=$year\"), b\"year=2010\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"month=$month\"), b\"month=03\"[..]);",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"day=$day\"), b\"day=14\"[..]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"\";",
                "    let replacement: &[u8] = b\"year=$year\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_bytes(b\"\", b\"year=$year\"), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(b\"test\", b\"test\"), b\"test\");",
                "    assert_eq!(captures.interpolate_bytes(b\"On 14-03-2010\", b\"date=$day-$month-$year\"), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(b\"On 2010-03-14\", b\"year=$year, month=$month, day=$day\"), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(b\"data\", b\"data=$value\"), b\"data=$value\");",
                "    assert_eq!(captures.interpolate_bytes(b\"xx\", b\"$x\"), b\"xx\");",
                "    assert_eq!(captures.interpolate_bytes(b\"example\", b\"example=$example\"), b\"example=$example\");",
                "    assert_eq!(captures.interpolate_bytes(b\"matched\", b\"match=$match\"), b\"matched\");",
                "    assert_eq!(captures.interpolate_bytes(b\"foo\", b\"$foo\"), b\"foo\");",
                "    assert_eq!(captures.interpolate_bytes(b\"test\", b\"\"), b\"test\");"
              ],
              "code": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"\";",
                "    let replacement: &[u8] = b\"year=$year\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "    assert_eq!(captures.interpolate_bytes(b\"\", b\"year=$year\"), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(b\"test\", b\"test\"), b\"test\");",
                "    assert_eq!(captures.interpolate_bytes(b\"On 14-03-2010\", b\"date=$day-$month-$year\"), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(b\"On 2010-03-14\", b\"year=$year, month=$month, day=$day\"), b\"\");",
                "    assert_eq!(captures.interpolate_bytes(b\"data\", b\"data=$value\"), b\"data=$value\");",
                "    assert_eq!(captures.interpolate_bytes(b\"xx\", b\"$x\"), b\"xx\");",
                "    assert_eq!(captures.interpolate_bytes(b\"example\", b\"example=$example\"), b\"example=$example\");",
                "    assert_eq!(captures.interpolate_bytes(b\"matched\", b\"match=$match\"), b\"matched\");",
                "    assert_eq!(captures.interpolate_bytes(b\"foo\", b\"$foo\"), b\"foo\");",
                "    assert_eq!(captures.interpolate_bytes(b\"test\", b\"\"), b\"test\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\";",
                "    let replacement: &[u8] = b\"result=$result\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), vec![/* expected byte values here */]);",
                "    assert!(captures.interpolate_bytes(haystack, b\"\").is_empty());",
                "    assert_eq!(captures.interpolate_bytes(b\"\", replacement), b\"result=\".to_vec());",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"test=$test\"), vec![/* expected byte values for test */]);",
                "    assert!(captures.interpolate_bytes(haystack, replacement).len() <= haystack.len());",
                "    assert!(captures.interpolate_bytes(haystack, replacement).len() >= 0);"
              ],
              "code": [
                "{",
                "    use std::sync::Arc;",
                "",
                "    let group_info = GroupInfo::default();",
                "    let captures = Captures::all(group_info.clone());",
                "",
                "    let haystack: &[u8] = b\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\";",
                "    let replacement: &[u8] = b\"result=$result\";",
                "",
                "    let _ = captures.interpolate_bytes(haystack, replacement);",
                "    assert_eq!(captures.interpolate_bytes(haystack, replacement), vec![/* expected byte values here */]);",
                "    assert!(captures.interpolate_bytes(haystack, b\"\").is_empty());",
                "    assert_eq!(captures.interpolate_bytes(b\"\", replacement), b\"result=\".to_vec());",
                "    assert_eq!(captures.interpolate_bytes(haystack, b\"test=$test\"), vec![/* expected byte values for test */]);",
                "    assert!(captures.interpolate_bytes(haystack, replacement).len() <= haystack.len());",
                "    assert!(captures.interpolate_bytes(haystack, replacement).len() >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}