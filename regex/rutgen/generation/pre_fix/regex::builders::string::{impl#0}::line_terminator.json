{
  "name": "regex::builders::string::{impl#0}::line_terminator",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:521:9:524:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid byte inputs: 0-255; non-ASCII bytes: 128-255; edge case: 0 for NUL; test patterns: ASCII (e.g., r\"^foo$\", r\".\") and non-ASCII patterns (e.g., r\"a\")\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .line_terminator(b'\\n')",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    let re = RegexBuilder::new(r\"^foo$\").multi_line(true).line_terminator(b'\\n').build().unwrap();",
                "    assert!(re.is_match(\"\\nfoo\\n\"));",
                "    assert!(re.is_match(\"foo\\n\"));",
                "    assert!(re.is_match(\"\\nfoo\"));",
                "    assert!(!re.is_match(\"foo\"));",
                "    assert_eq!(Some(0..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    let re_invalid = RegexBuilder::new(r\".\").line_terminator(0x80).build();",
                "    assert!(re_invalid.is_err());",
                "    let re_valid = RegexBuilder::new(r\"a\").line_terminator(0x80).build();",
                "    assert!(re_valid.is_ok());",
                "    let re_dot = RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap();",
                "    assert!(re_dot.is_match(\"\\n\"));",
                "    assert!(!re_dot.is_match(\"\\x00\"));"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .line_terminator(b'\\n')",
                "        .build()",
                "        .unwrap();",
                "    let re = RegexBuilder::new(r\"^foo$\").multi_line(true).line_terminator(b'\\n').build().unwrap();",
                "    assert!(re.is_match(\"\\nfoo\\n\"));",
                "    assert!(re.is_match(\"foo\\n\"));",
                "    assert!(re.is_match(\"\\nfoo\"));",
                "    assert!(!re.is_match(\"foo\"));",
                "    assert_eq!(Some(0..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));",
                "    let re_invalid = RegexBuilder::new(r\".\").line_terminator(0x80).build();",
                "    assert!(re_invalid.is_err());",
                "    let re_valid = RegexBuilder::new(r\"a\").line_terminator(0x80).build();",
                "    assert!(re_valid.is_ok());",
                "    let re_dot = RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap();",
                "    assert!(re_dot.is_match(\"\\n\"));",
                "    assert!(!re_dot.is_match(\"\\x00\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .line_terminator(b'\\r')",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(RegexBuilder::new(r\"^foo$\").line_terminator(b'\\n').build().is_ok());",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(b'\\r').build().is_ok());",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "    assert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());",
                "    assert!(RegexBuilder::new(r\"^foo$\").line_terminator(b'\\x00').build().is_ok());",
                "    assert!(RegexBuilder::new(r\"^foo$\").line_terminator(b'\\x00').multi_line(true).build().is_ok());",
                "    assert_eq!(RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap().is_match(\"\\n\"), true);",
                "    assert_eq!(RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap().is_match(\"\\x00\"), false);"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .line_terminator(b'\\r')",
                "        .build()",
                "        .unwrap();",
                "    assert!(RegexBuilder::new(r\"^foo$\").line_terminator(b'\\n').build().is_ok());",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(b'\\r').build().is_ok());",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "    assert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());",
                "    assert!(RegexBuilder::new(r\"^foo$\").line_terminator(b'\\x00').build().is_ok());",
                "    assert!(RegexBuilder::new(r\"^foo$\").line_terminator(b'\\x00').multi_line(true).build().is_ok());",
                "    assert_eq!(RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap().is_match(\"\\n\"), true);",
                "    assert_eq!(RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap().is_match(\"\\x00\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .line_terminator(0)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(re.is_match(\"\\x00foo\\x00\"));",
                "    assert_eq!(Some(1..4), re.find(\"\\x00foo\\x00\").map(|m| m.range()));",
                "    assert!(re.is_match(\"foo\"));",
                "    assert!(!re.is_match(\"\\n\"));",
                "    assert!(!re.is_match(\"\\x00\"));",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "    assert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"^foo$\")",
                "        .multi_line(true)",
                "        .line_terminator(0)",
                "        .build()",
                "        .unwrap();",
                "    assert!(re.is_match(\"\\x00foo\\x00\"));",
                "    assert_eq!(Some(1..4), re.find(\"\\x00foo\\x00\").map(|m| m.range()));",
                "    assert!(re.is_match(\"foo\"));",
                "    assert!(!re.is_match(\"\\n\"));",
                "    assert!(!re.is_match(\"\\x00\"));",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "    assert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "}"
              ],
              "oracle": [
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());"
              ],
              "code": [
                "{",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\"a\")",
                "        .line_terminator(0x80)",
                "        .build()",
                "        .unwrap();",
                "}"
              ],
              "oracle": [
                "    let re = RegexBuilder::new(r\"a\").line_terminator(0x80).build().unwrap();",
                "    assert!(re.is_match(\"a\"));",
                "    assert!(!re.is_match(\"b\"));",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "    assert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());",
                "    let re_multi = RegexBuilder::new(r\"^foo$\").multi_line(true).line_terminator(b'\\x00').build().unwrap();",
                "    let hay = \"\\x00foo\\x00\";",
                "    assert_eq!(Some(1..4), re_multi.find(hay).map(|m| m.range()));",
                "    let re_dot = RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap();",
                "    assert!(re_dot.is_match(\"\\n\"));",
                "    assert!(!re_dot.is_match(\"\\x00\"));"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\"a\")",
                "        .line_terminator(0x80)",
                "        .build()",
                "        .unwrap();",
                "    let re = RegexBuilder::new(r\"a\").line_terminator(0x80).build().unwrap();",
                "    assert!(re.is_match(\"a\"));",
                "    assert!(!re.is_match(\"b\"));",
                "    assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());",
                "    assert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());",
                "    let re_multi = RegexBuilder::new(r\"^foo$\").multi_line(true).line_terminator(b'\\x00').build().unwrap();",
                "    let hay = \"\\x00foo\\x00\";",
                "    assert_eq!(Some(1..4), re_multi.find(hay).map(|m| m.range()));",
                "    let re_dot = RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap();",
                "    assert!(re_dot.is_match(\"\\n\"));",
                "    assert!(!re_dot.is_match(\"\\x00\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let re = RegexBuilder::new(r\".\")",
                "        .line_terminator(b'\\x00')",
                "        .build()",
                "        .unwrap();",
                "    assert!(re.is_match(\"\\n\"));",
                "    assert!(!re.is_match(\"\\x00\"));",
                "}"
              ],
              "oracle": [
                "    let re = RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap();",
                "    assert!(re.is_match(\"\\n\"));",
                "    assert!(!re.is_match(\"\\x00\"));"
              ],
              "code": [
                "{",
                "    let re = RegexBuilder::new(r\".\")",
                "        .line_terminator(b'\\x00')",
                "        .build()",
                "        .unwrap();",
                "    assert!(re.is_match(\"\\n\"));",
                "    assert!(!re.is_match(\"\\x00\"));",
                "    let re = RegexBuilder::new(r\".\").line_terminator(b'\\x00').build().unwrap();",
                "    assert!(re.is_match(\"\\n\"));",
                "    assert!(!re.is_match(\"\\x00\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}