{
  "name": "regex_lite::hir::{impl#3}::ascii_case_fold",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:404:5:412:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: i in 0..len at line 406 is true\n",
        "precondition: let Some(folded) = self.ranges[i].ascii_case_fold() at line 407 is true\n",
        "precondition: i in 0..len at line 406 is false\n"
      ],
      "input_infer": "ClassRange with start and end values between 'a' to 'z', 'A' to 'Z', including edge cases like 'a', 'z', 'A', 'Z'; Class with ranges containing one or more ClassRanges for testing ascii_case_fold, ensuring at least one range results in a non-empty folded range\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'z' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    class.ranges.len() == 2",
                "    class.ranges[0] == ClassRange { start: 'A', end: 'Z' }",
                "    class.ranges[1] == ClassRange { start: 'a', end: 'z' }",
                "    class.is_canonical() == true",
                "    class.ranges.is_empty() == false"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'z' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    class.ranges.len() == 2",
                "    class.ranges[0] == ClassRange { start: 'A', end: 'Z' }",
                "    class.ranges[1] == ClassRange { start: 'a', end: 'z' }",
                "    class.is_canonical() == true",
                "    class.ranges.is_empty() == false",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'A', end: 'Z' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'Z' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'z' });",
                "    assert!(class.is_canonical());",
                "    assert!(class.ranges.iter().all(|range| range.start.is_ascii() && range.end.is_ascii()));",
                "    assert!(class.ranges.iter().all(|range| range.start <= range.end));"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'A', end: 'Z' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'Z' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'z' });",
                "    assert!(class.is_canonical());",
                "    assert!(class.ranges.iter().all(|range| range.start.is_ascii() && range.end.is_ascii()));",
                "    assert!(class.ranges.iter().all(|range| range.start <= range.end));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'A', end: 'C' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 4);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'C' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'c' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'A', end: 'C' });",
                "    assert_eq!(class.ranges[3], ClassRange { start: 'a', end: 'c' });",
                "    assert!(class.is_canonical());"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'A', end: 'C' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 4);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'C' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'c' });",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'A', end: 'C' });",
                "    assert_eq!(class.ranges[3], ClassRange { start: 'a', end: 'c' });",
                "    assert!(class.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'a' },",
                "        ClassRange { start: 'z', end: 'z' },",
                "        ClassRange { start: 'A', end: 'A' },",
                "        ClassRange { start: 'Z', end: 'Z' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 6);",
                "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'Z', end: 'Z' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'z', end: 'z' }));",
                "    assert!(class.ranges.is_canonical());"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'a' },",
                "        ClassRange { start: 'z', end: 'z' },",
                "        ClassRange { start: 'A', end: 'A' },",
                "        ClassRange { start: 'Z', end: 'Z' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 6);",
                "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'Z', end: 'Z' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'z', end: 'z' }));",
                "    assert!(class.ranges.is_canonical());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'd', end: 'f' },",
                "        ClassRange { start: 'G', end: 'I' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 4);",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'D', end: 'F' });",
                "    assert_eq!(class.ranges[3], ClassRange { start: 'g', end: 'i' });",
                "    assert!(class.is_canonical());"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'd', end: 'f' },",
                "        ClassRange { start: 'G', end: 'I' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 4);",
                "    assert_eq!(class.ranges[2], ClassRange { start: 'D', end: 'F' });",
                "    assert_eq!(class.ranges[3], ClassRange { start: 'g', end: 'i' });",
                "    assert!(class.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: '1', end: '1' },",
                "        ClassRange { start: '@', end: '@' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 4);",
                "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: '@', end: '@' }));",
                "    assert!(class.ranges.iter().all(|r| r.start.is_ascii() && r.end.is_ascii()));"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: '1', end: '1' },",
                "        ClassRange { start: '@', end: '@' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 4);",
                "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: '1', end: '1' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'A', end: 'A' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: 'a', end: 'a' }));",
                "    assert!(class.ranges.contains(&ClassRange { start: '@', end: '@' }));",
                "    assert!(class.ranges.iter().all(|r| r.start.is_ascii() && r.end.is_ascii()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: i in 0..len at line 406 is false\n"
      ],
      "input_infer": "Test input conditions: An empty `Class` instance with no `ClassRange` elements in `ranges`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 0);",
                "    assert!(class.is_canonical());"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 0);",
                "    assert!(class.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'A', end: 'A' }]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'A' });",
                "    assert!(class.is_canonical());"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: 'A', end: 'A' }]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'A', end: 'A' });",
                "    assert!(class.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'A', end: 'C' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'A', end: 'C' });",
                "    assert!(class.is_canonical());"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: 'a', end: 'c' },",
                "        ClassRange { start: 'A', end: 'C' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'A', end: 'C' });",
                "    assert!(class.is_canonical());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '1', end: '1' }]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '1', end: '1' });"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![ClassRange { start: '1', end: '1' }]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 1);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '1', end: '1' });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: '0', end: '0' },",
                "        ClassRange { start: 'a', end: 'b' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '0', end: '0' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'b' });",
                "    assert!(class.is_canonical());",
                "    assert!(class.ranges.iter().all(|range| range.start.is_ascii() && range.end.is_ascii()));"
              ],
              "code": [
                "{",
                "    let mut class = Class::new(vec![",
                "        ClassRange { start: '0', end: '0' },",
                "        ClassRange { start: 'a', end: 'b' },",
                "    ]);",
                "    class.ascii_case_fold();",
                "    assert_eq!(class.ranges.len(), 2);",
                "    assert_eq!(class.ranges[0], ClassRange { start: '0', end: '0' });",
                "    assert_eq!(class.ranges[1], ClassRange { start: 'a', end: 'b' });",
                "    assert!(class.is_canonical());",
                "    assert!(class.ranges.iter().all(|range| range.start.is_ascii() && range.end.is_ascii()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}