{
  "name": "regex_automata::util::primitives::{impl#0}::get",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:70:5:72:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "1 <= value < usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let non_max = NonMaxUsize::new(1).unwrap();",
                "    let result = non_max.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert!(result < usize::MAX);",
                "    assert!(result < 1);",
                "    assert!(result >= 0);"
              ],
              "code": [
                "{",
                "    let non_max = NonMaxUsize::new(1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 0);",
                "    assert!(result < usize::MAX);",
                "    assert!(result < 1);",
                "    assert!(result >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let non_max = NonMaxUsize::new(2).unwrap();",
                "    let result = non_max.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    let non_max = NonMaxUsize::new(1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 0);",
                "    let non_max = NonMaxUsize::new(usize::MAX - 1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, usize::MAX - 2);",
                "    let non_max = NonMaxUsize::new(usize::MAX).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, usize::MAX - 1);",
                "    let non_max = NonMaxUsize::new(3).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 2);"
              ],
              "code": [
                "{",
                "    let non_max = NonMaxUsize::new(2).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 1);",
                "    let non_max = NonMaxUsize::new(1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 0);",
                "    let non_max = NonMaxUsize::new(usize::MAX - 1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, usize::MAX - 2);",
                "    let non_max = NonMaxUsize::new(usize::MAX).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, usize::MAX - 1);",
                "    let non_max = NonMaxUsize::new(3).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let non_max = NonMaxUsize::new(100).unwrap();",
                "    let result = non_max.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 99);",
                "    assert!(result < usize::MAX);",
                "    assert!(result >= 0);",
                "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 0);",
                "    assert!(NonMaxUsize::new(usize::MAX).is_none());",
                "    assert!(NonMaxUsize::new(0).is_none());"
              ],
              "code": [
                "{",
                "    let non_max = NonMaxUsize::new(100).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 99);",
                "    assert!(result < usize::MAX);",
                "    assert!(result >= 0);",
                "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 0);",
                "    assert!(NonMaxUsize::new(usize::MAX).is_none());",
                "    assert!(NonMaxUsize::new(0).is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let non_max = NonMaxUsize::new(usize::MAX - 1).unwrap();",
                "    let result = non_max.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, usize::MAX - 2);",
                "    let non_max = NonMaxUsize::new(1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 0);",
                "    let non_max = NonMaxUsize::new(2).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 1);"
              ],
              "code": [
                "{",
                "    let non_max = NonMaxUsize::new(usize::MAX - 1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, usize::MAX - 2);",
                "    let non_max = NonMaxUsize::new(1).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 0);",
                "    let non_max = NonMaxUsize::new(2).unwrap();",
                "    let result = non_max.get();",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let non_max = NonMaxUsize::new(usize::MAX).unwrap();",
                "    let result = non_max.get();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| NonMaxUsize::new(usize::MAX)).is_err());",
                "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 0);",
                "    assert_eq!(NonMaxUsize::new(2).unwrap().get(), 1);",
                "    assert_eq!(NonMaxUsize::new(3).unwrap().get(), 2);",
                "    assert_eq!(NonMaxUsize::new(4).unwrap().get(), 3);",
                "    assert_eq!(NonMaxUsize::new(5).unwrap().get(), 4);"
              ],
              "code": [
                "{",
                "    let non_max = NonMaxUsize::new(usize::MAX).unwrap();",
                "    let result = non_max.get();",
                "    assert!(std::panic::catch_unwind(|| NonMaxUsize::new(usize::MAX)).is_err());",
                "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 0);",
                "    assert_eq!(NonMaxUsize::new(2).unwrap().get(), 1);",
                "    assert_eq!(NonMaxUsize::new(3).unwrap().get(), 2);",
                "    assert_eq!(NonMaxUsize::new(4).unwrap().get(), 3);",
                "    assert_eq!(NonMaxUsize::new(5).unwrap().get(), 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}