{
  "name": "regex_automata::dfa::onepass::{impl#9}::setup_search",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2577:5:2579:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "explicit_slot_len: 0 to maximum value of usize (0, 1, max usize)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache {",
                "        explicit_slots: vec![None; 1],",
                "        explicit_slot_len: 0,",
                "    };",
                "    cache.setup_search(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cache.explicit_slot_len, 0);"
              ],
              "code": [
                "{",
                "    let mut cache = Cache {",
                "        explicit_slots: vec![None; 1],",
                "        explicit_slot_len: 0,",
                "    };",
                "    cache.setup_search(0);",
                "    assert_eq!(cache.explicit_slot_len, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache {",
                "        explicit_slots: vec![None; 2],",
                "        explicit_slot_len: 1,",
                "    };",
                "    cache.setup_search(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cache.explicit_slot_len, 1);"
              ],
              "code": [
                "{",
                "    let mut cache = Cache {",
                "        explicit_slots: vec![None; 2],",
                "        explicit_slot_len: 1,",
                "    };",
                "    cache.setup_search(1);",
                "    assert_eq!(cache.explicit_slot_len, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut cache = Cache {",
                "        explicit_slots: vec![None; 3],",
                "        explicit_slot_len: usize::MAX,",
                "    };",
                "    cache.setup_search(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cache.explicit_slot_len, usize::MAX);",
                "    assert!(cache.explicit_slots.len() == 3);",
                "    assert!(cache.explicit_slots[0].is_none());",
                "    assert!(cache.explicit_slots[1].is_none());",
                "    assert!(cache.explicit_slots[2].is_none());"
              ],
              "code": [
                "{",
                "    let mut cache = Cache {",
                "        explicit_slots: vec![None; 3],",
                "        explicit_slot_len: usize::MAX,",
                "    };",
                "    cache.setup_search(usize::MAX);",
                "    assert_eq!(cache.explicit_slot_len, usize::MAX);",
                "    assert!(cache.explicit_slots.len() == 3);",
                "    assert!(cache.explicit_slots[0].is_none());",
                "    assert!(cache.explicit_slots[1].is_none());",
                "    assert!(cache.explicit_slots[2].is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}