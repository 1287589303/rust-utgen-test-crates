{
  "name": "regex_automata::util::primitives::{impl#11}::try_from",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:348:5:353:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: index > SmallIndex::MAX.as_usize() at line 349 is true\n",
        "expected return value/type: Err(SmallIndexError { attempted: index.as_u64() })\n"
      ],
      "input_infer": "index values greater than SmallIndex::MAX.as_usize() (specifically values starting from SmallIndex::MAX.as_usize() + 1 and above)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 1;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().attempted, index as u64);"
              ],
              "code": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 1;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().attempted, index as u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 2;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, (SmallIndex::MAX.as_usize() + 2) as u64);"
              ],
              "code": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 2;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().attempted, (SmallIndex::MAX.as_usize() + 2) as u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 10;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    let error = result.unwrap_err();",
                "    assert_eq!(error.attempted, (SmallIndex::MAX.as_usize() + 10) as u64);"
              ],
              "code": [
                "{",
                "    let index = SmallIndex::MAX.as_usize() + 10;",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_err());",
                "    let error = result.unwrap_err();",
                "    assert_eq!(error.attempted, (SmallIndex::MAX.as_usize() + 10) as u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: index > SmallIndex::MAX.as_usize() at line 349 is false, with bound index == SmallIndex::MAX.as_usize()\n",
        "expected return value/type: Ok(SmallIndex::new_unchecked(index))\n"
      ],
      "input_infer": "index in the range [0, SmallIndex::MAX.as_usize()] inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: usize = 0;",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    let index: usize = SmallIndex::MAX.as_usize();",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::new_unchecked(index));"
              ],
              "code": [
                "{",
                "    let index: usize = 0;",
                "    let result = SmallIndex::try_from(index);",
                "    let index: usize = SmallIndex::MAX.as_usize();",
                "    let result = SmallIndex::try_from(index);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), SmallIndex::new_unchecked(index));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index: usize = SmallIndex::MAX.as_usize();",
                "    let result = SmallIndex::try_from(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(index)));"
              ],
              "code": [
                "{",
                "    let index: usize = SmallIndex::MAX.as_usize();",
                "    let result = SmallIndex::try_from(index);",
                "    assert_eq!(result, Ok(SmallIndex::new_unchecked(index)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}