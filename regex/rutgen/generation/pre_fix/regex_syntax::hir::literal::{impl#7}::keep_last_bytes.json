{
  "name": "regex_syntax::hir::literal::{impl#7}::keep_last_bytes",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:2141:5:2147:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: len >= self.len() at line 2142 is true, with bound len == self.len()\n"
      ],
      "input_infer": "len >= 0 and len == self.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    let len = lit.len();",
                "    lit.keep_last_bytes(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.len(), 3);",
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
                "    assert!(lit.is_exact());",
                "    assert!(!lit.is_empty());"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![1, 2, 3]);",
                "    let len = lit.len();",
                "    lit.keep_last_bytes(len);",
                "    assert_eq!(lit.len(), 3);",
                "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
                "    assert!(lit.is_exact());",
                "    assert!(!lit.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![5, 6, 7]);",
                "    let len = lit.len();",
                "    lit.keep_last_bytes(0);",
                "}"
              ],
              "oracle": [
                "    lit.keep_last_bytes(len);",
                "    assert_eq!(lit.len(), len);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[5, 6, 7]);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![5, 6, 7]);",
                "    let len = lit.len();",
                "    lit.keep_last_bytes(0);",
                "    lit.keep_last_bytes(len);",
                "    assert_eq!(lit.len(), len);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[5, 6, 7]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(vec![]);",
                "    let len = lit.len();",
                "    lit.keep_last_bytes(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.len(), 0);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[]);",
                "    assert!(lit.is_empty());"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(vec![]);",
                "    let len = lit.len();",
                "    lit.keep_last_bytes(len);",
                "    assert_eq!(lit.len(), 0);",
                "    assert!(lit.is_exact());",
                "    assert_eq!(lit.as_bytes(), &[]);",
                "    assert!(lit.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: len >= self.len() at line 2142 is false\n"
      ],
      "input_infer": "len must be a positive integer less than the length of self.bytes, and self.bytes must be non-empty; thus, test input conditions: len âˆˆ [1, self.len() - 1] where self.len() > 1.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(b\"abcdef\");",
                "    lit.keep_last_bytes(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.as_bytes(), b\"def\");",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 4);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(b\"abcdef\");",
                "    lit.keep_last_bytes(4);",
                "    assert_eq!(lit.as_bytes(), b\"def\");",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(b\"abcdef\");",
                "    lit.keep_last_bytes(5);",
                "}"
              ],
              "oracle": [
                "    let lit = Literal::exact(b\"abcdef\");",
                "    assert_eq!(lit.as_bytes(), b\"abcdef\");",
                "    lit.keep_last_bytes(5);",
                "    assert_eq!(lit.as_bytes(), b\"def\");",
                "    assert!(lit.is_exact() == false);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(b\"abcdef\");",
                "    lit.keep_last_bytes(5);",
                "    let lit = Literal::exact(b\"abcdef\");",
                "    assert_eq!(lit.as_bytes(), b\"abcdef\");",
                "    lit.keep_last_bytes(5);",
                "    assert_eq!(lit.as_bytes(), b\"def\");",
                "    assert!(lit.is_exact() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(b\"hello\");",
                "    lit.keep_last_bytes(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.as_bytes(), b\"llo\");",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(b\"hello\");",
                "    lit.keep_last_bytes(3);",
                "    assert_eq!(lit.as_bytes(), b\"llo\");",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 3);",
                "    assert!(lit.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(b\"rustlang\");",
                "    lit.keep_last_bytes(6);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.as_bytes(), b\"stlang\");",
                "    assert!(lit.is_exact() == false);",
                "    assert!(lit.len() == 6);"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(b\"rustlang\");",
                "    lit.keep_last_bytes(6);",
                "    assert_eq!(lit.as_bytes(), b\"stlang\");",
                "    assert!(lit.is_exact() == false);",
                "    assert!(lit.len() == 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut lit = Literal::exact(b\"abcdefgh\");",
                "    lit.keep_last_bytes(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(lit.as_bytes(), b\"gh\");",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 2);",
                "    assert!(!lit.is_empty());"
              ],
              "code": [
                "{",
                "    let mut lit = Literal::exact(b\"abcdefgh\");",
                "    lit.keep_last_bytes(2);",
                "    assert_eq!(lit.as_bytes(), b\"gh\");",
                "    assert!(lit.is_exact() == false);",
                "    assert_eq!(lit.len(), 2);",
                "    assert!(!lit.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}