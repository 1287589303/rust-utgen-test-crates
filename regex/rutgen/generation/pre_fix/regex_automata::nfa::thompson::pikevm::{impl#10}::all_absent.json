{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#10}::all_absent",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:2156:5:2159:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self.table[i..i + self.slots_for_captures]\n"
      ],
      "input_infer": "Self.table must have at least slots_for_captures elements, with slots_for_captures being a positive integer less than or equal to the length of the table.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 10],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 2,",
                "    };",
                "    let result = slot_table.all_absent();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 2);",
                "    assert!(result.iter().all(|&slot| slot.is_none()));",
                "    assert_eq!(slot_table.table[8], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    assert_eq!(slot_table.table[9], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 10],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 2,",
                "    };",
                "    let result = slot_table.all_absent();",
                "    assert_eq!(result.len(), 2);",
                "    assert!(result.iter().all(|&slot| slot.is_none()));",
                "    assert_eq!(slot_table.table[8], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "    assert_eq!(slot_table.table[9], Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 1],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let result = slot_table.all_absent();",
                "}"
              ],
              "oracle": [
                "    let mut slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 1], slots_per_state: 1, slots_for_captures: 1 };",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.iter().all(|slot| slot.is_none()));",
                "    assert_eq!(result.as_mut_ptr(), slot_table.table[0..1].as_mut_ptr());"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 1],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let result = slot_table.all_absent();",
                "    let mut slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 1], slots_per_state: 1, slots_for_captures: 1 };",
                "    assert_eq!(result.len(), 1);",
                "    assert!(result.iter().all(|slot| slot.is_none()));",
                "    assert_eq!(result.as_mut_ptr(), slot_table.table[0..1].as_mut_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 5],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 10,",
                "    };",
                "    let result = slot_table.all_absent();",
                "}"
              ],
              "oracle": [
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 5], slots_per_state: 5, slots_for_captures: 10 };",
                "    assert_eq!(slot_table.all_absent(), &mut slot_table.table[5..15]);",
                "    let slot_table = SlotTable { table: vec![None; 10], slots_per_state: 10, slots_for_captures: 5 };",
                "    assert!(slot_table.all_absent().iter().all(|&slot| slot.is_none()));",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 15], slots_per_state: 15, slots_for_captures: 5 };",
                "    assert_eq!(slot_table.all_absent().len(), 5);"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 5],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 10,",
                "    };",
                "    let result = slot_table.all_absent();",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 5], slots_per_state: 5, slots_for_captures: 10 };",
                "    assert_eq!(slot_table.all_absent(), &mut slot_table.table[5..15]);",
                "    let slot_table = SlotTable { table: vec![None; 10], slots_per_state: 10, slots_for_captures: 5 };",
                "    assert!(slot_table.all_absent().iter().all(|&slot| slot.is_none()));",
                "    let slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())); 15], slots_per_state: 15, slots_for_captures: 5 };",
                "    assert_eq!(slot_table.all_absent().len(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: Vec::new(),",
                "        slots_per_state: 0,",
                "        slots_for_captures: 0,",
                "    };",
                "    let result = slot_table.all_absent();",
                "}"
              ],
              "oracle": [
                "    let mut slot_table = SlotTable { table: vec![None; 5], slots_per_state: 5, slots_for_captures: 2 }; assert_eq!(slot_table.all_absent().len(), 2);",
                "    let mut slot_table = SlotTable { table: vec![None; 3], slots_per_state: 3, slots_for_captures: 3 }; assert_eq!(slot_table.all_absent().len(), 3);",
                "    let mut slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()), None, None, None, None), Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())], slots_per_state: 5, slots_for_captures: 2 }; assert!(slot_table.all_absent().iter().all(|&slot| slot.is_none()));",
                "    let mut slot_table = SlotTable { table: vec![None; 4], slots_per_state: 4, slots_for_captures: 1 }; let absent = slot_table.all_absent(); assert_eq!(absent.len(), 1); assert!(absent[0].is_none());",
                "    let mut slot_table = SlotTable { table: vec![None; 6], slots_per_state: 6, slots_for_captures: 0 }; assert_eq!(slot_table.all_absent().len(), 0);",
                "    let mut slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()), None, None, None, None, None)], slots_per_state: 6, slots_for_captures: 1 }; assert!(slot_table.all_absent()[0].is_none());"
              ],
              "code": [
                "{",
                "    let mut slot_table = SlotTable {",
                "        table: Vec::new(),",
                "        slots_per_state: 0,",
                "        slots_for_captures: 0,",
                "    };",
                "    let result = slot_table.all_absent();",
                "    let mut slot_table = SlotTable { table: vec![None; 5], slots_per_state: 5, slots_for_captures: 2 }; assert_eq!(slot_table.all_absent().len(), 2);",
                "    let mut slot_table = SlotTable { table: vec![None; 3], slots_per_state: 3, slots_for_captures: 3 }; assert_eq!(slot_table.all_absent().len(), 3);",
                "    let mut slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()), None, None, None, None), Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())], slots_per_state: 5, slots_for_captures: 2 }; assert!(slot_table.all_absent().iter().all(|&slot| slot.is_none()));",
                "    let mut slot_table = SlotTable { table: vec![None; 4], slots_per_state: 4, slots_for_captures: 1 }; let absent = slot_table.all_absent(); assert_eq!(absent.len(), 1); assert!(absent[0].is_none());",
                "    let mut slot_table = SlotTable { table: vec![None; 6], slots_per_state: 6, slots_for_captures: 0 }; assert_eq!(slot_table.all_absent().len(), 0);",
                "    let mut slot_table = SlotTable { table: vec![Some(NonMaxUsize(NonZeroUsize::new(3).unwrap()), None, None, None, None, None)], slots_per_state: 6, slots_for_captures: 1 }; assert!(slot_table.all_absent()[0].is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}