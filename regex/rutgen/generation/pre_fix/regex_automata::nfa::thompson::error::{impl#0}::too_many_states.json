{
  "name": "regex_automata::nfa::thompson::error::{impl#0}::too_many_states",
  "mod_info": {
    "name": "nfa::thompson::error",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:61:1:61:11"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/error.rs:113:5:116:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: BuildError { kind: BuildErrorKind::TooManyStates { given, limit } }\n"
      ],
      "input_infer": "given values: 0 to StateID::LIMIT + 1 (inclusive) for testing both valid and overflow cases of 'given' for the TooManyStates error\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let given = 0;",
                "    let error = BuildError::too_many_states(given);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind(), &BuildErrorKind::TooManyStates { given: 0, limit: StateID::LIMIT });"
              ],
              "code": [
                "{",
                "    let given = 0;",
                "    let error = BuildError::too_many_states(given);",
                "    assert_eq!(error.kind(), &BuildErrorKind::TooManyStates { given: 0, limit: StateID::LIMIT });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let given = StateID::LIMIT;",
                "    let error = BuildError::too_many_states(given);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(error.kind(), &BuildErrorKind::TooManyStates { given, limit: StateID::LIMIT });"
              ],
              "code": [
                "{",
                "    let given = StateID::LIMIT;",
                "    let error = BuildError::too_many_states(given);",
                "    assert_eq!(error.kind(), &BuildErrorKind::TooManyStates { given, limit: StateID::LIMIT });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let given = StateID::LIMIT + 1;",
                "    let error = BuildError::too_many_states(given);",
                "}"
              ],
              "oracle": [
                "    error.kind().is_too_many_states()",
                "    error.kind().too_many_states().given == StateID::LIMIT + 1",
                "    error.kind().too_many_states().limit == StateID::LIMIT",
                "    error.size_limit().is_none()"
              ],
              "code": [
                "{",
                "    let given = StateID::LIMIT + 1;",
                "    let error = BuildError::too_many_states(given);",
                "    error.kind().is_too_many_states()",
                "    error.kind().too_many_states().given == StateID::LIMIT + 1",
                "    error.kind().too_many_states().limit == StateID::LIMIT",
                "    error.size_limit().is_none()",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}