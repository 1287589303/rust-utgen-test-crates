{
  "name": "regex_automata::dfa::remapper::onepass::{impl#0}::swap_states",
  "mod_info": {
    "name": "dfa::remapper::onepass",
    "loc": "regex-automata/src/dfa/remapper.rs:217:1:242:2"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/remapper.rs:234:9:236:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid StateID values for id1 and id2 (0 to highest StateID value), ensure id1 and id2 are different, and test scenarios where ids are equal and where ids exceed available StateIDs within DFA's state size limits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA(Arc::new(Inner::default())),",
                "        table: vec![Transition { start: 0, end: 255, next: StateID(1) }; 512],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.swap_states(StateID(1), StateID(2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.table[1 << dfa.stride2()], Transition { start: 0, end: 255, next: StateID(2) });",
                "    assert_eq!(dfa.table[2 << dfa.stride2()], Transition { start: 0, end: 255, next: StateID(1) });",
                "    assert_eq!(dfa.starts[0], StateID(0));",
                "    assert_eq!(dfa.min_match_id, StateID(1));",
                "    assert_eq!(dfa.alphabet_len, 256);",
                "    assert_eq!(dfa.stride2, 9);",
                "    assert_eq!(dfa.pateps_offset, 0);",
                "    assert_eq!(dfa.explicit_slot_start, 0);"
              ],
              "code": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA(Arc::new(Inner::default())),",
                "        table: vec![Transition { start: 0, end: 255, next: StateID(1) }; 512],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.swap_states(StateID(1), StateID(2));",
                "    assert_eq!(dfa.table[1 << dfa.stride2()], Transition { start: 0, end: 255, next: StateID(2) });",
                "    assert_eq!(dfa.table[2 << dfa.stride2()], Transition { start: 0, end: 255, next: StateID(1) });",
                "    assert_eq!(dfa.starts[0], StateID(0));",
                "    assert_eq!(dfa.min_match_id, StateID(1));",
                "    assert_eq!(dfa.alphabet_len, 256);",
                "    assert_eq!(dfa.stride2, 9);",
                "    assert_eq!(dfa.pateps_offset, 0);",
                "    assert_eq!(dfa.explicit_slot_start, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA(Arc::new(Inner::default())),",
                "        table: vec![Transition { start: 0, end: 255, next: StateID(1) }; 512],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.swap_states(StateID(1), StateID(1));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 0].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 1].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 2].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 3].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 4].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 5].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 6].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 7].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 8].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 9].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 10].next, StateID(1));"
              ],
              "code": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA(Arc::new(Inner::default())),",
                "        table: vec![Transition { start: 0, end: 255, next: StateID(1) }; 512],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.swap_states(StateID(1), StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 0].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 1].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 2].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 3].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 4].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 5].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 6].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 7].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 8].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 9].next, StateID(1));",
                "    assert_eq!(dfa.table[1 << dfa.stride2() + 10].next, StateID(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA(Arc::new(Inner::default())),",
                "        table: vec![Transition { start: 0, end: 255, next: StateID(1) }; 512],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.swap_states(StateID(511), StateID(512));",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| dfa.swap_states(StateID(511), StateID(512))).is_err());"
              ],
              "code": [
                "{",
                "    let mut dfa = DFA {",
                "        config: Config::default(),",
                "        nfa: NFA(Arc::new(Inner::default())),",
                "        table: vec![Transition { start: 0, end: 255, next: StateID(1) }; 512],",
                "        starts: vec![StateID(0)],",
                "        min_match_id: StateID(1),",
                "        classes: ByteClasses([0; 256]),",
                "        alphabet_len: 256,",
                "        stride2: 9,",
                "        pateps_offset: 0,",
                "        explicit_slot_start: 0,",
                "    };",
                "    dfa.swap_states(StateID(511), StateID(512));",
                "    assert!(std::panic::catch_unwind(|| dfa.swap_states(StateID(511), StateID(512))).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}