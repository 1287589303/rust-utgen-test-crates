{
  "name": "regex_automata::hybrid::dfa::{impl#8}::starts_for_each_pattern",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:3153:5:3156:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "self.starts_for_each_pattern set to true or false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.starts_for_each_pattern, Some(true));"
              ],
              "code": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(true);",
                "    assert_eq!(config.starts_for_each_pattern, Some(true));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.starts_for_each_pattern, Some(false));"
              ],
              "code": [
                "{",
                "    let config = Config::new().starts_for_each_pattern(false);",
                "    assert_eq!(config.starts_for_each_pattern, Some(false));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}