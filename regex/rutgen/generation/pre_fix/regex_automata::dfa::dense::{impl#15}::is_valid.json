{
  "name": "regex_automata::dfa::dense::{impl#15}::is_valid",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:3756:5:3759:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: id < self.table().len() at line 3758 is true\n",
        "expected return value/type: id % self.stride() == 0\n"
      ],
      "input_infer": "0 < id < 2^32 AND id % 2^1 == 0 to id % 2^9 == 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 512],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let id = StateID(0);",
                "    transition_table.is_valid(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_table.is_valid(StateID(0)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(1)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(2)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(3)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(4)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(255)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(256)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(511)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(512)), false);"
              ],
              "code": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 512],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 1,",
                "    };",
                "    let id = StateID(0);",
                "    transition_table.is_valid(id);",
                "    assert_eq!(transition_table.is_valid(StateID(0)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(1)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(2)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(3)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(4)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(255)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(256)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(511)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(512)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 256],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 8,",
                "    };",
                "    let id = StateID(0);",
                "    transition_table.is_valid(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_table.is_valid(StateID(0)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(256)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(4)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(5)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(2)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(8)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(15)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(7)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(512)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(1)), false);"
              ],
              "code": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 256],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 8,",
                "    };",
                "    let id = StateID(0);",
                "    transition_table.is_valid(id);",
                "    assert_eq!(transition_table.is_valid(StateID(0)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(256)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(4)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(5)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(2)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(8)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(15)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(7)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(512)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(1)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 512],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 3,",
                "    };",
                "    let id = StateID(2);",
                "    transition_table.is_valid(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_table.is_valid(StateID(0)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(4)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(8)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(512)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(1)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(3)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(5)), false);"
              ],
              "code": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 512],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 3,",
                "    };",
                "    let id = StateID(2);",
                "    transition_table.is_valid(id);",
                "    assert_eq!(transition_table.is_valid(StateID(0)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(4)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(8)), true);",
                "    assert_eq!(transition_table.is_valid(StateID(512)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(1)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(3)), false);",
                "    assert_eq!(transition_table.is_valid(StateID(5)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 512],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 4,",
                "    };",
                "    let id = StateID(4);",
                "    transition_table.is_valid(id);",
                "}"
              ],
              "oracle": [
                "    assert!(transition_table.is_valid(StateID(0)));",
                "    assert!(transition_table.is_valid(StateID(4)));",
                "    assert!(transition_table.is_valid(StateID(8)));",
                "    assert!(!transition_table.is_valid(StateID(1)));",
                "    assert!(!transition_table.is_valid(StateID(2)));",
                "    assert!(!transition_table.is_valid(StateID(3)));",
                "    assert!(transition_table.is_valid(StateID(12)));",
                "    assert!(transition_table.is_valid(StateID(16)));",
                "    assert!(transition_table.is_valid(StateID(20)));",
                "    assert!(!transition_table.is_valid(StateID(5)));",
                "    assert!(!transition_table.is_valid(StateID(9)));",
                "    assert!(!transition_table.is_valid(StateID(10)));",
                "    assert!(!transition_table.is_valid(StateID(11)));",
                "    assert!(transition_table.is_valid(StateID(28)));",
                "    assert!(transition_table.is_valid(StateID(32)));",
                "    assert!(transition_table.is_valid(StateID(36)));",
                "    assert!(!transition_table.is_valid(StateID(6)));",
                "    assert!(!transition_table.is_valid(StateID(7)));",
                "    assert!(transition_table.is_valid(StateID(52)));",
                "    assert!(transition_table.is_valid(StateID(64)));",
                "    assert!(transition_table.is_valid(StateID(68)));"
              ],
              "code": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 512],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 4,",
                "    };",
                "    let id = StateID(4);",
                "    transition_table.is_valid(id);",
                "    assert!(transition_table.is_valid(StateID(0)));",
                "    assert!(transition_table.is_valid(StateID(4)));",
                "    assert!(transition_table.is_valid(StateID(8)));",
                "    assert!(!transition_table.is_valid(StateID(1)));",
                "    assert!(!transition_table.is_valid(StateID(2)));",
                "    assert!(!transition_table.is_valid(StateID(3)));",
                "    assert!(transition_table.is_valid(StateID(12)));",
                "    assert!(transition_table.is_valid(StateID(16)));",
                "    assert!(transition_table.is_valid(StateID(20)));",
                "    assert!(!transition_table.is_valid(StateID(5)));",
                "    assert!(!transition_table.is_valid(StateID(9)));",
                "    assert!(!transition_table.is_valid(StateID(10)));",
                "    assert!(!transition_table.is_valid(StateID(11)));",
                "    assert!(transition_table.is_valid(StateID(28)));",
                "    assert!(transition_table.is_valid(StateID(32)));",
                "    assert!(transition_table.is_valid(StateID(36)));",
                "    assert!(!transition_table.is_valid(StateID(6)));",
                "    assert!(!transition_table.is_valid(StateID(7)));",
                "    assert!(transition_table.is_valid(StateID(52)));",
                "    assert!(transition_table.is_valid(StateID(64)));",
                "    assert!(transition_table.is_valid(StateID(68)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 256],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 7,",
                "    };",
                "    let id = StateID(512);",
                "    transition_table.is_valid(id);",
                "}"
              ],
              "oracle": [
                "    let transition_table = TransitionTable { table: vec![0; 256], classes: ByteClasses([0; 256]), stride2: 7 };",
                "    let id = StateID(512);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    assert!(id.as_usize() % transition_table.stride() == 0);",
                "    let id = StateID(0);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(256);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    assert!(id.as_usize() % transition_table.stride() == 0);",
                "    let id = StateID(511);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(1024);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(128);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    assert!(id.as_usize() % transition_table.stride() == 0);",
                "    let id = StateID(256);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    let id = StateID(448);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(512);",
                "    assert!(transition_table.is_valid(id) == true);"
              ],
              "code": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 256],",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 7,",
                "    };",
                "    let id = StateID(512);",
                "    transition_table.is_valid(id);",
                "    let transition_table = TransitionTable { table: vec![0; 256], classes: ByteClasses([0; 256]), stride2: 7 };",
                "    let id = StateID(512);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    assert!(id.as_usize() % transition_table.stride() == 0);",
                "    let id = StateID(0);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(256);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    assert!(id.as_usize() % transition_table.stride() == 0);",
                "    let id = StateID(511);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(1024);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(128);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    assert!(id.as_usize() % transition_table.stride() == 0);",
                "    let id = StateID(256);",
                "    assert!(transition_table.is_valid(id) == true);",
                "    let id = StateID(448);",
                "    assert!(transition_table.is_valid(id) == false);",
                "    let id = StateID(512);",
                "    assert!(transition_table.is_valid(id) == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: id < self.table().len() at line 3758 is false, with bound id == self.table().len()\n",
        "expected return value/type: id < self.table().len() && id % self.stride() == 0\n"
      ],
      "input_infer": "id == self.table().len() || id % self.stride() != 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 10],  // Length 10",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 4,  // Stride of 16",
                "    };",
                "    let id = transition_table.to_state_id(10);  // id == self.table().len()",
                "    transition_table.is_valid(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);"
              ],
              "code": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 10],  // Length 10",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 4,  // Stride of 16",
                "    };",
                "    let id = transition_table.to_state_id(10);  // id == self.table().len()",
                "    transition_table.is_valid(id);",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 10],  // Length 10",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 4,  // Stride of 16",
                "    };",
                "    let id = transition_table.to_state_id(3);  // 3 is not a multiple of 16",
                "    transition_table.is_valid(id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);  // id == self.table().len()",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(3)), false);  // id is not a multiple of stride",
                "    assert!(transition_table.table().len() == 10);  // table length check for precondition",
                "    assert!(transition_table.stride() == 16);  // stride check for validation",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(0)), true);  // valid offset for initial state",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(16)), true);  // valid offset, multiple of stride"
              ],
              "code": [
                "{",
                "    let transition_table = TransitionTable {",
                "        table: vec![0; 10],  // Length 10",
                "        classes: ByteClasses([0; 256]),",
                "        stride2: 4,  // Stride of 16",
                "    };",
                "    let id = transition_table.to_state_id(3);  // 3 is not a multiple of 16",
                "    transition_table.is_valid(id);",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(10)), false);  // id == self.table().len()",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(3)), false);  // id is not a multiple of stride",
                "    assert!(transition_table.table().len() == 10);  // table length check for precondition",
                "    assert!(transition_table.stride() == 16);  // stride check for validation",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(0)), true);  // valid offset for initial state",
                "    assert_eq!(transition_table.is_valid(transition_table.to_state_id(16)), true);  // valid offset, multiple of stride",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}