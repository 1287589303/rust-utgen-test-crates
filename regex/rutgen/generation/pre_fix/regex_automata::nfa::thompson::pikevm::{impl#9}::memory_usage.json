{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#9}::memory_usage",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:2031:5:2033:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.set.memory_usage() + self.slot_table.memory_usage()\n"
      ],
      "input_infer": "set capacity: 0 to 1000, slots_per_state: 1 to 10, table length: 0 to 1000\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let slot_table = SlotTable::new();",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(active_states.memory_usage(), 0);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let slot_table = SlotTable::new();",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 0],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(active_states.memory_usage(), 0);",
                "    assert!(active_states.set.is_empty());",
                "    assert_eq!(active_states.slot_table.memory_usage(), 0);",
                "    assert_eq!(active_states.set.memory_usage(), 0);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(0);",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 0],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), 0);",
                "    assert!(active_states.set.is_empty());",
                "    assert_eq!(active_states.slot_table.memory_usage(), 0);",
                "    assert_eq!(active_states.set.memory_usage(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    for i in 0..5 {",
                "        sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 2 * 5],",
                "        slots_per_state: 2,",
                "        slots_for_captures: 2,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let sparse_set = SparseSet::new(5);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    sparse_set.insert(0 as StateID);",
                "    assert_eq!(sparse_set.len(), 1);",
                "    assert!(sparse_set.contains(0 as StateID));",
                "    assert!(!sparse_set.contains(1 as StateID));",
                "    let mut sparse_set = SparseSet::new(5);",
                "    for i in 0..5 {",
                "    sparse_set.insert(i as StateID);",
                "    }",
                "    assert_eq!(sparse_set.memory_usage(), 5 * StateID::SIZE * 2);",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 2 * 5],",
                "    slots_per_state: 2,",
                "    slots_for_captures: 2,",
                "    };",
                "    assert_eq!(slot_table.memory_usage(), 2 * 5 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    assert_eq!(active_states.memory_usage(), sparse_set.memory_usage() + slot_table.memory_usage());",
                "    active_states.set.clear();",
                "    assert_eq!(active_states.set.len(), 0);",
                "    active_states.slot_table.reset(&PikeVM);",
                "    assert_eq!(active_states.slot_table.table.len(), 10);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(5);",
                "    for i in 0..5 {",
                "        sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 2 * 5],",
                "        slots_per_state: 2,",
                "        slots_for_captures: 2,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "    let sparse_set = SparseSet::new(5);",
                "    assert_eq!(sparse_set.len(), 0);",
                "    sparse_set.insert(0 as StateID);",
                "    assert_eq!(sparse_set.len(), 1);",
                "    assert!(sparse_set.contains(0 as StateID));",
                "    assert!(!sparse_set.contains(1 as StateID));",
                "    let mut sparse_set = SparseSet::new(5);",
                "    for i in 0..5 {",
                "    sparse_set.insert(i as StateID);",
                "    }",
                "    assert_eq!(sparse_set.memory_usage(), 5 * StateID::SIZE * 2);",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 2 * 5],",
                "    slots_per_state: 2,",
                "    slots_for_captures: 2,",
                "    };",
                "    assert_eq!(slot_table.memory_usage(), 2 * 5 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    assert_eq!(active_states.memory_usage(), sparse_set.memory_usage() + slot_table.memory_usage());",
                "    active_states.set.clear();",
                "    assert_eq!(active_states.set.len(), 0);",
                "    active_states.slot_table.reset(&PikeVM);",
                "    assert_eq!(active_states.slot_table.table.len(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "        sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 1000],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "    assert!(sparse_set.insert(i as StateID));",
                "    }",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 1000],",
                "    slots_per_state: 5,",
                "    slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let expected_memory_usage = active_states.set.memory_usage() + active_states.slot_table.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "        sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 1000],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "    let sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "    assert!(sparse_set.insert(i as StateID));",
                "    }",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 1000],",
                "    slots_per_state: 5,",
                "    slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let expected_memory_usage = active_states.set.memory_usage() + active_states.slot_table.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(10);",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(active_states.memory_usage(), active_states.set.memory_usage() + active_states.slot_table.memory_usage());"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(10);",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 10],",
                "        slots_per_state: 1,",
                "        slots_for_captures: 1,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), active_states.set.memory_usage() + active_states.slot_table.memory_usage());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let sparse_set = SparseSet::new(20);",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 40],",
                "        slots_per_state: 2,",
                "        slots_for_captures: 2,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let sparse_set = SparseSet::new(20);",
                "    assert_eq!(sparse_set.memory_usage(), 20 * StateID::SIZE);",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 40],",
                "    slots_per_state: 2,",
                "    slots_for_captures: 2,",
                "    };",
                "    assert_eq!(slot_table.memory_usage(), 40 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let expected_memory_usage = sparse_set.memory_usage() + slot_table.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let sparse_set = SparseSet::new(20);",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 40],",
                "        slots_per_state: 2,",
                "        slots_for_captures: 2,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "    let sparse_set = SparseSet::new(20);",
                "    assert_eq!(sparse_set.memory_usage(), 20 * StateID::SIZE);",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 40],",
                "    slots_per_state: 2,",
                "    slots_for_captures: 2,",
                "    };",
                "    assert_eq!(slot_table.memory_usage(), 40 * core::mem::size_of::<Option<NonMaxUsize>>());",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let expected_memory_usage = sparse_set.memory_usage() + slot_table.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "        sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 5000],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "}"
              ],
              "oracle": [
                "    let mut sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "    sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 5000],",
                "    slots_per_state: 5,",
                "    slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let expected_memory_usage = active_states.set.memory_usage() + active_states.slot_table.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), expected_memory_usage);"
              ],
              "code": [
                "{",
                "    let mut sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "        sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "        table: vec![None; 5000],",
                "        slots_per_state: 5,",
                "        slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let _ = active_states.memory_usage();",
                "    let mut sparse_set = SparseSet::new(1000);",
                "    for i in 0..1000 {",
                "    sparse_set.insert(i as StateID);",
                "    }",
                "    let slot_table = SlotTable {",
                "    table: vec![None; 5000],",
                "    slots_per_state: 5,",
                "    slots_for_captures: 5,",
                "    };",
                "    let active_states = ActiveStates { set: sparse_set, slot_table };",
                "    let expected_memory_usage = active_states.set.memory_usage() + active_states.slot_table.memory_usage();",
                "    assert_eq!(active_states.memory_usage(), expected_memory_usage);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}