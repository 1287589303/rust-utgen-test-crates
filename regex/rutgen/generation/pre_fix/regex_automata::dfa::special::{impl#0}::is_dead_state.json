{
  "name": "regex_automata::dfa::special::{impl#0}::is_dead_state",
  "mod_info": {
    "name": "dfa::special",
    "loc": "regex-automata/src/dfa/mod.rs:358:1:358:13"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/special.rs:427:5:429:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: StateID input equal to DEAD, StateID input less than DEAD, StateID input greater than DEAD.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id = StateID(DEAD);",
                "    let special = Special::new();",
                "    special.is_dead_state(state_id);",
                "}"
              ],
              "oracle": [
                "    assert!(special.is_dead_state(StateID(DEAD)));"
              ],
              "code": [
                "{",
                "    let state_id = StateID(DEAD);",
                "    let special = Special::new();",
                "    special.is_dead_state(state_id);",
                "    assert!(special.is_dead_state(StateID(DEAD)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id = StateID(DEAD - 1);",
                "    let special = Special::new();",
                "    special.is_dead_state(state_id);",
                "}"
              ],
              "oracle": [
                "    assert!(special.is_dead_state(StateID(DEAD - 1)) == false);",
                "    assert!(special.is_dead_state(StateID(DEAD)) == true);",
                "    assert!(special.is_dead_state(StateID(DEAD + 1)) == false);"
              ],
              "code": [
                "{",
                "    let state_id = StateID(DEAD - 1);",
                "    let special = Special::new();",
                "    special.is_dead_state(state_id);",
                "    assert!(special.is_dead_state(StateID(DEAD - 1)) == false);",
                "    assert!(special.is_dead_state(StateID(DEAD)) == true);",
                "    assert!(special.is_dead_state(StateID(DEAD + 1)) == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state_id = StateID(DEAD + 1);",
                "    let special = Special::new();",
                "    special.is_dead_state(state_id);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(special.is_dead_state(StateID(DEAD)), true);",
                "    assert_eq!(special.is_dead_state(StateID(DEAD - 1)), false);",
                "    assert_eq!(special.is_dead_state(StateID(DEAD + 2)), false);",
                "    assert_eq!(special.is_dead_state(StateID(0)), false);",
                "    assert_eq!(special.is_dead_state(StateID(1)), false);"
              ],
              "code": [
                "{",
                "    let state_id = StateID(DEAD + 1);",
                "    let special = Special::new();",
                "    special.is_dead_state(state_id);",
                "    assert_eq!(special.is_dead_state(StateID(DEAD)), true);",
                "    assert_eq!(special.is_dead_state(StateID(DEAD - 1)), false);",
                "    assert_eq!(special.is_dead_state(StateID(DEAD + 2)), false);",
                "    assert_eq!(special.is_dead_state(StateID(0)), false);",
                "    assert_eq!(special.is_dead_state(StateID(1)), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}