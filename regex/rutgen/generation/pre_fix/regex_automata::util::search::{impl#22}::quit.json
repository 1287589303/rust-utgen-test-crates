{
  "name": "regex_automata::util::search::{impl#22}::quit",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1815:5:1817:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "byte: 0 to 255 (inclusive), offset: 0 to usize::MAX (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 0;",
                "    let offset = 0;",
                "    let _error = MatchError::quit(byte, offset);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 0, offset: 0 });",
                "    let byte = 255;",
                "    let offset = 10;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 255, offset: 10 });",
                "    let byte = 128;",
                "    let offset = 5;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 128, offset: 5 });",
                "    let byte = 1;",
                "    let offset = usize::MAX;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 1, offset: usize::MAX });"
              ],
              "code": [
                "{",
                "    let byte = 0;",
                "    let offset = 0;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 0, offset: 0 });",
                "    let byte = 255;",
                "    let offset = 10;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 255, offset: 10 });",
                "    let byte = 128;",
                "    let offset = 5;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 128, offset: 5 });",
                "    let byte = 1;",
                "    let offset = usize::MAX;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 1, offset: usize::MAX });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 0;",
                "    let offset = usize::MAX;",
                "    let _error = MatchError::quit(byte, offset);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 0, offset: usize::MAX });"
              ],
              "code": [
                "{",
                "    let byte = 0;",
                "    let offset = usize::MAX;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 0, offset: usize::MAX });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 255;",
                "    let offset = 0;",
                "    let _error = MatchError::quit(byte, offset);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 255, offset: 0 });",
                "    assert_eq!(matches!(_error.kind(), MatchErrorKind::Quit { .. }), true);",
                "    assert_eq!(_error.0, MatchError::new(MatchErrorKind::Quit { byte: 255, offset: 0 }).0);",
                "    assert!(matches!(_error, MatchError { 0: _ }));"
              ],
              "code": [
                "{",
                "    let byte = 255;",
                "    let offset = 0;",
                "    let _error = MatchError::quit(byte, offset);",
                "    assert_eq!(_error.kind(), &MatchErrorKind::Quit { byte: 255, offset: 0 });",
                "    assert_eq!(matches!(_error.kind(), MatchErrorKind::Quit { .. }), true);",
                "    assert_eq!(_error.0, MatchError::new(MatchErrorKind::Quit { byte: 255, offset: 0 }).0);",
                "    assert!(matches!(_error, MatchError { 0: _ }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 255;",
                "    let offset = usize::MAX;",
                "    let _error = MatchError::quit(byte, offset);",
                "}"
              ],
              "oracle": [
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: usize::MAX }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 0, offset: 0 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 1, offset: 1 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 2, offset: 2 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 128, offset: 128 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 127, offset: 127 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 254, offset: 254 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: usize::MAX - 1 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: 0 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: 1 }"
              ],
              "code": [
                "{",
                "    let byte = 255;",
                "    let offset = usize::MAX;",
                "    let _error = MatchError::quit(byte, offset);",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: usize::MAX }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 0, offset: 0 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 1, offset: 1 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 2, offset: 2 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 128, offset: 128 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 127, offset: 127 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 254, offset: 254 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: usize::MAX - 1 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: 0 }",
                "    _error.kind() == &MatchErrorKind::Quit { byte: 255, offset: 1 }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let byte = 128;",
                "    let offset = 12345;",
                "    let _error = MatchError::quit(byte, offset);",
                "}"
              ],
              "oracle": [
                "    let expected_error = MatchError::new(MatchErrorKind::Quit { byte: 128, offset: 12345 });",
                "    assert_eq!(_error, expected_error);"
              ],
              "code": [
                "{",
                "    let byte = 128;",
                "    let offset = 12345;",
                "    let _error = MatchError::quit(byte, offset);",
                "    let expected_error = MatchError::new(MatchErrorKind::Quit { byte: 128, offset: 12345 });",
                "    assert_eq!(_error, expected_error);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}