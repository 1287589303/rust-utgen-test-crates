{
  "name": "regex::builders::string::{impl#0}::unicode",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:293:9:296:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "unicode(true or false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.unicode(true);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    let builder = RegexBuilder::new(r\"\\w\");",
                "    assert_eq!(builder.unicode(true), &builder);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert!(regex.is_match(\"α\"));",
                "    assert!(regex.is_match(\"A\"));",
                "    assert!(regex.is_match(\"1\"));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.unicode(true);",
                "    let _ = builder.build().unwrap();",
                "    let builder = RegexBuilder::new(r\"\\w\");",
                "    assert_eq!(builder.unicode(true), &builder);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    let regex = result.unwrap();",
                "    assert!(regex.is_match(\"α\"));",
                "    assert!(regex.is_match(\"A\"));",
                "    assert!(regex.is_match(\"1\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.unicode(false);",
                "    let _ = builder.build().unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    assert_eq!(builder.unicode(false), &mut builder);",
                "    let _ = builder.build().unwrap();",
                "    assert!(!builder.build().unwrap().is_match(\"δ\"));"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    builder.unicode(false);",
                "    let _ = builder.build().unwrap();",
                "    let mut builder = RegexBuilder::new(r\"\\w\");",
                "    assert_eq!(builder.unicode(false), &mut builder);",
                "    let _ = builder.build().unwrap();",
                "    assert!(!builder.build().unwrap().is_match(\"δ\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}