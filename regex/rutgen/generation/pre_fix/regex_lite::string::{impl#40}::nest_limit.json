{
  "name": "regex_lite::string::{impl#40}::nest_limit",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2972:5:2975:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "valid inputs for nest_limit: 0, 1, 2, 3, and maximum u32 value (4,294,967,295)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\");",
                "    builder.nest_limit(0);",
                "    let result = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(builder.hir_config.nest_limit, 0);",
                "    ",
                "    let mut builder_a = RegexBuilder::new(r\"a\");",
                "    builder_a.nest_limit(0);",
                "    let result_a = builder_a.build();",
                "    assert!(result_a.is_ok());",
                "    assert_eq!(builder_a.hir_config.nest_limit, 0);",
                "    ",
                "    let mut builder_nested = RegexBuilder::new(r\"(a)\");",
                "    builder_nested.nest_limit(0);",
                "    let result_nested = builder_nested.build();",
                "    assert!(result_nested.is_err());",
                "    assert_eq!(builder_nested.hir_config.nest_limit, 0);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"\");",
                "    builder.nest_limit(0);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    assert_eq!(builder.hir_config.nest_limit, 0);",
                "    ",
                "    let mut builder_a = RegexBuilder::new(r\"a\");",
                "    builder_a.nest_limit(0);",
                "    let result_a = builder_a.build();",
                "    assert!(result_a.is_ok());",
                "    assert_eq!(builder_a.hir_config.nest_limit, 0);",
                "    ",
                "    let mut builder_nested = RegexBuilder::new(r\"(a)\");",
                "    builder_nested.nest_limit(0);",
                "    let result_nested = builder_nested.build();",
                "    assert!(result_nested.is_err());",
                "    assert_eq!(builder_nested.hir_config.nest_limit, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"a\");",
                "    builder.nest_limit(1);",
                "    let result = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(builder.hir_config.nest_limit, 1);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"a\");",
                "    builder.nest_limit(1);",
                "    let result = builder.build();",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(builder.hir_config.nest_limit, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"(a)\");",
                "    builder.nest_limit(2);",
                "    let result = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.hir_config.nest_limit, 2);",
                "    assert!(result.is_err());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"(a)(b)\");",
                "    builder.nest_limit(3);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"(a)(b)(c)\");",
                "    builder.nest_limit(2);",
                "    let result = builder.build();",
                "    assert!(result.is_err());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"()\");",
                "    builder.nest_limit(1);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"(())\");",
                "    builder.nest_limit(0);",
                "    let result = builder.build();",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"(a)\");",
                "    builder.nest_limit(2);",
                "    let result = builder.build();",
                "    assert_eq!(builder.hir_config.nest_limit, 2);",
                "    assert!(result.is_err());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"(a)(b)\");",
                "    builder.nest_limit(3);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"(a)(b)(c)\");",
                "    builder.nest_limit(2);",
                "    let result = builder.build();",
                "    assert!(result.is_err());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"()\");",
                "    builder.nest_limit(1);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut builder = RegexBuilder::new(r\"(())\");",
                "    builder.nest_limit(0);",
                "    let result = builder.build();",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"((a))\");",
                "    builder.nest_limit(3);",
                "    let result = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(builder.nest_limit(0), &mut builder);",
                "    assert_eq!(builder.nest_limit(1), &mut builder);",
                "    assert_eq!(builder.nest_limit(2), &mut builder);",
                "    assert_eq!(builder.nest_limit(3), &mut builder);",
                "    assert!(builder.nest_limit(0).build().is_err());",
                "    assert!(builder.nest_limit(1).build().is_err());",
                "    assert!(builder.nest_limit(2).build().is_err());",
                "    assert!(builder.nest_limit(3).build().is_ok());",
                "    assert!(builder.nest_limit(4).build().is_ok());"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"((a))\");",
                "    builder.nest_limit(3);",
                "    let result = builder.build();",
                "    assert_eq!(builder.nest_limit(0), &mut builder);",
                "    assert_eq!(builder.nest_limit(1), &mut builder);",
                "    assert_eq!(builder.nest_limit(2), &mut builder);",
                "    assert_eq!(builder.nest_limit(3), &mut builder);",
                "    assert!(builder.nest_limit(0).build().is_err());",
                "    assert!(builder.nest_limit(1).build().is_err());",
                "    assert!(builder.nest_limit(2).build().is_err());",
                "    assert!(builder.nest_limit(3).build().is_ok());",
                "    assert!(builder.nest_limit(4).build().is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"(((a)))\");",
                "    builder.nest_limit(u32::MAX);",
                "    let result = builder.build();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(builder.hir_config.nest_limit, u32::MAX);"
              ],
              "code": [
                "{",
                "    let mut builder = RegexBuilder::new(r\"(((a)))\");",
                "    builder.nest_limit(u32::MAX);",
                "    let result = builder.build();",
                "    assert!(result.is_ok());",
                "    assert_eq!(builder.hir_config.nest_limit, u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}