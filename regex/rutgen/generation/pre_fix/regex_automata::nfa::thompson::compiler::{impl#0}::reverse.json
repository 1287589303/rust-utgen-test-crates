{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::reverse",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:199:5:202:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self\n"
      ],
      "input_infer": "utf8: [true, false], reverse: [true, false], nfa_size_limit: [None, Some(0), Some(1), Some(usize::MAX)], shrink: [true, false], which_captures: [All, Implicit, None], look_matcher: [LookMatcher { lineterm: any valid value }]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .reverse(true);",
                "}"
              ],
              "oracle": [
                "    assert!(config.get_reverse() == true);",
                "    assert!(config.get_which_captures() == WhichCaptures::None);",
                "    assert!(config.get_utf8().is_none());",
                "    assert!(config.get_nfa_size_limit().is_none());",
                "    assert!(config.get_shrink() == false);",
                "    assert!(config.get_look_matcher().lineterm == DebugByte::default());",
                "    assert!(config.get_unanchored_prefix().is_none());"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .reverse(true);",
                "    assert!(config.get_reverse() == true);",
                "    assert!(config.get_which_captures() == WhichCaptures::None);",
                "    assert!(config.get_utf8().is_none());",
                "    assert!(config.get_nfa_size_limit().is_none());",
                "    assert!(config.get_shrink() == false);",
                "    assert!(config.get_look_matcher().lineterm == DebugByte::default());",
                "    assert!(config.get_unanchored_prefix().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .reverse(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_reverse(), false);",
                "    let config = Config::new()",
                "    .reverse(true);",
                "    assert_eq!(config.get_reverse(), true);",
                "    let config_with_reverse = Config::new()",
                "    .reverse(true)",
                "    .reverse(false);",
                "    assert_eq!(config_with_reverse.get_reverse(), false);",
                "    let reversed_config = config.reverse(true);",
                "    assert_eq!(reversed_config.get_reverse(), true);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .reverse(false);",
                "    assert_eq!(config.get_reverse(), false);",
                "    let config = Config::new()",
                "    .reverse(true);",
                "    assert_eq!(config.get_reverse(), true);",
                "    let config_with_reverse = Config::new()",
                "    .reverse(true)",
                "    .reverse(false);",
                "    assert_eq!(config_with_reverse.get_reverse(), false);",
                "    let reversed_config = config.reverse(true);",
                "    assert_eq!(reversed_config.get_reverse(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(None);",
                "}"
              ],
              "oracle": [
                "    let config_with_reverse_enabled = Config::new().reverse(true);",
                "    assert_eq!(config_with_reverse_enabled.get_reverse(), true);",
                "    ",
                "    let config_with_reverse_disabled = Config::new().reverse(false);",
                "    assert_eq!(config_with_reverse_disabled.get_reverse(), false);",
                "    ",
                "    let config_with_captures = Config::new().which_captures(WhichCaptures::All).reverse(true);",
                "    assert!(config_with_captures.reverse(true).get_reverse().is_some());",
                "    ",
                "    let config_invalid_reverse_with_captures = Config::new().which_captures(WhichCaptures::None).reverse(true);",
                "    assert!(config_invalid_reverse_with_captures.get_reverse());",
                "    ",
                "    let config_default = Config::new();",
                "    assert_eq!(config_default.get_reverse(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(None);",
                "    let config_with_reverse_enabled = Config::new().reverse(true);",
                "    assert_eq!(config_with_reverse_enabled.get_reverse(), true);",
                "    ",
                "    let config_with_reverse_disabled = Config::new().reverse(false);",
                "    assert_eq!(config_with_reverse_disabled.get_reverse(), false);",
                "    ",
                "    let config_with_captures = Config::new().which_captures(WhichCaptures::All).reverse(true);",
                "    assert!(config_with_captures.reverse(true).get_reverse().is_some());",
                "    ",
                "    let config_invalid_reverse_with_captures = Config::new().which_captures(WhichCaptures::None).reverse(true);",
                "    assert!(config_invalid_reverse_with_captures.get_reverse());",
                "    ",
                "    let config_default = Config::new();",
                "    assert_eq!(config_default.get_reverse(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_nfa_size_limit(), Some(0));",
                "    assert!(config.get_reverse().is_none());",
                "    assert!(config.get_utf8().is_none());",
                "    assert!(config.get_shrink().is_none());",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert!(config.get_look_matcher().lineterm.is_empty());"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(0));",
                "    assert_eq!(config.get_nfa_size_limit(), Some(0));",
                "    assert!(config.get_reverse().is_none());",
                "    assert!(config.get_utf8().is_none());",
                "    assert!(config.get_shrink().is_none());",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert!(config.get_look_matcher().lineterm.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(1));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_nfa_size_limit(), Some(1));",
                "    assert_eq!(config.get_reverse(), false);",
                "    assert_eq!(config.get_utf8(), false);",
                "    assert_eq!(config.get_shrink(), false);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert!(config.get_look_matcher() == LookMatcher { lineterm: DebugByte::default() });",
                "    #[cfg(test)] assert_eq!(config.get_unanchored_prefix(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(1));",
                "    assert_eq!(config.get_nfa_size_limit(), Some(1));",
                "    assert_eq!(config.get_reverse(), false);",
                "    assert_eq!(config.get_utf8(), false);",
                "    assert_eq!(config.get_shrink(), false);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
                "    assert!(config.get_look_matcher() == LookMatcher { lineterm: DebugByte::default() });",
                "    #[cfg(test)] assert_eq!(config.get_unanchored_prefix(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(usize::MAX));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_reverse(), None);",
                "    assert_eq!(config.get_nfa_size_limit(), Some(usize::MAX));",
                "    assert!(config.get_which_captures() == WhichCaptures::All);",
                "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
                "    assert_eq!(config.get_shrink(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .nfa_size_limit(Some(usize::MAX));",
                "    assert_eq!(config.get_reverse(), None);",
                "    assert_eq!(config.get_nfa_size_limit(), Some(usize::MAX));",
                "    assert!(config.get_which_captures() == WhichCaptures::All);",
                "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default());",
                "    assert_eq!(config.get_shrink(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .shrink(true);",
                "}"
              ],
              "oracle": [
                "    config.reverse(true);",
                "    assert_eq!(config.get_reverse(), true);",
                "    config.reverse(false);",
                "    assert_eq!(config.get_reverse(), false);",
                "    let config_with_reverse = Config::new().reverse(true);",
                "    assert_eq!(config_with_reverse.get_reverse(), true);",
                "    let config_without_reverse = Config::new().reverse(false);",
                "    assert_eq!(config_without_reverse.get_reverse(), false);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .shrink(true);",
                "    config.reverse(true);",
                "    assert_eq!(config.get_reverse(), true);",
                "    config.reverse(false);",
                "    assert_eq!(config.get_reverse(), false);",
                "    let config_with_reverse = Config::new().reverse(true);",
                "    assert_eq!(config_with_reverse.get_reverse(), true);",
                "    let config_without_reverse = Config::new().reverse(false);",
                "    assert_eq!(config_without_reverse.get_reverse(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .shrink(false);",
                "}"
              ],
              "oracle": [
                "    let config = Config::new().reverse(false);",
                "    let config = Config::new().reverse(true);",
                "    let config = Config::new().reverse(false).get_reverse();",
                "    let config = Config::new().reverse(true).get_reverse();",
                "    assert_eq!(config.get_reverse(), Some(true));",
                "    assert_eq!(config.get_reverse(), Some(false));"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .shrink(false);",
                "    let config = Config::new().reverse(false);",
                "    let config = Config::new().reverse(true);",
                "    let config = Config::new().reverse(false).get_reverse();",
                "    let config = Config::new().reverse(true).get_reverse();",
                "    assert_eq!(config.get_reverse(), Some(true));",
                "    assert_eq!(config.get_reverse(), Some(false));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::All);",
                "}"
              ],
              "oracle": [
                "    config.reverse(true);",
                "    assert_eq!(config.get_reverse(), true);",
                "    config.reverse(false);",
                "    assert_eq!(config.get_reverse(), false);",
                "    assert!(config.reverse(true).reverse.is_some());",
                "    assert!(config.reverse(false).reverse.is_some());",
                "    config.reverse(true).which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::All);",
                "    config.reverse(true);",
                "    assert_eq!(config.get_reverse(), true);",
                "    config.reverse(false);",
                "    assert_eq!(config.get_reverse(), false);",
                "    assert!(config.reverse(true).reverse.is_some());",
                "    assert!(config.reverse(false).reverse.is_some());",
                "    config.reverse(true).which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::Implicit);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Config::new().reverse(true).get_reverse(), true);",
                "    assert_eq!(Config::new().reverse(false).get_reverse(), false);",
                "    assert!(Config::new().reverse(true).which_captures(WhichCaptures::None).get_reverse());",
                "    assert!(Config::new().reverse(true).get_which_captures() == WhichCaptures::None);",
                "    assert!(Config::new().reverse(false).get_which_captures() == WhichCaptures::Implicit);"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::Implicit);",
                "    assert_eq!(Config::new().reverse(true).get_reverse(), true);",
                "    assert_eq!(Config::new().reverse(false).get_reverse(), false);",
                "    assert!(Config::new().reverse(true).which_captures(WhichCaptures::None).get_reverse());",
                "    assert!(Config::new().reverse(true).get_which_captures() == WhichCaptures::None);",
                "    assert!(Config::new().reverse(false).get_which_captures() == WhichCaptures::Implicit);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::None);",
                "}"
              ],
              "oracle": [
                "    let config_reversed = Config::new().reverse(true);",
                "    assert_eq!(config_reversed.get_reverse(), true);",
                "    let config_non_reversed = Config::new().reverse(false);",
                "    assert_eq!(config_non_reversed.get_reverse(), false);",
                "    let config_with_captures = Config::new().which_captures(WhichCaptures::All).reverse(true);",
                "    assert!(config_with_captures.reverse(true).reverse(true).get_reverse().is_some());"
              ],
              "code": [
                "{",
                "    let config = Config::new()",
                "        .which_captures(WhichCaptures::None);",
                "    let config_reversed = Config::new().reverse(true);",
                "    assert_eq!(config_reversed.get_reverse(), true);",
                "    let config_non_reversed = Config::new().reverse(false);",
                "    assert_eq!(config_non_reversed.get_reverse(), false);",
                "    let config_with_captures = Config::new().which_captures(WhichCaptures::All).reverse(true);",
                "    assert!(config_with_captures.reverse(true).reverse(true).get_reverse().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let look_matcher = LookMatcher { lineterm: DebugByte {} };",
                "    let config = Config::new()",
                "        .look_matcher(look_matcher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.get_look_matcher().lineterm, look_matcher.lineterm);",
                "    assert_eq!(config.get_reverse(), false);",
                "    assert_eq!(config.get_utf8(), false);",
                "    assert_eq!(config.get_shrink(), false);",
                "    assert_eq!(config.get_nfa_size_limit(), None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(config.get_look_matcher(), look_matcher);"
              ],
              "code": [
                "{",
                "    let look_matcher = LookMatcher { lineterm: DebugByte {} };",
                "    let config = Config::new()",
                "        .look_matcher(look_matcher);",
                "    assert_eq!(config.get_look_matcher().lineterm, look_matcher.lineterm);",
                "    assert_eq!(config.get_reverse(), false);",
                "    assert_eq!(config.get_utf8(), false);",
                "    assert_eq!(config.get_shrink(), false);",
                "    assert_eq!(config.get_nfa_size_limit(), None);",
                "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
                "    assert_eq!(config.get_look_matcher(), look_matcher);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}