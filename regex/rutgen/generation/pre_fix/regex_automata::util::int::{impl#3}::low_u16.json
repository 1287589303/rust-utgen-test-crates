{
  "name": "regex_automata::util::int::{impl#3}::low_u16",
  "mod_info": {
    "name": "util::int",
    "loc": "regex-automata/src/util/mod.rs:51:1:51:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/int.rs:134:5:136:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self as u16\n"
      ],
      "input_infer": "Test input conditions or ranges: input values as u64 in the range 0 to 65535 (inclusive) to ensure proper conversion to u16.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 0;",
                "    let result = value.low_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    let value: u64 = 255;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 255);",
                "    let value: u64 = 256;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 0);",
                "    let value: u64 = 65535;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 65535);",
                "    let value: u64 = 65536;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 0);",
                "    let value: u64 = 70000;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 70000 as u16);",
                "    let value: u64 = std::u64::MAX;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, std::u16::MAX);"
              ],
              "code": [
                "{",
                "    let value: u64 = 0;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 0);",
                "    let value: u64 = 255;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 255);",
                "    let value: u64 = 256;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 0);",
                "    let value: u64 = 65535;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 65535);",
                "    let value: u64 = 65536;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 0);",
                "    let value: u64 = 70000;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 70000 as u16);",
                "    let value: u64 = std::u64::MAX;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, std::u16::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 65535;",
                "    let result = value.low_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 65535);"
              ],
              "code": [
                "{",
                "    let value: u64 = 65535;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 65535);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 65536;",
                "    let result = value.low_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let value: u64 = 65536;",
                "    let result = value.low_u16();",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = u64::MAX; // Will result in an overflow for positive context.",
                "    let result = value.low_u16();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, u64::MAX as u16);",
                "    assert_eq!(result, 0xFFFF);",
                "    assert!(result == 0xFFFF);",
                "    assert!(result == u16::MAX);",
                "    assert!(result <= u16::MAX);"
              ],
              "code": [
                "{",
                "    let value: u64 = u64::MAX; // Will result in an overflow for positive context.",
                "    let result = value.low_u16();",
                "    assert_eq!(result, u64::MAX as u16);",
                "    assert_eq!(result, 0xFFFF);",
                "    assert!(result == 0xFFFF);",
                "    assert!(result == u16::MAX);",
                "    assert!(result <= u16::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}