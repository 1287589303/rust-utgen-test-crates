{
  "name": "regex_automata::nfa::thompson::compiler::{impl#2}::is_none",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:578:5:580:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches WhichCaptures::None at line 579 is false\n",
        "precondition: *self matches _ at line 459 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "self should be set to WhichCaptures::All or WhichCaptures::Implicit\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let which_captures = WhichCaptures::All;",
                "    let result = which_captures.is_none();",
                "}"
              ],
              "oracle": [
                "    let which_captures = WhichCaptures::All;",
                "    let result = which_captures.is_none();",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let which_captures = WhichCaptures::All;",
                "    let result = which_captures.is_none();",
                "    let which_captures = WhichCaptures::All;",
                "    let result = which_captures.is_none();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let which_captures = WhichCaptures::Implicit;",
                "    let result = which_captures.is_none();",
                "}"
              ],
              "oracle": [
                "    let which_captures = WhichCaptures::Implicit;",
                "    let result = which_captures.is_none();",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let which_captures = WhichCaptures::Implicit;",
                "    let result = which_captures.is_none();",
                "    let which_captures = WhichCaptures::Implicit;",
                "    let result = which_captures.is_none();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches WhichCaptures::None at line 579 is true\n",
        "precondition: *self matches WhichCaptures::None at line 579 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "*self should be an instance of WhichCaptures::None\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let which_captures = WhichCaptures::None;",
                "    let result = which_captures.is_none();",
                "}"
              ],
              "oracle": [
                "    let which_captures = WhichCaptures::None;",
                "    assert!(which_captures.is_none() == true);"
              ],
              "code": [
                "{",
                "    let which_captures = WhichCaptures::None;",
                "    let result = which_captures.is_none();",
                "    let which_captures = WhichCaptures::None;",
                "    assert!(which_captures.is_none() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let which_captures = WhichCaptures::All;",
                "    let result = which_captures.is_none();",
                "}"
              ],
              "oracle": [
                "    let which_captures = WhichCaptures::None;",
                "    let result = which_captures.is_none();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let which_captures = WhichCaptures::All;",
                "    let result = which_captures.is_none();",
                "    let which_captures = WhichCaptures::None;",
                "    let result = which_captures.is_none();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let which_captures = WhichCaptures::Implicit;",
                "    let result = which_captures.is_none();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let which_captures = WhichCaptures::Implicit;",
                "    let result = which_captures.is_none();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}