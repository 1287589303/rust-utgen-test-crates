bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/primitives.rs:277:9-277:32)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/primitives.rs:277:15-277:31)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/primitives.rs:277:15-277:20)
  3: _5 = &_2
    SourceInfo(regex-automata/src/util/primitives.rs:277:15-277:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:277:15-277:31)
      kind: _4 = util::primitives::SmallIndex::as_usize(move _5) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/primitives.rs:277:30-277:31)
  1: _6 = Len((*_1))
    SourceInfo(regex-automata/src/util/primitives.rs:277:10-277:32)
  2: _7 = Lt(_4, _6)
    SourceInfo(regex-automata/src/util/primitives.rs:277:10-277:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:277:10-277:32)
      kind: assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _4) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _3 = &(*_1)[_4]
    SourceInfo(regex-automata/src/util/primitives.rs:277:9-277:32)
  1: _0 = &(*_3)
    SourceInfo(regex-automata/src/util/primitives.rs:277:9-277:32)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/primitives.rs:278:5-278:6)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/primitives.rs:278:5-278:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:278:6-278:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:276:5-278:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

