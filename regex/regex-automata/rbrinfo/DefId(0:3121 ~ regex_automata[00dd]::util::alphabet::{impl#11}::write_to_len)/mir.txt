bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:852:13-852:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:852:13-852:41)
      kind: _2 = core::mem::size_of::<u128>() -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = MulWithOverflow(const 2_usize, _2)
    SourceInfo(regex-automata/src/util/alphabet.rs:852:9-852:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:852:9-852:41)
      kind: assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _2) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = move (_3.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:852:9-852:41)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:852:40-852:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:853:6-853:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:851:5-853:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

