bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:9-1450:10)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:46)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:32)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:32)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:17)
  5: _9 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:32)
      kind: _8 = util::search::Input::<'_>::get_anchored(move _9) -> [return: bb1, unwind: bb42]
  }
  preds []
  succs [bb1, bb42]

bb1
  0: _7 = &_8
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:32)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:31-1448:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:46)
      kind: _6 = util::search::Anchored::is_anchored(move _7) -> [return: bb2, unwind: bb42]
  }
  preds [bb0]
  succs [bb2, bb42]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1448:12-1448:46)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:45-1448:46)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:45-1448:46)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:20-1449:29)
  3: _11 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:20-1449:29)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:43-1449:48)
  5: _12 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:43-1449:48)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:50-1449:55)
  7: _13 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:50-1449:55)
  8: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:57-1449:62)
  9: _14 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:57-1449:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1449:20-1449:63)
      kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::search_slots(move _11, move _12, move _13, move _14) -> [return: bb4, unwind: bb42]
  }
  preds [bb2]
  succs [bb4, bb42]

bb4
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:62-1449:63)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:62-1449:63)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:62-1449:63)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1449:62-1449:63)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1450:9-1450:10)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1450:9-1450:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb41
  }
  preds [bb3]
  succs [bb41]

bb5
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:45-1448:46)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1448:45-1448:46)
  2: _5 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1450:10-1450:10)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1450:9-1450:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1450:9-1450:10)
  5: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:9-1456:10)
  6: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:13-1451:60)
  7: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:13-1451:22)
  8: _17 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:13-1451:22)
  9: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:48-1451:59)
  10: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:48-1451:53)
  11: _19 = &(*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:48-1451:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1451:48-1451:59)
      kind: _18 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::len(move _19) -> [return: bb6, unwind: bb42]
  }
  preds [bb2]
  succs [bb6, bb42]

bb6
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:58-1451:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1451:13-1451:60)
      kind: _16 = meta::strategy::Core::is_capture_search_needed(move _17, move _18) -> [return: bb7, unwind: bb42]
  }
  preds [bb5]
  succs [bb7, bb42]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1451:13-1451:60)
      kind: switchInt(move _16) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:59-1451:60)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:59-1451:60)
  2: _15 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1456:10-1456:10)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1456:9-1456:10)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1456:9-1456:10)
  5: StorageLive(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:13-1457:21)
  6: StorageLive(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
  7: StorageLive(_39)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:34)
  8: _39 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:34)
  9: StorageLive(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:57-1457:62)
  10: _40 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:57-1457:62)
  11: StorageLive(_41)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:64-1457:69)
  12: _41 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:64-1457:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
      kind: _38 = meta::strategy::ReverseSuffix::try_search_half_start(move _39, move _40, move _41) -> [return: bb19, unwind: bb42]
  }
  preds [bb7]
  succs [bb19, bb42]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:59-1451:60)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:1451:59-1451:60)
  2: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:17-1453:18)
  3: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:46)
  5: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:25)
  6: _24 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:25)
  7: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:33-1453:38)
  8: _25 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:33-1453:38)
  9: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:40-1453:45)
  10: _26 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:40-1453:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:46)
      kind: _23 = <meta::strategy::ReverseSuffix as meta::strategy::Strategy>::search(move _24, move _25, move _26) -> [return: bb10, unwind: bb42]
  }
  preds [bb7]
  succs [bb10, bb42]

bb10
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:45-1453:46)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:45-1453:46)
  2: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:45-1453:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
      kind: _22 = <core::option::Option<util::search::Match> as core::ops::Try>::branch(move _23) -> [return: bb11, unwind: bb42]
  }
  preds [bb9]
  succs [bb11, bb42]

bb11
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  1: PlaceMention(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
  2: _27 = discriminant(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
      kind: switchInt(move _27) -> [0: bb14, 1: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
  1: _31 = ((_22 as Continue).0: util::search::Match)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
  2: _21 = _31
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  4: FakeRead(ForLet(None), _21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:17-1453:18)
  5: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:47-1453:48)
  6: StorageLive(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:13-1454:42)
  7: StorageLive(_33)
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:33-1454:34)
  8: _33 = _21
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:33-1454:34)
  9: StorageLive(_34)
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:36-1454:41)
  10: _34 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:36-1454:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1454:13-1454:42)
      kind: _32 = meta::strategy::copy_match_to_slots(move _33, move _34) -> [return: bb17, unwind: bb42]
  }
  preds [bb11, bb13]
  succs [bb17, bb42]

bb15
  0: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  1: _28 = ((_22 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  2: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  3: _30 = _28
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1453:21-1453:47)
      kind: _0 = <core::option::Option<util::primitives::PatternID> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _30) -> [return: bb16, unwind: bb42]
  }
  preds [bb13]
  succs [bb16, bb42]

bb16
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:46-1453:47)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1453:47-1453:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb15]
  succs [bb40]

bb17
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:41-1454:42)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:41-1454:42)
  2: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:1454:42-1454:43)
  3: StorageLive(_35)
    SourceInfo(regex-automata/src/meta/strategy.rs:1455:25-1455:36)
  4: StorageLive(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:1455:25-1455:26)
  5: _36 = &_21
    SourceInfo(regex-automata/src/meta/strategy.rs:1455:25-1455:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1455:25-1455:36)
      kind: _35 = util::search::Match::pattern(move _36) -> [return: bb18, unwind: bb42]
  }
  preds [bb14]
  succs [bb18, bb42]

bb18
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:1455:35-1455:36)
  1: _0 = core::option::Option::<util::primitives::PatternID>::Some(move _35)
    SourceInfo(regex-automata/src/meta/strategy.rs:1455:20-1455:37)
  2: StorageDead(_35)
    SourceInfo(regex-automata/src/meta/strategy.rs:1455:36-1455:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1455:13-1455:37)
      kind: goto -> bb40
  }
  preds [bb17]
  succs [bb40]

bb19
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:69-1457:70)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:69-1457:70)
  2: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:69-1457:70)
  3: PlaceMention(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
  4: _44 = discriminant(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1457:24-1457:70)
      kind: switchInt(move _44) -> [0: bb24, 1: bb21, otherwise: bb20]
  }
  preds [bb8]
  succs [bb20, bb21, bb24]

bb20
  0: FakeRead(ForMatchedPlace(None), _38)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
      kind: unreachable
  }
  preds [bb19, bb21, bb24]
  succs []

bb21
  0: _42 = discriminant(((_38 as Err).0: meta::error::RetryError))
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1457:24-1457:70)
      kind: switchInt(move _42) -> [0: bb22, 1: bb23, otherwise: bb20]
  }
  preds [bb19]
  succs [bb20, bb22, bb23]

bb22
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1458:13-1458:45)
      kind: falseEdge -> [real: bb27, imaginary: bb23]
  }
  preds [bb21]
  succs [bb23, bb27]

bb23
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1465:13-1465:40)
      kind: falseEdge -> [real: bb29, imaginary: bb24]
  }
  preds [bb21, bb22]
  succs [bb24, bb29]

bb24
  0: _43 = discriminant(((_38 as Ok).0: core::option::Option<util::search::HalfMatch>))
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:30-1457:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1457:24-1457:70)
      kind: switchInt(move _43) -> [0: bb25, 1: bb26, otherwise: bb20]
  }
  preds [bb19, bb23]
  succs [bb20, bb25, bb26]

bb25
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1472:13-1472:21)
      kind: falseEdge -> [real: bb31, imaginary: bb26]
  }
  preds [bb24]
  succs [bb26, bb31]

bb26
  0: StorageLive(_58)
    SourceInfo(regex-automata/src/meta/strategy.rs:1473:21-1473:29)
  1: _58 = ((((_38 as Ok).0: core::option::Option<util::search::HalfMatch>) as Some).0: util::search::HalfMatch)
    SourceInfo(regex-automata/src/meta/strategy.rs:1473:21-1473:29)
  2: _37 = _58
    SourceInfo(regex-automata/src/meta/strategy.rs:1473:35-1473:43)
  3: StorageDead(_58)
    SourceInfo(regex-automata/src/meta/strategy.rs:1473:42-1473:43)
  4: FakeRead(ForLet(None), _37)
    SourceInfo(regex-automata/src/meta/strategy.rs:1457:13-1457:21)
  5: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:1474:10-1474:11)
  6: StorageLive(_59)
    SourceInfo(regex-automata/src/meta/strategy.rs:1481:13-1481:18)
  7: StorageLive(_60)
    SourceInfo(regex-automata/src/meta/strategy.rs:1481:21-1481:29)
  8: _60 = &_37
    SourceInfo(regex-automata/src/meta/strategy.rs:1481:21-1481:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1481:21-1481:38)
      kind: _59 = util::search::HalfMatch::offset(move _60) -> [return: bb32, unwind: bb42]
  }
  preds [bb24, bb25]
  succs [bb32, bb42]

bb27
  0: StorageLive(_45)
    SourceInfo(regex-automata/src/meta/strategy.rs:1458:39-1458:43)
  1: _45 = move ((((_38 as Err).0: meta::error::RetryError) as Quadratic).0: meta::error::RetryQuadraticError)
    SourceInfo(regex-automata/src/meta/strategy.rs:1458:39-1458:43)
  2: StorageLive(_47)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:24-1463:33)
  3: _47 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:24-1463:33)
  4: StorageLive(_48)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:47-1463:52)
  5: _48 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:47-1463:52)
  6: StorageLive(_49)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:54-1463:59)
  7: _49 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:54-1463:59)
  8: StorageLive(_50)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:61-1463:66)
  9: _50 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:61-1463:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1463:24-1463:67)
      kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::search_slots(move _47, move _48, move _49, move _50) -> [return: bb28, unwind: bb42]
  }
  preds [bb22]
  succs [bb28, bb42]

bb28
  0: StorageDead(_50)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:66-1463:67)
  1: StorageDead(_49)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:66-1463:67)
  2: StorageDead(_48)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:66-1463:67)
  3: StorageDead(_47)
    SourceInfo(regex-automata/src/meta/strategy.rs:1463:66-1463:67)
  4: StorageDead(_45)
    SourceInfo(regex-automata/src/meta/strategy.rs:1464:13-1464:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb39
  }
  preds [bb27]
  succs [bb39]

bb29
  0: StorageLive(_51)
    SourceInfo(regex-automata/src/meta/strategy.rs:1465:34-1465:38)
  1: _51 = move ((((_38 as Err).0: meta::error::RetryError) as Fail).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/strategy.rs:1465:34-1465:38)
  2: StorageLive(_53)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:24-1470:33)
  3: _53 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:24-1470:33)
  4: StorageLive(_54)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:54-1470:59)
  5: _54 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:54-1470:59)
  6: StorageLive(_55)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:61-1470:66)
  7: _55 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:61-1470:66)
  8: StorageLive(_56)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:68-1470:73)
  9: _56 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:68-1470:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1470:24-1470:74)
      kind: _0 = meta::strategy::Core::search_slots_nofail(move _53, move _54, move _55, move _56) -> [return: bb30, unwind: bb42]
  }
  preds [bb23]
  succs [bb30, bb42]

bb30
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:73-1470:74)
  1: StorageDead(_55)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:73-1470:74)
  2: StorageDead(_54)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:73-1470:74)
  3: StorageDead(_53)
    SourceInfo(regex-automata/src/meta/strategy.rs:1470:73-1470:74)
  4: StorageDead(_51)
    SourceInfo(regex-automata/src/meta/strategy.rs:1471:13-1471:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb39
  }
  preds [bb29]
  succs [bb39]

bb31
  0: _0 = core::option::Option::<util::primitives::PatternID>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:1472:32-1472:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1472:25-1472:36)
      kind: goto -> bb39
  }
  preds [bb25]
  succs [bb39]

bb32
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/meta/strategy.rs:1481:37-1481:38)
  1: FakeRead(ForLet(None), _59)
    SourceInfo(regex-automata/src/meta/strategy.rs:1481:13-1481:18)
  2: StorageLive(_61)
    SourceInfo(regex-automata/src/meta/strategy.rs:1482:13-1482:18)
  3: StorageLive(_62)
    SourceInfo(regex-automata/src/meta/strategy.rs:1482:21-1484:38)
  4: StorageLive(_63)
    SourceInfo(regex-automata/src/meta/strategy.rs:1482:21-1483:21)
  5: StorageLive(_64)
    SourceInfo(regex-automata/src/meta/strategy.rs:1482:21-1482:26)
  6: _64 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1482:21-1482:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1482:21-1483:21)
      kind: _63 = <util::search::Input<'_> as core::clone::Clone>::clone(move _64) -> [return: bb33, unwind: bb42]
  }
  preds [bb26]
  succs [bb33, bb42]

bb33
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/meta/strategy.rs:1483:20-1483:21)
  1: StorageLive(_65)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:19-1484:37)
  2: StorageLive(_66)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:19-1484:24)
  3: _66 = _59
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:19-1484:24)
  4: StorageLive(_67)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:26-1484:37)
  5: StorageLive(_68)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:26-1484:31)
  6: _68 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:26-1484:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1484:26-1484:37)
      kind: _67 = util::search::Input::<'_>::end(move _68) -> [return: bb34, unwind: bb42]
  }
  preds [bb32]
  succs [bb34, bb42]

bb34
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:36-1484:37)
  1: _65 = core::ops::Range::<usize> { start: move _66, end: move _67 }
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:19-1484:37)
  2: StorageDead(_67)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:36-1484:37)
  3: StorageDead(_66)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:36-1484:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1482:21-1484:38)
      kind: _62 = util::search::Input::<'_>::span::<core::ops::Range<usize>>(move _63, move _65) -> [return: bb35, unwind: bb42]
  }
  preds [bb33]
  succs [bb35, bb42]

bb35
  0: StorageDead(_65)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:37-1484:38)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/meta/strategy.rs:1484:37-1484:38)
  2: StorageLive(_69)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:23-1485:60)
  3: StorageLive(_70)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:41-1485:59)
  4: StorageLive(_71)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:41-1485:49)
  5: _71 = &_37
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:41-1485:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1485:41-1485:59)
      kind: _70 = util::search::HalfMatch::pattern(move _71) -> [return: bb36, unwind: bb42]
  }
  preds [bb34]
  succs [bb36, bb42]

bb36
  0: StorageDead(_71)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:58-1485:59)
  1: _69 = util::search::Anchored::Pattern(move _70)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:23-1485:60)
  2: StorageDead(_70)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:59-1485:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1482:21-1485:61)
      kind: _61 = util::search::Input::<'_>::anchored(move _62, move _69) -> [return: bb37, unwind: bb42]
  }
  preds [bb35]
  succs [bb37, bb42]

bb37
  0: StorageDead(_69)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:60-1485:61)
  1: StorageDead(_62)
    SourceInfo(regex-automata/src/meta/strategy.rs:1485:60-1485:61)
  2: FakeRead(ForLet(None), _61)
    SourceInfo(regex-automata/src/meta/strategy.rs:1482:13-1482:18)
  3: StorageLive(_72)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:9-1486:18)
  4: _72 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:9-1486:18)
  5: StorageLive(_73)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:39-1486:44)
  6: _73 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:39-1486:44)
  7: StorageLive(_74)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:46-1486:52)
  8: StorageLive(_75)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:46-1486:52)
  9: _75 = &_61
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:46-1486:52)
  10: _74 = &(*_75)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:46-1486:52)
  11: StorageLive(_76)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:54-1486:59)
  12: _76 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:54-1486:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1486:9-1486:60)
      kind: _0 = meta::strategy::Core::search_slots_nofail(move _72, move _73, move _74, move _76) -> [return: bb38, unwind: bb42]
  }
  preds [bb36]
  succs [bb38, bb42]

bb38
  0: StorageDead(_76)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:59-1486:60)
  1: StorageDead(_74)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:59-1486:60)
  2: StorageDead(_73)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:59-1486:60)
  3: StorageDead(_72)
    SourceInfo(regex-automata/src/meta/strategy.rs:1486:59-1486:60)
  4: StorageDead(_61)
    SourceInfo(regex-automata/src/meta/strategy.rs:1487:5-1487:6)
  5: StorageDead(_59)
    SourceInfo(regex-automata/src/meta/strategy.rs:1487:5-1487:6)
  6: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:1487:5-1487:6)
  7: StorageDead(_75)
    SourceInfo(regex-automata/src/meta/strategy.rs:1487:5-1487:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1487:6-1487:6)
      kind: goto -> bb41
  }
  preds [bb37]
  succs [bb41]

bb39
  0: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:1474:10-1474:11)
  1: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:1487:5-1487:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb41
  }
  preds [bb28, bb30, bb31]
  succs [bb41]

bb40
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1456:9-1456:10)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1456:9-1456:10)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1456:9-1456:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb41
  }
  preds [bb16, bb18]
  succs [bb41]

bb41
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1487:6-1487:6)
      kind: return
  }
  preds [bb4, bb38, bb39, bb40]
  succs []

bb42
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1442:5-1487:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb6, bb8, bb9, bb10, bb14, bb15, bb17, bb26, bb27, bb29, bb32, bb33, bb34, bb35, bb36, bb37]
  succs []

