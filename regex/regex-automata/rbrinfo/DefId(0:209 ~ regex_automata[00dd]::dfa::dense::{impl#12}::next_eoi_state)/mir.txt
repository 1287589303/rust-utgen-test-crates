bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:13-3195:16)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:44)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:38)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:38)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:23)
  5: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:38)
      kind: _6 = dfa::dense::DFA::<T>::byte_classes(move _7) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:38)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:37-3195:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:44)
      kind: _4 = util::alphabet::ByteClasses::eoi(move _5) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:43-3195:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3195:19-3195:55)
      kind: _3 = util::alphabet::Unit::as_usize(move _4) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:54-3195:55)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:13-3195:16)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:3195:55-3195:56)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:13-3196:14)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:17-3196:35)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:17-3196:24)
  6: _10 = &_2
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:17-3196:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3196:17-3196:35)
      kind: _9 = util::primitives::StateID::as_usize(move _10) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:34-3196:35)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:38-3196:41)
  2: _11 = _3
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:38-3196:41)
  3: _12 = AddWithOverflow(_9, _11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:17-3196:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3196:17-3196:41)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _11) -> [success: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: _8 = move (_12.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:17-3196:41)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:40-3196:41)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:40-3196:41)
  3: FakeRead(ForLet(None), _8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3196:13-3196:14)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:21)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:13)
  6: _14 = &(*_1)
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:21)
      kind: _13 = dfa::dense::DFA::<T>::trans(move _14) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:20-3197:21)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:22-3197:23)
  2: _15 = _8
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:22-3197:23)
  3: _16 = Len((*_13))
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:24)
  4: _17 = Lt(_15, _16)
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:24)
      kind: assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: _0 = (*_13)[_15]
    SourceInfo(regex-automata/src/dfa/dense.rs:3197:9-3197:24)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/dense.rs:3198:5-3198:6)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3198:5-3198:6)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/dense.rs:3198:5-3198:6)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:3198:5-3198:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3198:6-3198:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3194:5-3198:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

