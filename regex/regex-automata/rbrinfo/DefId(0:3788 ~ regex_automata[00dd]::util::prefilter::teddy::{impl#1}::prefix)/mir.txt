bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:17-107:22)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:25-108:55)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:25-107:59)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:50-107:58)
  4: _7 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:50-107:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:25-107:59)
      kind: _6 = aho_corasick::Input::<'_>::new::<[u8]>(move _7) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:58-107:59)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:108:27-108:54)
  2: _8 = aho_corasick::Anchored::Yes
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:108:27-108:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:25-108:55)
      kind: _5 = aho_corasick::Input::<'_>::anchored(move _6, move _8) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:108:54-108:55)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:108:54-108:55)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:23-109:43)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:23-109:33)
  4: _10 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:23-109:33)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:35-109:43)
  6: _11 = (_3.1: usize)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:35-109:43)
  7: _9 = core::ops::Range::<usize> { start: move _10, end: move _11 }
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:23-109:43)
  8: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:42-109:43)
  9: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:42-109:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:25-109:44)
      kind: _4 = aho_corasick::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _9) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:43-109:44)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:109:43-109:44)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:107:17-107:22)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:110:13-113:62)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:110:13-111:34)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:110:13-110:29)
  6: _14 = &((*_1).1: aho_corasick::dfa::DFA)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:110:13-110:29)
  7: StorageLive(_15)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:111:27-111:33)
  8: StorageLive(_16)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:111:27-111:33)
  9: _16 = &_4
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:111:27-111:33)
  10: _15 = &(*_16)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:111:27-111:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:110:13-111:34)
      kind: _13 = <aho_corasick::dfa::DFA as aho_corasick::automaton::Automaton>::try_find(move _14, move _15) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:111:33-111:34)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:111:33-111:34)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:113:25-113:61)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:113:25-113:61)
  4: _18 = const "aho-corasick DFA should never fail"
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:113:25-113:61)
  5: _17 = &(*_18)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:113:25-113:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:110:13-113:62)
      kind: _12 = core::result::Result::<core::option::Option<aho_corasick::Match>, aho_corasick::MatchError>::expect(move _13, move _17) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:113:61-113:62)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:113:61-113:62)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:114:22-114:65)
  3: _19 = {closure@regex-automata/src/util/prefilter/teddy.rs:114:22: 114:25}
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:114:22-114:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:110:13-114:66)
      kind: _0 = core::option::Option::<aho_corasick::Match>::map::<util::search::Span, {closure@regex-automata/src/util/prefilter/teddy.rs:114:22: 114:25}>(move _12, move _19) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:114:65-114:66)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:114:65-114:66)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:115:9-115:10)
  3: StorageDead(_18)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:116:5-116:6)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/teddy.rs:116:5-116:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:116:6-116:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:113:61-113:62)
      kind: drop(_13) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/teddy.rs:99:5-116:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb5, bb7]
  succs []

