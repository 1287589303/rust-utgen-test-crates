{
  "regex-automata/src/dfa/dense.rs:4001:45:4001:77": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "universal_unanchored == u32::MAX",
          "lhs": "universal_unanchored",
          "rhs": "u32::MAX",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3987:30:3987:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "maybe_pattern_len.as_u32() == u32::MAX",
          "lhs": "maybe_pattern_len.as_u32()",
          "rhs": "u32::MAX",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:4042:9:4042:73": [
    {
      "Try": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4018:18:4020:16": [
    {
      "Try": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4032:31:4036:11": [
    {
      "Try": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4033:13:4033:64": [
    {
      "Try": "wire::mul(2, stride, \"start state stride too big\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3985:13:3985:72": [
    {
      "Try": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4004:18:4009:16": [
    {
      "Try": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4013:13:4013:67": [
    {
      "Try": "wire::try_read_u32(slice, \"universal anchored start\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4064:17:4064:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "slice.as_ptr().as_usize() - slice_start",
          "lhs": "slice.as_ptr().as_usize()",
          "rhs": "slice_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3999:13:3999:69": [
    {
      "Try": "wire::try_read_u32(slice, \"universal unanchored start\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4023:34:4027:11": [
    {
      "Try": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4015:43:4015:73": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "universal_anchored == u32::MAX",
          "lhs": "universal_anchored",
          "rhs": "u32::MAX",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3978:12:3978:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "stride != Start::len()",
          "lhs": "stride",
          "rhs": "Start::len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:3972:31:3972:63": [
    {
      "Try": "StartByteMap::from_bytes(slice)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3976:13:3976:70": [
    {
      "Try": "wire::try_read_u32_as_usize(slice, \"start table stride\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4037:31:4041:11": [
    {
      "Try": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3969:26:3969:55": [
    {
      "Try": "StartKind::from_bytes(slice)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:4043:9:4043:49": [
    {
      "Try": "wire::check_alignment::<StateID>(slice)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:3992:12:3992:67": [
    {
      "Bool": {
        "Other": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)"
      }
    }
  ]
}