bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2465:13-2465:18)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2465:21-2465:22)
  2: _5 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2465:21-2465:22)
  3: _6 = MulWithOverflow(_5, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2465:21-2465:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2465:21-2465:38)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, const util::primitives::StateID::SIZE) -> [success: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _4 = move (_6.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2465:21-2465:38)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2465:37-2465:38)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2465:13-2465:18)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2466:13-2466:16)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2466:19-2466:24)
  5: _8 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:2466:19-2466:24)
  6: _9 = AddWithOverflow(_8, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2466:19-2466:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2466:19-2466:40)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const util::primitives::StateID::SIZE) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _7 = move (_9.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2466:19-2466:40)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2466:39-2466:40)
  2: FakeRead(ForLet(None), _7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2466:13-2466:16)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:9-2467:75)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:42-2467:46)
  5: _11 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:42-2467:46)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:48-2467:74)
  7: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:48-2467:74)
  8: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:62-2467:74)
  9: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:53-2467:62)
  10: _15 = &mut (*((*_1).4: &mut [u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:53-2467:62)
  11: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:63-2467:73)
  12: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:63-2467:68)
  13: _17 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:63-2467:68)
  14: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:70-2467:73)
  15: _18 = _7
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:70-2467:73)
  16: _16 = core::ops::Range::<usize> { start: move _17, end: move _18 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:63-2467:73)
  17: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:72-2467:73)
  18: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:72-2467:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2467:62-2467:74)
      kind: _14 = <[u8] as core::ops::IndexMut<core::ops::Range<usize>>>::index_mut(move _15, move _16) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:73-2467:74)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:73-2467:74)
  2: _13 = &mut (*_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:48-2467:74)
  3: _12 = &mut (*_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:48-2467:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2467:9-2467:75)
      kind: _10 = util::wire::write_state_id::<util::wire::LE>(move _11, move _12) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:74-2467:75)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:74-2467:75)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:75-2467:76)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:75-2467:76)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2467:75-2467:76)
  5: _0 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2464:56-2468:6)
  6: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2468:5-2468:6)
  7: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2468:5-2468:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2468:6-2468:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2464:5-2468:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

