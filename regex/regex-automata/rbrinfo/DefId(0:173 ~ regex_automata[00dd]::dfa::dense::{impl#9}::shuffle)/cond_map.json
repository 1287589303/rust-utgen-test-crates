{
  "regex-automata/src/dfa/dense.rs:2807:12:2807:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "self.state_len() <= 2",
          "lhs": "self.state_len()",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2826:18:2826:49": [
    {
      "Bool": {
        "Other": "matches.contains_key(&start_id)"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2855:20:2855:47": [
    {
      "Bool": {
        "Other": "is_start.contains(&next_id)"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2851:31:2851:38": [
    {
      "For": {
        "iter_var": "(id, pids)",
        "iter_range": "matches"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2822:16:2822:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "start_id == DEAD",
          "lhs": "start_id",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2871:16:2871:38": [
    {
      "Bool": {
        "Other": "self.special.matches()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2841:12:2841:30": [
    {
      "Bool": {
        "Other": "matches.is_empty()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2887:9:2887:40": [
    {
      "Try": "self.set_pattern_map(&matches)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2818:33:2818:46": [
    {
      "For": {
        "iter_var": "(start_id, _, _)",
        "iter_range": "self.starts()"
      }
    }
  ],
  "regex-automata/src/dfa/dense.rs:2875:23:2875:31": [
    {
      "For": {
        "iter_var": "id",
        "iter_range": "is_start"
      }
    }
  ]
}