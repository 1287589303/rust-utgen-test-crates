{
  "regex-automata/src/nfa/thompson/nfa.rs:1477:17:1477:73": [
    {
      "Try": "writeln!(f, \"START({:06?}): {:?}\", pid, sid.as_usize())?"
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1474:13:1474:29": [
    {
      "Try": "writeln!(f, \"\")?"
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1463:29:1463:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "sid == self.start_anchored",
          "lhs": "sid",
          "rhs": "self.start_anchored",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1480:9:1480:25": [
    {
      "Try": "writeln!(f, \"\")?"
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1486:9:1486:26": [
    {
      "Try": "writeln!(f, \")\")?"
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1465:23:1465:51": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "sid == self.start_unanchored",
          "lhs": "sid",
          "rhs": "self.start_unanchored",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1475:24:1475:38": [
    {
      "For": {
        "iter_var": "pid",
        "iter_range": "0..pattern_len"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1470:13:1470:74": [
    {
      "Try": "writeln!(f, \"{}{:06?}: {:?}\", status, sid.as_usize(), state)?"
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1462:29:1462:64": [
    {
      "For": {
        "iter_var": "(sid, state)",
        "iter_range": "self.states.iter().with_state_ids()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1481:9:1485:11": [
    {
      "Try": "writeln!(\n            f,\n            \"transition equivalence classes: {:?}\",\n            self.byte_classes,\n        )?"
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1461:9:1461:39": [
    {
      "Try": "writeln!(f, \"thompson::NFA(\")?"
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1473:12:1473:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "pattern_len > 1",
          "lhs": "pattern_len",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ]
}