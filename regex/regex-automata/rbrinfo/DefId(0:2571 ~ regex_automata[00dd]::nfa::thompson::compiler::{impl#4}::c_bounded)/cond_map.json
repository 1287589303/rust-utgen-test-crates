{
  "regex-automata/src/nfa/thompson/compiler.rs:1206:28:1206:34": [
    {
      "Bool": {
        "Other": "greedy"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1203:21:1203:38": [
    {
      "Try": "self.add_empty()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1206:25:1210:15": [
    {
      "Try": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1205:18:1205:26": [
    {
      "For": {
        "iter_var": "_",
        "iter_range": "min..max"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1213:13:1213:47": [
    {
      "Try": "self.patch(union, compiled.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1169:22:1169:48": [
    {
      "Try": "self.c_exactly(expr, min)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1212:13:1212:41": [
    {
      "Try": "self.patch(prev_end, union)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1214:13:1214:38": [
    {
      "Try": "self.patch(union, empty)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1217:9:1217:37": [
    {
      "Try": "self.patch(prev_end, empty)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1211:28:1211:41": [
    {
      "Try": "self.c(expr)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:1170:12:1170:22": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "min == max",
          "lhs": "min",
          "rhs": "max",
          "cmp_with_int": false
        }
      }
    }
  ]
}