bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/int.rs:185:13-185:31)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/int.rs:185:26-185:30)
  2: _3 = _1
    SourceInfo(regex-automata/src/util/int.rs:185:26-185:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:185:13-185:31)
      kind: _2 = <u8 as core::convert::TryFrom<usize>>::try_from(move _3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/int.rs:185:30-185:31)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/int.rs:185:39-185:60)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/int.rs:185:39-185:60)
  3: _5 = const "usize overflowed u8"
    SourceInfo(regex-automata/src/util/int.rs:185:39-185:60)
  4: _4 = &(*_5)
    SourceInfo(regex-automata/src/util/int.rs:185:39-185:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:185:13-185:61)
      kind: _0 = core::result::Result::<u8, core::num::TryFromIntError>::expect(move _2, move _4) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/int.rs:185:60-185:61)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/int.rs:185:60-185:61)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/int.rs:191:5-191:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:191:6-191:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/int.rs:182:5-191:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

