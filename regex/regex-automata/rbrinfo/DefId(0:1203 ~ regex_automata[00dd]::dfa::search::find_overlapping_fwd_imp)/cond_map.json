{
  "regex-automata/src/dfa/search.rs:407:23:407:46": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:397:25:397:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "state.at + 1",
          "lhs": "state.at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:378:27:378:59": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/search.rs:378:27:378:59",
        "match_str": "pre.find(input.haystack(), span)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/search.rs:380:25:380:39": {
            "pat": {
              "pat_str": "Some(ref span)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:380:43:390:26"
          },
          "regex-automata/src/dfa/search.rs:379:25:379:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:379:33:379:46"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:383:37:383:52": [
    {
      "Bool": {
        "Other": "universal_start"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:417:62:417:74": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "state.at + 1",
          "lhs": "state.at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:375:16:375:39": [
    {
      "Bool": {
        "Other": "dfa.is_start_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:351:51:351:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "match_index + 1",
          "lhs": "match_index",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:392:27:392:50": [
    {
      "Bool": {
        "Other": "dfa.is_accel_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:402:23:402:46": [
    {
      "Bool": {
        "Other": "dfa.is_match_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:373:12:373:37": [
    {
      "Bool": {
        "Other": "dfa.is_special_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:371:11:371:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "state.at < input.end()",
          "lhs": "state.at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:376:20:376:43": [
    {
      "Bool": {
        "Other": "let Some(ref pre) = pre"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:420:23:420:45": [
    {
      "Bool": {
        "Other": "dfa.is_dead_state(sid)"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:348:16:348:62": [
    {
      "Bool": {
        "Other": "let Some(match_index) = state.next_match_index"
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:381:32:381:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "span.start > state.at",
          "lhs": "span.start",
          "rhs": "state.at",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:342:25:342:33": [
    {
      "Match": {
        "match_source": "regex-automata/src/dfa/search.rs:342:25:342:33",
        "match_str": "state.id",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/dfa/search.rs:347:9:347:18": {
            "pat": {
              "pat_str": "Some(sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:347:22:364:10"
          },
          "regex-automata/src/dfa/search.rs:343:9:343:13": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/dfa/search.rs:343:17:346:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:360:16:360:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "state.at > input.end()",
          "lhs": "state.at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:350:20:350:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "match_index < match_len",
          "lhs": "match_index",
          "rhs": "match_len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/search.rs:384:43:386:39": [
    {
      "Try": "prefilter_restart(\n                                        dfa, &input, state.at,\n                                    )?"
    }
  ],
  "regex-automata/src/dfa/search.rs:345:13:345:34": [
    {
      "Try": "init_fwd(dfa, input)?"
    }
  ],
  "regex-automata/src/dfa/search.rs:434:8:434:27": [
    {
      "Bool": {
        "Other": "state.mat.is_some()"
      }
    }
  ]
}