bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:9-430:10)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:12-426:46)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:12-426:33)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:24-426:32)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:30-426:31)
  5: _6 = const 0_usize
    SourceInfo(regex-automata/src/dfa/accel.rs:426:30-426:31)
  6: _7 = Len(_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:24-426:32)
  7: _8 = Lt(_6, _7)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:24-426:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:426:24-426:32)
      kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: _5 = _1[_6]
    SourceInfo(regex-automata/src/dfa/accel.rs:426:24-426:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:426:12-426:33)
      kind: _4 = <usize as core::convert::From<u8>>::from(move _5) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:32-426:33)
  1: _3 = Ge(move _4, const dfa::accel::ACCEL_LEN)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:12-426:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:426:12-426:46)
      kind: switchInt(move _3) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:45-426:46)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:45-426:46)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:427:24-429:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:427:24-429:14)
      kind: _10 = util::wire::DeserializeError::generic(const "accelerator bytes cannot have length more than 3") -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: _0 = core::result::Result::<dfa::accel::Accel, util::wire::DeserializeError>::Err(move _10)
    SourceInfo(regex-automata/src/dfa/accel.rs:427:20-429:15)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:429:14-429:15)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:430:9-430:10)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:430:9-430:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:432:6-432:6)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb5
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:45-426:46)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:426:45-426:46)
  2: _2 = const ()
    SourceInfo(regex-automata/src/dfa/accel.rs:430:10-430:10)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:430:9-430:10)
  4: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:430:9-430:10)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:431:12-431:46)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:431:40-431:45)
  7: _12 = _1
    SourceInfo(regex-automata/src/dfa/accel.rs:431:40-431:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:431:12-431:46)
      kind: _11 = dfa::accel::Accel::from_bytes_unchecked(move _12) -> [return: bb6, unwind: bb8]
  }
  preds [bb2]
  succs [bb6, bb8]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:431:45-431:46)
  1: _0 = core::result::Result::<dfa::accel::Accel, util::wire::DeserializeError>::Ok(move _11)
    SourceInfo(regex-automata/src/dfa/accel.rs:431:9-431:47)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:431:46-431:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:432:6-432:6)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:432:6-432:6)
      kind: return
  }
  preds [bb4, bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:425:5-432:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5]
  succs []

