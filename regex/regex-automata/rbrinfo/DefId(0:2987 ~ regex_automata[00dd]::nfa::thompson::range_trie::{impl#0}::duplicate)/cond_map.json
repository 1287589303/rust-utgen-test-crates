{
  "regex-automata/src/nfa/thompson/range_trie.rs:467:12:467:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "old_id == FINAL",
          "lhs": "old_id",
          "rhs": "FINAL",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:478:15:478:66": [
    {
      "Bool": {
        "Other": "let Some(NextDupe { old_id, new_id }) = stack.pop()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:479:22:479:61": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "0..self.state(old_id).transitions.len()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/range_trie.rs:481:20:481:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "t.next_id == FINAL",
          "lhs": "t.next_id",
          "rhs": "FINAL",
          "cmp_with_int": false
        }
      }
    }
  ]
}