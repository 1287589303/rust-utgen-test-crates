bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/special.rs:342:9-344:10)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/special.rs:342:12-342:51)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/special.rs:342:12-342:44)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/special.rs:342:13-342:32)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/special.rs:342:13-342:21)
  5: _8 = &((*_1).0: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/special.rs:342:13-342:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:342:13-342:32)
      kind: _7 = util::primitives::StateID::as_usize(move _8) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/special.rs:342:31-342:32)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/special.rs:342:36-342:43)
  2: _9 = _3
    SourceInfo(regex-automata/src/dfa/special.rs:342:36-342:43)
  3: _10 = Lt(_9, const 64_usize)
    SourceInfo(regex-automata/src/dfa/special.rs:342:12-342:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:342:12-342:44)
      kind: assert(move _10, "attempt to shift right by `{}`, which would overflow", _9) -> [success: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _6 = Shr(move _7, move _9)
    SourceInfo(regex-automata/src/dfa/special.rs:342:12-342:44)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/special.rs:342:43-342:44)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/special.rs:342:43-342:44)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/special.rs:342:48-342:51)
  4: _11 = _2
    SourceInfo(regex-automata/src/dfa/special.rs:342:48-342:51)
  5: _5 = Ge(move _6, move _11)
    SourceInfo(regex-automata/src/dfa/special.rs:342:12-342:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:342:12-342:51)
      kind: switchInt(move _5) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/special.rs:342:50-342:51)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/special.rs:342:50-342:51)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/special.rs:11:20-11:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:11:20-11:51)
      kind: _13 = util::wire::DeserializeError::generic(const "max should not be greater than or equal to state length") -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _13)
    SourceInfo(regex-automata/src/dfa/special.rs:11:16-11:52)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/special.rs:11:51-11:52)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/special.rs:344:9-344:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/special.rs:344:9-344:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:346:6-346:6)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/special.rs:342:50-342:51)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/special.rs:342:50-342:51)
  2: _4 = const ()
    SourceInfo(regex-automata/src/dfa/special.rs:344:10-344:10)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/special.rs:344:9-344:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/special.rs:344:9-344:10)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/special.rs:345:12-345:14)
  6: _14 = ()
    SourceInfo(regex-automata/src/dfa/special.rs:345:12-345:14)
  7: _0 = core::result::Result::<(), util::wire::DeserializeError>::Ok(move _14)
    SourceInfo(regex-automata/src/dfa/special.rs:345:9-345:15)
  8: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/special.rs:345:14-345:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:346:6-346:6)
      kind: goto -> bb6
  }
  preds [bb2]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:346:6-346:6)
      kind: return
  }
  preds [bb4, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:333:5-346:6)
      kind: resume
  }
  preds [bb0, bb1, bb3]
  succs []

