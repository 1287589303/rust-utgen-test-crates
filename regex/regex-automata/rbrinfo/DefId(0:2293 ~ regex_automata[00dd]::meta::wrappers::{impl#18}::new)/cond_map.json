{
  "regex-automata/src/meta/wrappers.rs:1264:16:1264:75": [
    {
      "Bool": {
        "Other": "let Some(state_limit) = info.config().get_dfa_state_limit()"
      }
    }
  ],
  "regex-automata/src/meta/wrappers.rs:1265:20:1265:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "nfarev.states().len() > state_limit",
          "lhs": "nfarev.states().len()",
          "rhs": "state_limit",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/wrappers.rs:1299:29:1299:35": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/wrappers.rs:1299:29:1299:35",
        "match_str": "result",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-automata/src/meta/wrappers.rs:1301:17:1301:26": {
            "pat": {
              "pat_str": "Err(_err)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/wrappers.rs:1301:30:1304:18"
          },
          "regex-automata/src/meta/wrappers.rs:1300:17:1300:24": {
            "pat": {
              "pat_str": "Ok(rev)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/wrappers.rs:1300:28:1300:31"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/wrappers.rs:1260:17:1260:40": [
    {
      "Bool": {
        "Other": "info.config().get_dfa()"
      }
    }
  ]
}