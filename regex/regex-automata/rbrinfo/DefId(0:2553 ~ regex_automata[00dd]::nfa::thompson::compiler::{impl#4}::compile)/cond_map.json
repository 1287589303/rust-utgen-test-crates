{
  "regex-automata/src/nfa/thompson/compiler.rs:971:64:971:76": [
    {
      "Bool": {
        "Other": "all_anchored"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:973:13:973:28": [
    {
      "Try": "self.c_empty()?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:978:24:985:13": [
    {
      "Try": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:975:13:975:69": [
    {
      "Try": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:940:12:940:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "exprs.len() > PatternID::LIMIT",
          "lhs": "exprs.len()",
          "rhs": "PatternID::LIMIT",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:986:9:986:59": [
    {
      "Try": "self.patch(unanchored_prefix.end, compiled.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:944:16:944:57": [
    {
      "Bool": {
        "Other": "self.config.get_which_captures().is_any()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:971:25:971:60": [
    {
      "Bool": {
        "Other": "self.config.get_unanchored_prefix()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:943:12:943:37": [
    {
      "Bool": {
        "Other": "self.config.get_reverse()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:955:9:957:63": [
    {
      "Try": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:987:19:990:61": [
    {
      "Try": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?"
    }
  ],
  "regex-automata/src/nfa/thompson/compiler.rs:972:36:972:44": [
    {
      "Bool": {
        "Other": "anchored"
      }
    }
  ]
}