bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:68)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:30)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:30)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:23)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:17-35:23)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:17)
  6: _9 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:17)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:18-35:22)
  8: _10 = _3
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:18-35:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:17-35:23)
      kind: _8 = <[u8] as core::ops::Index<util::search::Span>>::index(move _9, move _10) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _7 = &(*_8)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:23)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:22-35:23)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:22-35:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:30)
      kind: _6 = core::slice::<impl [u8]>::iter(move _7) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _5 = &mut _6
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:29-35:30)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:40-35:67)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:40-35:67)
  4: _12 = &(*_1)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:40-35:67)
  5: _11 = {closure@regex-automata/src/util/prefilter/byteset.rs:35:40: 35:44} { self: move _12 }
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:40-35:67)
  6: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:43-35:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-35:68)
      kind: _4 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::position::<{closure@regex-automata/src/util/prefilter/byteset.rs:35:40: 35:44}>(move _5, move _11) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:67-35:68)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:67-35:68)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:73-39:10)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:73-39:10)
  4: _14 = &(_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:73-39:10)
  5: _13 = {closure@regex-automata/src/util/prefilter/byteset.rs:35:73: 35:76} { span: move _14 }
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:73-39:10)
  6: StorageDead(_14)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:75-35:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:35:9-39:11)
      kind: _0 = core::option::Option::<usize>::map::<util::search::Span, {closure@regex-automata/src/util/prefilter/byteset.rs:35:73: 35:76}>(move _4, move _13) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:39:10-39:11)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:39:10-39:11)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:40:5-40:6)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:40:5-40:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:40:6-40:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:34:5-40:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

