{
  "regex-automata/src/util/wire.rs:440:8:440:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "slice.len() < len",
          "lhs": "slice.len()",
          "rhs": "len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/wire.rs:430:27:430:36": [
    {
      "Match": {
        "match_source": "regex-automata/src/util/wire.rs:430:27:430:36",
        "match_str": "first_nul",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/util/wire.rs:431:9:431:24": {
            "pat": {
              "pat_str": "Some(first_nul)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/wire.rs:431:28:431:37"
          },
          "regex-automata/src/util/wire.rs:432:9:432:13": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/wire.rs:432:17:437:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/util/wire.rs:439:15:439:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "first_nul + padding_len(first_nul)",
          "lhs": "first_nul",
          "rhs": "padding_len(first_nul)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/wire.rs:445:8:445:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "expected_label.as_bytes() != &slice[..first_nul]",
          "lhs": "expected_label.as_bytes()",
          "rhs": "&slice[..first_nul]",
          "cmp_with_int": false
        }
      }
    }
  ]
}