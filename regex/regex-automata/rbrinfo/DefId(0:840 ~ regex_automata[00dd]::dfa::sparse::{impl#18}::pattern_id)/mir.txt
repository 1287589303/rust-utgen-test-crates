bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2322:13-2322:18)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2322:21-2322:32)
  2: _4 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2322:21-2322:32)
  3: _5 = MulWithOverflow(_4, const util::primitives::PatternID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2322:21-2322:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2322:21-2322:50)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const util::primitives::PatternID::SIZE) -> [success: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _3 = move (_5.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2322:21-2322:50)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2322:49-2322:50)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2322:13-2322:18)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:9-2323:68)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:41-2323:67)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:41-2323:67)
  6: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:58-2323:67)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:42-2323:58)
  8: _10 = &(*((*_1).5: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:42-2323:58)
  9: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:59-2323:66)
  10: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:59-2323:64)
  11: _12 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:59-2323:64)
  12: _11 = core::ops::RangeFrom::<usize> { start: move _12 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:59-2323:66)
  13: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:65-2323:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2323:58-2323:67)
      kind: _9 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _10, move _11) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:66-2323:67)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:66-2323:67)
  2: _8 = &(*_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:41-2323:67)
  3: _7 = &(*_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:41-2323:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2323:9-2323:68)
      kind: _6 = util::wire::read_pattern_id_unchecked(move _7) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:67-2323:68)
  1: _0 = (_6.0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2323:9-2323:70)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2324:5-2324:6)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2324:5-2324:6)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2324:5-2324:6)
  5: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2324:5-2324:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2324:6-2324:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2321:5-2324:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

