{
  "regex-automata/src/dfa/special.rs:475:12:475:25": [
    {
      "Bool": {
        "Other": "self.accels()"
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:476:13:477:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(self.max_accel.as_usize() - self.min_accel.as_usize() + stride)\n                / stride",
          "lhs": "(self.max_accel.as_usize() - self.min_accel.as_usize() + stride)",
          "rhs": "stride",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:476:14:476:67": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.max_accel.as_usize() - self.min_accel.as_usize()",
          "lhs": "self.max_accel.as_usize()",
          "rhs": "self.min_accel.as_usize()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/special.rs:476:13:476:77": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(self.max_accel.as_usize() - self.min_accel.as_usize() + stride)",
          "lhs": "self.max_accel.as_usize() - self.min_accel.as_usize()",
          "rhs": "stride",
          "cmp_with_int": false
        }
      }
    }
  ]
}