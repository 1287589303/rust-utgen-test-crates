bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:13-183:75)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:41-183:53)
  2: _6 = ((*_1).0: u16)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:41-183:53)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:55-183:58)
  4: _7 = move _2
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:55-183:58)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:65-183:73)
  6: _8 = _4
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:65-183:73)
  7: _5 = nfa::thompson::map::Utf8BoundedEntry { version: move _6, key: move _7, val: move _8 }
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:13-183:75)
  8: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:74-183:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:74-183:75)
      kind: drop(_7) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:74-183:75)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:74-183:75)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:17-182:23)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:9-182:17)
  4: _10 = &mut ((*_1).2: std::vec::Vec<nfa::thompson::map::Utf8BoundedEntry>)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:9-182:17)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:18-182:22)
  6: _11 = _3
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:18-182:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:17-182:23)
      kind: _9 = <std::vec::Vec<nfa::thompson::map::Utf8BoundedEntry> as core::ops::IndexMut<usize>>::index_mut(move _10, move _11) -> [return: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:22-182:23)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:22-182:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:9-182:23)
      kind: drop((*_9)) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: (*_9) = move _5
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:9-182:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:74-183:75)
      kind: drop(_5) -> [return: bb5, unwind: bb8]
  }
  preds [bb2]
  succs [bb5, bb8]

bb4
  0: (*_9) = move _5
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:9-182:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:182:9-182:23)
      kind: goto -> bb7
  }
  preds [bb2]
  succs [bb7]

bb5
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:74-183:75)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:75-183:76)
  2: _0 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/map.rs:181:7-184:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:184:5-184:6)
      kind: drop(_2) -> [return: bb6, unwind: bb9]
  }
  preds [bb3]
  succs [bb6, bb9]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:184:6-184:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:183:74-183:75)
      kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb0, bb1, bb4]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:184:5-184:6)
      kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)]
  }
  preds [bb3, bb7]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/map.rs:176:5-184:6)
      kind: resume
  }
  preds [bb5, bb8]
  succs []

