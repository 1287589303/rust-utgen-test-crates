{
  "regex-automata/src/dfa/dense.rs:2408:23:2408:72": [
    {
      "Try": "wire::try_read_u32(&slice[nr..], \"unused space\")?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2430:32:2430:66": [
    {
      "Try": "ByteSet::from_bytes(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2403:9:2403:56": [
    {
      "Try": "wire::check_alignment::<StateID>(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2417:27:2417:74": [
    {
      "Try": "StartTable::from_bytes_unchecked(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2414:27:2414:79": [
    {
      "Try": "TransitionTable::from_bytes_unchecked(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2427:31:2427:74": [
    {
      "Try": "Accels::from_bytes_unchecked(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2423:32:2423:66": [
    {
      "Try": "Special::from_bytes(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2404:15:2404:53": [
    {
      "Try": "wire::read_label(&slice[nr..], LABEL)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2405:15:2405:57": [
    {
      "Try": "wire::read_endianness_check(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2411:30:2411:62": [
    {
      "Try": "Flags::from_bytes(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2406:15:2406:57": [
    {
      "Try": "wire::read_version(&slice[nr..], VERSION)?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2420:27:2420:75": [
    {
      "Try": "MatchStates::from_bytes_unchecked(&slice[nr..])?"
    }
  ],
  "regex-automata/src/dfa/dense.rs:2425:9:2425:58": [
    {
      "Try": "special.validate_state_len(tt.len(), tt.stride2)?"
    }
  ]
}