bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1337:13-1337:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1337:22-1337:26)
  2: _4 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1337:22-1337:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1337:22-1337:41)
      kind: _3 = dfa::sparse::Transitions::<T>::write_to_len(move _4) -> [return: bb1, unwind: bb56]
  }
  preds []
  succs [bb1, bb56]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1337:40-1337:41)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1337:13-1337:19)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:9-1342:10)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:12-1338:30)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:12-1338:21)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:12-1338:15)
  6: _8 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:12-1338:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1338:12-1338:21)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb2, unwind: bb56]
  }
  preds [bb0]
  succs [bb2, bb56]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:20-1338:21)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:24-1338:30)
  2: _9 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:24-1338:30)
  3: _6 = Lt(move _7, move _9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:12-1338:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1338:12-1338:30)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:29-1338:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:29-1338:30)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1339:24-1341:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1339:24-1341:14)
      kind: _11 = util::wire::SerializeError::buffer_too_small(const "sparse transition table") -> [return: bb4, unwind: bb56]
  }
  preds [bb2]
  succs [bb4, bb56]

bb4
  0: _0 = core::result::Result::<usize, util::wire::SerializeError>::Err(move _11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1339:20-1341:15)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1341:14-1341:15)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1342:9-1342:10)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1342:9-1342:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb54
  }
  preds [bb3]
  succs [bb54]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:29-1338:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1338:29-1338:30)
  2: _5 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1342:10-1342:10)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1342:9-1342:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1342:9-1342:10)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:15-1343:33)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:15-1343:33)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:23-1343:33)
  8: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:20-1343:23)
  9: _15 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:20-1343:23)
  10: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:24-1343:32)
  11: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:26-1343:32)
  12: _17 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:26-1343:32)
  13: _16 = core::ops::RangeTo::<usize> { end: move _17 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:24-1343:32)
  14: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:31-1343:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1343:23-1343:33)
      kind: _14 = <[u8] as core::ops::IndexMut<core::ops::RangeTo<usize>>>::index_mut(move _15, move _16) -> [return: bb6, unwind: bb56]
  }
  preds [bb2]
  succs [bb6, bb56]

bb6
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:32-1343:33)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:32-1343:33)
  2: _13 = &mut (*_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:15-1343:33)
  3: _12 = &mut (*_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:15-1343:33)
  4: _2 = move _12
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:9-1343:33)
  5: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:32-1343:33)
  6: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:33-1343:34)
  7: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1343:33-1343:34)
  8: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:9-1346:66)
  9: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:22-1346:60)
  10: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:22-1346:51)
  11: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:36-1346:50)
  12: _21 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:36-1346:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1346:22-1346:51)
      kind: _20 = <u32 as core::convert::TryFrom<usize>>::try_from(move _21) -> [return: bb7, unwind: bb56]
  }
  preds [bb5]
  succs [bb7, bb56]

bb7
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:50-1346:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1346:22-1346:60)
      kind: _19 = core::result::Result::<u32, core::num::TryFromIntError>::unwrap(move _20) -> [return: bb8, unwind: bb56]
  }
  preds [bb6]
  succs [bb8, bb56]

bb8
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:59-1346:60)
  1: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:62-1346:65)
  2: _22 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:62-1346:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1346:9-1346:66)
      kind: _18 = <E as util::wire::Endian>::write_u32(move _19, move _22) -> [return: bb9, unwind: bb56]
  }
  preds [bb7]
  succs [bb9, bb56]

bb9
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:65-1346:66)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:65-1346:66)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1346:66-1346:67)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:15-1347:43)
  4: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:15-1347:43)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:23-1347:43)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:20-1347:23)
  7: _26 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:20-1347:23)
  8: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:24-1347:42)
  9: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:24-1347:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1347:24-1347:40)
      kind: _28 = core::mem::size_of::<u32>() -> [return: bb10, unwind: bb56]
  }
  preds [bb8]
  succs [bb10, bb56]

bb10
  0: _27 = core::ops::RangeFrom::<usize> { start: move _28 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:24-1347:42)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:41-1347:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1347:23-1347:43)
      kind: _25 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _26, move _27) -> [return: bb11, unwind: bb56]
  }
  preds [bb9]
  succs [bb11, bb56]

bb11
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:42-1347:43)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:42-1347:43)
  2: _24 = &mut (*_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:15-1347:43)
  3: _23 = &mut (*_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:15-1347:43)
  4: _2 = move _23
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:9-1347:43)
  5: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:42-1347:43)
  6: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:43-1347:44)
  7: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1347:43-1347:44)
  8: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:9-1350:68)
  9: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:22-1350:62)
  10: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:22-1350:53)
  11: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:36-1350:52)
  12: _32 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:36-1350:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1350:22-1350:53)
      kind: _31 = <u32 as core::convert::TryFrom<usize>>::try_from(move _32) -> [return: bb12, unwind: bb56]
  }
  preds [bb10]
  succs [bb12, bb56]

bb12
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:52-1350:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1350:22-1350:62)
      kind: _30 = core::result::Result::<u32, core::num::TryFromIntError>::unwrap(move _31) -> [return: bb13, unwind: bb56]
  }
  preds [bb11]
  succs [bb13, bb56]

bb13
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:61-1350:62)
  1: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:64-1350:67)
  2: _33 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:64-1350:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1350:9-1350:68)
      kind: _29 = <E as util::wire::Endian>::write_u32(move _30, move _33) -> [return: bb14, unwind: bb56]
  }
  preds [bb12]
  succs [bb14, bb56]

bb14
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:67-1350:68)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:67-1350:68)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1350:68-1350:69)
  3: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:15-1351:43)
  4: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:15-1351:43)
  5: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:23-1351:43)
  6: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:20-1351:23)
  7: _37 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:20-1351:23)
  8: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:24-1351:42)
  9: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:24-1351:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1351:24-1351:40)
      kind: _39 = core::mem::size_of::<u32>() -> [return: bb15, unwind: bb56]
  }
  preds [bb13]
  succs [bb15, bb56]

bb15
  0: _38 = core::ops::RangeFrom::<usize> { start: move _39 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:24-1351:42)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:41-1351:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1351:23-1351:43)
      kind: _36 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _37, move _38) -> [return: bb16, unwind: bb56]
  }
  preds [bb14]
  succs [bb16, bb56]

bb16
  0: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:42-1351:43)
  1: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:42-1351:43)
  2: _35 = &mut (*_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:15-1351:43)
  3: _34 = &mut (*_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:15-1351:43)
  4: _2 = move _34
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:9-1351:43)
  5: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:42-1351:43)
  6: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:43-1351:44)
  7: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1351:43-1351:44)
  8: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:13-1354:14)
  9: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
  10: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:43)
  11: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:29)
  12: _43 = &((*_1).1: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:29)
  13: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:39-1354:42)
  14: _44 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:39-1354:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:43)
      kind: _42 = util::alphabet::ByteClasses::write_to(move _43, move _44) -> [return: bb17, unwind: bb56]
  }
  preds [bb15]
  succs [bb17, bb56]

bb17
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:42-1354:43)
  1: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:42-1354:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
      kind: _41 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _42) -> [return: bb18, unwind: bb56]
  }
  preds [bb16]
  succs [bb18, bb56]

bb18
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  1: PlaceMention(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
  2: _45 = discriminant(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
      kind: switchInt(move _45) -> [0: bb21, 1: bb20, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb20, bb21]

bb19
  0: FakeRead(ForMatchedPlace(None), _41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
      kind: unreachable
  }
  preds [bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
      kind: falseEdge -> [real: bb22, imaginary: bb21]
  }
  preds [bb18]
  succs [bb21, bb22]

bb21
  0: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
  1: _49 = ((_41 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
  2: _40 = _49
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
  3: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  4: FakeRead(ForLet(None), _40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:13-1354:14)
  5: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:44-1354:45)
  6: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:15-1355:28)
  7: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:15-1355:28)
  8: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:23-1355:28)
  9: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:20-1355:23)
  10: _53 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:20-1355:23)
  11: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:24-1355:27)
  12: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:24-1355:25)
  13: _55 = _40
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:24-1355:25)
  14: _54 = core::ops::RangeFrom::<usize> { start: move _55 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:24-1355:27)
  15: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:26-1355:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1355:23-1355:28)
      kind: _52 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _53, move _54) -> [return: bb24, unwind: bb56]
  }
  preds [bb18, bb20]
  succs [bb24, bb56]

bb22
  0: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  1: _46 = move ((_41 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  2: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  3: _48 = move _46
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1354:17-1354:44)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _48) -> [return: bb23, unwind: bb56]
  }
  preds [bb20]
  succs [bb23, bb56]

bb23
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:43-1354:44)
  2: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1354:44-1354:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb53
  }
  preds [bb22]
  succs [bb53]

bb24
  0: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:27-1355:28)
  1: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:27-1355:28)
  2: _51 = &mut (*_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:15-1355:28)
  3: _50 = &mut (*_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:15-1355:28)
  4: _2 = move _50
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:9-1355:28)
  5: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:27-1355:28)
  6: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:28-1355:29)
  7: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1355:28-1355:29)
  8: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:9-1358:71)
  9: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:22-1358:65)
  10: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:22-1358:56)
  11: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:55)
  12: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:49)
  13: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:49)
  14: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:40)
  15: _62 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:49)
      kind: _61 = dfa::sparse::Transitions::<T>::sparse(move _62) -> [return: bb25, unwind: bb56]
  }
  preds [bb21]
  succs [bb25, bb56]

bb25
  0: _60 = &(*_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:49)
  1: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:48-1358:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1358:36-1358:55)
      kind: _59 = core::slice::<impl [u8]>::len(move _60) -> [return: bb26, unwind: bb56]
  }
  preds [bb24]
  succs [bb26, bb56]

bb26
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:54-1358:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1358:22-1358:56)
      kind: _58 = <u32 as core::convert::TryFrom<usize>>::try_from(move _59) -> [return: bb27, unwind: bb56]
  }
  preds [bb25]
  succs [bb27, bb56]

bb27
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:55-1358:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1358:22-1358:65)
      kind: _57 = core::result::Result::<u32, core::num::TryFromIntError>::unwrap(move _58) -> [return: bb28, unwind: bb56]
  }
  preds [bb26]
  succs [bb28, bb56]

bb28
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:64-1358:65)
  1: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:67-1358:70)
  2: _63 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:67-1358:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1358:9-1358:71)
      kind: _56 = <E as util::wire::Endian>::write_u32(move _57, move _63) -> [return: bb29, unwind: bb56]
  }
  preds [bb27]
  succs [bb29, bb56]

bb29
  0: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:70-1358:71)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:70-1358:71)
  2: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:71-1358:72)
  3: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1358:71-1358:72)
  4: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:15-1359:43)
  5: StorageLive(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:15-1359:43)
  6: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:23-1359:43)
  7: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:20-1359:23)
  8: _67 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:20-1359:23)
  9: StorageLive(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:24-1359:42)
  10: StorageLive(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:24-1359:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1359:24-1359:40)
      kind: _69 = core::mem::size_of::<u32>() -> [return: bb30, unwind: bb56]
  }
  preds [bb28]
  succs [bb30, bb56]

bb30
  0: _68 = core::ops::RangeFrom::<usize> { start: move _69 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:24-1359:42)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:41-1359:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1359:23-1359:43)
      kind: _66 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _67, move _68) -> [return: bb31, unwind: bb56]
  }
  preds [bb29]
  succs [bb31, bb56]

bb31
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:42-1359:43)
  1: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:42-1359:43)
  2: _65 = &mut (*_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:15-1359:43)
  3: _64 = &mut (*_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:15-1359:43)
  4: _2 = move _64
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:9-1359:43)
  5: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:42-1359:43)
  6: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:43-1359:44)
  7: StorageDead(_65)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1359:43-1359:44)
  8: StorageLive(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1362:13-1362:19)
  9: _70 = const dfa::DEAD
    SourceInfo(regex-automata/src/dfa/sparse.rs:1362:22-1362:26)
  10: FakeRead(ForLet(None), _70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1362:13-1362:19)
  11: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:9-1369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1363:9-1369:10)
      kind: goto -> bb32
  }
  preds [bb30]
  succs [bb32]

bb32
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1363:9-1369:10)
      kind: falseUnwind -> [real: bb33, unwind: bb56]
  }
  preds [bb31, bb51]
  succs [bb33, bb56]

bb33
  0: StorageLive(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:15-1363:50)
  1: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:15-1363:28)
  2: StorageLive(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:15-1363:17)
  3: _75 = &_70
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:15-1363:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1363:15-1363:28)
      kind: _74 = util::primitives::StateID::as_usize(move _75) -> [return: bb34, unwind: bb56]
  }
  preds [bb32]
  succs [bb34, bb56]

bb34
  0: StorageDead(_75)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:27-1363:28)
  1: StorageLive(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:50)
  2: StorageLive(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:44)
  3: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:44)
  4: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:35)
  5: _79 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:44)
      kind: _78 = dfa::sparse::Transitions::<T>::sparse(move _79) -> [return: bb35, unwind: bb56]
  }
  preds [bb33]
  succs [bb35, bb56]

bb35
  0: _77 = &(*_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:44)
  1: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:43-1363:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1363:31-1363:50)
      kind: _76 = core::slice::<impl [u8]>::len(move _77) -> [return: bb36, unwind: bb56]
  }
  preds [bb34]
  succs [bb36, bb56]

bb36
  0: StorageDead(_77)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:49-1363:50)
  1: _73 = Lt(move _74, move _76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:15-1363:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1363:15-1363:50)
      kind: switchInt(move _73) -> [0: bb52, otherwise: bb37]
  }
  preds [bb35]
  succs [bb37, bb52]

bb37
  0: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:49-1363:50)
  1: StorageDead(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:49-1363:50)
  2: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:49-1363:50)
  3: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:17-1364:22)
  4: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:25-1364:29)
  5: _81 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:25-1364:29)
  6: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:36-1364:38)
  7: _82 = _70
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:36-1364:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1364:25-1364:39)
      kind: _80 = dfa::sparse::Transitions::<T>::state(move _81, move _82) -> [return: bb38, unwind: bb56]
  }
  preds [bb36]
  succs [bb38, bb56]

bb38
  0: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:38-1364:39)
  1: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:38-1364:39)
  2: FakeRead(ForLet(None), _80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1364:17-1364:22)
  3: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:17-1365:18)
  4: StorageLive(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
  5: StorageLive(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:50)
  6: StorageLive(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:26)
  7: _86 = &_80
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:26)
  8: StorageLive(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:41-1365:49)
  9: StorageLive(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:41-1365:49)
  10: _88 = &mut _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:41-1365:49)
  11: _87 = &mut (*(*_88))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:41-1365:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:50)
      kind: _85 = dfa::sparse::State::<'_>::write_to::<E>(move _86, move _87) -> [return: bb39, unwind: bb56]
  }
  preds [bb37]
  succs [bb39, bb56]

bb39
  0: StorageDead(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:49-1365:50)
  1: StorageDead(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:49-1365:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
      kind: _84 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::Try>::branch(move _85) -> [return: bb40, unwind: bb56]
  }
  preds [bb38]
  succs [bb40, bb56]

bb40
  0: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  1: PlaceMention(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
  2: _89 = discriminant(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
      kind: switchInt(move _89) -> [0: bb43, 1: bb42, otherwise: bb41]
  }
  preds [bb39]
  succs [bb41, bb42, bb43]

bb41
  0: FakeRead(ForMatchedPlace(None), _84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
      kind: unreachable
  }
  preds [bb40]
  succs []

bb42
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
      kind: falseEdge -> [real: bb44, imaginary: bb43]
  }
  preds [bb40]
  succs [bb43, bb44]

bb43
  0: StorageLive(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
  1: _93 = ((_84 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
  2: _83 = _93
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
  3: StorageDead(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  4: FakeRead(ForLet(None), _83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:17-1365:18)
  5: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:51-1365:52)
  6: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:51-1365:52)
  7: StorageLive(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:19-1366:32)
  8: StorageLive(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:19-1366:32)
  9: StorageLive(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:27-1366:32)
  10: StorageLive(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:24-1366:27)
  11: _97 = &mut (*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:24-1366:27)
  12: StorageLive(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:28-1366:31)
  13: StorageLive(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:28-1366:29)
  14: _99 = _83
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:28-1366:29)
  15: _98 = core::ops::RangeFrom::<usize> { start: move _99 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:28-1366:31)
  16: StorageDead(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:30-1366:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1366:27-1366:32)
      kind: _96 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _97, move _98) -> [return: bb46, unwind: bb56]
  }
  preds [bb40, bb42]
  succs [bb46, bb56]

bb44
  0: StorageLive(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  1: _90 = move ((_84 as Break).0: core::result::Result<core::convert::Infallible, util::wire::SerializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  2: StorageLive(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  3: _92 = move _90
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1365:21-1365:51)
      kind: _0 = <core::result::Result<usize, util::wire::SerializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::SerializeError>>>::from_residual(move _92) -> [return: bb45, unwind: bb56]
  }
  preds [bb42]
  succs [bb45, bb56]

bb45
  0: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  1: StorageDead(_90)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:50-1365:51)
  2: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:51-1365:52)
  3: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1365:51-1365:52)
  4: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  5: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  6: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  7: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  8: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1371:5-1371:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb53
  }
  preds [bb44]
  succs [bb53]

bb46
  0: StorageDead(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:31-1366:32)
  1: StorageDead(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:31-1366:32)
  2: _95 = &mut (*_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:19-1366:32)
  3: _94 = &mut (*_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:19-1366:32)
  4: _2 = move _94
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:13-1366:32)
  5: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:31-1366:32)
  6: StorageDead(_96)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:32-1366:33)
  7: StorageDead(_95)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1366:32-1366:33)
  8: StorageLive(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:18-1368:77)
  9: StorageLive(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:18-1368:68)
  10: StorageLive(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:67)
  11: StorageLive(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:44)
  12: StorageLive(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:33)
  13: _104 = &_70
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:44)
      kind: _103 = util::primitives::StateID::as_usize(move _104) -> [return: bb47, unwind: bb56]
  }
  preds [bb43]
  succs [bb47, bb56]

bb47
  0: StorageDead(_104)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:43-1368:44)
  1: StorageLive(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:47-1368:67)
  2: StorageLive(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:47-1368:52)
  3: _106 = &_80
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:47-1368:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1368:47-1368:67)
      kind: _105 = dfa::sparse::State::<'_>::write_to_len(move _106) -> [return: bb48, unwind: bb56]
  }
  preds [bb46]
  succs [bb48, bb56]

bb48
  0: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:66-1368:67)
  1: _107 = AddWithOverflow(_103, _105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:67)
      kind: assert(!move (_107.1: bool), "attempt to compute `{} + {}`, which would overflow", move _103, move _105) -> [success: bb49, unwind: bb56]
  }
  preds [bb47]
  succs [bb49, bb56]

bb49
  0: _102 = move (_107.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:31-1368:67)
  1: StorageDead(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:66-1368:67)
  2: StorageDead(_103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:66-1368:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1368:18-1368:68)
      kind: _101 = util::primitives::StateID::new(move _102) -> [return: bb50, unwind: bb56]
  }
  preds [bb48]
  succs [bb50, bb56]

bb50
  0: StorageDead(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:67-1368:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1368:18-1368:77)
      kind: _100 = core::result::Result::<util::primitives::StateID, util::primitives::StateIDError>::unwrap(move _101) -> [return: bb51, unwind: bb56]
  }
  preds [bb49]
  succs [bb51, bb56]

bb51
  0: StorageDead(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:76-1368:77)
  1: _70 = move _100
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:13-1368:77)
  2: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1368:76-1368:77)
  3: _72 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:51-1369:10)
  4: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  5: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  6: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1363:9-1369:10)
      kind: goto -> bb32
  }
  preds [bb50]
  succs [bb32]

bb52
  0: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:49-1363:50)
  1: StorageDead(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:49-1363:50)
  2: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:49-1363:50)
  3: StorageLive(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:9-1369:10)
  4: _71 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1363:9-1369:10)
  5: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  6: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  7: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1369:9-1369:10)
  8: StorageLive(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1370:12-1370:18)
  9: _111 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1370:12-1370:18)
  10: _0 = core::result::Result::<usize, util::wire::SerializeError>::Ok(move _111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1370:9-1370:19)
  11: StorageDead(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1370:18-1370:19)
  12: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1371:5-1371:6)
  13: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1371:5-1371:6)
  14: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1371:5-1371:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1371:6-1371:6)
      kind: goto -> bb55
  }
  preds [bb36]
  succs [bb55]

bb53
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1371:5-1371:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb54
  }
  preds [bb23, bb45]
  succs [bb54]

bb54
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1371:5-1371:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1371:6-1371:6)
      kind: goto -> bb55
  }
  preds [bb4, bb53]
  succs [bb55]

bb55
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1371:6-1371:6)
      kind: return
  }
  preds [bb52, bb54]
  succs []

bb56
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1333:5-1371:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb15, bb16, bb17, bb21, bb22, bb24, bb25, bb26, bb27, bb28, bb29, bb30, bb32, bb33, bb34, bb35, bb37, bb38, bb39, bb43, bb44, bb46, bb47, bb48, bb49, bb50]
  succs []

