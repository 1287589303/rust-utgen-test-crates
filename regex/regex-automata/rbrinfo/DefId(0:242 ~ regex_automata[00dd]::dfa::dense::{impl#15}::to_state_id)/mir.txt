bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:32-3701:53)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:32-3701:37)
  2: _4 = _2
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:32-3701:37)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:41-3701:53)
  4: _5 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:41-3701:53)
  5: _6 = Lt(_5, const 64_usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:32-3701:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3701:32-3701:53)
      kind: assert(move _6, "attempt to shift left by `{}`, which would overflow", _5) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = Shl(move _4, move _5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:32-3701:53)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:52-3701:53)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:52-3701:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3701:9-3701:54)
      kind: _0 = util::primitives::StateID::new_unchecked(move _3) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3701:53-3701:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3702:6-3702:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3698:5-3702:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

