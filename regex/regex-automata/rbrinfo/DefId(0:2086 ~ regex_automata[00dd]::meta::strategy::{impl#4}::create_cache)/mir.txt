bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:25-675:65)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:64)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:56)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:56)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:43)
  5: _6 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:56)
      kind: _5 = <meta::strategy::Core as meta::strategy::Strategy>::group_info(move _6) -> [return: bb1, unwind: bb21]
  }
  preds []
  succs [bb1, bb21]

bb1
  0: _4 = &(*_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:56)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:55-675:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:675:39-675:64)
      kind: _3 = <util::captures::GroupInfo as core::clone::Clone>::clone(move _4) -> [return: bb2, unwind: bb21]
  }
  preds [bb0]
  succs [bb2, bb21]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:63-675:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:675:25-675:65)
      kind: _2 = util::captures::Captures::all(move _3) -> [return: bb3, unwind: bb20]
  }
  preds [bb1]
  succs [bb3, bb20]

bb3
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:675:64-675:65)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:676:21-676:47)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:676:21-676:32)
  3: _8 = &((*_1).4: meta::wrappers::PikeVM)
    SourceInfo(regex-automata/src/meta/strategy.rs:676:21-676:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:676:21-676:47)
      kind: _7 = meta::wrappers::PikeVM::create_cache(move _8) -> [return: bb4, unwind: bb19]
  }
  preds [bb2]
  succs [bb4, bb19]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:676:46-676:47)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:677:24-677:53)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:677:24-677:38)
  3: _10 = &((*_1).5: meta::wrappers::BoundedBacktracker)
    SourceInfo(regex-automata/src/meta/strategy.rs:677:24-677:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:677:24-677:53)
      kind: _9 = meta::wrappers::BoundedBacktracker::create_cache(move _10) -> [return: bb5, unwind: bb18]
  }
  preds [bb3]
  succs [bb5, bb18]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:677:52-677:53)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:678:22-678:49)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:678:22-678:34)
  3: _12 = &((*_1).6: meta::wrappers::OnePass)
    SourceInfo(regex-automata/src/meta/strategy.rs:678:22-678:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:678:22-678:49)
      kind: _11 = meta::wrappers::OnePass::create_cache(move _12) -> [return: bb6, unwind: bb17]
  }
  preds [bb4]
  succs [bb6, bb17]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:678:48-678:49)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:679:21-679:47)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:679:21-679:32)
  3: _14 = &((*_1).7: meta::wrappers::Hybrid)
    SourceInfo(regex-automata/src/meta/strategy.rs:679:21-679:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:679:21-679:47)
      kind: _13 = meta::wrappers::Hybrid::create_cache(move _14) -> [return: bb7, unwind: bb16]
  }
  preds [bb5]
  succs [bb7, bb16]

bb7
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:679:46-679:47)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:680:24-680:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:680:24-680:60)
      kind: _15 = meta::wrappers::ReverseHybridCache::none() -> [return: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: _0 = meta::regex::Cache { capmatches: move _2, pikevm: move _7, backtrack: move _9, onepass: move _11, hybrid: move _13, revhybrid: move _15 }
    SourceInfo(regex-automata/src/meta/strategy.rs:674:9-681:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_15) -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_13) -> [return: bb10, unwind: bb16]
  }
  preds [bb8]
  succs [bb10, bb16]

bb10
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_11) -> [return: bb11, unwind: bb17]
  }
  preds [bb9]
  succs [bb11, bb17]

bb11
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_9) -> [return: bb12, unwind: bb18]
  }
  preds [bb10]
  succs [bb12, bb18]

bb12
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_7) -> [return: bb13, unwind: bb19]
  }
  preds [bb11]
  succs [bb13, bb19]

bb13
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_2) -> [return: bb14, unwind: bb21]
  }
  preds [bb12]
  succs [bb14, bb21]

bb14
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:682:5-682:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:682:6-682:6)
      kind: return
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_13) -> [return: bb16, unwind terminate(cleanup)]
  }
  preds [bb7, bb8]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_11) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb6, bb9, bb15]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_9) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb5, bb10, bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_7) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb4, bb11, bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:681:9-681:10)
      kind: drop(_2) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb3, bb12, bb18]
  succs [bb21]

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:675:64-675:65)
      kind: drop(_3) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:673:5-682:6)
      kind: resume
  }
  preds [bb0, bb1, bb13, bb19, bb20]
  succs []

