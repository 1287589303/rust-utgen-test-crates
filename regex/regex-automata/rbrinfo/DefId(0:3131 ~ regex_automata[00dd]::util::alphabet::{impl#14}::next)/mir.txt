bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:899:13-899:17)
  1: _2 = {closure@regex-automata/src/util/alphabet.rs:899:20: 899:30}
    SourceInfo(regex-automata/src/util/alphabet.rs:899:20-899:55)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/alphabet.rs:899:13-899:17)
  3: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:9-913:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:900:9-913:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:900:9-913:10)
      kind: falseUnwind -> [real: bb2, unwind: bb22]
  }
  preds [bb0, bb8]
  succs [bb2, bb22]

bb2
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:15-900:28)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:15-900:21)
  2: _6 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:15-900:21)
  3: _5 = Le(move _6, const 255_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:15-900:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:900:15-900:28)
      kind: switchInt(move _5) -> [0: bb20, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb20]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:27-900:28)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:17-901:22)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:25-901:29)
  3: _9 = &_2
    SourceInfo(regex-automata/src/util/alphabet.rs:901:25-901:29)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:25-901:37)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:30-901:36)
  6: _11 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:30-901:36)
  7: _10 = (move _11,)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:25-901:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:901:25-901:37)
      kind: _8 = <{closure@regex-automata/src/util/alphabet.rs:899:20: 899:30} as core::ops::Fn<(usize,)>>::call(move _9, move _10) -> [return: bb4, unwind: bb22]
  }
  preds [bb2]
  succs [bb4, bb22]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:36-901:37)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:36-901:37)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:36-901:37)
  3: FakeRead(ForLet(None), _8)
    SourceInfo(regex-automata/src/util/alphabet.rs:901:17-901:22)
  4: _12 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:902:13-902:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:902:13-902:24)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb5, unwind: bb22]
  }
  preds [bb3]
  succs [bb5, bb22]

bb5
  0: ((*_1).1: usize) = move (_12.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:902:13-902:24)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:13-905:14)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:17-903:41)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:17-903:25)
  4: _15 = &(*((*_1).0: &util::alphabet::ByteSet))
    SourceInfo(regex-automata/src/util/alphabet.rs:903:17-903:25)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:35-903:40)
  6: _16 = _8
    SourceInfo(regex-automata/src/util/alphabet.rs:903:35-903:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:903:17-903:41)
      kind: _14 = util::alphabet::ByteSet::contains(move _15, move _16) -> [return: bb6, unwind: bb22]
  }
  preds [bb4]
  succs [bb6, bb22]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:903:17-903:41)
      kind: switchInt(move _14) -> [0: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:40-903:41)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:40-903:41)
  2: _13 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:905:14-905:14)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:905:13-905:14)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:905:13-905:14)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:907:17-907:24)
  6: _18 = _8
    SourceInfo(regex-automata/src/util/alphabet.rs:907:27-907:32)
  7: FakeRead(ForLet(None), _18)
    SourceInfo(regex-automata/src/util/alphabet.rs:907:17-907:24)
  8: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:13-911:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:908:13-911:14)
      kind: goto -> bb9
  }
  preds [bb6]
  succs [bb9]

bb8
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:40-903:41)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:903:40-903:41)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:905:13-905:14)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:905:13-905:14)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb1
  }
  preds [bb6]
  succs [bb1]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:908:13-911:14)
      kind: falseUnwind -> [real: bb10, unwind: bb22]
  }
  preds [bb7, bb16]
  succs [bb10, bb22]

bb10
  0: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:19-908:32)
  1: StorageLive(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:19-908:25)
  2: _21 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:19-908:25)
  3: _20 = Le(move _21, const 255_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:19-908:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:908:19-908:32)
      kind: switchInt(move _20) -> [0: bb18, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb18]

bb11
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:31-908:32)
  1: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:36-908:67)
  2: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:36-908:44)
  3: _23 = &(*((*_1).0: &util::alphabet::ByteSet))
    SourceInfo(regex-automata/src/util/alphabet.rs:908:36-908:44)
  4: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:54-908:66)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:54-908:58)
  6: _25 = &_2
    SourceInfo(regex-automata/src/util/alphabet.rs:908:54-908:58)
  7: StorageLive(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:54-908:66)
  8: StorageLive(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:59-908:65)
  9: _27 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:59-908:65)
  10: _26 = (move _27,)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:54-908:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:908:54-908:66)
      kind: _24 = <{closure@regex-automata/src/util/alphabet.rs:899:20: 899:30} as core::ops::Fn<(usize,)>>::call(move _25, move _26) -> [return: bb12, unwind: bb22]
  }
  preds [bb10]
  succs [bb12, bb22]

bb12
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:65-908:66)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:65-908:66)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:65-908:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:908:36-908:67)
      kind: _22 = util::alphabet::ByteSet::contains(move _23, move _24) -> [return: bb13, unwind: bb22]
  }
  preds [bb11]
  succs [bb13, bb22]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:908:36-908:67)
      kind: switchInt(move _22) -> [0: bb17, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb17]

bb14
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:66-908:67)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:66-908:67)
  2: StorageLive(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:23-909:35)
  3: StorageLive(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:23-909:27)
  4: _29 = &_2
    SourceInfo(regex-automata/src/util/alphabet.rs:909:23-909:27)
  5: StorageLive(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:23-909:35)
  6: StorageLive(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:28-909:34)
  7: _31 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:28-909:34)
  8: _30 = (move _31,)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:23-909:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:909:23-909:35)
      kind: _28 = <{closure@regex-automata/src/util/alphabet.rs:899:20: 899:30} as core::ops::Fn<(usize,)>>::call(move _29, move _30) -> [return: bb15, unwind: bb22]
  }
  preds [bb13]
  succs [bb15, bb22]

bb15
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:34-909:35)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:34-909:35)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:34-909:35)
  3: _18 = move _28
    SourceInfo(regex-automata/src/util/alphabet.rs:909:17-909:35)
  4: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:909:34-909:35)
  5: _32 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:910:17-910:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:910:17-910:28)
      kind: assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb16, unwind: bb22]
  }
  preds [bb14]
  succs [bb16, bb22]

bb16
  0: ((*_1).1: usize) = move (_32.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:910:17-910:28)
  1: _4 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:908:68-911:14)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:911:13-911:14)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:911:13-911:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:908:13-911:14)
      kind: goto -> bb9
  }
  preds [bb15]
  succs [bb9]

bb17
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:66-908:67)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:66-908:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb13]
  succs [bb19]

bb18
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:31-908:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb10]
  succs [bb19]

bb19
  0: StorageLive(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:908:13-911:14)
  1: _19 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:908:13-911:14)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:911:13-911:14)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:911:13-911:14)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:911:13-911:14)
  5: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:911:13-911:14)
  6: StorageLive(_36)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:25-912:37)
  7: StorageLive(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:26-912:31)
  8: _37 = _8
    SourceInfo(regex-automata/src/util/alphabet.rs:912:26-912:31)
  9: StorageLive(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:33-912:36)
  10: _38 = _18
    SourceInfo(regex-automata/src/util/alphabet.rs:912:33-912:36)
  11: _36 = (move _37, move _38)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:25-912:37)
  12: StorageDead(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:36-912:37)
  13: StorageDead(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:36-912:37)
  14: _0 = core::option::Option::<(u8, u8)>::Some(move _36)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:20-912:38)
  15: StorageDead(_36)
    SourceInfo(regex-automata/src/util/alphabet.rs:912:37-912:38)
  16: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  17: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  18: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  19: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  20: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:915:5-915:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:915:6-915:6)
      kind: goto -> bb21
  }
  preds [bb17, bb18]
  succs [bb21]

bb20
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:27-900:28)
  1: StorageLive(_40)
    SourceInfo(regex-automata/src/util/alphabet.rs:900:9-913:10)
  2: _3 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:900:9-913:10)
  3: StorageDead(_40)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:913:9-913:10)
  6: _0 = core::option::Option::<(u8, u8)>::None
    SourceInfo(regex-automata/src/util/alphabet.rs:914:9-914:13)
  7: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:915:5-915:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:915:6-915:6)
      kind: goto -> bb21
  }
  preds [bb2]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:915:6-915:6)
      kind: return
  }
  preds [bb19, bb20]
  succs []

bb22
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:898:5-915:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb5, bb9, bb11, bb12, bb14, bb15]
  succs []

