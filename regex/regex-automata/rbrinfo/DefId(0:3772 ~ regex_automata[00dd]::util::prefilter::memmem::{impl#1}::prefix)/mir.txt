bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:58:17-58:23)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:58:26-58:37)
  2: _5 = &((*_1).0: memchr::memmem::Finder<'_>)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:58:26-58:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:58:26-58:46)
      kind: _4 = memchr::memmem::Finder::<'_>::needle(move _5) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:58:45-58:46)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:58:17-58:23)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:16-59:50)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:16-59:30)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:24-59:30)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:16-59:24)
  6: _9 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:16-59:24)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:25-59:29)
  8: _10 = _3
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:25-59:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:24-59:30)
      kind: _8 = <[u8] as core::ops::Index<util::search::Span>>::index(move _9, move _10) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: _7 = &(*_8)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:16-59:30)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:29-59:30)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:29-59:30)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:43-59:49)
  4: _11 = &(*_4)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:43-59:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:16-59:50)
      kind: _6 = core::slice::<impl [u8]>::starts_with(move _7, move _11) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:16-59:50)
      kind: switchInt(move _6) -> [0: bb7, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:49-59:50)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:49-59:50)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:49-59:50)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:22-60:69)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:34-60:59)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:34-60:44)
  6: _14 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:34-60:44)
  7: StorageLive(_15)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:47-60:59)
  8: StorageLive(_16)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:47-60:53)
  9: _16 = &(*_4)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:47-60:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:47-60:59)
      kind: _15 = core::slice::<impl [u8]>::len(move _16) -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:58-60:59)
  1: _17 = AddWithOverflow(_14, _15)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:34-60:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:34-60:59)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> [success: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: _13 = move (_17.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:34-60:59)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:58-60:59)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:58-60:59)
  3: _12 = util::search::Span { start: (_3.0: usize), end: move _13 }
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:22-60:69)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:68-60:69)
  5: _0 = core::option::Option::<util::search::Span>::Some(move _12)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:17-60:70)
  6: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:60:69-60:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:13-63:14)
      kind: goto -> bb8
  }
  preds [bb5]
  succs [bb8]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:49-59:50)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:49-59:50)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:49-59:50)
  3: _0 = core::option::Option::<util::search::Span>::None
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:62:17-62:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:59:13-63:14)
      kind: goto -> bb8
  }
  preds [bb3]
  succs [bb8]

bb8
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:63:13-63:14)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memmem.rs:64:9-64:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:65:6-65:6)
      kind: return
  }
  preds [bb6, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memmem.rs:51:5-65:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb5]
  succs []

