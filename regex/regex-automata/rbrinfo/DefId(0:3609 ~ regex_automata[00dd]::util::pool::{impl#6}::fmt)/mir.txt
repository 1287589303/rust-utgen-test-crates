bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:50)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:50)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:35)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:35)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:10)
  5: _7 = &mut (*_2)
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:10)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/util/pool.rs:230:23-230:34)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/util/pool.rs:230:23-230:34)
  8: _9 = const "PoolGuard"
    SourceInfo(regex-automata/src/util/pool.rs:230:23-230:34)
  9: _8 = &(*_9)
    SourceInfo(regex-automata/src/util/pool.rs:230:23-230:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/pool.rs:230:9-230:35)
      kind: _6 = core::fmt::Formatter::<'_>::debug_tuple(move _7, move _8) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _5 = &mut _6
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:35)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/pool.rs:230:34-230:35)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/pool.rs:230:34-230:35)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/pool.rs:230:42-230:49)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/pool.rs:230:42-230:49)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/pool.rs:230:42-230:49)
  6: _12 = &((*_1).0: util::pool::inner::PoolGuard<'_, T, F>)
    SourceInfo(regex-automata/src/util/pool.rs:230:42-230:49)
  7: _11 = &(*_12)
    SourceInfo(regex-automata/src/util/pool.rs:230:42-230:49)
  8: _10 = move _11 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/util/pool.rs:230:42-230:49)
  9: StorageDead(_11)
    SourceInfo(regex-automata/src/util/pool.rs:230:48-230:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/pool.rs:230:9-230:50)
      kind: _4 = core::fmt::DebugTuple::<'_, '_>::field(move _5, move _10) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _3 = &mut (*_4)
    SourceInfo(regex-automata/src/util/pool.rs:230:9-230:50)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/pool.rs:230:49-230:50)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/pool.rs:230:49-230:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/pool.rs:230:9-230:59)
      kind: _0 = core::fmt::DebugTuple::<'_, '_>::finish(move _3) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/pool.rs:230:58-230:59)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/pool.rs:231:5-231:6)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/pool.rs:231:5-231:6)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/pool.rs:231:5-231:6)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/pool.rs:231:5-231:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/pool.rs:231:6-231:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/pool.rs:229:5-231:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

