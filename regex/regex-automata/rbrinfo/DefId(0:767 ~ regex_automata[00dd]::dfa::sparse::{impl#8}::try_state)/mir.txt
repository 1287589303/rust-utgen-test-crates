bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:9-1537:10)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:12-1533:47)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:12-1533:25)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:12-1533:14)
  4: _7 = &_3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:12-1533:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1533:12-1533:25)
      kind: _6 = util::primitives::StateID::as_usize(move _7) -> [return: bb1, unwind: bb218]
  }
  preds []
  succs [bb1, bb218]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:24-1533:25)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:47)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:41)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:41)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:32)
  5: _11 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:41)
      kind: _10 = dfa::sparse::Transitions::<T>::sparse(move _11) -> [return: bb2, unwind: bb218]
  }
  preds [bb0]
  succs [bb2, bb218]

bb2
  0: _9 = &(*_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:41)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:40-1533:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1533:28-1533:47)
      kind: _8 = core::slice::<impl [u8]>::len(move _9) -> [return: bb3, unwind: bb218]
  }
  preds [bb1]
  succs [bb3, bb218]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:46-1533:47)
  1: _5 = Gt(move _6, move _8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:12-1533:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1533:12-1533:47)
      kind: switchInt(move _5) -> [0: bb6, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:46-1533:47)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:46-1533:47)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:46-1533:47)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1534:24-1536:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1534:24-1536:14)
      kind: _13 = util::wire::DeserializeError::generic(const "invalid caller provided sparse state ID") -> [return: bb5, unwind: bb218]
  }
  preds [bb3]
  succs [bb5, bb218]

bb5
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1534:20-1536:15)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1536:14-1536:15)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1537:9-1537:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1537:9-1537:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb217
  }
  preds [bb4]
  succs [bb217]

bb6
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:46-1533:47)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:46-1533:47)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1533:46-1533:47)
  3: _4 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1537:10-1537:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1537:9-1537:10)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1537:9-1537:10)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:13-1538:22)
  7: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:39-1538:56)
  8: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:26-1538:39)
  9: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:26-1538:39)
  10: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:26-1538:30)
  11: _18 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:26-1538:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1538:26-1538:39)
      kind: _17 = dfa::sparse::Transitions::<T>::sparse(move _18) -> [return: bb7, unwind: bb218]
  }
  preds [bb3]
  succs [bb7, bb218]

bb7
  0: _16 = &(*_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:26-1538:39)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:38-1538:39)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:40-1538:55)
  3: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:40-1538:53)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:40-1538:42)
  5: _21 = &_3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:40-1538:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1538:40-1538:53)
      kind: _20 = util::primitives::StateID::as_usize(move _21) -> [return: bb8, unwind: bb218]
  }
  preds [bb6]
  succs [bb8, bb218]

bb8
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:52-1538:53)
  1: _19 = core::ops::RangeFrom::<usize> { start: move _20 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:40-1538:55)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:54-1538:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1538:39-1538:56)
      kind: _15 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _16, move _19) -> [return: bb9, unwind: bb218]
  }
  preds [bb7]
  succs [bb9, bb218]

bb9
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:55-1538:56)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:55-1538:56)
  2: _14 = &(*_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:25-1538:56)
  3: FakeRead(ForLet(None), _14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1538:13-1538:22)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  5: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  6: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:74)
  7: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:41-1542:46)
  8: _26 = &(*_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:41-1542:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:74)
      kind: _25 = util::wire::try_read_u16_as_usize(move _26, const "state transition length") -> [return: bb10, unwind: bb218]
  }
  preds [bb8]
  succs [bb10, bb218]

bb10
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:73-1542:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
      kind: _24 = <core::result::Result<(usize, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _25) -> [return: bb11, unwind: bb218]
  }
  preds [bb9]
  succs [bb11, bb218]

bb11
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  1: PlaceMention(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  2: _27 = discriminant(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
      kind: switchInt(move _27) -> [0: bb14, 1: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  1: _31 = ((_24 as Continue).0: (usize, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  2: _23 = _31
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  4: PlaceMention(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
  5: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1541:14-1541:24)
  6: _22 = (_23.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1541:14-1541:24)
  7: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:75-1542:76)
  8: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:75-1542:76)
  9: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:13-1543:21)
  10: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:24-1543:44)
  11: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:25-1543:34)
  12: _35 = const 15_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:25-1543:34)
  13: _36 = Lt(move _35, const 64_u32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:25-1543:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1543:25-1543:34)
      kind: assert(move _36, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb17, unwind: bb218]
  }
  preds [bb11, bb13]
  succs [bb17, bb218]

bb15
  0: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  1: _28 = move ((_24 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  2: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  3: _30 = move _28
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1542:13-1542:75)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _30) -> [return: bb16, unwind: bb218]
  }
  preds [bb13]
  succs [bb16, bb218]

bb16
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:74-1542:75)
  2: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:75-1542:76)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1542:75-1542:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb216
  }
  preds [bb15]
  succs [bb216]

bb17
  0: _34 = Shl(const 1_usize, const 15_i32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:25-1543:34)
  1: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:37-1543:43)
  2: _37 = _22
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:37-1543:43)
  3: _33 = BitAnd(move _34, move _37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:24-1543:44)
  4: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:43-1543:44)
  5: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:43-1543:44)
  6: _32 = Ne(move _33, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:24-1543:49)
  7: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:48-1543:49)
  8: FakeRead(ForLet(None), _32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1543:13-1543:21)
  9: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:19-1544:29)
  10: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:20-1544:29)
  11: _40 = const 15_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:20-1544:29)
  12: _41 = Lt(move _40, const 64_u32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:20-1544:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1544:20-1544:29)
      kind: assert(move _41, "attempt to shift left by `{}`, which would overflow", const 15_i32) -> [success: bb18, unwind: bb218]
  }
  preds [bb14]
  succs [bb18, bb218]

bb18
  0: _39 = Shl(const 1_usize, const 15_i32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:20-1544:29)
  1: _38 = Not(move _39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:19-1544:29)
  2: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:28-1544:29)
  3: _22 = BitAnd(_22, move _38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:9-1544:29)
  4: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1544:28-1544:29)
  5: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:17-1545:28)
  6: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:17-1545:28)
  7: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:23-1545:28)
  8: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:18-1545:23)
  9: _45 = &(*_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:18-1545:23)
  10: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:24-1545:27)
  11: _46 = core::ops::RangeFrom::<usize> { start: const 2_usize }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:24-1545:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1545:23-1545:28)
      kind: _44 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _45, move _46) -> [return: bb19, unwind: bb218]
  }
  preds [bb17]
  succs [bb19, bb218]

bb19
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:27-1545:28)
  1: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:27-1545:28)
  2: _43 = &(*_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:17-1545:28)
  3: _42 = &(*_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:17-1545:28)
  4: _14 = move _42
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:9-1545:28)
  5: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:27-1545:28)
  6: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:28-1545:29)
  7: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1545:28-1545:29)
  8: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:9-1550:10)
  9: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:12-1546:24)
  10: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:12-1546:18)
  11: _49 = _22
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:12-1546:18)
  12: _48 = Gt(move _49, const 257_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:12-1546:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1546:12-1546:24)
      kind: switchInt(move _48) -> [0: bb21, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb21]

bb20
  0: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:23-1546:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1546:40-1550:10)
      kind: goto -> bb23
  }
  preds [bb19]
  succs [bb23]

bb21
  0: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:23-1546:24)
  1: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:28-1546:39)
  2: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:28-1546:34)
  3: _51 = _22
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:28-1546:34)
  4: _50 = Eq(move _51, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:28-1546:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1546:28-1546:39)
      kind: switchInt(move _50) -> [0: bb25, otherwise: bb22]
  }
  preds [bb19]
  succs [bb22, bb25]

bb22
  0: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:38-1546:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1546:40-1550:10)
      kind: goto -> bb23
  }
  preds [bb21]
  succs [bb23]

bb23
  0: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1547:24-1549:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1547:24-1549:14)
      kind: _53 = util::wire::DeserializeError::generic(const "invalid transition length") -> [return: bb24, unwind: bb218]
  }
  preds [bb20, bb22]
  succs [bb24, bb218]

bb24
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1547:20-1549:15)
  1: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1549:14-1549:15)
  2: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1550:9-1550:10)
  3: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1550:9-1550:10)
  4: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1550:9-1550:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb215
  }
  preds [bb23]
  succs [bb215]

bb25
  0: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1546:38-1546:39)
  1: _47 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1550:10-1550:10)
  2: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1550:9-1550:10)
  3: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1550:9-1550:10)
  4: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1550:9-1550:10)
  5: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:9-1559:10)
  6: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:12-1551:20)
  7: _55 = _32
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:12-1551:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1551:12-1551:20)
      kind: switchInt(move _55) -> [0: bb31, otherwise: bb26]
  }
  preds [bb21]
  succs [bb26, bb31]

bb26
  0: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:25-1551:46)
  1: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:25-1551:27)
  2: _57 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:25-1551:27)
  3: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:43-1551:45)
  4: _58 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:43-1551:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1551:25-1551:46)
      kind: _56 = dfa::special::Special::is_match_state(move _57, move _58) -> [return: bb27, unwind: bb218]
  }
  preds [bb25]
  succs [bb27, bb218]

bb27
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1551:25-1551:46)
      kind: switchInt(move _56) -> [0: bb29, otherwise: bb28]
  }
  preds [bb26]
  succs [bb28, bb29]

bb28
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:45-1551:46)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:45-1551:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1551:47-1555:10)
      kind: goto -> bb31
  }
  preds [bb27]
  succs [bb31]

bb29
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:45-1551:46)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1551:45-1551:46)
  2: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1552:24-1554:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1552:24-1554:14)
      kind: _60 = util::wire::DeserializeError::generic(const "state marked as match but not in match ID range") -> [return: bb30, unwind: bb218]
  }
  preds [bb27]
  succs [bb30, bb218]

bb30
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1552:20-1554:15)
  1: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1554:14-1554:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1552:13-1554:15)
      kind: goto -> bb214
  }
  preds [bb29]
  succs [bb214]

bb31
  0: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:20-1555:28)
  1: _61 = _32
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:20-1555:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1555:20-1555:28)
      kind: switchInt(move _61) -> [0: bb32, otherwise: bb37]
  }
  preds [bb25, bb28]
  succs [bb32, bb37]

bb32
  0: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:32-1555:53)
  1: StorageLive(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:32-1555:34)
  2: _63 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:32-1555:34)
  3: StorageLive(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:50-1555:52)
  4: _64 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:50-1555:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1555:32-1555:53)
      kind: _62 = dfa::special::Special::is_match_state(move _63, move _64) -> [return: bb33, unwind: bb218]
  }
  preds [bb31]
  succs [bb33, bb218]

bb33
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1555:32-1555:53)
      kind: switchInt(move _62) -> [0: bb36, otherwise: bb34]
  }
  preds [bb32]
  succs [bb34, bb36]

bb34
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:52-1555:53)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:52-1555:53)
  2: StorageLive(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1556:24-1558:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1556:24-1558:14)
      kind: _66 = util::wire::DeserializeError::generic(const "state in match ID range but not marked as match state") -> [return: bb35, unwind: bb218]
  }
  preds [bb33]
  succs [bb35, bb218]

bb35
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1556:20-1558:15)
  1: StorageDead(_66)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1558:14-1558:15)
  2: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  3: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb214
  }
  preds [bb34]
  succs [bb214]

bb36
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:52-1555:53)
  1: StorageDead(_63)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1555:52-1555:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb37
  }
  preds [bb33]
  succs [bb37]

bb37
  0: _54 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:10-1559:10)
  1: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  2: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  3: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  4: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  5: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  6: StorageLive(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1564:13-1564:29)
  7: StorageLive(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1564:32-1564:53)
  8: StorageLive(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1564:32-1564:38)
  9: _69 = _22
    SourceInfo(regex-automata/src/dfa/sparse.rs:1564:32-1564:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1564:32-1564:53)
      kind: _68 = core::num::<impl usize>::checked_mul(move _69, const 2_usize) -> [return: bb38, unwind: bb218]
  }
  preds [bb31, bb36]
  succs [bb38, bb218]

bb38
  0: StorageDead(_69)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1564:52-1564:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1564:32-1564:62)
      kind: _67 = core::option::Option::<usize>::unwrap(move _68) -> [return: bb39, unwind: bb218]
  }
  preds [bb37]
  succs [bb39, bb218]

bb39
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1564:61-1564:62)
  1: FakeRead(ForLet(None), _67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1564:13-1564:29)
  2: StorageLive(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  3: StorageLive(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  4: StorageLive(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:76)
  5: StorageLive(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:31-1565:36)
  6: _73 = &(*_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:31-1565:36)
  7: StorageLive(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:38-1565:54)
  8: _74 = _67
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:38-1565:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:76)
      kind: _72 = util::wire::check_slice_len::<u8>(move _73, move _74, const "sparse byte pairs") -> [return: bb40, unwind: bb218]
  }
  preds [bb38]
  succs [bb40, bb218]

bb40
  0: StorageDead(_74)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:75-1565:76)
  1: StorageDead(_73)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:75-1565:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
      kind: _71 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _72) -> [return: bb41, unwind: bb218]
  }
  preds [bb39]
  succs [bb41, bb218]

bb41
  0: StorageDead(_72)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  1: PlaceMention(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  2: _75 = discriminant(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
      kind: switchInt(move _75) -> [0: bb44, 1: bb43, otherwise: bb42]
  }
  preds [bb40]
  succs [bb42, bb43, bb44]

bb42
  0: FakeRead(ForMatchedPlace(None), _71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
      kind: unreachable
  }
  preds [bb41]
  succs []

bb43
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
      kind: falseEdge -> [real: bb45, imaginary: bb44]
  }
  preds [bb41]
  succs [bb44, bb45]

bb44
  0: StorageLive(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  1: _79 = ((_71 as Continue).0: ())
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  2: _70 = _79
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
  3: StorageDead(_79)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  4: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:77-1565:78)
  5: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:77-1565:78)
  6: StorageLive(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:37-1566:69)
  7: StorageLive(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:37-1566:42)
  8: _83 = &(*_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:37-1566:42)
  9: StorageLive(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:52-1566:68)
  10: _84 = _67
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:52-1566:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1566:37-1566:69)
      kind: _82 = core::slice::<impl [u8]>::split_at(move _83, move _84) -> [return: bb47, unwind: bb218]
  }
  preds [bb41, bb43]
  succs [bb47, bb218]

bb45
  0: StorageLive(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  1: _76 = move ((_71 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  2: StorageLive(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  3: _78 = move _76
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1565:9-1565:77)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _78) -> [return: bb46, unwind: bb218]
  }
  preds [bb43]
  succs [bb46, bb218]

bb46
  0: StorageDead(_78)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  1: StorageDead(_76)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:76-1565:77)
  2: StorageDead(_71)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:77-1565:78)
  3: StorageDead(_70)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1565:77-1565:78)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb213
  }
  preds [bb45]
  succs [bb213]

bb47
  0: StorageDead(_84)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:68-1566:69)
  1: StorageDead(_83)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:68-1566:69)
  2: PlaceMention(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:37-1566:69)
  3: StorageLive(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:14-1566:26)
  4: _80 = (_82.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:14-1566:26)
  5: StorageLive(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:28-1566:33)
  6: _81 = (_82.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:28-1566:33)
  7: StorageDead(_82)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1566:69-1566:70)
  8: StorageLive(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:9-1573:10)
  9: StorageLive(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  10: StorageLive(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  11: StorageLive(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:33)
  12: _88 = &(*_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
      kind: _87 = core::slice::<impl [u8]>::chunks(move _88, const 2_usize) -> [return: bb48, unwind: bb218]
  }
  preds [bb44]
  succs [bb48, bb218]

bb48
  0: StorageDead(_88)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:42-1568:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
      kind: _86 = <core::slice::Chunks<'_, u8> as core::iter::IntoIterator>::into_iter(move _87) -> [return: bb49, unwind: bb218]
  }
  preds [bb47]
  succs [bb49, bb218]

bb49
  0: StorageDead(_87)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:42-1568:43)
  1: PlaceMention(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  2: StorageLive(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  3: _89 = move _86
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:9-1573:10)
      kind: goto -> bb50
  }
  preds [bb48]
  succs [bb50]

bb50
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:9-1573:10)
      kind: falseUnwind -> [real: bb51, unwind: bb218]
  }
  preds [bb49, bb61]
  succs [bb51, bb218]

bb51
  0: StorageLive(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  1: StorageLive(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  2: StorageLive(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  3: StorageLive(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  4: _94 = &mut _89
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  5: _93 = &mut (*_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
      kind: _92 = <core::slice::Chunks<'_, u8> as core::iter::Iterator>::next(move _93) -> [return: bb52, unwind: bb218]
  }
  preds [bb50]
  succs [bb52, bb218]

bb52
  0: StorageDead(_93)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:42-1568:43)
  1: PlaceMention(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  2: _95 = discriminant(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
      kind: switchInt(move _95) -> [0: bb54, 1: bb55, otherwise: bb53]
  }
  preds [bb51]
  succs [bb53, bb54, bb55]

bb53
  0: FakeRead(ForMatchedPlace(None), _92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:21-1568:43)
      kind: unreachable
  }
  preds [bb52]
  succs []

bb54
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:9-1573:10)
      kind: falseEdge -> [real: bb56, imaginary: bb55]
  }
  preds [bb52]
  succs [bb55, bb56]

bb55
  0: StorageLive(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:13-1568:17)
  1: _97 = ((_92 as Some).0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:13-1568:17)
  2: StorageLive(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:32-1569:50)
  3: StorageLive(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:33-1569:40)
  4: StorageLive(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:38-1569:39)
  5: _102 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:38-1569:39)
  6: _103 = Len((*_97))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:33-1569:40)
  7: _104 = Lt(_102, _103)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:33-1569:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1569:33-1569:40)
      kind: assert(move _104, "index out of bounds: the length is {} but the index is {}", move _103, _102) -> [success: bb57, unwind: bb218]
  }
  preds [bb52, bb54]
  succs [bb57, bb218]

bb56
  0: _85 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:9-1573:10)
  1: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  2: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  3: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  4: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  5: StorageDead(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  6: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  7: StorageLive(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1578:13-1578:21)
  8: StorageLive(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1578:24-1579:40)
  9: StorageLive(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1578:24-1578:30)
  10: _116 = _22
    SourceInfo(regex-automata/src/dfa/sparse.rs:1578:24-1578:30)
  11: StorageLive(_117)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1579:26-1579:39)
  12: StorageLive(_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1579:26-1579:30)
  13: _118 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1579:26-1579:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1579:26-1579:39)
      kind: _117 = dfa::sparse::Transitions::<T>::id_len(move _118) -> [return: bb62, unwind: bb218]
  }
  preds [bb54]
  succs [bb62, bb218]

bb57
  0: _101 = (*_97)[_102]
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:33-1569:40)
  1: StorageLive(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:42-1569:49)
  2: StorageLive(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:47-1569:48)
  3: _106 = const 1_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:47-1569:48)
  4: _107 = Len((*_97))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:42-1569:49)
  5: _108 = Lt(_106, _107)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:42-1569:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1569:42-1569:49)
      kind: assert(move _108, "index out of bounds: the length is {} but the index is {}", move _107, _106) -> [success: bb58, unwind: bb218]
  }
  preds [bb55]
  succs [bb58, bb218]

bb58
  0: _105 = (*_97)[_106]
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:42-1569:49)
  1: _100 = (move _101, move _105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:32-1569:50)
  2: StorageDead(_105)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:49-1569:50)
  3: StorageDead(_101)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:49-1569:50)
  4: PlaceMention(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:32-1569:50)
  5: StorageLive(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:18-1569:23)
  6: _98 = (_100.0: u8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:18-1569:23)
  7: StorageLive(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:25-1569:28)
  8: _99 = (_100.1: u8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:25-1569:28)
  9: StorageDead(_106)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:50-1569:51)
  10: StorageDead(_102)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:50-1569:51)
  11: StorageDead(_100)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1569:50-1569:51)
  12: StorageLive(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:16-1570:27)
  13: StorageLive(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:16-1570:21)
  14: _110 = _98
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:16-1570:21)
  15: StorageLive(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:24-1570:27)
  16: _111 = _99
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:24-1570:27)
  17: _109 = Gt(move _110, move _111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:16-1570:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1570:16-1570:27)
      kind: switchInt(move _109) -> [0: bb61, otherwise: bb59]
  }
  preds [bb57]
  succs [bb59, bb61]

bb59
  0: StorageDead(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:26-1570:27)
  1: StorageDead(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:26-1570:27)
  2: StorageLive(_113)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1571:28-1571:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1571:28-1571:76)
      kind: _113 = util::wire::DeserializeError::generic(const "invalid input range") -> [return: bb60, unwind: bb218]
  }
  preds [bb58]
  succs [bb60, bb218]

bb60
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _113)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1571:24-1571:77)
  1: StorageDead(_113)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1571:76-1571:77)
  2: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1572:13-1572:14)
  3: StorageDead(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  4: StorageDead(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  5: StorageDead(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  6: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  7: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  8: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  9: StorageDead(_89)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  10: StorageDead(_86)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  11: StorageDead(_85)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb212
  }
  preds [bb59]
  succs [bb212]

bb61
  0: StorageDead(_111)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:26-1570:27)
  1: StorageDead(_110)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1570:26-1570:27)
  2: _91 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1572:14-1572:14)
  3: StorageDead(_109)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1572:13-1572:14)
  4: StorageDead(_99)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  5: StorageDead(_98)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  6: StorageDead(_97)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  7: StorageDead(_94)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  8: StorageDead(_92)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  9: StorageDead(_91)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1573:9-1573:10)
  10: _90 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1568:9-1573:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1568:9-1573:10)
      kind: goto -> bb50
  }
  preds [bb58]
  succs [bb50]

bb62
  0: StorageDead(_118)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1579:38-1579:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1578:24-1579:40)
      kind: _115 = core::num::<impl usize>::checked_mul(move _116, move _117) -> [return: bb63, unwind: bb218]
  }
  preds [bb56]
  succs [bb63, bb218]

bb63
  0: StorageDead(_117)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1579:39-1579:40)
  1: StorageDead(_116)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1579:39-1579:40)
  2: StorageLive(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1580:21-1580:71)
  3: StorageLive(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1580:21-1580:71)
  4: _120 = const "state size * #trans should always fit in a usize"
    SourceInfo(regex-automata/src/dfa/sparse.rs:1580:21-1580:71)
  5: _119 = &(*_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1580:21-1580:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1578:24-1580:72)
      kind: _114 = core::option::Option::<usize>::expect(move _115, move _119) -> [return: bb64, unwind: bb218]
  }
  preds [bb62]
  succs [bb64, bb218]

bb64
  0: StorageDead(_119)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1580:71-1580:72)
  1: StorageDead(_115)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1580:71-1580:72)
  2: FakeRead(ForLet(None), _114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1578:13-1578:21)
  3: StorageDead(_120)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1580:72-1580:73)
  4: StorageLive(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  5: StorageLive(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  6: StorageLive(_123)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:73)
  7: StorageLive(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:31-1581:36)
  8: _124 = &(*_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:31-1581:36)
  9: StorageLive(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:38-1581:46)
  10: _125 = _114
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:38-1581:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:73)
      kind: _123 = util::wire::check_slice_len::<u8>(move _124, move _125, const "sparse trans state IDs") -> [return: bb65, unwind: bb218]
  }
  preds [bb63]
  succs [bb65, bb218]

bb65
  0: StorageDead(_125)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:72-1581:73)
  1: StorageDead(_124)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:72-1581:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
      kind: _122 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _123) -> [return: bb66, unwind: bb218]
  }
  preds [bb64]
  succs [bb66, bb218]

bb66
  0: StorageDead(_123)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  1: PlaceMention(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  2: _126 = discriminant(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
      kind: switchInt(move _126) -> [0: bb69, 1: bb68, otherwise: bb67]
  }
  preds [bb65]
  succs [bb67, bb68, bb69]

bb67
  0: FakeRead(ForMatchedPlace(None), _122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
      kind: unreachable
  }
  preds [bb66]
  succs []

bb68
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
      kind: falseEdge -> [real: bb70, imaginary: bb69]
  }
  preds [bb66]
  succs [bb69, bb70]

bb69
  0: StorageLive(_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  1: _130 = ((_122 as Continue).0: ())
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  2: _121 = _130
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
  3: StorageDead(_130)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  4: StorageDead(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:74-1581:75)
  5: StorageDead(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:74-1581:75)
  6: StorageLive(_133)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:29-1582:53)
  7: StorageLive(_134)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:29-1582:34)
  8: _134 = &(*_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:29-1582:34)
  9: StorageLive(_135)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:44-1582:52)
  10: _135 = _114
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:44-1582:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1582:29-1582:53)
      kind: _133 = core::slice::<impl [u8]>::split_at(move _134, move _135) -> [return: bb72, unwind: bb218]
  }
  preds [bb66, bb68]
  succs [bb72, bb218]

bb70
  0: StorageLive(_127)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  1: _127 = move ((_122 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  2: StorageLive(_129)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  3: _129 = move _127
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1581:9-1581:74)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _129) -> [return: bb71, unwind: bb218]
  }
  preds [bb68]
  succs [bb71, bb218]

bb71
  0: StorageDead(_129)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  1: StorageDead(_127)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:73-1581:74)
  2: StorageDead(_122)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:74-1581:75)
  3: StorageDead(_121)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1581:74-1581:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb211
  }
  preds [bb70]
  succs [bb211]

bb72
  0: StorageDead(_135)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:52-1582:53)
  1: StorageDead(_134)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:52-1582:53)
  2: PlaceMention(_133)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:29-1582:53)
  3: StorageLive(_131)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:14-1582:18)
  4: _131 = (_133.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:14-1582:18)
  5: StorageLive(_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:20-1582:25)
  6: _132 = (_133.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:20-1582:25)
  7: StorageDead(_133)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1582:53-1582:54)
  8: StorageLive(_136)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:9-1592:10)
  9: StorageLive(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  10: StorageLive(_138)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  11: StorageLive(_139)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:28)
  12: _139 = &(*_131)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:28)
  13: StorageLive(_140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:36-1584:49)
  14: StorageLive(_141)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:36-1584:40)
  15: _141 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:36-1584:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:36-1584:49)
      kind: _140 = dfa::sparse::Transitions::<T>::id_len(move _141) -> [return: bb73, unwind: bb218]
  }
  preds [bb69]
  succs [bb73, bb218]

bb73
  0: StorageDead(_141)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:48-1584:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
      kind: _138 = core::slice::<impl [u8]>::chunks(move _139, move _140) -> [return: bb74, unwind: bb218]
  }
  preds [bb72]
  succs [bb74, bb218]

bb74
  0: StorageDead(_140)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:49-1584:50)
  1: StorageDead(_139)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:49-1584:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
      kind: _137 = <core::slice::Chunks<'_, u8> as core::iter::IntoIterator>::into_iter(move _138) -> [return: bb75, unwind: bb218]
  }
  preds [bb73]
  succs [bb75, bb218]

bb75
  0: StorageDead(_138)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:49-1584:50)
  1: PlaceMention(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  2: StorageLive(_142)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  3: _142 = move _137
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:9-1592:10)
      kind: goto -> bb76
  }
  preds [bb74]
  succs [bb76]

bb76
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:9-1592:10)
      kind: falseUnwind -> [real: bb77, unwind: bb218]
  }
  preds [bb75, bb96]
  succs [bb77, bb218]

bb77
  0: StorageLive(_143)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  1: StorageLive(_144)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  2: StorageLive(_145)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  3: StorageLive(_146)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  4: _146 = &mut _142
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  5: _145 = &mut (*_146)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
      kind: _144 = <core::slice::Chunks<'_, u8> as core::iter::Iterator>::next(move _145) -> [return: bb78, unwind: bb218]
  }
  preds [bb76]
  succs [bb78, bb218]

bb78
  0: StorageDead(_145)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:49-1584:50)
  1: PlaceMention(_144)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  2: _147 = discriminant(_144)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
      kind: switchInt(move _147) -> [0: bb80, 1: bb81, otherwise: bb79]
  }
  preds [bb77]
  succs [bb79, bb80, bb81]

bb79
  0: FakeRead(ForMatchedPlace(None), _144)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:24-1584:50)
      kind: unreachable
  }
  preds [bb78]
  succs []

bb80
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:9-1592:10)
      kind: falseEdge -> [real: bb82, imaginary: bb81]
  }
  preds [bb78]
  succs [bb81, bb82]

bb81
  0: StorageLive(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:13-1584:20)
  1: _149 = ((_144 as Some).0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:13-1584:20)
  2: StorageLive(_151)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  3: StorageLive(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  4: StorageLive(_153)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:77)
  5: StorageLive(_154)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:37-1586:44)
  6: _154 = &(*_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:37-1586:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:77)
      kind: _153 = util::wire::read_state_id(move _154, const "sparse state ID in try_state") -> [return: bb83, unwind: bb218]
  }
  preds [bb78, bb80]
  succs [bb83, bb218]

bb82
  0: _136 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:9-1592:10)
  1: StorageDead(_146)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  2: StorageDead(_144)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  3: StorageDead(_143)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  4: StorageDead(_142)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  5: StorageDead(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  6: StorageDead(_136)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  7: StorageLive(_175)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:36-1624:10)
  8: StorageLive(_176)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:39-1597:47)
  9: _176 = _32
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:39-1597:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1597:39-1597:47)
      kind: switchInt(move _176) -> [0: bb100, otherwise: bb99]
  }
  preds [bb80]
  succs [bb99, bb100]

bb83
  0: StorageDead(_154)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:76-1586:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
      kind: _152 = <core::result::Result<(util::primitives::StateID, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _153) -> [return: bb84, unwind: bb218]
  }
  preds [bb81]
  succs [bb84, bb218]

bb84
  0: StorageDead(_153)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  1: PlaceMention(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  2: _155 = discriminant(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
      kind: switchInt(move _155) -> [0: bb87, 1: bb86, otherwise: bb85]
  }
  preds [bb83]
  succs [bb85, bb86, bb87]

bb85
  0: FakeRead(ForMatchedPlace(None), _152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
      kind: unreachable
  }
  preds [bb84]
  succs []

bb86
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
      kind: falseEdge -> [real: bb88, imaginary: bb87]
  }
  preds [bb84]
  succs [bb87, bb88]

bb87
  0: StorageLive(_159)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  1: _159 = ((_152 as Continue).0: (util::primitives::StateID, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  2: _151 = _159
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  3: StorageDead(_159)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  4: PlaceMention(_151)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
  5: StorageLive(_150)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1585:18-1585:20)
  6: _150 = (_151.0: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1585:18-1585:20)
  7: StorageDead(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:78-1586:79)
  8: StorageDead(_151)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:78-1586:79)
  9: StorageLive(_160)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  10: StorageLive(_161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  11: StorageLive(_162)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:14)
  12: StorageLive(_163)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1588:17-1588:30)
  13: StorageLive(_164)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1588:17-1588:30)
  14: StorageLive(_165)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1588:17-1588:21)
  15: _165 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1588:17-1588:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1588:17-1588:30)
      kind: _164 = dfa::sparse::Transitions::<T>::sparse(move _165) -> [return: bb90, unwind: bb218]
  }
  preds [bb84, bb86]
  succs [bb90, bb218]

bb88
  0: StorageLive(_156)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  1: _156 = move ((_152 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  2: StorageLive(_158)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  3: _158 = move _156
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1586:17-1586:78)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _158) -> [return: bb89, unwind: bb218]
  }
  preds [bb86]
  succs [bb89, bb218]

bb89
  0: StorageDead(_158)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  1: StorageDead(_156)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:77-1586:78)
  2: StorageDead(_152)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:78-1586:79)
  3: StorageDead(_151)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1586:78-1586:79)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb209
  }
  preds [bb88]
  succs [bb209]

bb90
  0: _163 = &(*_164)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1588:17-1588:30)
  1: StorageDead(_165)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1588:29-1588:30)
  2: StorageLive(_166)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1589:17-1589:30)
  3: StorageLive(_167)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1589:17-1589:19)
  4: _167 = &_150
    SourceInfo(regex-automata/src/dfa/sparse.rs:1589:17-1589:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1589:17-1589:30)
      kind: _166 = util::primitives::StateID::as_usize(move _167) -> [return: bb91, unwind: bb218]
  }
  preds [bb87]
  succs [bb91, bb218]

bb91
  0: StorageDead(_167)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1589:29-1589:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:14)
      kind: _162 = util::wire::check_slice_len::<u8>(move _163, move _166, const "invalid sparse state ID") -> [return: bb92, unwind: bb218]
  }
  preds [bb90]
  succs [bb92, bb218]

bb92
  0: StorageDead(_166)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:13-1591:14)
  1: StorageDead(_163)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:13-1591:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
      kind: _161 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _162) -> [return: bb93, unwind: bb218]
  }
  preds [bb91]
  succs [bb93, bb218]

bb93
  0: StorageDead(_162)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  1: PlaceMention(_161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  2: _168 = discriminant(_161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
      kind: switchInt(move _168) -> [0: bb96, 1: bb95, otherwise: bb94]
  }
  preds [bb92]
  succs [bb94, bb95, bb96]

bb94
  0: FakeRead(ForMatchedPlace(None), _161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
      kind: unreachable
  }
  preds [bb93]
  succs []

bb95
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
      kind: falseEdge -> [real: bb97, imaginary: bb96]
  }
  preds [bb93]
  succs [bb96, bb97]

bb96
  0: StorageLive(_172)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  1: _172 = ((_161 as Continue).0: ())
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  2: _160 = _172
    SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
  3: StorageDead(_172)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  4: StorageDead(_164)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:15-1591:16)
  5: StorageDead(_161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:15-1591:16)
  6: StorageDead(_160)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:15-1591:16)
  7: _143 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:51-1592:10)
  8: StorageDead(_150)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  9: StorageDead(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  10: StorageDead(_146)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  11: StorageDead(_144)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  12: StorageDead(_143)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  13: _90 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1584:9-1592:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1584:9-1592:10)
      kind: goto -> bb76
  }
  preds [bb93, bb95]
  succs [bb76]

bb97
  0: StorageLive(_169)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  1: _169 = move ((_161 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  2: StorageLive(_171)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  3: _171 = move _169
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1587:13-1591:15)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _171) -> [return: bb98, unwind: bb218]
  }
  preds [bb95]
  succs [bb98, bb218]

bb98
  0: StorageDead(_171)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  1: StorageDead(_169)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:14-1591:15)
  2: StorageDead(_164)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:15-1591:16)
  3: StorageDead(_161)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:15-1591:16)
  4: StorageDead(_160)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1591:15-1591:16)
  5: StorageDead(_150)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb209
  }
  preds [bb97]
  succs [bb209]

bb99
  0: StorageLive(_179)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  1: StorageLive(_180)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  2: StorageLive(_181)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:72)
  3: StorageLive(_182)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:45-1599:50)
  4: _182 = &(*_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:45-1599:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:72)
      kind: _181 = util::wire::try_read_u32_as_usize(move _182, const "pattern ID length") -> [return: bb101, unwind: bb218]
  }
  preds [bb82]
  succs [bb101, bb218]

bb100
  0: StorageLive(_245)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:14-1623:21)
  1: StorageLive(_246)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:17-1623:21)
  2: StorageLive(_247)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:15-1623:17)
  3: StorageLive(_248)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:15-1623:17)
  4: _248 = []
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:15-1623:17)
  5: _247 = &_248
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:15-1623:17)
  6: StorageLive(_249)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:18-1623:20)
  7: _249 = core::ops::RangeFull
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:18-1623:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1623:17-1623:21)
      kind: _246 = <[u8; 0] as core::ops::Index<core::ops::RangeFull>>::index(move _247, move _249) -> [return: bb143, unwind: bb218]
  }
  preds [bb82]
  succs [bb143, bb218]

bb101
  0: StorageDead(_182)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:71-1599:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
      kind: _180 = <core::result::Result<(usize, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _181) -> [return: bb102, unwind: bb218]
  }
  preds [bb99]
  succs [bb102, bb218]

bb102
  0: StorageDead(_181)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  1: PlaceMention(_180)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  2: _183 = discriminant(_180)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
      kind: switchInt(move _183) -> [0: bb105, 1: bb104, otherwise: bb103]
  }
  preds [bb101]
  succs [bb103, bb104, bb105]

bb103
  0: FakeRead(ForMatchedPlace(None), _180)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
      kind: unreachable
  }
  preds [bb102]
  succs []

bb104
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
      kind: falseEdge -> [real: bb106, imaginary: bb105]
  }
  preds [bb102]
  succs [bb105, bb106]

bb105
  0: StorageLive(_187)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  1: _187 = ((_180 as Continue).0: (usize, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  2: _179 = _187
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  3: StorageDead(_187)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  4: PlaceMention(_179)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
  5: StorageLive(_177)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1598:18-1598:23)
  6: _177 = (_179.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1598:18-1598:23)
  7: StorageLive(_178)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1598:25-1598:27)
  8: _178 = (_179.1: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1598:25-1598:27)
  9: StorageDead(_180)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:73-1599:74)
  10: StorageDead(_179)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:73-1599:74)
  11: StorageLive(_188)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:17-1600:22)
  12: StorageLive(_189)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:31-1600:37)
  13: StorageLive(_190)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:26-1600:31)
  14: _190 = &(*_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:26-1600:31)
  15: StorageLive(_191)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:32-1600:36)
  16: StorageLive(_192)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:32-1600:34)
  17: _192 = _178
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:32-1600:34)
  18: _191 = core::ops::RangeFrom::<usize> { start: move _192 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:32-1600:36)
  19: StorageDead(_192)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:35-1600:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1600:31-1600:37)
      kind: _189 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _190, move _191) -> [return: bb108, unwind: bb218]
  }
  preds [bb102, bb104]
  succs [bb108, bb218]

bb106
  0: StorageLive(_184)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  1: _184 = move ((_180 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  2: StorageLive(_186)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  3: _186 = move _184
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1599:17-1599:73)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _186) -> [return: bb107, unwind: bb218]
  }
  preds [bb104]
  succs [bb107, bb218]

bb107
  0: StorageDead(_186)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  1: StorageDead(_184)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:72-1599:73)
  2: StorageDead(_180)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:73-1599:74)
  3: StorageDead(_179)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1599:73-1599:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb208
  }
  preds [bb106]
  succs [bb208]

bb108
  0: StorageDead(_191)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:36-1600:37)
  1: StorageDead(_190)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:36-1600:37)
  2: _188 = &(*_189)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:25-1600:37)
  3: FakeRead(ForLet(None), _188)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1600:17-1600:22)
  4: StorageLive(_193)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1601:13-1605:14)
  5: StorageLive(_194)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1601:16-1601:26)
  6: StorageLive(_195)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1601:16-1601:21)
  7: _195 = _177
    SourceInfo(regex-automata/src/dfa/sparse.rs:1601:16-1601:21)
  8: _194 = Eq(move _195, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1601:16-1601:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1601:16-1601:26)
      kind: switchInt(move _194) -> [0: bb111, otherwise: bb109]
  }
  preds [bb105]
  succs [bb109, bb111]

bb109
  0: StorageDead(_195)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1601:25-1601:26)
  1: StorageLive(_197)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1602:28-1604:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1602:28-1604:18)
      kind: _197 = util::wire::DeserializeError::generic(const "state marked as a match, but pattern length is zero") -> [return: bb110, unwind: bb218]
  }
  preds [bb108]
  succs [bb110, bb218]

bb110
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _197)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1602:24-1604:19)
  1: StorageDead(_197)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1604:18-1604:19)
  2: StorageDead(_194)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1605:13-1605:14)
  3: StorageDead(_193)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1605:13-1605:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb207
  }
  preds [bb109]
  succs [bb207]

bb111
  0: StorageDead(_195)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1601:25-1601:26)
  1: _193 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1605:14-1605:14)
  2: StorageDead(_194)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1605:13-1605:14)
  3: StorageDead(_193)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1605:13-1605:14)
  4: StorageLive(_198)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1607:17-1607:32)
  5: StorageLive(_199)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
  6: StorageLive(_200)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:69)
  7: StorageLive(_201)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:27-1608:32)
  8: _201 = _177
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:27-1608:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:69)
      kind: _200 = util::wire::mul(move _201, const 4_usize, const "sparse pattern ID byte length") -> [return: bb112, unwind: bb218]
  }
  preds [bb108]
  succs [bb112, bb218]

bb112
  0: StorageDead(_201)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:68-1608:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
      kind: _199 = <core::result::Result<usize, util::wire::DeserializeError> as core::ops::Try>::branch(move _200) -> [return: bb113, unwind: bb218]
  }
  preds [bb111]
  succs [bb113, bb218]

bb113
  0: StorageDead(_200)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  1: PlaceMention(_199)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
  2: _202 = discriminant(_199)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
      kind: switchInt(move _202) -> [0: bb116, 1: bb115, otherwise: bb114]
  }
  preds [bb112]
  succs [bb114, bb115, bb116]

bb114
  0: FakeRead(ForMatchedPlace(None), _199)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
      kind: unreachable
  }
  preds [bb113]
  succs []

bb115
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
      kind: falseEdge -> [real: bb117, imaginary: bb116]
  }
  preds [bb113]
  succs [bb116, bb117]

bb116
  0: StorageLive(_206)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
  1: _206 = ((_199 as Continue).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
  2: _198 = _206
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
  3: StorageDead(_206)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  4: FakeRead(ForLet(None), _198)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1607:17-1607:32)
  5: StorageDead(_199)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:70-1608:71)
  6: StorageLive(_207)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  7: StorageLive(_208)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  8: StorageLive(_209)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:14)
  9: StorageLive(_210)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1610:17-1610:22)
  10: _210 = &(*_188)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1610:17-1610:22)
  11: StorageLive(_211)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1611:17-1611:32)
  12: _211 = _198
    SourceInfo(regex-automata/src/dfa/sparse.rs:1611:17-1611:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:14)
      kind: _209 = util::wire::check_slice_len::<u8>(move _210, move _211, const "sparse pattern IDs") -> [return: bb119, unwind: bb218]
  }
  preds [bb113, bb115]
  succs [bb119, bb218]

bb117
  0: StorageLive(_203)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  1: _203 = move ((_199 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  2: StorageLive(_205)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  3: _205 = move _203
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1608:17-1608:70)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _205) -> [return: bb118, unwind: bb218]
  }
  preds [bb115]
  succs [bb118, bb218]

bb118
  0: StorageDead(_205)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  1: StorageDead(_203)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:69-1608:70)
  2: StorageDead(_199)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1608:70-1608:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb206
  }
  preds [bb117]
  succs [bb206]

bb119
  0: StorageDead(_211)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:13-1613:14)
  1: StorageDead(_210)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:13-1613:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
      kind: _208 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _209) -> [return: bb120, unwind: bb218]
  }
  preds [bb116]
  succs [bb120, bb218]

bb120
  0: StorageDead(_209)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  1: PlaceMention(_208)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  2: _212 = discriminant(_208)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
      kind: switchInt(move _212) -> [0: bb123, 1: bb122, otherwise: bb121]
  }
  preds [bb119]
  succs [bb121, bb122, bb123]

bb121
  0: FakeRead(ForMatchedPlace(None), _208)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
      kind: unreachable
  }
  preds [bb120]
  succs []

bb122
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
      kind: falseEdge -> [real: bb124, imaginary: bb123]
  }
  preds [bb120]
  succs [bb123, bb124]

bb123
  0: StorageLive(_216)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  1: _216 = ((_208 as Continue).0: ())
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  2: _207 = _216
    SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
  3: StorageDead(_216)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  4: StorageDead(_208)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:15-1613:16)
  5: StorageDead(_207)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:15-1613:16)
  6: StorageLive(_219)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:40-1614:71)
  7: StorageLive(_220)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:40-1614:45)
  8: _220 = &(*_188)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:40-1614:45)
  9: StorageLive(_221)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:55-1614:70)
  10: _221 = _198
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:55-1614:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1614:40-1614:71)
      kind: _219 = core::slice::<impl [u8]>::split_at(move _220, move _221) -> [return: bb126, unwind: bb218]
  }
  preds [bb120, bb122]
  succs [bb126, bb218]

bb124
  0: StorageLive(_213)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  1: _213 = move ((_208 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  2: StorageLive(_215)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  3: _215 = move _213
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1609:13-1613:15)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _215) -> [return: bb125, unwind: bb218]
  }
  preds [bb122]
  succs [bb125, bb218]

bb125
  0: StorageDead(_215)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  1: StorageDead(_213)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:14-1613:15)
  2: StorageDead(_208)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:15-1613:16)
  3: StorageDead(_207)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1613:15-1613:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb206
  }
  preds [bb124]
  succs [bb206]

bb126
  0: StorageDead(_221)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:70-1614:71)
  1: StorageDead(_220)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:70-1614:71)
  2: PlaceMention(_219)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:40-1614:71)
  3: StorageLive(_217)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:18-1614:29)
  4: _217 = (_219.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:18-1614:29)
  5: StorageLive(_218)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:31-1614:36)
  6: _218 = (_219.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:31-1614:36)
  7: StorageDead(_219)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1614:71-1614:72)
  8: StorageLive(_222)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:13-1620:14)
  9: StorageLive(_223)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  10: StorageLive(_224)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  11: StorageLive(_225)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:40)
  12: _225 = &(*_217)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
      kind: _224 = core::slice::<impl [u8]>::chunks(move _225, const util::primitives::PatternID::SIZE) -> [return: bb127, unwind: bb218]
  }
  preds [bb123]
  succs [bb127, bb218]

bb127
  0: StorageDead(_225)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:63-1615:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
      kind: _223 = <core::slice::Chunks<'_, u8> as core::iter::IntoIterator>::into_iter(move _224) -> [return: bb128, unwind: bb218]
  }
  preds [bb126]
  succs [bb128, bb218]

bb128
  0: StorageDead(_224)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:63-1615:64)
  1: PlaceMention(_223)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  2: StorageLive(_226)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  3: _226 = move _223
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:13-1620:14)
      kind: goto -> bb129
  }
  preds [bb127]
  succs [bb129]

bb129
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:13-1620:14)
      kind: falseUnwind -> [real: bb130, unwind: bb218]
  }
  preds [bb128, bb140]
  succs [bb130, bb218]

bb130
  0: StorageLive(_227)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  1: StorageLive(_228)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  2: StorageLive(_229)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  3: StorageLive(_230)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  4: _230 = &mut _226
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  5: _229 = &mut (*_230)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
      kind: _228 = <core::slice::Chunks<'_, u8> as core::iter::Iterator>::next(move _229) -> [return: bb131, unwind: bb218]
  }
  preds [bb129]
  succs [bb131, bb218]

bb131
  0: StorageDead(_229)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:63-1615:64)
  1: PlaceMention(_228)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  2: _231 = discriminant(_228)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
      kind: switchInt(move _231) -> [0: bb133, 1: bb134, otherwise: bb132]
  }
  preds [bb130]
  succs [bb132, bb133, bb134]

bb132
  0: FakeRead(ForMatchedPlace(None), _228)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:29-1615:64)
      kind: unreachable
  }
  preds [bb131]
  succs []

bb133
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:13-1620:14)
      kind: falseEdge -> [real: bb135, imaginary: bb134]
  }
  preds [bb131]
  succs [bb134, bb135]

bb134
  0: StorageLive(_233)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:17-1615:25)
  1: _233 = ((_228 as Some).0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:17-1615:25)
  2: StorageLive(_234)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  3: StorageLive(_235)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  4: StorageLive(_236)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:18)
  5: StorageLive(_237)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1617:21-1617:29)
  6: _237 = &(*_233)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1617:21-1617:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:18)
      kind: _236 = util::wire::read_pattern_id(move _237, const "sparse pattern ID in try_state") -> [return: bb136, unwind: bb218]
  }
  preds [bb131, bb133]
  succs [bb136, bb218]

bb135
  0: _222 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:13-1620:14)
  1: StorageDead(_230)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  2: StorageDead(_228)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  3: StorageDead(_227)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  4: StorageDead(_226)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  5: StorageDead(_223)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  6: StorageDead(_222)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  7: StorageLive(_243)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1621:14-1621:25)
  8: _243 = _217
    SourceInfo(regex-automata/src/dfa/sparse.rs:1621:14-1621:25)
  9: StorageLive(_244)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1621:27-1621:32)
  10: _244 = _218
    SourceInfo(regex-automata/src/dfa/sparse.rs:1621:27-1621:32)
  11: _175 = (move _243, move _244)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1621:13-1621:33)
  12: StorageDead(_244)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1621:32-1621:33)
  13: StorageDead(_243)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1621:32-1621:33)
  14: StorageDead(_218)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  15: StorageDead(_217)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  16: StorageDead(_198)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  17: StorageDead(_189)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  18: StorageDead(_188)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  19: StorageDead(_178)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  20: StorageDead(_177)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1597:36-1624:10)
      kind: goto -> bb144
  }
  preds [bb133]
  succs [bb144]

bb136
  0: StorageDead(_237)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:17-1619:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
      kind: _235 = <core::result::Result<(util::primitives::PatternID, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _236) -> [return: bb137, unwind: bb218]
  }
  preds [bb134]
  succs [bb137, bb218]

bb137
  0: StorageDead(_236)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  1: PlaceMention(_235)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  2: _238 = discriminant(_235)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
      kind: switchInt(move _238) -> [0: bb140, 1: bb139, otherwise: bb138]
  }
  preds [bb136]
  succs [bb138, bb139, bb140]

bb138
  0: FakeRead(ForMatchedPlace(None), _235)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
      kind: unreachable
  }
  preds [bb137]
  succs []

bb139
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
      kind: falseEdge -> [real: bb141, imaginary: bb140]
  }
  preds [bb137]
  succs [bb140, bb141]

bb140
  0: StorageLive(_242)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  1: _242 = ((_235 as Continue).0: (util::primitives::PatternID, usize))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  2: _234 = _242
    SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
  3: StorageDead(_242)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  4: StorageDead(_235)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:19-1619:20)
  5: StorageDead(_234)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:19-1619:20)
  6: _227 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:65-1620:14)
  7: StorageDead(_233)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  8: StorageDead(_230)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  9: StorageDead(_228)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  10: StorageDead(_227)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  11: _90 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1615:13-1620:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1615:13-1620:14)
      kind: goto -> bb129
  }
  preds [bb137, bb139]
  succs [bb129]

bb141
  0: StorageLive(_239)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  1: _239 = move ((_235 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  2: StorageLive(_241)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  3: _241 = move _239
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1616:17-1619:19)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _241) -> [return: bb142, unwind: bb218]
  }
  preds [bb139]
  succs [bb142, bb218]

bb142
  0: StorageDead(_241)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  1: StorageDead(_239)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:18-1619:19)
  2: StorageDead(_235)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:19-1619:20)
  3: StorageDead(_234)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1619:19-1619:20)
  4: StorageDead(_233)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  5: StorageDead(_230)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  6: StorageDead(_228)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  7: StorageDead(_227)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  8: StorageDead(_226)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  9: StorageDead(_223)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  10: StorageDead(_222)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1620:13-1620:14)
  11: StorageDead(_218)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  12: StorageDead(_217)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb206
  }
  preds [bb141]
  succs [bb206]

bb143
  0: StorageDead(_249)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:20-1623:21)
  1: StorageDead(_247)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:20-1623:21)
  2: _245 = &(*_246)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:14-1623:21)
  3: StorageLive(_250)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:23-1623:28)
  4: _250 = _132
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:23-1623:28)
  5: _175 = (move _245, move _250)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:13-1623:29)
  6: StorageDead(_250)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:28-1623:29)
  7: StorageDead(_245)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1623:28-1623:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1597:36-1624:10)
      kind: goto -> bb144
  }
  preds [bb100]
  succs [bb144]

bb144
  0: StorageDead(_176)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1624:9-1624:10)
  1: PlaceMention(_175)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:36-1624:10)
  2: StorageLive(_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:14-1597:25)
  3: _173 = (_175.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:14-1597:25)
  4: StorageLive(_174)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:27-1597:32)
  5: _174 = (_175.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1597:27-1597:32)
  6: StorageDead(_175)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1624:10-1624:11)
  7: StorageLive(_251)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:9-1629:10)
  8: StorageLive(_252)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:12-1625:20)
  9: _252 = _32
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:12-1625:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1625:12-1625:20)
      kind: switchInt(move _252) -> [0: bb150, otherwise: bb145]
  }
  preds [bb135, bb143]
  succs [bb145, bb150]

bb145
  0: StorageLive(_253)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:24-1625:46)
  1: StorageLive(_254)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:24-1625:35)
  2: _254 = &(*_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:24-1625:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1625:24-1625:46)
      kind: _253 = core::slice::<impl [u8]>::is_empty(move _254) -> [return: bb146, unwind: bb218]
  }
  preds [bb144]
  succs [bb146, bb218]

bb146
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1625:24-1625:46)
      kind: switchInt(move _253) -> [0: bb149, otherwise: bb147]
  }
  preds [bb145]
  succs [bb147, bb149]

bb147
  0: StorageDead(_254)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:45-1625:46)
  1: StorageLive(_256)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1626:24-1628:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1626:24-1628:14)
      kind: _256 = util::wire::DeserializeError::generic(const "state marked as a match, but has no pattern IDs") -> [return: bb148, unwind: bb218]
  }
  preds [bb146]
  succs [bb148, bb218]

bb148
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _256)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1626:20-1628:15)
  1: StorageDead(_256)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1628:14-1628:15)
  2: StorageDead(_253)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1629:9-1629:10)
  3: StorageDead(_252)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1629:9-1629:10)
  4: StorageDead(_251)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1629:9-1629:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb205
  }
  preds [bb147]
  succs [bb205]

bb149
  0: StorageDead(_254)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1625:45-1625:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb150
  }
  preds [bb146]
  succs [bb150]

bb150
  0: _251 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1629:10-1629:10)
  1: StorageDead(_253)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1629:9-1629:10)
  2: StorageDead(_252)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1629:9-1629:10)
  3: StorageDead(_251)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1629:9-1629:10)
  4: StorageLive(_257)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:9-1634:10)
  5: StorageLive(_258)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:12-1630:33)
  6: StorageLive(_259)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:12-1630:14)
  7: _259 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:12-1630:14)
  8: StorageLive(_260)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:30-1630:32)
  9: _260 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:30-1630:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1630:12-1630:33)
      kind: _258 = dfa::special::Special::is_match_state(move _259, move _260) -> [return: bb151, unwind: bb218]
  }
  preds [bb144, bb149]
  succs [bb151, bb218]

bb151
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1630:12-1630:33)
      kind: switchInt(move _258) -> [0: bb157, otherwise: bb152]
  }
  preds [bb150]
  succs [bb152, bb157]

bb152
  0: StorageDead(_260)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:32-1630:33)
  1: StorageDead(_259)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:32-1630:33)
  2: StorageLive(_261)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:37-1630:59)
  3: StorageLive(_262)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:37-1630:48)
  4: _262 = &(*_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:37-1630:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1630:37-1630:59)
      kind: _261 = core::slice::<impl [u8]>::is_empty(move _262) -> [return: bb153, unwind: bb218]
  }
  preds [bb151]
  succs [bb153, bb218]

bb153
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1630:37-1630:59)
      kind: switchInt(move _261) -> [0: bb156, otherwise: bb154]
  }
  preds [bb152]
  succs [bb154, bb156]

bb154
  0: StorageDead(_262)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:58-1630:59)
  1: StorageLive(_264)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1631:24-1633:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1631:24-1633:14)
      kind: _264 = util::wire::DeserializeError::generic(const "state marked special as a match, but has no pattern IDs") -> [return: bb155, unwind: bb218]
  }
  preds [bb153]
  succs [bb155, bb218]

bb155
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _264)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1631:20-1633:15)
  1: StorageDead(_264)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1633:14-1633:15)
  2: StorageDead(_261)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1634:9-1634:10)
  3: StorageDead(_258)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1634:9-1634:10)
  4: StorageDead(_257)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1634:9-1634:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb205
  }
  preds [bb154]
  succs [bb205]

bb156
  0: StorageDead(_262)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:58-1630:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb158
  }
  preds [bb153]
  succs [bb158]

bb157
  0: StorageDead(_260)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:32-1630:33)
  1: StorageDead(_259)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1630:32-1630:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb158
  }
  preds [bb151]
  succs [bb158]

bb158
  0: _257 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1634:10-1634:10)
  1: StorageDead(_261)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1634:9-1634:10)
  2: StorageDead(_258)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1634:9-1634:10)
  3: StorageDead(_257)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1634:9-1634:10)
  4: StorageLive(_265)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:9-1639:10)
  5: StorageLive(_266)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:12-1635:45)
  6: StorageLive(_267)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:12-1635:33)
  7: StorageLive(_268)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:12-1635:14)
  8: _268 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:12-1635:14)
  9: StorageLive(_269)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:30-1635:32)
  10: _269 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:30-1635:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1635:12-1635:33)
      kind: _267 = dfa::special::Special::is_match_state(move _268, move _269) -> [return: bb159, unwind: bb218]
  }
  preds [bb156, bb157]
  succs [bb159, bb218]

bb159
  0: StorageDead(_269)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:32-1635:33)
  1: StorageDead(_268)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:32-1635:33)
  2: StorageLive(_270)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:37-1635:45)
  3: _270 = _32
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:37-1635:45)
  4: _266 = Ne(move _267, move _270)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:12-1635:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1635:12-1635:45)
      kind: switchInt(move _266) -> [0: bb162, otherwise: bb160]
  }
  preds [bb158]
  succs [bb160, bb162]

bb160
  0: StorageDead(_270)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:44-1635:45)
  1: StorageDead(_267)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:44-1635:45)
  2: StorageLive(_272)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1636:24-1638:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1636:24-1638:14)
      kind: _272 = util::wire::DeserializeError::generic(const "whether state is a match or not is inconsistent") -> [return: bb161, unwind: bb218]
  }
  preds [bb159]
  succs [bb161, bb218]

bb161
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _272)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1636:20-1638:15)
  1: StorageDead(_272)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1638:14-1638:15)
  2: StorageDead(_266)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1639:9-1639:10)
  3: StorageDead(_265)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1639:9-1639:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb205
  }
  preds [bb160]
  succs [bb205]

bb162
  0: StorageDead(_270)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:44-1635:45)
  1: StorageDead(_267)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1635:44-1635:45)
  2: _265 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1639:10-1639:10)
  3: StorageDead(_266)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1639:9-1639:10)
  4: StorageDead(_265)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1639:9-1639:10)
  5: StorageLive(_273)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1646:9-1648:10)
  6: StorageLive(_274)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1646:12-1646:28)
  7: StorageLive(_275)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1646:12-1646:17)
  8: _275 = &(*_174)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1646:12-1646:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1646:12-1646:28)
      kind: _274 = core::slice::<impl [u8]>::is_empty(move _275) -> [return: bb163, unwind: bb218]
  }
  preds [bb159]
  succs [bb163, bb218]

bb163
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1646:12-1646:28)
      kind: switchInt(move _274) -> [0: bb166, otherwise: bb164]
  }
  preds [bb162]
  succs [bb164, bb166]

bb164
  0: StorageDead(_275)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1646:27-1646:28)
  1: StorageLive(_277)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1647:24-1647:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1647:24-1647:74)
      kind: _277 = util::wire::DeserializeError::generic(const "no accelerator length") -> [return: bb165, unwind: bb218]
  }
  preds [bb163]
  succs [bb165, bb218]

bb165
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _277)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1647:20-1647:75)
  1: StorageDead(_277)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1647:74-1647:75)
  2: StorageDead(_274)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1648:9-1648:10)
  3: StorageDead(_273)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1648:9-1648:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb205
  }
  preds [bb164]
  succs [bb205]

bb166
  0: StorageDead(_275)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1646:27-1646:28)
  1: _273 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1648:10-1648:10)
  2: StorageDead(_274)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1648:9-1648:10)
  3: StorageDead(_273)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1648:9-1648:10)
  4: StorageLive(_280)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:34-1649:70)
  5: StorageLive(_281)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:35-1649:56)
  6: StorageLive(_282)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:47-1649:55)
  7: StorageLive(_283)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:53-1649:54)
  8: _283 = const 0_usize
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:53-1649:54)
  9: _284 = Len((*_174))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:47-1649:55)
  10: _285 = Lt(_283, _284)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:47-1649:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1649:47-1649:55)
      kind: assert(move _285, "index out of bounds: the length is {} but the index is {}", move _284, _283) -> [success: bb167, unwind: bb218]
  }
  preds [bb163]
  succs [bb167, bb218]

bb167
  0: _282 = (*_174)[_283]
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:47-1649:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1649:35-1649:56)
      kind: _281 = <usize as core::convert::From<u8>>::from(move _282) -> [return: bb168, unwind: bb218]
  }
  preds [bb166]
  succs [bb168, bb218]

bb168
  0: StorageDead(_282)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:55-1649:56)
  1: StorageLive(_286)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:58-1649:69)
  2: StorageLive(_287)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:64-1649:69)
  3: StorageLive(_288)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:59-1649:64)
  4: _288 = &(*_174)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:59-1649:64)
  5: StorageLive(_289)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:65-1649:68)
  6: _289 = core::ops::RangeFrom::<usize> { start: const 1_usize }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:65-1649:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1649:64-1649:69)
      kind: _287 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _288, move _289) -> [return: bb169, unwind: bb218]
  }
  preds [bb167]
  succs [bb169, bb218]

bb169
  0: StorageDead(_289)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:68-1649:69)
  1: StorageDead(_288)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:68-1649:69)
  2: _286 = &(*_287)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:58-1649:69)
  3: _280 = (move _281, move _286)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:34-1649:70)
  4: StorageDead(_286)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:69-1649:70)
  5: StorageDead(_281)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:69-1649:70)
  6: PlaceMention(_280)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:34-1649:70)
  7: StorageLive(_278)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:14-1649:23)
  8: _278 = (_280.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:14-1649:23)
  9: StorageLive(_279)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:25-1649:30)
  10: _279 = (_280.1: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:25-1649:30)
  11: StorageDead(_283)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:70-1649:71)
  12: StorageDead(_280)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1649:70-1649:71)
  13: StorageLive(_290)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1651:9-1663:10)
  14: StorageLive(_291)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1651:12-1651:25)
  15: StorageLive(_292)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1651:12-1651:21)
  16: _292 = _278
    SourceInfo(regex-automata/src/dfa/sparse.rs:1651:12-1651:21)
  17: _291 = Gt(move _292, const 3_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1651:12-1651:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1651:12-1651:25)
      kind: switchInt(move _291) -> [0: bb172, otherwise: bb170]
  }
  preds [bb168]
  succs [bb170, bb172]

bb170
  0: StorageDead(_292)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1651:24-1651:25)
  1: StorageLive(_294)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1652:24-1654:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1652:24-1654:14)
      kind: _294 = util::wire::DeserializeError::generic(const "sparse invalid accelerator length") -> [return: bb171, unwind: bb218]
  }
  preds [bb169]
  succs [bb171, bb218]

bb171
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _294)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1652:20-1654:15)
  1: StorageDead(_294)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1654:14-1654:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1652:13-1654:15)
      kind: goto -> bb203
  }
  preds [bb170]
  succs [bb203]

bb172
  0: StorageDead(_292)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1651:24-1651:25)
  1: StorageLive(_295)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:19-1655:33)
  2: StorageLive(_296)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:19-1655:28)
  3: _296 = _278
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:19-1655:28)
  4: _295 = Eq(move _296, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:19-1655:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1655:19-1655:33)
      kind: switchInt(move _295) -> [0: bb178, otherwise: bb173]
  }
  preds [bb169]
  succs [bb173, bb178]

bb173
  0: StorageDead(_296)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:32-1655:33)
  1: StorageLive(_297)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:37-1655:58)
  2: StorageLive(_298)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:37-1655:39)
  3: _298 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:37-1655:39)
  4: StorageLive(_299)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:55-1655:57)
  5: _299 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:55-1655:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1655:37-1655:58)
      kind: _297 = dfa::special::Special::is_accel_state(move _298, move _299) -> [return: bb174, unwind: bb218]
  }
  preds [bb172]
  succs [bb174, bb218]

bb174
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1655:37-1655:58)
      kind: switchInt(move _297) -> [0: bb177, otherwise: bb175]
  }
  preds [bb173]
  succs [bb175, bb177]

bb175
  0: StorageDead(_299)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:57-1655:58)
  1: StorageDead(_298)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:57-1655:58)
  2: StorageLive(_301)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1656:24-1658:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1656:24-1658:14)
      kind: _301 = util::wire::DeserializeError::generic(const "got no accelerators in state, but in accelerator ID range") -> [return: bb176, unwind: bb218]
  }
  preds [bb174]
  succs [bb176, bb218]

bb176
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _301)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1656:20-1658:15)
  1: StorageDead(_301)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1658:14-1658:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1656:13-1658:15)
      kind: goto -> bb202
  }
  preds [bb175]
  succs [bb202]

bb177
  0: StorageDead(_299)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:57-1655:58)
  1: StorageDead(_298)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:57-1655:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb179
  }
  preds [bb174]
  succs [bb179]

bb178
  0: StorageDead(_296)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1655:32-1655:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb179
  }
  preds [bb172]
  succs [bb179]

bb179
  0: StorageLive(_302)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:19-1659:32)
  1: StorageLive(_303)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:19-1659:28)
  2: _303 = _278
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:19-1659:28)
  3: _302 = Gt(move _303, const 0_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:19-1659:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1659:19-1659:32)
      kind: switchInt(move _302) -> [0: bb185, otherwise: bb180]
  }
  preds [bb177, bb178]
  succs [bb180, bb185]

bb180
  0: StorageDead(_303)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:31-1659:32)
  1: StorageLive(_304)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:37-1659:58)
  2: StorageLive(_305)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:37-1659:39)
  3: _305 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:37-1659:39)
  4: StorageLive(_306)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:55-1659:57)
  5: _306 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:55-1659:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1659:37-1659:58)
      kind: _304 = dfa::special::Special::is_accel_state(move _305, move _306) -> [return: bb181, unwind: bb218]
  }
  preds [bb179]
  succs [bb181, bb218]

bb181
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1659:37-1659:58)
      kind: switchInt(move _304) -> [0: bb183, otherwise: bb182]
  }
  preds [bb180]
  succs [bb182, bb183]

bb182
  0: StorageDead(_306)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:57-1659:58)
  1: StorageDead(_305)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:57-1659:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1659:59-1663:10)
      kind: goto -> bb186
  }
  preds [bb181]
  succs [bb186]

bb183
  0: StorageDead(_306)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:57-1659:58)
  1: StorageDead(_305)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:57-1659:58)
  2: StorageLive(_308)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1660:24-1662:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1660:24-1662:14)
      kind: _308 = util::wire::DeserializeError::generic(const "state in accelerator ID range, but has no accelerators") -> [return: bb184, unwind: bb218]
  }
  preds [bb181]
  succs [bb184, bb218]

bb184
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _308)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1660:20-1662:15)
  1: StorageDead(_308)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1662:14-1662:15)
  2: StorageDead(_304)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  3: StorageDead(_302)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb202
  }
  preds [bb183]
  succs [bb202]

bb185
  0: StorageDead(_303)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1659:31-1659:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb186
  }
  preds [bb179]
  succs [bb186]

bb186
  0: _290 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:10-1663:10)
  1: StorageDead(_304)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  2: StorageDead(_302)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  3: StorageDead(_297)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  4: StorageDead(_295)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  5: StorageDead(_291)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  6: StorageDead(_290)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  7: StorageLive(_309)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  8: StorageLive(_310)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  9: StorageLive(_311)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:10)
  10: StorageLive(_312)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1666:13-1666:18)
  11: _312 = &(*_279)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1666:13-1666:18)
  12: StorageLive(_313)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1667:13-1667:22)
  13: _313 = _278
    SourceInfo(regex-automata/src/dfa/sparse.rs:1667:13-1667:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:10)
      kind: _311 = util::wire::check_slice_len::<u8>(move _312, move _313, const "sparse corrupt accelerator length") -> [return: bb187, unwind: bb218]
  }
  preds [bb182, bb185]
  succs [bb187, bb218]

bb187
  0: StorageDead(_313)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:9-1669:10)
  1: StorageDead(_312)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:9-1669:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
      kind: _310 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _311) -> [return: bb188, unwind: bb218]
  }
  preds [bb186]
  succs [bb188, bb218]

bb188
  0: StorageDead(_311)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  1: PlaceMention(_310)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  2: _314 = discriminant(_310)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
      kind: switchInt(move _314) -> [0: bb191, 1: bb190, otherwise: bb189]
  }
  preds [bb187]
  succs [bb189, bb190, bb191]

bb189
  0: FakeRead(ForMatchedPlace(None), _310)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
      kind: unreachable
  }
  preds [bb188]
  succs []

bb190
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
      kind: falseEdge -> [real: bb192, imaginary: bb191]
  }
  preds [bb188]
  succs [bb191, bb192]

bb191
  0: StorageLive(_318)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  1: _318 = ((_310 as Continue).0: ())
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  2: _309 = _318
    SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
  3: StorageDead(_318)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  4: StorageDead(_310)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:11-1669:12)
  5: StorageDead(_309)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:11-1669:12)
  6: StorageLive(_320)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:26-1670:68)
  7: StorageLive(_321)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:27-1670:46)
  8: StorageLive(_322)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:33-1670:46)
  9: StorageLive(_323)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:28-1670:33)
  10: _323 = &(*_279)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:28-1670:33)
  11: StorageLive(_324)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:34-1670:45)
  12: StorageLive(_325)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:36-1670:45)
  13: _325 = _278
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:36-1670:45)
  14: _324 = core::ops::RangeTo::<usize> { end: move _325 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:34-1670:45)
  15: StorageDead(_325)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:44-1670:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1670:33-1670:46)
      kind: _322 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _323, move _324) -> [return: bb194, unwind: bb218]
  }
  preds [bb188, bb190]
  succs [bb194, bb218]

bb192
  0: StorageLive(_315)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  1: _315 = move ((_310 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  2: StorageLive(_317)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  3: _317 = move _315
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1665:9-1669:11)
      kind: _0 = <core::result::Result<dfa::sparse::State<'_>, util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _317) -> [return: bb193, unwind: bb218]
  }
  preds [bb190]
  succs [bb193, bb218]

bb193
  0: StorageDead(_317)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  1: StorageDead(_315)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:10-1669:11)
  2: StorageDead(_310)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:11-1669:12)
  3: StorageDead(_309)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1669:11-1669:12)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb204
  }
  preds [bb192]
  succs [bb204]

bb194
  0: StorageDead(_324)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:45-1670:46)
  1: StorageDead(_323)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:45-1670:46)
  2: _321 = &(*_322)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:27-1670:46)
  3: StorageLive(_326)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:48-1670:67)
  4: StorageLive(_327)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:54-1670:67)
  5: StorageLive(_328)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:49-1670:54)
  6: _328 = &(*_279)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:49-1670:54)
  7: StorageLive(_329)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:55-1670:66)
  8: StorageLive(_330)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:55-1670:64)
  9: _330 = _278
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:55-1670:64)
  10: _329 = core::ops::RangeFrom::<usize> { start: move _330 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:55-1670:66)
  11: StorageDead(_330)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:65-1670:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1670:54-1670:67)
      kind: _327 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _328, move _329) -> [return: bb195, unwind: bb218]
  }
  preds [bb191]
  succs [bb195, bb218]

bb195
  0: StorageDead(_329)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:66-1670:67)
  1: StorageDead(_328)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:66-1670:67)
  2: _326 = &(*_327)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:48-1670:67)
  3: _320 = (move _321, move _326)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:26-1670:68)
  4: StorageDead(_326)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:67-1670:68)
  5: StorageDead(_321)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:67-1670:68)
  6: PlaceMention(_320)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:26-1670:68)
  7: StorageLive(_319)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:14-1670:19)
  8: _319 = (_320.0: &[u8])
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:14-1670:19)
  9: StorageDead(_320)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1670:68-1670:69)
  10: StorageLive(_331)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1672:13-1672:18)
  11: StorageLive(_332)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1673:13-1673:15)
  12: _332 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1673:13-1673:15)
  13: StorageLive(_333)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1674:13-1674:21)
  14: _333 = _32
    SourceInfo(regex-automata/src/dfa/sparse.rs:1674:13-1674:21)
  15: StorageLive(_334)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1675:13-1675:19)
  16: _334 = _22
    SourceInfo(regex-automata/src/dfa/sparse.rs:1675:13-1675:19)
  17: StorageLive(_335)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1676:13-1676:25)
  18: _335 = &(*_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1676:13-1676:25)
  19: StorageLive(_336)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1677:13-1677:17)
  20: _336 = &(*_131)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1677:13-1677:17)
  21: StorageLive(_337)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1678:13-1678:24)
  22: _337 = &(*_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1678:13-1678:24)
  23: StorageLive(_338)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1679:13-1679:18)
  24: _338 = &(*_319)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1679:13-1679:18)
  25: _331 = dfa::sparse::State::<'_> { id: move _332, is_match: move _333, ntrans: move _334, input_ranges: move _335, next: move _336, pattern_ids: move _337, accel: move _338 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1672:21-1680:10)
  26: StorageDead(_338)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1680:9-1680:10)
  27: StorageDead(_337)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1680:9-1680:10)
  28: StorageDead(_336)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1680:9-1680:10)
  29: StorageDead(_335)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1680:9-1680:10)
  30: StorageDead(_334)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1680:9-1680:10)
  31: StorageDead(_333)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1680:9-1680:10)
  32: StorageDead(_332)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1680:9-1680:10)
  33: FakeRead(ForLet(None), _331)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1672:13-1672:18)
  34: StorageLive(_339)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:9-1685:10)
  35: StorageLive(_340)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:12-1681:61)
  36: StorageLive(_341)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:12-1681:14)
  37: _341 = &(*_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:12-1681:14)
  38: StorageLive(_342)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:29-1681:60)
  39: StorageLive(_343)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:29-1681:34)
  40: _343 = &_331
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:29-1681:34)
  41: StorageLive(_344)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:43-1681:59)
  42: StorageLive(_345)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:43-1681:55)
  43: _345 = (_331.2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:43-1681:55)
  44: _346 = SubWithOverflow(_345, const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:43-1681:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1681:43-1681:59)
      kind: assert(!move (_346.1: bool), "attempt to compute `{} - {}`, which would overflow", move _345, const 1_usize) -> [success: bb196, unwind: bb218]
  }
  preds [bb194]
  succs [bb196, bb218]

bb196
  0: _344 = move (_346.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:43-1681:59)
  1: StorageDead(_345)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:58-1681:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1681:29-1681:60)
      kind: _342 = dfa::sparse::State::<'_>::next_at(move _343, move _344) -> [return: bb197, unwind: bb218]
  }
  preds [bb195]
  succs [bb197, bb218]

bb197
  0: StorageDead(_344)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:59-1681:60)
  1: StorageDead(_343)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:59-1681:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1681:12-1681:61)
      kind: _340 = dfa::special::Special::is_quit_state(move _341, move _342) -> [return: bb198, unwind: bb218]
  }
  preds [bb196]
  succs [bb198, bb218]

bb198
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1681:12-1681:61)
      kind: switchInt(move _340) -> [0: bb201, otherwise: bb199]
  }
  preds [bb197]
  succs [bb199, bb201]

bb199
  0: StorageDead(_342)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:60-1681:61)
  1: StorageDead(_341)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:60-1681:61)
  2: StorageLive(_348)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1682:24-1684:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1682:24-1684:14)
      kind: _348 = util::wire::DeserializeError::generic(const "state with EOI transition to quit state is illegal") -> [return: bb200, unwind: bb218]
  }
  preds [bb198]
  succs [bb200, bb218]

bb200
  0: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Err(move _348)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1682:20-1684:15)
  1: StorageDead(_348)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1684:14-1684:15)
  2: StorageDead(_340)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1685:9-1685:10)
  3: StorageDead(_339)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1685:9-1685:10)
  4: StorageDead(_331)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  5: StorageDead(_319)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  6: StorageDead(_327)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  7: StorageDead(_322)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb204
  }
  preds [bb199]
  succs [bb204]

bb201
  0: StorageDead(_342)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:60-1681:61)
  1: StorageDead(_341)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1681:60-1681:61)
  2: _339 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1685:10-1685:10)
  3: StorageDead(_340)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1685:9-1685:10)
  4: StorageDead(_339)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1685:9-1685:10)
  5: StorageLive(_349)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1686:12-1686:17)
  6: _349 = move _331
    SourceInfo(regex-automata/src/dfa/sparse.rs:1686:12-1686:17)
  7: _0 = core::result::Result::<dfa::sparse::State<'_>, util::wire::DeserializeError>::Ok(move _349)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1686:9-1686:18)
  8: StorageDead(_349)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1686:17-1686:18)
  9: StorageDead(_331)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  10: StorageDead(_319)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  11: StorageDead(_327)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  12: StorageDead(_322)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  13: StorageDead(_279)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  14: StorageDead(_278)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  15: StorageDead(_287)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  16: StorageDead(_174)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  17: StorageDead(_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  18: StorageDead(_248)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  19: StorageDead(_246)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  20: StorageDead(_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  21: StorageDead(_131)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  22: StorageDead(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  23: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  24: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  25: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  26: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  27: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  28: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  29: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  30: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1687:6-1687:6)
      kind: goto -> bb217
  }
  preds [bb198]
  succs [bb217]

bb202
  0: StorageDead(_297)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  1: StorageDead(_295)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb203
  }
  preds [bb176, bb184]
  succs [bb203]

bb203
  0: StorageDead(_291)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  1: StorageDead(_290)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1663:9-1663:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb204
  }
  preds [bb171, bb202]
  succs [bb204]

bb204
  0: StorageDead(_279)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  1: StorageDead(_278)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  2: StorageDead(_287)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb205
  }
  preds [bb193, bb200, bb203]
  succs [bb205]

bb205
  0: StorageDead(_174)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  1: StorageDead(_173)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  2: StorageDead(_248)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  3: StorageDead(_246)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb210
  }
  preds [bb148, bb155, bb161, bb165, bb204]
  succs [bb210]

bb206
  0: StorageDead(_198)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb207
  }
  preds [bb118, bb125, bb142]
  succs [bb207]

bb207
  0: StorageDead(_189)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  1: StorageDead(_188)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  2: StorageDead(_178)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  3: StorageDead(_177)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1622:9-1622:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb208
  }
  preds [bb110, bb206]
  succs [bb208]

bb208
  0: StorageDead(_176)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1624:9-1624:10)
  1: StorageDead(_175)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1624:10-1624:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb210
  }
  preds [bb107, bb207]
  succs [bb210]

bb209
  0: StorageDead(_149)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  1: StorageDead(_146)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  2: StorageDead(_144)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  3: StorageDead(_143)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  4: StorageDead(_142)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  5: StorageDead(_137)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  6: StorageDead(_136)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1592:9-1592:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb210
  }
  preds [bb89, bb98]
  succs [bb210]

bb210
  0: StorageDead(_132)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  1: StorageDead(_131)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb211
  }
  preds [bb205, bb208, bb209]
  succs [bb211]

bb211
  0: StorageDead(_114)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb212
  }
  preds [bb71, bb210]
  succs [bb212]

bb212
  0: StorageDead(_81)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  1: StorageDead(_80)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb213
  }
  preds [bb60, bb211]
  succs [bb213]

bb213
  0: StorageDead(_67)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb215
  }
  preds [bb46, bb212]
  succs [bb215]

bb214
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  1: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  2: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1559:9-1559:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb215
  }
  preds [bb30, bb35]
  succs [bb215]

bb215
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb216
  }
  preds [bb24, bb213, bb214]
  succs [bb216]

bb216
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1687:5-1687:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb217
  }
  preds [bb16, bb215]
  succs [bb217]

bb217
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1687:6-1687:6)
      kind: return
  }
  preds [bb5, bb201, bb216]
  succs []

bb218
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1528:5-1687:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb6, bb7, bb8, bb9, bb10, bb14, bb15, bb17, bb18, bb23, bb26, bb29, bb32, bb34, bb37, bb38, bb39, bb40, bb44, bb45, bb47, bb48, bb50, bb51, bb55, bb56, bb57, bb59, bb62, bb63, bb64, bb65, bb69, bb70, bb72, bb73, bb74, bb76, bb77, bb81, bb83, bb87, bb88, bb90, bb91, bb92, bb97, bb99, bb100, bb101, bb105, bb106, bb109, bb111, bb112, bb116, bb117, bb119, bb123, bb124, bb126, bb127, bb129, bb130, bb134, bb136, bb141, bb145, bb147, bb150, bb152, bb154, bb158, bb160, bb162, bb164, bb166, bb167, bb168, bb170, bb173, bb175, bb180, bb183, bb186, bb187, bb191, bb192, bb194, bb195, bb196, bb197, bb199]
  succs []

