bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1730:37)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1729:37)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1728:31)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1728:16)
  4: _5 = &((*_1).0: dfa::dense::TransitionTable<T>)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1728:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1728:31)
      kind: _4 = dfa::dense::TransitionTable::<T>::memory_usage(move _5) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:30-1728:31)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:1729:15-1729:37)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:1729:15-1729:22)
  3: _7 = &((*_1).1: dfa::dense::StartTable<T>)
    SourceInfo(regex-automata/src/dfa/dense.rs:1729:15-1729:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1729:15-1729:37)
      kind: _6 = dfa::dense::StartTable::<T>::memory_usage(move _7) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/dense.rs:1729:36-1729:37)
  1: _8 = AddWithOverflow(_4, _6)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1729:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1729:37)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _6) -> [success: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: _3 = move (_8.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1729:37)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/dense.rs:1729:36-1729:37)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:1729:36-1729:37)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:1730:15-1730:37)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:1730:15-1730:22)
  5: _10 = &((*_1).2: dfa::dense::MatchStates<T>)
    SourceInfo(regex-automata/src/dfa/dense.rs:1730:15-1730:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1730:15-1730:37)
      kind: _9 = dfa::dense::MatchStates::<T>::memory_usage(move _10) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/dense.rs:1730:36-1730:37)
  1: _11 = AddWithOverflow(_3, _9)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1730:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1730:37)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _9) -> [success: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: _2 = move (_11.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1730:37)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/dense.rs:1730:36-1730:37)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:1730:36-1730:37)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:1731:15-1731:41)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:1731:15-1731:26)
  5: _13 = &((*_1).4: dfa::accel::Accels<T>)
    SourceInfo(regex-automata/src/dfa/dense.rs:1731:15-1731:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1731:15-1731:41)
      kind: _12 = dfa::accel::Accels::<T>::memory_usage(move _13) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/dense.rs:1731:40-1731:41)
  1: _14 = AddWithOverflow(_2, _12)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1731:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1731:41)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _12) -> [success: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: _0 = move (_14.0: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:1728:9-1731:41)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/dense.rs:1731:40-1731:41)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/dense.rs:1731:40-1731:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1732:6-1732:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:1727:5-1732:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

