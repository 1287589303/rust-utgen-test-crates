bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:9-1012:10)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:46)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:32)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:32)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:17)
  5: _8 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:32)
      kind: _7 = util::search::Input::<'_>::get_anchored(move _8) -> [return: bb1, unwind: bb21]
  }
  preds []
  succs [bb1, bb21]

bb1
  0: _6 = &_7
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:32)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:31-1010:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:46)
      kind: _5 = util::search::Anchored::is_anchored(move _6) -> [return: bb2, unwind: bb21]
  }
  preds [bb0]
  succs [bb2, bb21]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1010:12-1010:46)
      kind: switchInt(move _5) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:45-1010:46)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:45-1010:46)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:20-1011:29)
  3: _10 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:20-1011:29)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:37-1011:42)
  5: _11 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:37-1011:42)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:44-1011:49)
  7: _12 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:44-1011:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1011:20-1011:50)
      kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::search(move _10, move _11, move _12) -> [return: bb4, unwind: bb21]
  }
  preds [bb2]
  succs [bb4, bb21]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:49-1011:50)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:49-1011:50)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1011:49-1011:50)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1012:9-1012:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1012:9-1012:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1023:6-1023:6)
      kind: goto -> bb20
  }
  preds [bb3]
  succs [bb20]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:45-1010:46)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1010:45-1010:46)
  2: _4 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1012:10-1012:10)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1012:9-1012:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1012:9-1012:10)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:62)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:19)
  7: _14 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:19)
  8: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:49-1013:54)
  9: _15 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:49-1013:54)
  10: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:56-1013:61)
  11: _16 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:56-1013:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:62)
      kind: _13 = meta::strategy::ReverseAnchored::try_search_half_anchored_rev(move _14, move _15, move _16) -> [return: bb6, unwind: bb21]
  }
  preds [bb2]
  succs [bb6, bb21]

bb6
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:61-1013:62)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:61-1013:62)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:61-1013:62)
  3: PlaceMention(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:62)
  4: _18 = discriminant(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1013:9-1013:62)
      kind: switchInt(move _18) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:62)
      kind: unreachable
  }
  preds [bb6, bb9]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1014:13-1014:22)
      kind: falseEdge -> [real: bb12, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb12]

bb9
  0: _17 = discriminant(((_13 as Ok).0: core::option::Option<util::search::HalfMatch>))
    SourceInfo(regex-automata/src/meta/strategy.rs:1013:15-1013:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1013:9-1013:62)
      kind: switchInt(move _17) -> [0: bb10, 1: bb11, otherwise: bb7]
  }
  preds [bb6, bb8]
  succs [bb7, bb10, bb11]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1018:13-1018:21)
      kind: falseEdge -> [real: bb14, imaginary: bb11]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1019:21-1019:23)
  1: _23 = ((((_13 as Ok).0: core::option::Option<util::search::HalfMatch>) as Some).0: util::search::HalfMatch)
    SourceInfo(regex-automata/src/meta/strategy.rs:1019:21-1019:23)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:22-1020:72)
  3: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:33-1020:45)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:33-1020:35)
  5: _26 = &_23
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:33-1020:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1020:33-1020:45)
      kind: _25 = util::search::HalfMatch::pattern(move _26) -> [return: bb15, unwind: bb21]
  }
  preds [bb9, bb10]
  succs [bb15, bb21]

bb12
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1014:17-1014:21)
  1: _19 = move ((_13 as Err).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/strategy.rs:1014:17-1014:21)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:17-1016:26)
  3: _20 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:17-1016:26)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:41-1016:46)
  5: _21 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:41-1016:46)
  6: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:48-1016:53)
  7: _22 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:48-1016:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1016:17-1016:54)
      kind: _0 = meta::strategy::Core::search_nofail(move _20, move _21, move _22) -> [return: bb13, unwind: bb21]
  }
  preds [bb8]
  succs [bb13, bb21]

bb13
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:53-1016:54)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:53-1016:54)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1016:53-1016:54)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1017:13-1017:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1017:13-1017:14)
      kind: goto -> bb19
  }
  preds [bb12]
  succs [bb19]

bb14
  0: _0 = core::option::Option::<util::search::Match>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:1018:25-1018:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1018:25-1018:29)
      kind: goto -> bb19
  }
  preds [bb10]
  succs [bb19]

bb15
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:44-1020:45)
  1: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:47-1020:71)
  2: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:47-1020:58)
  3: StorageLive(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:47-1020:49)
  4: _29 = &_23
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:47-1020:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1020:47-1020:58)
      kind: _28 = util::search::HalfMatch::offset(move _29) -> [return: bb16, unwind: bb21]
  }
  preds [bb11]
  succs [bb16, bb21]

bb16
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:57-1020:58)
  1: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:60-1020:71)
  2: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:60-1020:65)
  3: _31 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:60-1020:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1020:60-1020:71)
      kind: _30 = util::search::Input::<'_>::end(move _31) -> [return: bb17, unwind: bb21]
  }
  preds [bb15]
  succs [bb17, bb21]

bb17
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:70-1020:71)
  1: _27 = core::ops::Range::<usize> { start: move _28, end: move _30 }
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:47-1020:71)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:70-1020:71)
  3: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:70-1020:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1020:22-1020:72)
      kind: _24 = util::search::Match::new::<core::ops::Range<usize>>(move _25, move _27) -> [return: bb18, unwind: bb21]
  }
  preds [bb16]
  succs [bb18, bb21]

bb18
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:71-1020:72)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:71-1020:72)
  2: _0 = core::option::Option::<util::search::Match>::Some(move _24)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:17-1020:73)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:1020:72-1020:73)
  4: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1021:13-1021:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1021:13-1021:14)
      kind: goto -> bb19
  }
  preds [bb17]
  succs [bb19]

bb19
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1023:5-1023:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1023:6-1023:6)
      kind: goto -> bb20
  }
  preds [bb13, bb14, bb18]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1023:6-1023:6)
      kind: return
  }
  preds [bb4, bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1009:5-1023:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb11, bb12, bb15, bb16, bb17]
  succs []

