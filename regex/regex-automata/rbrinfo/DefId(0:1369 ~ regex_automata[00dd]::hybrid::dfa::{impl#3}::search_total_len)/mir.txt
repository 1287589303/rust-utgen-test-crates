bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:9-2004:28)
  1: _2 = ((*_1).10: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:9-2004:28)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:31-2004:76)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:31-2004:53)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:31-2004:44)
  5: _5 = &((*_1).11: core::option::Option<hybrid::dfa::SearchProgress>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:31-2004:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:31-2004:53)
      kind: _4 = core::option::Option::<hybrid::dfa::SearchProgress>::as_ref(move _5) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:52-2004:53)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:64-2004:75)
  2: _6 = {closure@regex-automata/src/hybrid/dfa.rs:2004:64: 2004:67}
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:64-2004:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:31-2004:76)
      kind: _3 = core::option::Option::<&hybrid::dfa::SearchProgress>::map_or::<usize, {closure@regex-automata/src/hybrid/dfa.rs:2004:64: 2004:67}>(move _4, const 0_usize, move _6) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:75-2004:76)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:75-2004:76)
  2: _7 = AddWithOverflow(_2, _3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:9-2004:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:9-2004:76)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _3) -> [success: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: _0 = move (_7.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:9-2004:76)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:75-2004:76)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2004:75-2004:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2005:6-2005:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2003:5-2005:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

