bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:13-109:14)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:42)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:26)
  5: _8 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:26)
  6: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:31-109:41)
  7: _9 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:31-109:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:42)
      kind: _7 = core::slice::<impl [u8]>::get::<usize>(move _8, move _9) -> [return: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:41-109:42)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:41-109:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
      kind: _6 = <core::option::Option<&u8> as core::ops::Try>::branch(move _7) -> [return: bb2, unwind: bb16]
  }
  preds [bb0]
  succs [bb2, bb16]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  1: PlaceMention(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  2: _10 = discriminant(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
      kind: switchInt(move _10) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  1: _14 = ((_6 as Continue).0: &u8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  2: _5 = _14
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  4: _4 = (*_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:17-109:43)
  5: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:13-109:14)
  6: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:43-109:44)
  7: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:43-109:44)
  8: StorageLive(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:12-110:23)
  9: StorageLive(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:12-110:18)
  10: _16 = ((*_1).0: u8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:12-110:18)
  11: StorageLive(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:22-110:23)
  12: _17 = _4
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:22-110:23)
  13: _15 = Eq(move _16, move _17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:12-110:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:12-110:23)
      kind: switchInt(move _15) -> [0: bb9, otherwise: bb8]
  }
  preds [bb2, bb4]
  succs [bb8, bb9]

bb6
  0: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  1: _11 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  3: _13 = _11
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:18-109:43)
      kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _13) -> [return: bb7, unwind: bb16]
  }
  preds [bb4]
  succs [bb7, bb16]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:42-109:43)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:43-109:44)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:109:43-109:44)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:115:5-115:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:115:6-115:6)
      kind: goto -> bb15
  }
  preds [bb6]
  succs [bb15]

bb8
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:22-110:23)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:22-110:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:39-112:10)
      kind: goto -> bb12
  }
  preds [bb5]
  succs [bb12]

bb9
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:22-110:23)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:22-110:23)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:27-110:38)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:27-110:33)
  4: _19 = ((*_1).1: u8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:27-110:33)
  5: StorageLive(_20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:37-110:38)
  6: _20 = _4
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:37-110:38)
  7: _18 = Eq(move _19, move _20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:27-110:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:27-110:38)
      kind: switchInt(move _18) -> [0: bb11, otherwise: bb10]
  }
  preds [bb5]
  succs [bb10, bb11]

bb10
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:37-110:38)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:37-110:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:39-112:10)
      kind: goto -> bb12
  }
  preds [bb9]
  succs [bb12]

bb11
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:37-110:38)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:37-110:38)
  2: _0 = core::option::Option::<util::search::Span>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:113:13-113:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:9-114:10)
      kind: goto -> bb14
  }
  preds [bb9]
  succs [bb14]

bb12
  0: StorageLive(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:18-111:65)
  1: StorageLive(_22)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:32-111:42)
  2: _22 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:32-111:42)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:49-111:63)
  4: StorageLive(_24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:49-111:59)
  5: _24 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:49-111:59)
  6: _25 = AddWithOverflow(_24, const 1_usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:49-111:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:49-111:63)
      kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", move _24, const 1_usize) -> [success: bb13, unwind: bb16]
  }
  preds [bb8, bb10]
  succs [bb13, bb16]

bb13
  0: _23 = move (_25.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:49-111:63)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:62-111:63)
  2: _21 = util::search::Span { start: move _22, end: move _23 }
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:18-111:65)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:64-111:65)
  4: StorageDead(_22)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:64-111:65)
  5: _0 = core::option::Option::<util::search::Span>::Some(move _21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:13-111:66)
  6: StorageDead(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:111:65-111:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:110:9-114:10)
      kind: goto -> bb14
  }
  preds [bb12]
  succs [bb14]

bb14
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:114:9-114:10)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:114:9-114:10)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:115:5-115:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:115:6-115:6)
      kind: goto -> bb15
  }
  preds [bb11, bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:115:6-115:6)
      kind: return
  }
  preds [bb7, bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:108:5-115:6)
      kind: resume
  }
  preds [bb0, bb1, bb6, bb12]
  succs []

