bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:13-48:14)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:42)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:26)
  5: _8 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:26)
  6: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:31-48:41)
  7: _9 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:31-48:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:42)
      kind: _7 = core::slice::<impl [u8]>::get::<usize>(move _8, move _9) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:41-48:42)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:41-48:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
      kind: _6 = <core::option::Option<&u8> as core::ops::Try>::branch(move _7) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  1: PlaceMention(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  2: _10 = discriminant(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
      kind: switchInt(move _10) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  1: _14 = ((_6 as Continue).0: &u8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  2: _5 = _14
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  4: _4 = (*_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:17-48:43)
  5: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:13-48:14)
  6: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:43-48:44)
  7: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:43-48:44)
  8: StorageLive(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:12-49:23)
  9: StorageLive(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:12-49:18)
  10: _16 = ((*_1).0: u8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:12-49:18)
  11: StorageLive(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:22-49:23)
  12: _17 = _4
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:22-49:23)
  13: _15 = Eq(move _16, move _17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:12-49:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:12-49:23)
      kind: switchInt(move _15) -> [0: bb9, otherwise: bb8]
  }
  preds [bb2, bb4]
  succs [bb8, bb9]

bb6
  0: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  1: _11 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  3: _13 = _11
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:18-48:43)
      kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _13) -> [return: bb7, unwind: bb13]
  }
  preds [bb4]
  succs [bb7, bb13]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:42-48:43)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:43-48:44)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:48:43-48:44)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:54:5-54:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:54:6-54:6)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb8
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:22-49:23)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:22-49:23)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:18-50:65)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:32-50:42)
  4: _19 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:32-50:42)
  5: StorageLive(_20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:49-50:63)
  6: StorageLive(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:49-50:59)
  7: _21 = (_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:49-50:59)
  8: _22 = AddWithOverflow(_21, const 1_usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:49-50:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:49-50:63)
      kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _21, const 1_usize) -> [success: bb10, unwind: bb13]
  }
  preds [bb5]
  succs [bb10, bb13]

bb9
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:22-49:23)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:22-49:23)
  2: _0 = core::option::Option::<util::search::Span>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:52:13-52:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:9-53:10)
      kind: goto -> bb11
  }
  preds [bb5]
  succs [bb11]

bb10
  0: _20 = move (_22.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:49-50:63)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:62-50:63)
  2: _18 = util::search::Span { start: move _19, end: move _20 }
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:18-50:65)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:64-50:65)
  4: StorageDead(_19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:64-50:65)
  5: _0 = core::option::Option::<util::search::Span>::Some(move _18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:13-50:66)
  6: StorageDead(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:50:65-50:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:49:9-53:10)
      kind: goto -> bb11
  }
  preds [bb8]
  succs [bb11]

bb11
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:53:9-53:10)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:54:5-54:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:54:6-54:6)
      kind: goto -> bb12
  }
  preds [bb9, bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:54:6-54:6)
      kind: return
  }
  preds [bb7, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:47:5-54:6)
      kind: resume
  }
  preds [bb0, bb1, bb6, bb8]
  succs []

