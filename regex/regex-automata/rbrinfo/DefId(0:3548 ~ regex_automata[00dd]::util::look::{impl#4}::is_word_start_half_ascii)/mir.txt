bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1182:13-1182:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:33)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:29)
  3: _6 = _3
    SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:29)
  4: _5 = Gt(move _6, const 0_usize)
    SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:33)
      kind: switchInt(move _5) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1182:32-1182:33)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1182:56-1182:72)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1182:65-1182:71)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:1182:65-1182:67)
  4: _9 = _3
    SourceInfo(regex-automata/src/util/look.rs:1182:65-1182:67)
  5: _10 = SubWithOverflow(_9, const 1_usize)
    SourceInfo(regex-automata/src/util/look.rs:1182:65-1182:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1182:65-1182:71)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _9, const 1_usize) -> [success: bb3, unwind: bb7]
  }
  preds [bb0]
  succs [bb3, bb7]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1182:32-1182:33)
  1: _4 = const false
    SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:73)
      kind: goto -> bb6
  }
  preds [bb0]
  succs [bb6]

bb3
  0: _8 = move (_10.0: usize)
    SourceInfo(regex-automata/src/util/look.rs:1182:65-1182:71)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1182:70-1182:71)
  2: _11 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:1182:56-1182:72)
  3: _12 = Lt(_8, _11)
    SourceInfo(regex-automata/src/util/look.rs:1182:56-1182:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1182:56-1182:72)
      kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _8) -> [success: bb4, unwind: bb7]
  }
  preds [bb1]
  succs [bb4, bb7]

bb4
  0: _7 = (*_2)[_8]
    SourceInfo(regex-automata/src/util/look.rs:1182:56-1182:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1182:37-1182:73)
      kind: _4 = util::utf8::is_word_byte(move _7) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1182:72-1182:73)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1182:72-1182:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1182:27-1182:73)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1182:72-1182:73)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1182:13-1182:24)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1183:10-1183:21)
  3: _13 = _4
    SourceInfo(regex-automata/src/util/look.rs:1183:10-1183:21)
  4: _0 = Not(move _13)
    SourceInfo(regex-automata/src/util/look.rs:1183:9-1183:21)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1183:20-1183:21)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1184:5-1184:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1184:6-1184:6)
      kind: return
  }
  preds [bb2, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1177:5-1184:6)
      kind: resume
  }
  preds [bb1, bb3, bb4]
  succs []

