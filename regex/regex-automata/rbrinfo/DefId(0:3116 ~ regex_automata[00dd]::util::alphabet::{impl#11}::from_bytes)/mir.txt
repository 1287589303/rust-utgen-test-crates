bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:72)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:31-813:36)
  4: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:31-813:36)
  5: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:38-813:59)
  6: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:42-813:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:42-813:59)
      kind: _7 = core::mem::size_of::<u128>() -> [return: bb1, unwind: bb28]
  }
  preds []
  succs [bb1, bb28]

bb1
  0: _8 = MulWithOverflow(const 2_usize, _7)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:38-813:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:38-813:59)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _7) -> [success: bb2, unwind: bb28]
  }
  preds [bb0]
  succs [bb2, bb28]

bb2
  0: _6 = move (_8.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:38-813:59)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:58-813:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:72)
      kind: _4 = util::wire::check_slice_len::<u8>(move _5, move _6, const "byte set") -> [return: bb3, unwind: bb28]
  }
  preds [bb1]
  succs [bb3, bb28]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:71-813:72)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:71-813:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
      kind: _3 = <core::result::Result<(), util::wire::DeserializeError> as core::ops::Try>::branch(move _4) -> [return: bb4, unwind: bb28]
  }
  preds [bb2]
  succs [bb4, bb28]

bb4
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  2: _9 = discriminant(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
      kind: switchInt(move _9) -> [0: bb7, 1: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  1: _13 = ((_3 as Continue).0: ())
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  2: _2 = _13
    SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:73-813:74)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:73-813:74)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:814:13-814:22)
  7: _14 = const 0_usize
    SourceInfo(regex-automata/src/util/alphabet.rs:814:25-814:26)
  8: FakeRead(ForLet(None), _14)
    SourceInfo(regex-automata/src/util/alphabet.rs:814:13-814:22)
  9: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  10: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  11: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:74)
  12: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:45-815:50)
  13: _20 = &(*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:45-815:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:74)
      kind: _19 = util::wire::try_read_u128(move _20, const "byte set low bucket") -> [return: bb10, unwind: bb28]
  }
  preds [bb4, bb6]
  succs [bb10, bb28]

bb8
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  1: _10 = move ((_3 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  3: _12 = move _10
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:813:9-813:73)
      kind: _0 = <core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _12) -> [return: bb9, unwind: bb28]
  }
  preds [bb6]
  succs [bb9, bb28]

bb9
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:72-813:73)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:73-813:74)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:813:73-813:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb8]
  succs [bb27]

bb10
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:73-815:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
      kind: _18 = <core::result::Result<(u128, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _19) -> [return: bb11, unwind: bb28]
  }
  preds [bb7]
  succs [bb11, bb28]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  1: PlaceMention(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  2: _21 = discriminant(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
      kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _18)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  1: _25 = ((_18 as Continue).0: (u128, usize))
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  2: _17 = _25
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  4: PlaceMention(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
  5: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:14-815:17)
  6: _15 = (_17.0: u128)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:14-815:17)
  7: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:19-815:21)
  8: _16 = (_17.1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:19-815:21)
  9: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:75-815:76)
  10: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:75-815:76)
  11: StorageLive(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:816:18-816:20)
  12: _26 = _16
    SourceInfo(regex-automata/src/util/alphabet.rs:816:18-816:20)
  13: _27 = AddWithOverflow(_14, _26)
    SourceInfo(regex-automata/src/util/alphabet.rs:816:9-816:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:816:9-816:20)
      kind: assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", _14, move _26) -> [success: bb17, unwind: bb28]
  }
  preds [bb11, bb13]
  succs [bb17, bb28]

bb15
  0: StorageLive(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  1: _22 = move ((_18 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  3: _24 = move _22
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:815:25-815:75)
      kind: _0 = <core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _24) -> [return: bb16, unwind: bb28]
  }
  preds [bb13]
  succs [bb16, bb28]

bb16
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:74-815:75)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:75-815:76)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:815:75-815:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb26
  }
  preds [bb15]
  succs [bb26]

bb17
  0: _14 = move (_27.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:816:9-816:20)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:816:19-816:20)
  2: StorageLive(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  3: StorageLive(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  4: StorageLive(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:76)
  5: StorageLive(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:46-817:51)
  6: _33 = &(*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:46-817:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:76)
      kind: _32 = util::wire::try_read_u128(move _33, const "byte set high bucket") -> [return: bb18, unwind: bb28]
  }
  preds [bb14]
  succs [bb18, bb28]

bb18
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:75-817:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
      kind: _31 = <core::result::Result<(u128, usize), util::wire::DeserializeError> as core::ops::Try>::branch(move _32) -> [return: bb19, unwind: bb28]
  }
  preds [bb17]
  succs [bb19, bb28]

bb19
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  1: PlaceMention(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  2: _34 = discriminant(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
      kind: switchInt(move _34) -> [0: bb22, 1: bb21, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb21, bb22]

bb20
  0: FakeRead(ForMatchedPlace(None), _31)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
      kind: unreachable
  }
  preds [bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
      kind: falseEdge -> [real: bb23, imaginary: bb22]
  }
  preds [bb19]
  succs [bb22, bb23]

bb22
  0: StorageLive(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  1: _38 = ((_31 as Continue).0: (u128, usize))
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  2: _30 = _38
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  3: StorageDead(_38)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  4: PlaceMention(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
  5: StorageLive(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:14-817:18)
  6: _28 = (_30.0: u128)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:14-817:18)
  7: StorageLive(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:20-817:22)
  8: _29 = (_30.1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:20-817:22)
  9: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:77-817:78)
  10: StorageDead(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:77-817:78)
  11: StorageLive(_39)
    SourceInfo(regex-automata/src/util/alphabet.rs:818:18-818:20)
  12: _39 = _29
    SourceInfo(regex-automata/src/util/alphabet.rs:818:18-818:20)
  13: _40 = AddWithOverflow(_14, _39)
    SourceInfo(regex-automata/src/util/alphabet.rs:818:9-818:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:818:9-818:20)
      kind: assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _14, move _39) -> [success: bb25, unwind: bb28]
  }
  preds [bb19, bb21]
  succs [bb25, bb28]

bb23
  0: StorageLive(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  1: _35 = move ((_31 as Break).0: core::result::Result<core::convert::Infallible, util::wire::DeserializeError>)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  2: StorageLive(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  3: _37 = move _35
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:817:26-817:77)
      kind: _0 = <core::result::Result<(util::alphabet::ByteSet, usize), util::wire::DeserializeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, util::wire::DeserializeError>>>::from_residual(move _37) -> [return: bb24, unwind: bb28]
  }
  preds [bb21]
  succs [bb24, bb28]

bb24
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:76-817:77)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:77-817:78)
  3: StorageDead(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:817:77-817:78)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  5: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb26
  }
  preds [bb23]
  succs [bb26]

bb25
  0: _14 = move (_40.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:818:9-818:20)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/util/alphabet.rs:818:19-818:20)
  2: StorageLive(_41)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:12-819:58)
  3: StorageLive(_42)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:13-819:50)
  4: StorageLive(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:29-819:48)
  5: StorageLive(_44)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:36-819:47)
  6: StorageLive(_45)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:37-819:40)
  7: _45 = _15
    SourceInfo(regex-automata/src/util/alphabet.rs:819:37-819:40)
  8: StorageLive(_46)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:42-819:46)
  9: _46 = _28
    SourceInfo(regex-automata/src/util/alphabet.rs:819:42-819:46)
  10: _44 = [move _45, move _46]
    SourceInfo(regex-automata/src/util/alphabet.rs:819:36-819:47)
  11: StorageDead(_46)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:46-819:47)
  12: StorageDead(_45)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:46-819:47)
  13: _43 = util::alphabet::BitSet(move _44)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:29-819:48)
  14: StorageDead(_44)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:47-819:48)
  15: _42 = util::alphabet::ByteSet { bits: move _43 }
    SourceInfo(regex-automata/src/util/alphabet.rs:819:13-819:50)
  16: StorageDead(_43)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:49-819:50)
  17: StorageLive(_47)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:52-819:57)
  18: _47 = _14
    SourceInfo(regex-automata/src/util/alphabet.rs:819:52-819:57)
  19: _41 = (move _42, move _47)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:12-819:58)
  20: StorageDead(_47)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:57-819:58)
  21: StorageDead(_42)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:57-819:58)
  22: _0 = core::result::Result::<(util::alphabet::ByteSet, usize), util::wire::DeserializeError>::Ok(move _41)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:9-819:59)
  23: StorageDead(_41)
    SourceInfo(regex-automata/src/util/alphabet.rs:819:58-819:59)
  24: StorageDead(_29)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  25: StorageDead(_28)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  26: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  27: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  28: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:820:6-820:6)
      kind: goto -> bb27
  }
  preds [bb22]
  succs [bb27]

bb26
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:820:5-820:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb16, bb24]
  succs [bb27]

bb27
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:820:6-820:6)
      kind: return
  }
  preds [bb9, bb25, bb26]
  succs []

bb28
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:808:5-820:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb7, bb8, bb10, bb14, bb15, bb17, bb18, bb22, bb23]
  succs []

