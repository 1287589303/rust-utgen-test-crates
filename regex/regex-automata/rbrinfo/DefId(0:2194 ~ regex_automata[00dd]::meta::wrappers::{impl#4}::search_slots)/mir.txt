bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/wrappers.rs:262:13-263:75)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/wrappers.rs:262:13-262:19)
  2: _6 = &((*_1).0: nfa::thompson::backtrack::BoundedBacktracker)
    SourceInfo(regex-automata/src/meta/wrappers.rs:262:13-262:19)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:60)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:60)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:51)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:42)
  7: _10 = &mut ((*_2).0: core::option::Option<nfa::thompson::backtrack::Cache>)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:51)
      kind: _9 = core::option::Option::<nfa::thompson::backtrack::Cache>::as_mut(move _10) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:50-263:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:60)
      kind: _8 = core::option::Option::<&mut nfa::thompson::backtrack::Cache>::unwrap(move _9) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _7 = &mut (*_8)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:35-263:60)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:59-263:60)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:62-263:67)
  3: _11 = &(*_3)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:62-263:67)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:69-263:74)
  5: _12 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:69-263:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/wrappers.rs:262:13-263:75)
      kind: _5 = nfa::thompson::backtrack::BoundedBacktracker::try_search_slots(move _6, move _7, move _11, move _12) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:74-263:75)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:74-263:75)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:74-263:75)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/wrappers.rs:263:74-263:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/wrappers.rs:262:13-264:26)
      kind: _0 = core::result::Result::<core::option::Option<util::primitives::PatternID>, util::search::MatchError>::unwrap(move _5) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/wrappers.rs:264:25-264:26)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/wrappers.rs:272:5-272:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/wrappers.rs:272:6-272:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/wrappers.rs:264:25-264:26)
      kind: drop(_5) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/wrappers.rs:251:5-272:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb5]
  succs []

