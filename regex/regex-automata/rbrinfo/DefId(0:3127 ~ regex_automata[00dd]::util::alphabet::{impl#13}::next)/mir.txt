bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:9-884:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:878:9-884:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:878:9-884:10)
      kind: falseUnwind -> [real: bb2, unwind: bb12]
  }
  preds [bb0, bb9]
  succs [bb2, bb12]

bb2
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:15-878:28)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:15-878:21)
  2: _5 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:15-878:21)
  3: _4 = Le(move _5, const 255_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:15-878:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:878:15-878:28)
      kind: switchInt(move _4) -> [0: bb10, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:27-878:28)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:879:17-879:18)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:879:21-879:41)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:879:34-879:40)
  4: _8 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:879:34-879:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:879:21-879:41)
      kind: _7 = <u8 as core::convert::TryFrom<usize>>::try_from(move _8) -> [return: bb4, unwind: bb12]
  }
  preds [bb2]
  succs [bb4, bb12]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:879:40-879:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:879:21-879:50)
      kind: _6 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _7) -> [return: bb5, unwind: bb12]
  }
  preds [bb3]
  succs [bb5, bb12]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:879:49-879:50)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/util/alphabet.rs:879:17-879:18)
  2: _9 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:880:13-880:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:880:13-880:24)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb6, unwind: bb12]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: ((*_1).1: usize) = move (_9.0: usize)
    SourceInfo(regex-automata/src/util/alphabet.rs:880:13-880:24)
  1: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:881:16-881:36)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:881:16-881:24)
  3: _11 = &(*((*_1).0: &util::alphabet::ByteSet))
    SourceInfo(regex-automata/src/util/alphabet.rs:881:16-881:24)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:881:34-881:35)
  5: _12 = _6
    SourceInfo(regex-automata/src/util/alphabet.rs:881:34-881:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:881:16-881:36)
      kind: _10 = util::alphabet::ByteSet::contains(move _11, move _12) -> [return: bb7, unwind: bb12]
  }
  preds [bb5]
  succs [bb7, bb12]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:881:16-881:36)
      kind: switchInt(move _10) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:881:35-881:36)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:881:35-881:36)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:882:29-882:30)
  3: _14 = _6
    SourceInfo(regex-automata/src/util/alphabet.rs:882:29-882:30)
  4: _0 = core::option::Option::<u8>::Some(move _14)
    SourceInfo(regex-automata/src/util/alphabet.rs:882:24-882:31)
  5: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:882:30-882:31)
  6: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:883:13-883:14)
  7: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  8: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  9: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:886:6-886:6)
      kind: goto -> bb11
  }
  preds [bb7]
  succs [bb11]

bb9
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:881:35-881:36)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:881:35-881:36)
  2: _3 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:883:14-883:14)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:883:13-883:14)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  5: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:878:9-884:10)
      kind: goto -> bb1
  }
  preds [bb7]
  succs [bb1]

bb10
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:27-878:28)
  1: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:878:9-884:10)
  2: _2 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:878:9-884:10)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:884:9-884:10)
  6: _0 = core::option::Option::<u8>::None
    SourceInfo(regex-automata/src/util/alphabet.rs:885:9-885:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:886:6-886:6)
      kind: goto -> bb11
  }
  preds [bb2]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:886:6-886:6)
      kind: return
  }
  preds [bb8, bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:877:5-886:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb5, bb6]
  succs []

