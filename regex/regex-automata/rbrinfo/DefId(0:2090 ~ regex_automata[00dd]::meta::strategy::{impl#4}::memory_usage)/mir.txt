bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-701:42)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-700:71)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-699:38)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-698:68)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-697:33)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-697:18)
  6: _7 = &((*_1).0: meta::regex::RegexInfo)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-697:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:697:9-697:33)
      kind: _6 = meta::regex::RegexInfo::memory_usage(move _7) -> [return: bb1, unwind: bb14]
  }
  preds []
  succs [bb1, bb14]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:32-697:33)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:15-698:68)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:15-698:32)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:15-698:23)
  4: _10 = &((*_1).1: core::option::Option<util::prefilter::Prefilter>)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:15-698:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:698:15-698:32)
      kind: _9 = core::option::Option::<util::prefilter::Prefilter>::as_ref(move _10) -> [return: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:31-698:32)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:43-698:67)
  2: _11 = {closure@regex-automata/src/meta/strategy.rs:698:43: 698:48}
    SourceInfo(regex-automata/src/meta/strategy.rs:698:43-698:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:698:15-698:68)
      kind: _8 = core::option::Option::<&util::prefilter::Prefilter>::map_or::<usize, {closure@regex-automata/src/meta/strategy.rs:698:43: 698:48}>(move _9, const 0_usize, move _11) -> [return: bb3, unwind: bb14]
  }
  preds [bb1]
  succs [bb3, bb14]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:67-698:68)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:67-698:68)
  2: _12 = AddWithOverflow(_6, _8)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-698:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:697:9-698:68)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _8) -> [success: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: _5 = move (_12.0: usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-698:68)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:67-698:68)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:698:67-698:68)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:699:15-699:38)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:699:15-699:23)
  5: _14 = &((*_1).2: nfa::thompson::nfa::NFA)
    SourceInfo(regex-automata/src/meta/strategy.rs:699:15-699:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:699:15-699:38)
      kind: _13 = nfa::thompson::nfa::NFA::memory_usage(move _14) -> [return: bb5, unwind: bb14]
  }
  preds [bb3]
  succs [bb5, bb14]

bb5
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:699:37-699:38)
  1: _15 = AddWithOverflow(_5, _13)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-699:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:697:9-699:38)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _13) -> [success: bb6, unwind: bb14]
  }
  preds [bb4]
  succs [bb6, bb14]

bb6
  0: _4 = move (_15.0: usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-699:38)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:699:37-699:38)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:699:37-699:38)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:15-700:71)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:15-700:35)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:15-700:26)
  6: _18 = &((*_1).3: core::option::Option<nfa::thompson::nfa::NFA>)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:15-700:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:700:15-700:35)
      kind: _17 = core::option::Option::<nfa::thompson::nfa::NFA>::as_ref(move _18) -> [return: bb7, unwind: bb14]
  }
  preds [bb5]
  succs [bb7, bb14]

bb7
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:34-700:35)
  1: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:46-700:70)
  2: _19 = {closure@regex-automata/src/meta/strategy.rs:700:46: 700:51}
    SourceInfo(regex-automata/src/meta/strategy.rs:700:46-700:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:700:15-700:71)
      kind: _16 = core::option::Option::<&nfa::thompson::nfa::NFA>::map_or::<usize, {closure@regex-automata/src/meta/strategy.rs:700:46: 700:51}>(move _17, const 0_usize, move _19) -> [return: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:70-700:71)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:70-700:71)
  2: _20 = AddWithOverflow(_4, _16)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-700:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:697:9-700:71)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _16) -> [success: bb9, unwind: bb14]
  }
  preds [bb7]
  succs [bb9, bb14]

bb9
  0: _3 = move (_20.0: usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-700:71)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:70-700:71)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:700:70-700:71)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:701:15-701:42)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:701:15-701:27)
  5: _22 = &((*_1).6: meta::wrappers::OnePass)
    SourceInfo(regex-automata/src/meta/strategy.rs:701:15-701:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:701:15-701:42)
      kind: _21 = meta::wrappers::OnePass::memory_usage(move _22) -> [return: bb10, unwind: bb14]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:701:41-701:42)
  1: _23 = AddWithOverflow(_3, _21)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-701:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:697:9-701:42)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _21) -> [success: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: _2 = move (_23.0: usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-701:42)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:701:41-701:42)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:701:41-701:42)
  3: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:702:15-702:38)
  4: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:702:15-702:23)
  5: _25 = &((*_1).8: meta::wrappers::DFA)
    SourceInfo(regex-automata/src/meta/strategy.rs:702:15-702:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:702:15-702:38)
      kind: _24 = meta::wrappers::DFA::memory_usage(move _25) -> [return: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:702:37-702:38)
  1: _26 = AddWithOverflow(_2, _24)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-702:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:697:9-702:38)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _24) -> [success: bb13, unwind: bb14]
  }
  preds [bb11]
  succs [bb13, bb14]

bb13
  0: _0 = move (_26.0: usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:697:9-702:38)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:702:37-702:38)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:702:37-702:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:703:6-703:6)
      kind: return
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:696:5-703:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12]
  succs []

