bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:9-76:33)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:9-76:18)
  2: _3 = &((*_1).0: util::sparse_set::SparseSet)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:9-76:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:76:9-76:33)
      kind: _2 = util::sparse_set::SparseSet::memory_usage(move _3) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:32-76:33)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:36-76:60)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:36-76:45)
  3: _5 = &((*_1).1: util::sparse_set::SparseSet)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:36-76:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:76:36-76:60)
      kind: _4 = util::sparse_set::SparseSet::memory_usage(move _5) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:59-76:60)
  1: _6 = AddWithOverflow(_2, _4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:9-76:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:76:9-76:60)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _4) -> [success: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: _0 = move (_6.0: usize)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:9-76:60)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:59-76:60)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:76:59-76:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:77:6-77:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:75:5-77:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

