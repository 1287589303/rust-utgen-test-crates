bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:13-100:61)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:29-100:35)
  2: _5 = ((*_1).0: u8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:29-100:35)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:37-100:43)
  4: _6 = ((*_1).1: u8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:37-100:43)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:45-100:60)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:45-100:60)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:54-100:60)
  8: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:46-100:54)
  9: _10 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:46-100:54)
  10: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:55-100:59)
  11: _11 = _3
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:55-100:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:54-100:60)
      kind: _9 = <[u8] as core::ops::Index<util::search::Span>>::index(move _10, move _11) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:59-100:60)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:59-100:60)
  2: _8 = &(*_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:45-100:60)
  3: _7 = &(*_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:45-100:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:13-100:61)
      kind: _4 = memchr::memchr2(move _5, move _6, move _7) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:60-100:61)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:60-100:61)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:60-100:61)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:66-104:14)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:66-104:14)
  5: _13 = &(_3.0: usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:66-104:14)
  6: _12 = {closure@regex-automata/src/util/prefilter/memchr.rs:100:66: 100:69} { span: move _13 }
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:66-104:14)
  7: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:68-100:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:100:13-104:15)
      kind: _0 = core::option::Option::<usize>::map::<util::search::Span, {closure@regex-automata/src/util/prefilter/memchr.rs:100:66: 100:69}>(move _4, move _12) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:104:14-104:15)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:104:14-104:15)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:106:5-106:6)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:106:5-106:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:106:6-106:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:93:5-106:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

