bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:431:14-431:28)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:431:14-431:18)
  2: _3 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:431:14-431:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:431:14-431:28)
      kind: _2 = hybrid::dfa::DFA::stride2(move _3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:431:27-431:28)
  1: _4 = Lt(_2, const 64_usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:431:9-431:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:431:9-431:28)
      kind: assert(move _4, "attempt to shift left by `{}`, which would overflow", _2) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = Shl(const 1_usize, move _2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:431:9-431:28)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:431:27-431:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:432:6-432:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:430:5-432:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

