bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:20:17-20:24)
  1: _3 = [const false; 256]
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:20:27-20:39)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:20:17-20:24)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:13-27:14)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  5: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  6: StorageLive(_7)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:34)
  7: _7 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
      kind: _6 = core::slice::<impl [B]>::iter(move _7) -> [return: bb1, unwind: bb18]
  }
  preds []
  succs [bb1, bb18]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:40-21:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
      kind: _5 = <core::slice::Iter<'_, B> as core::iter::IntoIterator>::into_iter(move _6) -> [return: bb2, unwind: bb18]
  }
  preds [bb0]
  succs [bb2, bb18]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:40-21:41)
  1: PlaceMention(_5)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  3: _8 = move _5
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:13-27:14)
      kind: goto -> bb3
  }
  preds [bb1]
  succs [bb3]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:13-27:14)
      kind: falseUnwind -> [real: bb4, unwind: bb18]
  }
  preds [bb2, bb16]
  succs [bb4, bb18]

bb4
  0: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  2: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  4: _13 = &mut _8
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  5: _12 = &mut (*_13)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
      kind: _11 = <core::slice::Iter<'_, B> as core::iter::Iterator>::next(move _12) -> [return: bb5, unwind: bb18]
  }
  preds [bb3]
  succs [bb5, bb18]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:40-21:41)
  1: PlaceMention(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  2: _14 = discriminant(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
      kind: switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:27-21:41)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:13-27:14)
      kind: falseEdge -> [real: bb9, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:17-21:23)
  1: _16 = ((_11 as Some).0: &B)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:17-21:23)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:22:21-22:27)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:22:30-22:36)
  4: _18 = &(*_16)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:22:30-22:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:22:30-22:45)
      kind: _17 = <B as core::convert::AsRef<[u8]>>::as_ref(move _18) -> [return: bb10, unwind: bb18]
  }
  preds [bb5, bb7]
  succs [bb10, bb18]

bb9
  0: _4 = const ()
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:13-27:14)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  3: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  7: StorageLive(_31)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:28:18-28:30)
  8: StorageLive(_32)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:28:26-28:29)
  9: _32 = _3
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:28:26-28:29)
  10: _31 = util::prefilter::byteset::ByteSet(move _32)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:28:18-28:30)
  11: StorageDead(_32)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:28:29-28:30)
  12: _0 = core::option::Option::<util::prefilter::byteset::ByteSet>::Some(move _31)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:28:13-28:31)
  13: StorageDead(_31)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:28:30-28:31)
  14: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:29:9-29:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:30:6-30:6)
      kind: goto -> bb17
  }
  preds [bb7]
  succs [bb17]

bb10
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:22:44-22:45)
  1: FakeRead(ForLet(None), _17)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:22:21-22:27)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:17-25:18)
  3: StorageLive(_20)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:20-23:37)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:20-23:32)
  5: StorageLive(_22)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:20-23:26)
  6: _22 = &(*_17)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:20-23:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:20-23:32)
      kind: _21 = core::slice::<impl [u8]>::len(move _22) -> [return: bb11, unwind: bb18]
  }
  preds [bb8]
  succs [bb11, bb18]

bb11
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:31-23:32)
  1: _20 = Ne(move _21, const 1_usize)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:20-23:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:20-23:37)
      kind: switchInt(move _20) -> [0: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13]

bb12
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:36-23:37)
  1: _0 = core::option::Option::<util::prefilter::byteset::ByteSet>::None
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:24:28-24:32)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:25:17-25:18)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:25:17-25:18)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  5: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  6: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  7: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  8: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  9: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  10: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  11: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  12: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:29:9-29:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:30:6-30:6)
      kind: goto -> bb17
  }
  preds [bb11]
  succs [bb17]

bb13
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:23:36-23:37)
  1: _19 = const ()
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:25:18-25:18)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:25:17-25:18)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:25:17-25:18)
  4: StorageLive(_24)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:21-26:43)
  5: StorageLive(_25)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:33-26:42)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:40-26:41)
  7: _26 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:40-26:41)
  8: _27 = Len((*_17))
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:33-26:42)
  9: _28 = Lt(_26, _27)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:33-26:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:33-26:42)
      kind: assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> [success: bb14, unwind: bb18]
  }
  preds [bb11]
  succs [bb14, bb18]

bb14
  0: _25 = (*_17)[_26]
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:33-26:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:21-26:43)
      kind: _24 = <usize as core::convert::From<u8>>::from(move _25) -> [return: bb15, unwind: bb18]
  }
  preds [bb13]
  succs [bb15, bb18]

bb15
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:42-26:43)
  1: _29 = Len(_3)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:17-26:44)
  2: _30 = Lt(_24, _29)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:17-26:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:17-26:44)
      kind: assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _24) -> [success: bb16, unwind: bb18]
  }
  preds [bb14]
  succs [bb16, bb18]

bb16
  0: _3[_24] = const true
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:17-26:51)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:51-26:52)
  2: StorageDead(_24)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:26:51-26:52)
  3: _10 = const ()
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:42-27:14)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  5: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  6: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  7: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  8: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:27:13-27:14)
  9: _9 = const ()
    SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:13-27:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:21:13-27:14)
      kind: goto -> bb3
  }
  preds [bb15]
  succs [bb3]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:30:6-30:6)
      kind: return
  }
  preds [bb9, bb12]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/byteset.rs:10:5-30:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb8, bb10, bb13, bb14, bb15]
  succs []

