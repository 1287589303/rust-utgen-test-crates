bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:9-271:10)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:12-269:27)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:12-269:13)
  3: _5 = _2
    SourceInfo(regex-automata/src/dfa/accel.rs:269:12-269:13)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:17-269:27)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:17-269:21)
  6: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:17-269:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:269:17-269:27)
      kind: _6 = dfa::accel::Accels::<A>::len(move _7) -> [return: bb1, unwind: bb15]
  }
  preds []
  succs [bb1, bb15]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:26-269:27)
  1: _4 = Ge(move _5, move _6)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:12-269:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:269:12-269:27)
      kind: switchInt(move _4) -> [0: bb5, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:26-269:27)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:26-269:27)
  2: StorageLive(_10)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  3: StorageLive(_11)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:20-270:50)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:20-270:50)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:20-270:50)
  7: _14 = [const "invalid accelerator index "]
    SourceInfo(regex-automata/src/dfa/accel.rs:270:20-270:50)
  8: _13 = &_14
    SourceInfo(regex-automata/src/dfa/accel.rs:270:20-270:50)
  9: _12 = &(*_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:20-270:50)
  10: StorageLive(_15)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  11: StorageLive(_16)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  12: StorageLive(_17)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  13: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:47-270:49)
  14: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:52-270:53)
  15: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:52-270:53)
  16: _20 = &_2
    SourceInfo(regex-automata/src/dfa/accel.rs:270:52-270:53)
  17: _19 = &(*_20)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:52-270:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:270:47-270:49)
      kind: _18 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _19) -> [return: bb3, unwind: bb15]
  }
  preds [bb1]
  succs [bb3, bb15]

bb3
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/accel.rs:270:48-270:49)
  1: _17 = [move _18]
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  2: StorageDead(_18)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  3: _16 = &_17
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: _15 = &(*_16)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _11 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _12, move _15) -> [return: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: StorageDead(_15)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  1: StorageDead(_12)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _10 = core::panicking::panic_fmt(move _11) -> bb15
  }
  preds [bb3]
  succs [bb15]

bb5
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:26-269:27)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:269:26-269:27)
  2: _3 = const ()
    SourceInfo(regex-automata/src/dfa/accel.rs:271:10-271:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:271:9-271:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:271:9-271:10)
  5: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:272:13-272:18)
  6: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/accel.rs:272:21-272:25)
  7: _22 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:272:21-272:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:272:21-272:36)
      kind: _21 = dfa::accel::Accels::<A>::as_bytes(move _22) -> [return: bb6, unwind: bb15]
  }
  preds [bb1]
  succs [bb6, bb15]

bb6
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/accel.rs:272:35-272:36)
  1: FakeRead(ForLet(None), _21)
    SourceInfo(regex-automata/src/dfa/accel.rs:272:13-272:18)
  2: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:13-273:19)
  3: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:38-273:51)
  4: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:38-273:39)
  5: _25 = _2
    SourceInfo(regex-automata/src/dfa/accel.rs:273:38-273:39)
  6: _26 = MulWithOverflow(_25, const dfa::accel::ACCEL_CAP)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:38-273:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:273:38-273:51)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", move _25, const dfa::accel::ACCEL_CAP) -> [success: bb7, unwind: bb15]
  }
  preds [bb5]
  succs [bb7, bb15]

bb7
  0: _24 = move (_26.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:38-273:51)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:50-273:51)
  2: _27 = AddWithOverflow(const dfa::accel::ACCEL_TY_SIZE, _24)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:22-273:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:273:22-273:51)
      kind: assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", const dfa::accel::ACCEL_TY_SIZE, move _24) -> [success: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: _23 = move (_27.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:22-273:51)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:50-273:51)
  2: FakeRead(ForLet(None), _23)
    SourceInfo(regex-automata/src/dfa/accel.rs:273:13-273:19)
  3: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/accel.rs:274:13-274:16)
  4: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/accel.rs:274:31-274:44)
  5: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/accel.rs:274:37-274:43)
  6: _30 = _23
    SourceInfo(regex-automata/src/dfa/accel.rs:274:37-274:43)
  7: _31 = Len((*_21))
    SourceInfo(regex-automata/src/dfa/accel.rs:274:31-274:44)
  8: _32 = Lt(_30, _31)
    SourceInfo(regex-automata/src/dfa/accel.rs:274:31-274:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:274:31-274:44)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: _29 = (*_21)[_30]
    SourceInfo(regex-automata/src/dfa/accel.rs:274:31-274:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:274:19-274:45)
      kind: _28 = <usize as core::convert::From<u8>>::from(move _29) -> [return: bb10, unwind: bb15]
  }
  preds [bb8]
  succs [bb10, bb15]

bb10
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/accel.rs:274:44-274:45)
  1: FakeRead(ForLet(None), _28)
    SourceInfo(regex-automata/src/dfa/accel.rs:274:13-274:16)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/accel.rs:274:45-274:46)
  3: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:9-275:45)
  4: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:15-275:45)
  5: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:10-275:15)
  6: _35 = &(*_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:10-275:15)
  7: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:44)
  8: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:26)
  9: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:22)
  10: _38 = _23
    SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:22)
  11: _39 = AddWithOverflow(_38, const 1_usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:26)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, const 1_usize) -> [success: bb11, unwind: bb15]
  }
  preds [bb9]
  succs [bb11, bb15]

bb11
  0: _37 = move (_39.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:26)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:25-275:26)
  2: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:44)
  3: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:38)
  4: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:34)
  5: _42 = _23
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:34)
  6: _43 = AddWithOverflow(_42, const 1_usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:38)
      kind: assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _42, const 1_usize) -> [success: bb12, unwind: bb15]
  }
  preds [bb10]
  succs [bb12, bb15]

bb12
  0: _41 = move (_43.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:38)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:37-275:38)
  2: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:41-275:44)
  3: _44 = _28
    SourceInfo(regex-automata/src/dfa/accel.rs:275:41-275:44)
  4: _45 = AddWithOverflow(_41, _44)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:44)
      kind: assert(!move (_45.1: bool), "attempt to compute `{} + {}`, which would overflow", move _41, move _44) -> [success: bb13, unwind: bb15]
  }
  preds [bb11]
  succs [bb13, bb15]

bb13
  0: _40 = move (_45.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:28-275:44)
  1: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:43-275:44)
  2: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:43-275:44)
  3: _36 = core::ops::Range::<usize> { start: move _37, end: move _40 }
    SourceInfo(regex-automata/src/dfa/accel.rs:275:16-275:44)
  4: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:43-275:44)
  5: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:43-275:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:275:15-275:45)
      kind: _34 = <[u8] as core::ops::Index<core::ops::Range<usize>>>::index(move _35, move _36) -> [return: bb14, unwind: bb15]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:44-275:45)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:44-275:45)
  2: _33 = &(*_34)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:9-275:45)
  3: _0 = &(*_33)
    SourceInfo(regex-automata/src/dfa/accel.rs:275:9-275:45)
  4: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/accel.rs:276:5-276:6)
  5: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/accel.rs:276:5-276:6)
  6: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:276:5-276:6)
  7: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/accel.rs:276:5-276:6)
  8: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/accel.rs:276:5-276:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:276:6-276:6)
      kind: return
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:268:5-276:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13]
  succs []

