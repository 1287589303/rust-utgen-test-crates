bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:41)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:25)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:19)
  3: _4 = &((*_1).1: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:25)
      kind: _3 = std::vec::Vec::<util::primitives::StateID>::len(move _4) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:24-215:25)
  1: _5 = MulWithOverflow(_3, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:41)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const util::primitives::StateID::SIZE) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _2 = move (_5.0: usize)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:41)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:40-215:41)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:77)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:61)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:55)
  5: _8 = &((*_1).2: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:61)
      kind: _7 = std::vec::Vec::<util::primitives::StateID>::len(move _8) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:60-215:61)
  1: _9 = MulWithOverflow(_7, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:77)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const util::primitives::StateID::SIZE) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _6 = move (_9.0: usize)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:44-215:77)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:76-215:77)
  2: _10 = AddWithOverflow(_2, _6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:77)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _6) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _0 = move (_10.0: usize)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:9-215:77)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:76-215:77)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/util/sparse_set.rs:215:76-215:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:216:6-216:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/sparse_set.rs:214:5-216:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

