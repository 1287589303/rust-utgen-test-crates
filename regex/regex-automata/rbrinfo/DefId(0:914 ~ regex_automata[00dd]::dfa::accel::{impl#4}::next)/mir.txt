bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:13-369:18)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:44)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:32)
  4: _5 = &(*((*_1).0: &dfa::accel::Accels<A>))
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:32)
  5: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:37-369:43)
  6: _6 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:37-369:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:44)
      kind: _4 = dfa::accel::Accels::<A>::get(move _5, move _6) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:43-369:44)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:43-369:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
      kind: _3 = <core::option::Option<dfa::accel::Accel> as core::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
  2: _7 = discriminant(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
      kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
  1: _11 = move ((_3 as Continue).0: dfa::accel::Accel)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
  2: _2 = move _11
    SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  4: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:13-369:18)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:45-369:46)
  6: _12 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:370:9-370:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:370:9-370:20)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb8, unwind: bb10]
  }
  preds [bb2, bb4]
  succs [bb8, bb10]

bb6
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  1: _8 = ((_3 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  3: _10 = _8
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:369:21-369:45)
      kind: _0 = <core::option::Option<dfa::accel::Accel> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _10) -> [return: bb7, unwind: bb10]
  }
  preds [bb4]
  succs [bb7, bb10]

bb7
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:44-369:45)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:369:45-369:46)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:372:5-372:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:372:6-372:6)
      kind: goto -> bb9
  }
  preds [bb6]
  succs [bb9]

bb8
  0: ((*_1).1: usize) = move (_12.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:370:9-370:20)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:371:14-371:19)
  2: _13 = move _2
    SourceInfo(regex-automata/src/dfa/accel.rs:371:14-371:19)
  3: _0 = core::option::Option::<dfa::accel::Accel>::Some(move _13)
    SourceInfo(regex-automata/src/dfa/accel.rs:371:9-371:20)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/accel.rs:371:19-371:20)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:372:5-372:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:372:6-372:6)
      kind: goto -> bb9
  }
  preds [bb5]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:372:6-372:6)
      kind: return
  }
  preds [bb7, bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:368:5-372:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb6]
  succs []

