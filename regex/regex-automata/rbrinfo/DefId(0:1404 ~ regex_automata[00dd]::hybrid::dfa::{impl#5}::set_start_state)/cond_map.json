{
  "regex-automata/src/hybrid/dfa.rs:2631:17:2631:72": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(2 * Start::len()) + (Start::len() * pid) + start_index",
          "lhs": "(2 * Start::len()) + (Start::len() * pid)",
          "rhs": "start_index",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2626:21:2626:72": [
    {
      "Bool": {
        "Other": "self.dfa.get_config().get_starts_for_each_pattern()"
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2619:17:2619:43": [
    {
      "Bool": {
        "Other": "self.as_ref().is_valid(id)"
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2621:27:2621:35": [
    {
      "Match": {
        "match_source": "regex-automata/src/hybrid/dfa.rs:2621:27:2621:35",
        "match_str": "anchored",
        "match_kind": {
          "Enum": [
            "No",
            "Yes",
            "Pattern"
          ]
        },
        "arms": {
          "regex-automata/src/hybrid/dfa.rs:2623:13:2623:26": {
            "pat": {
              "pat_str": "Anchored::Yes",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/dfa.rs:2623:30:2623:56"
          },
          "regex-automata/src/hybrid/dfa.rs:2622:13:2622:25": {
            "pat": {
              "pat_str": "Anchored::No",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/dfa.rs:2622:29:2622:40"
          },
          "regex-automata/src/hybrid/dfa.rs:2624:13:2624:35": {
            "pat": {
              "pat_str": "Anchored::Pattern(pid)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/dfa.rs:2624:39:2632:14"
          }
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2631:17:2631:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(2 * Start::len())",
          "lhs": "2",
          "rhs": "Start::len()",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2631:38:2631:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(Start::len() * pid)",
          "lhs": "Start::len()",
          "rhs": "pid",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2631:17:2631:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(2 * Start::len()) + (Start::len() * pid)",
          "lhs": "(2 * Start::len())",
          "rhs": "(Start::len() * pid)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/dfa.rs:2623:30:2623:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "Start::len() + start_index",
          "lhs": "Start::len()",
          "rhs": "start_index",
          "cmp_with_int": false
        }
      }
    }
  ]
}