bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:9-2619:44)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:43)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:30)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:30)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:21)
  5: _9 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:30)
      kind: _8 = hybrid::dfa::Lazy::<'_, '_>::as_ref(move _9) -> [return: bb1, unwind: bb28]
  }
  preds []
  succs [bb1, bb28]

bb1
  0: _7 = &_8
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:30)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:29-2619:30)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:40-2619:42)
  3: _10 = _4
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:40-2619:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:43)
      kind: _6 = hybrid::dfa::LazyRef::<'_, '_>::is_valid(move _7, move _10) -> [return: bb2, unwind: bb28]
  }
  preds [bb0]
  succs [bb2, bb28]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:17-2619:43)
      kind: switchInt(move _6) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:42-2619:43)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:42-2619:43)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:43-2619:44)
  3: _5 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:44-2619:44)
  4: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:43-2619:44)
  5: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:43-2619:44)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2620:13-2620:24)
  7: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2620:27-2620:32)
  8: _13 = &_3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2620:27-2620:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2620:27-2620:43)
      kind: _12 = util::start::Start::as_usize(move _13) -> [return: bb5, unwind: bb28]
  }
  preds [bb2]
  succs [bb5, bb28]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:42-2619:43)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:42-2619:43)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:43-2619:44)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:9-2619:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2619:9-2619:44)
      kind: _11 = core::panicking::panic(const "assertion failed: self.as_ref().is_valid(id)") -> bb28
  }
  preds [bb2]
  succs [bb28]

bb5
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2620:42-2620:43)
  1: FakeRead(ForLet(None), _12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2620:13-2620:24)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2621:13-2621:18)
  3: PlaceMention(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2621:27-2621:35)
  4: _15 = discriminant(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2621:27-2621:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2621:21-2621:35)
      kind: switchInt(move _15) -> [0: bb7, 1: bb8, 2: bb9, otherwise: bb6]
  }
  preds [bb3]
  succs [bb6, bb7, bb8, bb9]

bb6
  0: FakeRead(ForMatchedPlace(None), _2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2621:27-2621:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2621:27-2621:35)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2622:13-2622:25)
      kind: falseEdge -> [real: bb10, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb10]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:13-2623:26)
      kind: falseEdge -> [real: bb11, imaginary: bb9]
  }
  preds [bb5, bb7]
  succs [bb9, bb11]

bb9
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2624:31-2624:34)
  1: _19 = ((_2 as Pattern).0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2624:31-2624:34)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2625:17-2629:18)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:72)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:42)
  5: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:42)
  6: StorageLive(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:29)
  7: _24 = &(*((*_1).0: &hybrid::dfa::DFA))
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:42)
      kind: _23 = hybrid::dfa::DFA::get_config(move _24) -> [return: bb14, unwind: bb28]
  }
  preds [bb5, bb8]
  succs [bb14, bb28]

bb10
  0: _14 = _12
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2622:29-2622:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2622:29-2622:40)
      kind: goto -> bb26
  }
  preds [bb7]
  succs [bb26]

bb11
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:30-2623:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:30-2623:42)
      kind: _16 = util::start::Start::len() -> [return: bb12, unwind: bb28]
  }
  preds [bb8]
  succs [bb12, bb28]

bb12
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:45-2623:56)
  1: _17 = _12
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:45-2623:56)
  2: _18 = AddWithOverflow(_16, _17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:30-2623:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:30-2623:56)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, move _17) -> [success: bb13, unwind: bb28]
  }
  preds [bb11]
  succs [bb13, bb28]

bb13
  0: _14 = move (_18.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:30-2623:56)
  1: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:55-2623:56)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:55-2623:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2623:55-2623:56)
      kind: goto -> bb26
  }
  preds [bb12]
  succs [bb26]

bb14
  0: _22 = &(*_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:42)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:41-2626:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:72)
      kind: _21 = hybrid::dfa::Config::get_starts_for_each_pattern(move _22) -> [return: bb15, unwind: bb28]
  }
  preds [bb9]
  succs [bb15, bb28]

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:21-2626:72)
      kind: switchInt(move _21) -> [0: bb17, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb17]

bb16
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:71-2626:72)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2629:17-2629:18)
  2: _20 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2629:18-2629:18)
  3: StorageDead(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2629:17-2629:18)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2629:17-2629:18)
  5: StorageLive(_31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2630:21-2630:24)
  6: StorageLive(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2630:27-2630:30)
  7: _32 = &_19
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2630:27-2630:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2630:27-2630:41)
      kind: _31 = util::primitives::PatternID::as_usize(move _32) -> [return: bb19, unwind: bb28]
  }
  preds [bb15]
  succs [bb19, bb28]

bb17
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2626:71-2626:72)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2629:17-2629:18)
  2: StorageLive(_26)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  3: StorageLive(_27)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: StorageLive(_28)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2627:21-2628:63)
  5: StorageLive(_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2627:21-2628:63)
  6: StorageLive(_30)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2627:21-2628:63)
  7: _30 = [const "attempted to search for a specific pattern without enabling starts_for_each_pattern"]
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2627:21-2628:63)
  8: _29 = &_30
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2627:21-2628:63)
  9: _28 = &(*_29)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2627:21-2628:63)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _27 = core::fmt::Arguments::<'_>::new_const::<1>(move _28) -> [return: bb18, unwind: bb28]
  }
  preds [bb15]
  succs [bb18, bb28]

bb18
  0: StorageDead(_28)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _26 = core::panicking::panic_fmt(move _27) -> bb28
  }
  preds [bb17]
  succs [bb28]

bb19
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2630:40-2630:41)
  1: FakeRead(ForLet(None), _31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2630:21-2630:24)
  2: StorageLive(_33)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:58)
  3: StorageLive(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:35)
  4: StorageLive(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:22-2631:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:22-2631:34)
      kind: _35 = util::start::Start::len() -> [return: bb20, unwind: bb28]
  }
  preds [bb16]
  succs [bb20, bb28]

bb20
  0: _36 = MulWithOverflow(const 2_usize, _35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:35)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _35) -> [success: bb21, unwind: bb28]
  }
  preds [bb19]
  succs [bb21, bb28]

bb21
  0: _34 = move (_36.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:35)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:34-2631:35)
  2: StorageLive(_37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:38-2631:58)
  3: StorageLive(_38)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:39-2631:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:39-2631:51)
      kind: _38 = util::start::Start::len() -> [return: bb22, unwind: bb28]
  }
  preds [bb20]
  succs [bb22, bb28]

bb22
  0: StorageLive(_39)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:54-2631:57)
  1: _39 = _31
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:54-2631:57)
  2: _40 = MulWithOverflow(_38, _39)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:38-2631:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:38-2631:58)
      kind: assert(!move (_40.1: bool), "attempt to compute `{} * {}`, which would overflow", move _38, move _39) -> [success: bb23, unwind: bb28]
  }
  preds [bb21]
  succs [bb23, bb28]

bb23
  0: _37 = move (_40.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:38-2631:58)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:57-2631:58)
  2: StorageDead(_38)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:57-2631:58)
  3: _41 = AddWithOverflow(_34, _37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:58)
      kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _34, move _37) -> [success: bb24, unwind: bb28]
  }
  preds [bb22]
  succs [bb24, bb28]

bb24
  0: _33 = move (_41.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:58)
  1: StorageDead(_37)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:57-2631:58)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:57-2631:58)
  3: StorageLive(_42)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:61-2631:72)
  4: _42 = _12
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:61-2631:72)
  5: _43 = AddWithOverflow(_33, _42)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:72)
      kind: assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _33, move _42) -> [success: bb25, unwind: bb28]
  }
  preds [bb23]
  succs [bb25, bb28]

bb25
  0: _14 = move (_43.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:17-2631:72)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:71-2631:72)
  2: StorageDead(_33)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2631:71-2631:72)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2632:13-2632:14)
  4: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2632:13-2632:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2632:13-2632:14)
      kind: goto -> bb26
  }
  preds [bb24]
  succs [bb26]

bb26
  0: FakeRead(ForLet(None), _14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2621:13-2621:18)
  1: StorageLive(_44)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:36-2634:38)
  2: _44 = _4
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:36-2634:38)
  3: StorageLive(_45)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:26-2634:33)
  4: StorageLive(_46)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:9-2634:26)
  5: _46 = &mut ((*((*_1).1: &mut hybrid::dfa::Cache)).1: std::vec::Vec<hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:9-2634:26)
  6: StorageLive(_47)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:27-2634:32)
  7: _47 = _14
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:27-2634:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:26-2634:33)
      kind: _45 = <std::vec::Vec<hybrid::id::LazyStateID> as core::ops::IndexMut<usize>>::index_mut(move _46, move _47) -> [return: bb27, unwind: bb28]
  }
  preds [bb10, bb13, bb25]
  succs [bb27, bb28]

bb27
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:32-2634:33)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:32-2634:33)
  2: (*_45) = move _44
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:9-2634:38)
  3: StorageDead(_44)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:37-2634:38)
  4: StorageDead(_45)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2634:38-2634:39)
  5: _0 = const ()
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2618:7-2635:6)
  6: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2635:5-2635:6)
  7: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2635:5-2635:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2635:6-2635:6)
      kind: return
  }
  preds [bb26]
  succs []

bb28
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2613:5-2635:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb9, bb11, bb12, bb14, bb16, bb17, bb18, bb19, bb20, bb21, bb22, bb23, bb24, bb26]
  succs []

