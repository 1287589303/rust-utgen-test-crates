bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:9-3687:22)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:9-3687:11)
  2: _4 = &_2
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:9-3687:11)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3687:9-3687:22)
      kind: _3 = util::primitives::StateID::as_usize(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:21-3687:22)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:26-3687:38)
  2: _5 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:26-3687:38)
  3: _6 = Lt(_5, const 64_usize)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:9-3687:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3687:9-3687:38)
      kind: assert(move _6, "attempt to shift right by `{}`, which would overflow", _5) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = Shr(move _3, move _5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:9-3687:38)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:37-3687:38)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/dense.rs:3687:37-3687:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3688:6-3688:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/dense.rs:3686:5-3688:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

