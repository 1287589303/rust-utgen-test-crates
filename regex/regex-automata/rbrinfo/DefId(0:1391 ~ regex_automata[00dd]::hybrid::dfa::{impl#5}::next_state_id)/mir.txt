bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:13-2320:16)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:25-2320:65)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:42-2320:64)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:42-2320:58)
  4: _5 = &((*((*_1).1: &mut hybrid::dfa::Cache)).0: std::vec::Vec<hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:42-2320:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:42-2320:64)
      kind: _4 = std::vec::Vec::<hybrid::id::LazyStateID>::len(move _5) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:63-2320:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:25-2320:65)
      kind: _3 = hybrid::id::LazyStateID::new(move _4) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:64-2320:65)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:25-2320:65)
  2: _6 = discriminant(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:25-2320:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:19-2320:65)
      kind: switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:25-2320:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:25-2320:65)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2321:13-2321:20)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:39)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:21)
  4: _11 = &mut (*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:39)
      kind: _10 = hybrid::dfa::Lazy::<'_, '_>::try_clear_cache(move _11) -> [return: bb7, unwind: bb19]
  }
  preds [bb2, bb4]
  succs [bb7, bb19]

bb6
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2321:16-2321:19)
  1: _7 = ((_3 as Ok).0: hybrid::id::LazyStateID)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2321:16-2321:19)
  2: _2 = _7
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2321:24-2321:27)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2321:26-2321:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2321:26-2321:27)
      kind: goto -> bb17
  }
  preds [bb4]
  succs [bb17]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:38-2323:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
      kind: _9 = <core::result::Result<(), hybrid::error::CacheError> as core::ops::Try>::branch(move _10) -> [return: bb8, unwind: bb19]
  }
  preds [bb5]
  succs [bb8, bb19]

bb8
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  1: PlaceMention(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  2: _12 = discriminant(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
      kind: switchInt(move _12) -> [0: bb11, 1: bb10, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb10, bb11]

bb9
  0: FakeRead(ForMatchedPlace(None), _9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
      kind: unreachable
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
      kind: falseEdge -> [real: bb12, imaginary: bb11]
  }
  preds [bb8]
  succs [bb11, bb12]

bb11
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  1: _16 = ((_9 as Continue).0: ())
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  2: _8 = _16
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
  3: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:40-2323:41)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:40-2323:41)
  6: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:17-2326:57)
  7: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:34-2326:56)
  8: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:34-2326:50)
  9: _19 = &((*((*_1).1: &mut hybrid::dfa::Cache)).0: std::vec::Vec<hybrid::id::LazyStateID>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:34-2326:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:34-2326:56)
      kind: _18 = std::vec::Vec::<hybrid::id::LazyStateID>::len(move _19) -> [return: bb14, unwind: bb19]
  }
  preds [bb8, bb10]
  succs [bb14, bb19]

bb12
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  1: _13 = move ((_9 as Break).0: core::result::Result<core::convert::Infallible, hybrid::error::CacheError>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  3: _15 = move _13
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:17-2323:40)
      kind: _0 = <core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hybrid::error::CacheError>>>::from_residual(move _15) -> [return: bb13, unwind: bb19]
  }
  preds [bb10]
  succs [bb13, bb19]

bb13
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:39-2323:40)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:40-2323:41)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2323:40-2323:41)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2328:10-2328:11)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2330:5-2330:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2330:6-2330:6)
      kind: goto -> bb18
  }
  preds [bb12]
  succs [bb18]

bb14
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:55-2326:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:17-2326:57)
      kind: _17 = hybrid::id::LazyStateID::new(move _18) -> [return: bb15, unwind: bb19]
  }
  preds [bb11]
  succs [bb15, bb19]

bb15
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:56-2326:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:17-2326:66)
      kind: _2 = core::result::Result::<hybrid::id::LazyStateID, hybrid::id::LazyStateIDError>::unwrap(move _17) -> [return: bb16, unwind: bb19]
  }
  preds [bb14]
  succs [bb16, bb19]

bb16
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:65-2326:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2326:65-2326:66)
      kind: goto -> bb17
  }
  preds [bb15]
  succs [bb17]

bb17
  0: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2320:13-2320:16)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2328:10-2328:11)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2329:12-2329:15)
  3: _20 = _2
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2329:12-2329:15)
  4: _0 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::Ok(move _20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2329:9-2329:16)
  5: StorageDead(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2329:15-2329:16)
  6: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2330:5-2330:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2330:6-2330:6)
      kind: goto -> bb18
  }
  preds [bb6, bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2330:6-2330:6)
      kind: return
  }
  preds [bb13, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2319:5-2330:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb7, bb11, bb12, bb14, bb15]
  succs []

