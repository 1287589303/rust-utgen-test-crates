bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:13-228:17)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:20-228:33)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:20-228:33)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:20-228:24)
  4: _6 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:20-228:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:228:20-228:33)
      kind: _5 = meta::regex::RegexInfo::config(move _6) -> [return: bb1, unwind: bb76]
  }
  preds []
  succs [bb1, bb76]

bb1
  0: _4 = &(*_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:20-228:33)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:32-228:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:228:20-228:50)
      kind: _3 = meta::regex::Config::get_match_kind(move _4) -> [return: bb2, unwind: bb76]
  }
  preds [bb0]
  succs [bb2, bb76]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:49-228:50)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:13-228:17)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:228:50-228:51)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:232:9-234:10)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:232:13-232:32)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:232:13-232:21)
  6: _9 = &(*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:232:13-232:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:232:13-232:32)
      kind: _8 = regex_syntax::hir::literal::Seq::is_exact(move _9) -> [return: bb3, unwind: bb76]
  }
  preds [bb1]
  succs [bb3, bb76]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:232:13-232:32)
      kind: switchInt(move _8) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:232:31-232:32)
  1: _7 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:234:10-234:10)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:234:9-234:10)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:234:9-234:10)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:9-243:10)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:12-241:35)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:12-241:30)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:12-241:16)
  8: _14 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:12-241:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:241:12-241:30)
      kind: _13 = meta::regex::RegexInfo::pattern_len(move _14) -> [return: bb6, unwind: bb76]
  }
  preds [bb3]
  succs [bb6, bb76]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:232:31-232:32)
  1: _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:233:20-233:24)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:234:9-234:10)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:234:9-234:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb3]
  succs [bb64]

bb6
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:29-241:30)
  1: _12 = Ne(move _13, const 1_usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:12-241:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:241:12-241:35)
      kind: switchInt(move _12) -> [0: bb8, otherwise: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:34-241:35)
  1: _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:242:20-242:24)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:243:9-243:10)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:243:9-243:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb6]
  succs [bb64]

bb8
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:241:34-241:35)
  1: _11 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:243:10-243:10)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:243:9-243:10)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:243:9-243:10)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:9-250:10)
  5: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:56)
  6: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:51)
  7: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:27)
  8: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:24)
  9: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:16)
  10: _21 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:24)
      kind: _20 = meta::regex::RegexInfo::props(move _21) -> [return: bb9, unwind: bb76]
  }
  preds [bb6]
  succs [bb9, bb76]

bb9
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:23-248:24)
  1: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:25-248:26)
  2: _22 = const 0_usize
    SourceInfo(regex-automata/src/meta/strategy.rs:248:25-248:26)
  3: _23 = Len((*_20))
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:27)
  4: _24 = Lt(_22, _23)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:27)
      kind: assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb10, unwind: bb76]
  }
  preds [bb8]
  succs [bb10, bb76]

bb10
  0: _19 = &(*_20)[_22]
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:51)
      kind: _18 = regex_syntax::hir::Properties::explicit_captures_len(move _19) -> [return: bb11, unwind: bb76]
  }
  preds [bb9]
  succs [bb11, bb76]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:50-248:51)
  1: _17 = Ne(move _18, const 0_usize)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:248:12-248:56)
      kind: switchInt(move _17) -> [0: bb13, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13]

bb12
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:55-248:56)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:55-248:56)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:55-248:56)
  3: _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:249:20-249:24)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:250:9-250:10)
  5: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:250:9-250:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb11]
  succs [bb64]

bb13
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:55-248:56)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:55-248:56)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:248:55-248:56)
  3: _16 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:250:10-250:10)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:250:9-250:10)
  5: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:250:9-250:10)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:9-260:10)
  7: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:50)
  8: StorageLive(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:39)
  9: StorageLive(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:28)
  10: StorageLive(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:25)
  11: StorageLive(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:17)
  12: _31 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:25)
      kind: _30 = meta::regex::RegexInfo::props(move _31) -> [return: bb14, unwind: bb76]
  }
  preds [bb11]
  succs [bb14, bb76]

bb14
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:24-258:25)
  1: StorageLive(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:26-258:27)
  2: _32 = const 0_usize
    SourceInfo(regex-automata/src/meta/strategy.rs:258:26-258:27)
  3: _33 = Len((*_30))
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:28)
  4: _34 = Lt(_32, _33)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:28)
      kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb15, unwind: bb76]
  }
  preds [bb13]
  succs [bb15, bb76]

bb15
  0: _29 = &(*_30)[_32]
    SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:39)
      kind: _28 = regex_syntax::hir::Properties::look_set(move _29) -> [return: bb16, unwind: bb76]
  }
  preds [bb14]
  succs [bb16, bb76]

bb16
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:38-258:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:50)
      kind: _27 = regex_syntax::hir::LookSet::is_empty(move _28) -> [return: bb17, unwind: bb76]
  }
  preds [bb15]
  succs [bb17, bb76]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:258:13-258:50)
      kind: switchInt(move _27) -> [0: bb19, otherwise: bb18]
  }
  preds [bb16]
  succs [bb18, bb19]

bb18
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:49-258:50)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:49-258:50)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:49-258:50)
  3: _26 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:260:10-260:10)
  4: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:260:9-260:10)
  5: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:260:9-260:10)
  6: StorageLive(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:9-266:10)
  7: StorageLive(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:12-264:44)
  8: StorageLive(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:12-264:16)
  9: _38 = &_3
    SourceInfo(regex-automata/src/meta/strategy.rs:264:12-264:16)
  10: StorageLive(_39)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:20-264:44)
  11: StorageLive(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:20-264:44)
  12: _40 = util::search::MatchKind::LeftmostFirst
    SourceInfo(regex-automata/src/meta/strategy.rs:264:20-264:44)
  13: _39 = &_40
    SourceInfo(regex-automata/src/meta/strategy.rs:264:20-264:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:264:12-264:44)
      kind: _37 = <util::search::MatchKind as core::cmp::PartialEq>::ne(move _38, move _39) -> [return: bb20, unwind: bb76]
  }
  preds [bb17]
  succs [bb20, bb76]

bb19
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:49-258:50)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:49-258:50)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/meta/strategy.rs:258:49-258:50)
  3: _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:259:20-259:24)
  4: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:260:9-260:10)
  5: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:260:9-260:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb17]
  succs [bb64]

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:264:12-264:44)
      kind: switchInt(move _37) -> [0: bb22, otherwise: bb21]
  }
  preds [bb18]
  succs [bb21, bb22]

bb21
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:43-264:44)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:43-264:44)
  2: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:43-264:44)
  3: _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:265:20-265:24)
  4: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:266:9-266:10)
  5: StorageDead(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:266:9-266:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb20]
  succs [bb64]

bb22
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:43-264:44)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:43-264:44)
  2: StorageDead(_38)
    SourceInfo(regex-automata/src/meta/strategy.rs:264:43-264:44)
  3: _36 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:266:10-266:10)
  4: StorageDead(_37)
    SourceInfo(regex-automata/src/meta/strategy.rs:266:9-266:10)
  5: StorageDead(_36)
    SourceInfo(regex-automata/src/meta/strategy.rs:266:9-266:10)
  6: StorageLive(_42)
    SourceInfo(regex-automata/src/meta/strategy.rs:279:13-279:21)
  7: StorageLive(_43)
    SourceInfo(regex-automata/src/meta/strategy.rs:279:24-279:43)
  8: StorageLive(_44)
    SourceInfo(regex-automata/src/meta/strategy.rs:279:24-279:32)
  9: _44 = &(*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:279:24-279:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:279:24-279:43)
      kind: _43 = regex_syntax::hir::literal::Seq::literals(move _44) -> [return: bb23, unwind: bb76]
  }
  preds [bb20]
  succs [bb23, bb76]

bb23
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/meta/strategy.rs:279:42-279:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:279:24-279:52)
      kind: _42 = core::option::Option::<&[regex_syntax::hir::literal::Literal]>::unwrap(move _43) -> [return: bb24, unwind: bb76]
  }
  preds [bb22]
  succs [bb24, bb76]

bb24
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/meta/strategy.rs:279:51-279:52)
  1: FakeRead(ForLet(None), _42)
    SourceInfo(regex-automata/src/meta/strategy.rs:279:13-279:21)
  2: StorageLive(_45)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:13-286:19)
  3: StorageLive(_46)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:28-286:66)
  4: StorageLive(_47)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:51-286:55)
  5: _47 = _3
    SourceInfo(regex-automata/src/meta/strategy.rs:286:51-286:55)
  6: StorageLive(_48)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:57-286:65)
  7: _48 = &(*_42)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:57-286:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:286:28-286:66)
      kind: _46 = util::prefilter::Choice::new::<regex_syntax::hir::literal::Literal>(move _47, move _48) -> [return: bb25, unwind: bb76]
  }
  preds [bb23]
  succs [bb25, bb76]

bb25
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:65-286:66)
  1: StorageDead(_47)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:65-286:66)
  2: PlaceMention(_46)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:28-286:66)
  3: _49 = discriminant(_46)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:28-286:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:286:22-286:66)
      kind: switchInt(move _49) -> [0: bb28, 1: bb27, otherwise: bb26]
  }
  preds [bb24]
  succs [bb26, bb27, bb28]

bb26
  0: FakeRead(ForMatchedPlace(None), _46)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:28-286:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:286:28-286:66)
      kind: unreachable
  }
  preds [bb25]
  succs []

bb27
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:287:13-287:25)
      kind: falseEdge -> [real: bb29, imaginary: bb28]
  }
  preds [bb25]
  succs [bb28, bb29]

bb28
  0: _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:292:24-292:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:294:10-294:11)
      kind: drop(_46) -> [return: bb63, unwind: bb76]
  }
  preds [bb25, bb27]
  succs [bb63, bb76]

bb29
  0: StorageLive(_50)
    SourceInfo(regex-automata/src/meta/strategy.rs:287:18-287:24)
  1: _50 = move ((_46 as Some).0: util::prefilter::Choice)
    SourceInfo(regex-automata/src/meta/strategy.rs:287:18-287:24)
  2: _45 = move _50
    SourceInfo(regex-automata/src/meta/strategy.rs:287:29-287:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:287:34-287:35)
      kind: drop(_50) -> [return: bb30, unwind: bb75]
  }
  preds [bb27]
  succs [bb30, bb75]

bb30
  0: StorageDead(_50)
    SourceInfo(regex-automata/src/meta/strategy.rs:287:34-287:35)
  1: FakeRead(ForLet(None), _45)
    SourceInfo(regex-automata/src/meta/strategy.rs:286:13-286:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:294:10-294:11)
      kind: drop(_46) -> [return: bb31, unwind: bb74]
  }
  preds [bb29]
  succs [bb31, bb74]

bb31
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/meta/strategy.rs:294:10-294:11)
  1: StorageLive(_52)
    SourceInfo(regex-automata/src/meta/strategy.rs:295:13-295:18)
  2: StorageLive(_53)
    SourceInfo(regex-automata/src/meta/strategy.rs:295:40-303:10)
  3: PlaceMention(_45)
    SourceInfo(regex-automata/src/meta/strategy.rs:295:46-295:52)
  4: _54 = discriminant(_45)
    SourceInfo(regex-automata/src/meta/strategy.rs:295:46-295:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:295:40-295:52)
      kind: switchInt(move _54) -> [0: bb33, 1: bb34, 2: bb35, 3: bb36, 4: bb37, 5: bb38, 6: bb39, otherwise: bb32]
  }
  preds [bb30]
  succs [bb32, bb33, bb34, bb35, bb36, bb37, bb38, bb39]

bb32
  0: FakeRead(ForMatchedPlace(None), _45)
    SourceInfo(regex-automata/src/meta/strategy.rs:295:46-295:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:295:46-295:52)
      kind: unreachable
  }
  preds [bb31]
  succs []

bb33
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:296:13-296:43)
      kind: falseEdge -> [real: bb40, imaginary: bb34]
  }
  preds [bb31]
  succs [bb34, bb40]

bb34
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:297:13-297:44)
      kind: falseEdge -> [real: bb43, imaginary: bb35]
  }
  preds [bb31, bb33]
  succs [bb35, bb43]

bb35
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:298:13-298:44)
      kind: falseEdge -> [real: bb45, imaginary: bb36]
  }
  preds [bb31, bb34]
  succs [bb36, bb45]

bb36
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:299:13-299:43)
      kind: falseEdge -> [real: bb47, imaginary: bb37]
  }
  preds [bb31, bb35]
  succs [bb37, bb47]

bb37
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:300:13-300:42)
      kind: falseEdge -> [real: bb50, imaginary: bb38]
  }
  preds [bb31, bb36]
  succs [bb38, bb50]

bb38
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:301:13-301:44)
      kind: falseEdge -> [real: bb53, imaginary: bb39]
  }
  preds [bb31, bb37]
  succs [bb39, bb53]

bb39
  0: StorageLive(_68)
    SourceInfo(regex-automata/src/meta/strategy.rs:302:44-302:47)
  1: _68 = move ((_45 as AhoCorasick).0: util::prefilter::aho_corasick::AhoCorasick)
    SourceInfo(regex-automata/src/meta/strategy.rs:302:44-302:47)
  2: StorageLive(_69)
    SourceInfo(regex-automata/src/meta/strategy.rs:302:61-302:64)
  3: _69 = move _68
    SourceInfo(regex-automata/src/meta/strategy.rs:302:61-302:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:302:52-302:65)
      kind: _53 = meta::strategy::Pre::<util::prefilter::aho_corasick::AhoCorasick>::new(move _69) -> [return: bb55, unwind: bb68]
  }
  preds [bb31, bb38]
  succs [bb55, bb68]

bb40
  0: StorageLive(_55)
    SourceInfo(regex-automata/src/meta/strategy.rs:296:39-296:42)
  1: _55 = move ((_45 as Memchr).0: util::prefilter::memchr::Memchr)
    SourceInfo(regex-automata/src/meta/strategy.rs:296:39-296:42)
  2: StorageLive(_56)
    SourceInfo(regex-automata/src/meta/strategy.rs:296:47-296:60)
  3: StorageLive(_57)
    SourceInfo(regex-automata/src/meta/strategy.rs:296:56-296:59)
  4: _57 = move _55
    SourceInfo(regex-automata/src/meta/strategy.rs:296:56-296:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:296:47-296:60)
      kind: _56 = meta::strategy::Pre::<util::prefilter::memchr::Memchr>::new(move _57) -> [return: bb41, unwind: bb74]
  }
  preds [bb33]
  succs [bb41, bb74]

bb41
  0: _53 = move _56 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/meta/strategy.rs:296:47-296:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:296:59-296:60)
      kind: drop(_56) -> [return: bb42, unwind: bb74]
  }
  preds [bb40]
  succs [bb42, bb74]

bb42
  0: StorageDead(_57)
    SourceInfo(regex-automata/src/meta/strategy.rs:296:59-296:60)
  1: StorageDead(_56)
    SourceInfo(regex-automata/src/meta/strategy.rs:296:59-296:60)
  2: StorageDead(_55)
    SourceInfo(regex-automata/src/meta/strategy.rs:296:59-296:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:296:59-296:60)
      kind: goto -> bb57
  }
  preds [bb41]
  succs [bb57]

bb43
  0: StorageLive(_58)
    SourceInfo(regex-automata/src/meta/strategy.rs:297:40-297:43)
  1: _58 = move ((_45 as Memchr2).0: util::prefilter::memchr::Memchr2)
    SourceInfo(regex-automata/src/meta/strategy.rs:297:40-297:43)
  2: StorageLive(_59)
    SourceInfo(regex-automata/src/meta/strategy.rs:297:57-297:60)
  3: _59 = move _58
    SourceInfo(regex-automata/src/meta/strategy.rs:297:57-297:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:297:48-297:61)
      kind: _53 = meta::strategy::Pre::<util::prefilter::memchr::Memchr2>::new(move _59) -> [return: bb44, unwind: bb74]
  }
  preds [bb34]
  succs [bb44, bb74]

bb44
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/meta/strategy.rs:297:60-297:61)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/meta/strategy.rs:297:60-297:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:297:60-297:61)
      kind: goto -> bb57
  }
  preds [bb43]
  succs [bb57]

bb45
  0: StorageLive(_60)
    SourceInfo(regex-automata/src/meta/strategy.rs:298:40-298:43)
  1: _60 = move ((_45 as Memchr3).0: util::prefilter::memchr::Memchr3)
    SourceInfo(regex-automata/src/meta/strategy.rs:298:40-298:43)
  2: StorageLive(_61)
    SourceInfo(regex-automata/src/meta/strategy.rs:298:57-298:60)
  3: _61 = move _60
    SourceInfo(regex-automata/src/meta/strategy.rs:298:57-298:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:298:48-298:61)
      kind: _53 = meta::strategy::Pre::<util::prefilter::memchr::Memchr3>::new(move _61) -> [return: bb46, unwind: bb74]
  }
  preds [bb35]
  succs [bb46, bb74]

bb46
  0: StorageDead(_61)
    SourceInfo(regex-automata/src/meta/strategy.rs:298:60-298:61)
  1: StorageDead(_60)
    SourceInfo(regex-automata/src/meta/strategy.rs:298:60-298:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:298:60-298:61)
      kind: goto -> bb57
  }
  preds [bb45]
  succs [bb57]

bb47
  0: StorageLive(_62)
    SourceInfo(regex-automata/src/meta/strategy.rs:299:39-299:42)
  1: _62 = move ((_45 as Memmem).0: util::prefilter::memmem::Memmem)
    SourceInfo(regex-automata/src/meta/strategy.rs:299:39-299:42)
  2: StorageLive(_63)
    SourceInfo(regex-automata/src/meta/strategy.rs:299:56-299:59)
  3: _63 = move _62
    SourceInfo(regex-automata/src/meta/strategy.rs:299:56-299:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:299:47-299:60)
      kind: _53 = meta::strategy::Pre::<util::prefilter::memmem::Memmem>::new(move _63) -> [return: bb48, unwind: bb72]
  }
  preds [bb36]
  succs [bb48, bb72]

bb48
  0: StorageDead(_63)
    SourceInfo(regex-automata/src/meta/strategy.rs:299:59-299:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:299:59-299:60)
      kind: drop(_62) -> [return: bb49, unwind: bb74]
  }
  preds [bb47]
  succs [bb49, bb74]

bb49
  0: StorageDead(_62)
    SourceInfo(regex-automata/src/meta/strategy.rs:299:59-299:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:299:59-299:60)
      kind: goto -> bb57
  }
  preds [bb48]
  succs [bb57]

bb50
  0: StorageLive(_64)
    SourceInfo(regex-automata/src/meta/strategy.rs:300:38-300:41)
  1: _64 = move ((_45 as Teddy).0: util::prefilter::teddy::Teddy)
    SourceInfo(regex-automata/src/meta/strategy.rs:300:38-300:41)
  2: StorageLive(_65)
    SourceInfo(regex-automata/src/meta/strategy.rs:300:55-300:58)
  3: _65 = move _64
    SourceInfo(regex-automata/src/meta/strategy.rs:300:55-300:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:300:46-300:59)
      kind: _53 = meta::strategy::Pre::<util::prefilter::teddy::Teddy>::new(move _65) -> [return: bb51, unwind: bb70]
  }
  preds [bb37]
  succs [bb51, bb70]

bb51
  0: StorageDead(_65)
    SourceInfo(regex-automata/src/meta/strategy.rs:300:58-300:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:300:58-300:59)
      kind: drop(_64) -> [return: bb52, unwind: bb74]
  }
  preds [bb50]
  succs [bb52, bb74]

bb52
  0: StorageDead(_64)
    SourceInfo(regex-automata/src/meta/strategy.rs:300:58-300:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:300:58-300:59)
      kind: goto -> bb57
  }
  preds [bb51]
  succs [bb57]

bb53
  0: StorageLive(_66)
    SourceInfo(regex-automata/src/meta/strategy.rs:301:40-301:43)
  1: _66 = move ((_45 as ByteSet).0: util::prefilter::byteset::ByteSet)
    SourceInfo(regex-automata/src/meta/strategy.rs:301:40-301:43)
  2: StorageLive(_67)
    SourceInfo(regex-automata/src/meta/strategy.rs:301:57-301:60)
  3: _67 = move _66
    SourceInfo(regex-automata/src/meta/strategy.rs:301:57-301:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:301:48-301:61)
      kind: _53 = meta::strategy::Pre::<util::prefilter::byteset::ByteSet>::new(move _67) -> [return: bb54, unwind: bb74]
  }
  preds [bb38]
  succs [bb54, bb74]

bb54
  0: StorageDead(_67)
    SourceInfo(regex-automata/src/meta/strategy.rs:301:60-301:61)
  1: StorageDead(_66)
    SourceInfo(regex-automata/src/meta/strategy.rs:301:60-301:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:301:60-301:61)
      kind: goto -> bb57
  }
  preds [bb53]
  succs [bb57]

bb55
  0: StorageDead(_69)
    SourceInfo(regex-automata/src/meta/strategy.rs:302:64-302:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:302:64-302:65)
      kind: drop(_68) -> [return: bb56, unwind: bb74]
  }
  preds [bb39]
  succs [bb56, bb74]

bb56
  0: StorageDead(_68)
    SourceInfo(regex-automata/src/meta/strategy.rs:302:64-302:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:302:64-302:65)
      kind: goto -> bb57
  }
  preds [bb55]
  succs [bb57]

bb57
  0: _52 = move _53 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/meta/strategy.rs:295:40-303:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:303:9-303:10)
      kind: drop(_53) -> [return: bb58, unwind: bb74]
  }
  preds [bb42, bb44, bb46, bb49, bb52, bb54, bb56]
  succs [bb58, bb74]

bb58
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/meta/strategy.rs:303:9-303:10)
  1: FakeRead(ForLet(None), _52)
    SourceInfo(regex-automata/src/meta/strategy.rs:295:13-295:18)
  2: AscribeUserType(_52, o, UserTypeProjection { base: UserType(9), projs: [] })
    SourceInfo(regex-automata/src/meta/strategy.rs:295:20-295:37)
  3: StorageLive(_70)
    SourceInfo(regex-automata/src/meta/strategy.rs:304:14-304:19)
  4: StorageLive(_71)
    SourceInfo(regex-automata/src/meta/strategy.rs:304:14-304:19)
  5: _71 = move _52
    SourceInfo(regex-automata/src/meta/strategy.rs:304:14-304:19)
  6: _70 = move _71 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/meta/strategy.rs:304:14-304:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:304:18-304:19)
      kind: drop(_71) -> [return: bb59, unwind: bb66]
  }
  preds [bb57]
  succs [bb59, bb66]

bb59
  0: StorageDead(_71)
    SourceInfo(regex-automata/src/meta/strategy.rs:304:18-304:19)
  1: _0 = core::option::Option::<std::sync::Arc<dyn meta::strategy::Strategy>>::Some(move _70)
    SourceInfo(regex-automata/src/meta/strategy.rs:304:9-304:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:304:19-304:20)
      kind: drop(_70) -> [return: bb60, unwind: bb67]
  }
  preds [bb58]
  succs [bb60, bb67]

bb60
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/meta/strategy.rs:304:19-304:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
      kind: drop(_52) -> [return: bb61, unwind: bb74]
  }
  preds [bb59]
  succs [bb61, bb74]

bb61
  0: StorageDead(_52)
    SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
      kind: drop(_45) -> [return: bb62, unwind: bb76]
  }
  preds [bb60]
  succs [bb62, bb76]

bb62
  0: StorageDead(_45)
    SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:305:6-305:6)
      kind: goto -> bb65
  }
  preds [bb61]
  succs [bb65]

bb63
  0: StorageDead(_46)
    SourceInfo(regex-automata/src/meta/strategy.rs:294:10-294:11)
  1: StorageDead(_45)
    SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
  2: StorageDead(_42)
    SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb28]
  succs [bb64]

bb64
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:305:6-305:6)
      kind: goto -> bb65
  }
  preds [bb5, bb7, bb12, bb19, bb21, bb63]
  succs [bb65]

bb65
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:305:6-305:6)
      kind: return
  }
  preds [bb62, bb64]
  succs []

bb66
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:304:19-304:20)
      kind: drop(_70) -> [return: bb67, unwind terminate(cleanup)]
  }
  preds [bb58]
  succs [bb67]

bb67
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
      kind: drop(_52) -> [return: bb74, unwind terminate(cleanup)]
  }
  preds [bb59, bb66]
  succs [bb74]

bb68
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:302:64-302:65)
      kind: drop(_69) -> [return: bb69, unwind terminate(cleanup)]
  }
  preds [bb39]
  succs [bb69]

bb69
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:302:64-302:65)
      kind: drop(_68) -> [return: bb74, unwind terminate(cleanup)]
  }
  preds [bb68]
  succs [bb74]

bb70
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:300:58-300:59)
      kind: drop(_65) -> [return: bb71, unwind terminate(cleanup)]
  }
  preds [bb50]
  succs [bb71]

bb71
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:300:58-300:59)
      kind: drop(_64) -> [return: bb74, unwind terminate(cleanup)]
  }
  preds [bb70]
  succs [bb74]

bb72
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:299:59-299:60)
      kind: drop(_63) -> [return: bb73, unwind terminate(cleanup)]
  }
  preds [bb47]
  succs [bb73]

bb73
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:299:59-299:60)
      kind: drop(_62) -> [return: bb74, unwind terminate(cleanup)]
  }
  preds [bb72]
  succs [bb74]

bb74
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:305:5-305:6)
      kind: drop(_45) -> [return: bb76, unwind terminate(cleanup)]
  }
  preds [bb30, bb40, bb41, bb43, bb45, bb48, bb51, bb53, bb55, bb57, bb60, bb67, bb69, bb71, bb73]
  succs [bb76]

bb75
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:294:10-294:11)
      kind: drop(_46) -> [return: bb76, unwind terminate(cleanup)]
  }
  preds [bb29]
  succs [bb76]

bb76
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:224:5-305:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb8, bb9, bb10, bb13, bb14, bb15, bb16, bb18, bb22, bb23, bb24, bb28, bb61, bb74, bb75]
  succs []

