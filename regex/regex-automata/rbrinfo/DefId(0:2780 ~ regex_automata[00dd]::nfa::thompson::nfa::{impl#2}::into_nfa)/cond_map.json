{
  "regex-automata/src/nfa/thompson/nfa.rs:1285:21:1285:37": [
    {
      "Bool": {
        "Other": "seen.insert(sid)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1279:26:1279:51": [
    {
      "For": {
        "iter_var": "&start_id",
        "iter_range": "self.start_pattern.iter()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1284:19:1284:46": [
    {
      "Bool": {
        "Other": "let Some(sid) = stack.pop()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/nfa.rs:1288:23:1288:39": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/nfa.rs:1288:23:1288:39",
        "match_str": "self.states[sid]",
        "match_kind": {
          "Enum": [
            "ByteRange",
            "Sparse",
            "Dense",
            "Look",
            "Union",
            "BinaryUnion",
            "Capture",
            "Fail",
            "Match"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/nfa.rs:1292:21:1292:37": {
            "pat": {
              "pat_str": "State::Sparse(_)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1292:41:1316:22"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1317:21:1317:40": {
            "pat": {
              "pat_str": "State::Match { .. }",
              "kind": {
                "Enum": 8
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1317:44:1317:65"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1333:21:1333:48": {
            "pat": {
              "pat_str": "State::Capture { next, .. }",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1333:52:1335:22"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1322:21:1322:52": {
            "pat": {
              "pat_str": "State::Union { ref alternates }",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1322:56:1328:22"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1318:21:1318:47": {
            "pat": {
              "pat_str": "State::Look { look, next }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1318:51:1321:22"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1289:21:1289:44": {
            "pat": {
              "pat_str": "State::ByteRange { .. }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1291:38:1291:46"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1291:23:1291:34": {
            "pat": {
              "pat_str": "State::Fail",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1291:38:1291:46"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1290:23:1290:42": {
            "pat": {
              "pat_str": "State::Dense { .. }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1291:38:1291:46"
          },
          "regex-automata/src/nfa/thompson/nfa.rs:1329:21:1329:54": {
            "pat": {
              "pat_str": "State::BinaryUnion { alt1, alt2 }",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/nfa.rs:1329:58:1332:22"
          }
        }
      }
    }
  ]
}