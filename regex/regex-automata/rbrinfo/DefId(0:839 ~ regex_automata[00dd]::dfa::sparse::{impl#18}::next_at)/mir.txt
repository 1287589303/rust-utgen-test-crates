bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2313:13-2313:18)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2313:21-2313:22)
  2: _4 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2313:21-2313:22)
  3: _5 = MulWithOverflow(_4, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2313:21-2313:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2313:21-2313:38)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const util::primitives::StateID::SIZE) -> [success: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: _3 = move (_5.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2313:21-2313:38)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2313:37-2313:38)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2313:13-2313:18)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2314:13-2314:16)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2314:19-2314:24)
  5: _7 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2314:19-2314:24)
  6: _8 = AddWithOverflow(_7, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2314:19-2314:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2314:19-2314:40)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const util::primitives::StateID::SIZE) -> [success: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _6 = move (_8.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2314:19-2314:40)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2314:39-2314:40)
  2: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2314:13-2314:16)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:13-2315:18)
  4: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:21-2315:53)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:21-2315:42)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:30-2315:42)
  7: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:21-2315:30)
  8: _13 = &(*((*_1).4: &[u8]))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:21-2315:30)
  9: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:31-2315:41)
  10: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:31-2315:36)
  11: _15 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:31-2315:36)
  12: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:38-2315:41)
  13: _16 = _6
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:38-2315:41)
  14: _14 = core::ops::Range::<usize> { start: move _15, end: move _16 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:31-2315:41)
  15: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:40-2315:41)
  16: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:40-2315:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2315:30-2315:42)
      kind: _12 = <[u8] as core::ops::Index<core::ops::Range<usize>>>::index(move _13, move _14) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: _11 = &(*_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:21-2315:42)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:41-2315:42)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:41-2315:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2315:21-2315:53)
      kind: _10 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _11) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:52-2315:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2315:21-2315:62)
      kind: _9 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _10) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:61-2315:62)
  1: FakeRead(ForLet(None), _9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:13-2315:18)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2315:62-2315:63)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2316:42-2316:47)
  4: _17 = _9
    SourceInfo(regex-automata/src/dfa/sparse.rs:2316:42-2316:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2316:9-2316:48)
      kind: _0 = util::primitives::StateID::from_ne_bytes_unchecked(move _17) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2316:47-2316:48)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2317:5-2317:6)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2317:5-2317:6)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2317:5-2317:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2317:6-2317:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2312:5-2317:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

