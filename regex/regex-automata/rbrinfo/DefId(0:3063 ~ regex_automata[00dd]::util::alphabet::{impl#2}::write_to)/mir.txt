bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:270:13-270:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:270:22-270:26)
  2: _4 = &(*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:270:22-270:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:270:22-270:41)
      kind: _3 = util::alphabet::ByteClasses::write_to_len(move _4) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:270:40-270:41)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/alphabet.rs:270:13-270:19)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:9-273:10)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:12-271:30)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:12-271:21)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:12-271:15)
  6: _8 = &(*_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:12-271:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:271:12-271:21)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:20-271:21)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:24-271:30)
  2: _9 = _3
    SourceInfo(regex-automata/src/util/alphabet.rs:271:24-271:30)
  3: _6 = Lt(move _7, move _9)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:12-271:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:271:12-271:30)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:29-271:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:29-271:30)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:272:24-272:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:272:24-272:74)
      kind: _11 = util::wire::SerializeError::buffer_too_small(const "byte class map") -> [return: bb4, unwind: bb19]
  }
  preds [bb2]
  succs [bb4, bb19]

bb4
  0: _0 = core::result::Result::<usize, util::wire::SerializeError>::Err(move _11)
    SourceInfo(regex-automata/src/util/alphabet.rs:272:20-272:75)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/alphabet.rs:272:74-272:75)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:273:9-273:10)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:273:9-273:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:279:5-279:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:279:6-279:6)
      kind: goto -> bb18
  }
  preds [bb3]
  succs [bb18]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:29-271:30)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:271:29-271:30)
  2: _5 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:273:10-273:10)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:273:9-273:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:273:9-273:10)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:9-277:10)
  6: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
      kind: _14 = core::ops::RangeInclusive::<u8>::new(const 0_u8, const u8::MAX) -> [return: bb6, unwind: bb19]
  }
  preds [bb2]
  succs [bb6, bb19]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
      kind: _13 = <core::ops::RangeInclusive<u8> as core::iter::IntoIterator>::into_iter(move _14) -> [return: bb7, unwind: bb19]
  }
  preds [bb5]
  succs [bb7, bb19]

bb7
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:24-274:25)
  1: PlaceMention(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  3: _15 = move _13
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:9-277:10)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:9-277:10)
      kind: falseUnwind -> [real: bb9, unwind: bb19]
  }
  preds [bb7, bb17]
  succs [bb9, bb19]

bb9
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  1: StorageLive(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  3: StorageLive(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  4: _20 = &mut _15
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  5: _19 = &mut (*_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
      kind: _18 = <core::ops::RangeInclusive<u8> as core::iter::Iterator>::next(move _19) -> [return: bb10, unwind: bb19]
  }
  preds [bb8]
  succs [bb10, bb19]

bb10
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:24-274:25)
  1: PlaceMention(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  2: _21 = discriminant(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
      kind: switchInt(move _21) -> [0: bb12, 1: bb13, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12, bb13]

bb11
  0: FakeRead(ForMatchedPlace(None), _18)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:18-274:25)
      kind: unreachable
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:9-277:10)
      kind: falseEdge -> [real: bb14, imaginary: bb13]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:13-274:14)
  1: _23 = ((_18 as Some).0: u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:274:13-274:14)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:22-275:33)
  3: StorageLive(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:22-275:26)
  4: _25 = &(*_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:22-275:26)
  5: StorageLive(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:31-275:32)
  6: _26 = _23
    SourceInfo(regex-automata/src/util/alphabet.rs:275:31-275:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:275:22-275:33)
      kind: _24 = util::alphabet::ByteClasses::get(move _25, move _26) -> [return: bb15, unwind: bb19]
  }
  preds [bb10, bb12]
  succs [bb15, bb19]

bb14
  0: _12 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:274:9-277:10)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  6: StorageDead(_12)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  7: StorageLive(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:278:12-278:18)
  8: _35 = _3
    SourceInfo(regex-automata/src/util/alphabet.rs:278:12-278:18)
  9: _0 = core::result::Result::<usize, util::wire::SerializeError>::Ok(move _35)
    SourceInfo(regex-automata/src/util/alphabet.rs:278:9-278:19)
  10: StorageDead(_35)
    SourceInfo(regex-automata/src/util/alphabet.rs:278:18-278:19)
  11: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:279:5-279:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:279:6-279:6)
      kind: goto -> bb18
  }
  preds [bb12]
  succs [bb18]

bb15
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:32-275:33)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:32-275:33)
  2: StorageLive(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:17-275:18)
  3: _27 = const 0_usize
    SourceInfo(regex-automata/src/util/alphabet.rs:275:17-275:18)
  4: _28 = Len((*_2))
    SourceInfo(regex-automata/src/util/alphabet.rs:275:13-275:19)
  5: _29 = Lt(_27, _28)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:13-275:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:275:13-275:19)
      kind: assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb16, unwind: bb19]
  }
  preds [bb13]
  succs [bb16, bb19]

bb16
  0: (*_2)[_27] = move _24
    SourceInfo(regex-automata/src/util/alphabet.rs:275:13-275:33)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:32-275:33)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/util/alphabet.rs:275:33-275:34)
  3: StorageLive(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:19-276:32)
  4: StorageLive(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:19-276:32)
  5: StorageLive(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:27-276:32)
  6: StorageLive(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:24-276:27)
  7: _33 = &mut (*_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:24-276:27)
  8: StorageLive(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:28-276:31)
  9: _34 = core::ops::RangeFrom::<usize> { start: const 1_usize }
    SourceInfo(regex-automata/src/util/alphabet.rs:276:28-276:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:276:27-276:32)
      kind: _32 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _33, move _34) -> [return: bb17, unwind: bb19]
  }
  preds [bb15]
  succs [bb17, bb19]

bb17
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:31-276:32)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:31-276:32)
  2: _31 = &mut (*_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:19-276:32)
  3: _30 = &mut (*_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:19-276:32)
  4: _2 = move _30
    SourceInfo(regex-automata/src/util/alphabet.rs:276:13-276:32)
  5: StorageDead(_30)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:31-276:32)
  6: StorageDead(_32)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:32-276:33)
  7: StorageDead(_31)
    SourceInfo(regex-automata/src/util/alphabet.rs:276:32-276:33)
  8: _17 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:274:26-277:10)
  9: StorageDead(_23)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  10: StorageDead(_20)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  11: StorageDead(_18)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  12: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:277:9-277:10)
  13: _16 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:274:9-277:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:274:9-277:10)
      kind: goto -> bb8
  }
  preds [bb16]
  succs [bb8]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:279:6-279:6)
      kind: return
  }
  preds [bb4, bb14]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:266:5-279:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb6, bb8, bb9, bb13, bb15, bb16]
  succs []

