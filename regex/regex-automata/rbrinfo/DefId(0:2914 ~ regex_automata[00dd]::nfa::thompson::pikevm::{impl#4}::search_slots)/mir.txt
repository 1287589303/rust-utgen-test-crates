bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:13-1097:22)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:51)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:39)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:39)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:29)
  5: _9 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:39)
      kind: _8 = nfa::thompson::pikevm::PikeVM::get_nfa(move _9) -> [return: bb1, unwind: bb55]
  }
  preds []
  succs [bb1, bb55]

bb1
  0: _7 = &(*_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:39)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:38-1097:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:51)
      kind: _6 = nfa::thompson::nfa::NFA::has_empty(move _7) -> [return: bb2, unwind: bb55]
  }
  preds [bb0]
  succs [bb2, bb55]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:51)
      kind: switchInt(move _6) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:50-1097:51)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:50-1097:51)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:55-1097:69)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:55-1097:69)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:55-1097:59)
  5: _12 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:55-1097:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:55-1097:69)
      kind: _11 = nfa::thompson::pikevm::PikeVM::get_nfa(move _12) -> [return: bb5, unwind: bb55]
  }
  preds [bb2]
  succs [bb5, bb55]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:50-1097:51)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:50-1097:51)
  2: _5 = const false
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:79)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:79)
      kind: goto -> bb7
  }
  preds [bb2]
  succs [bb7]

bb5
  0: _10 = &(*_11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:55-1097:69)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:68-1097:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:55-1097:79)
      kind: _5 = nfa::thompson::nfa::NFA::is_utf8(move _10) -> [return: bb6, unwind: bb55]
  }
  preds [bb3]
  succs [bb6, bb55]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:78-1097:79)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:78-1097:79)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:25-1097:79)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:78-1097:79)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1097:13-1097:22)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1098:9-1101:10)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1098:13-1098:22)
  4: _14 = _5
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1098:13-1098:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1098:13-1098:22)
      kind: switchInt(move _14) -> [0: bb8, otherwise: bb17]
  }
  preds [bb4, bb6]
  succs [bb8, bb17]

bb8
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:17-1099:19)
  1: StorageLive(_17)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:64)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:26)
  4: _19 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:26)
  5: StorageLive(_20)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:44-1099:49)
  6: _20 = &mut (*_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:44-1099:49)
  7: StorageLive(_21)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:51-1099:56)
  8: _21 = &(*_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:51-1099:56)
  9: StorageLive(_22)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:58-1099:63)
  10: _22 = &mut (*_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:58-1099:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:64)
      kind: _18 = nfa::thompson::pikevm::PikeVM::search_slots_imp(move _19, move _20, move _21, move _22) -> [return: bb9, unwind: bb55]
  }
  preds [bb7]
  succs [bb9, bb55]

bb9
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:63-1099:64)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:63-1099:64)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:63-1099:64)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:63-1099:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
      kind: _17 = <core::option::Option<util::search::HalfMatch> as core::ops::Try>::branch(move _18) -> [return: bb10, unwind: bb55]
  }
  preds [bb8]
  succs [bb10, bb55]

bb10
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  1: PlaceMention(_17)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
  2: _23 = discriminant(_17)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
      kind: switchInt(move _23) -> [0: bb13, 1: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12, bb13]

bb11
  0: FakeRead(ForMatchedPlace(None), _17)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
      kind: unreachable
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
      kind: falseEdge -> [real: bb14, imaginary: bb13]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: StorageLive(_27)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
  1: _27 = ((_17 as Continue).0: util::search::HalfMatch)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
  2: _16 = _27
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  4: FakeRead(ForLet(None), _16)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:17-1099:19)
  5: StorageDead(_17)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:65-1099:66)
  6: StorageLive(_28)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:25-1100:37)
  7: StorageLive(_29)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:25-1100:27)
  8: _29 = &_16
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:25-1100:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:25-1100:37)
      kind: _28 = util::search::HalfMatch::pattern(move _29) -> [return: bb16, unwind: bb55]
  }
  preds [bb10, bb12]
  succs [bb16, bb55]

bb14
  0: StorageLive(_24)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  1: _24 = ((_17 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  3: _26 = _24
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:22-1099:65)
      kind: _0 = <core::option::Option<util::primitives::PatternID> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _26) -> [return: bb15, unwind: bb55]
  }
  preds [bb12]
  succs [bb15, bb55]

bb15
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:64-1099:65)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1099:65-1099:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb51
  }
  preds [bb14]
  succs [bb51]

bb16
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:36-1100:37)
  1: _0 = core::option::Option::<util::primitives::PatternID>::Some(move _28)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:20-1100:38)
  2: StorageDead(_28)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:37-1100:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1100:13-1100:38)
      kind: goto -> bb51
  }
  preds [bb13]
  succs [bb51]

bb17
  0: _13 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1101:10-1101:10)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1101:9-1101:10)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1101:9-1101:10)
  3: StorageLive(_30)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:13-1113:16)
  4: StorageLive(_31)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:46)
  5: StorageLive(_32)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:46)
  6: StorageLive(_33)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:33)
  7: StorageLive(_34)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:33)
  8: StorageLive(_35)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:23)
  9: _35 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:33)
      kind: _34 = nfa::thompson::pikevm::PikeVM::get_nfa(move _35) -> [return: bb18, unwind: bb55]
  }
  preds [bb7]
  succs [bb18, bb55]

bb18
  0: _33 = &(*_34)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:33)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:32-1113:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:46)
      kind: _32 = nfa::thompson::nfa::NFA::group_info(move _33) -> [return: bb19, unwind: bb55]
  }
  preds [bb17]
  succs [bb19, bb55]

bb19
  0: _31 = &(*_32)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:46)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:45-1113:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:19-1113:66)
      kind: _30 = util::captures::GroupInfo::implicit_slot_len(move _31) -> [return: bb20, unwind: bb55]
  }
  preds [bb18]
  succs [bb20, bb55]

bb20
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:65-1113:66)
  1: FakeRead(ForLet(None), _30)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:13-1113:16)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:66-1113:67)
  3: StorageDead(_32)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1113:66-1113:67)
  4: StorageLive(_36)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:9-1117:10)
  5: StorageLive(_37)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:12-1114:30)
  6: StorageLive(_38)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:12-1114:23)
  7: StorageLive(_39)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:12-1114:17)
  8: _39 = &(*_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:12-1114:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:12-1114:23)
      kind: _38 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::len(move _39) -> [return: bb21, unwind: bb55]
  }
  preds [bb19]
  succs [bb21, bb55]

bb21
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:22-1114:23)
  1: StorageLive(_40)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:27-1114:30)
  2: _40 = _30
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:27-1114:30)
  3: _37 = Ge(move _38, move _40)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:12-1114:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:12-1114:30)
      kind: switchInt(move _37) -> [0: bb31, otherwise: bb22]
  }
  preds [bb20]
  succs [bb22, bb31]

bb22
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:29-1114:30)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:29-1114:30)
  2: StorageLive(_42)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:17-1115:19)
  3: StorageLive(_43)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
  4: StorageLive(_44)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:64)
  5: StorageLive(_45)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:26)
  6: _45 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:26)
  7: StorageLive(_46)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:44-1115:49)
  8: _46 = &mut (*_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:44-1115:49)
  9: StorageLive(_47)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:51-1115:56)
  10: _47 = &(*_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:51-1115:56)
  11: StorageLive(_48)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:58-1115:63)
  12: _48 = &mut (*_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:58-1115:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:64)
      kind: _44 = nfa::thompson::pikevm::PikeVM::search_slots_imp(move _45, move _46, move _47, move _48) -> [return: bb23, unwind: bb55]
  }
  preds [bb21]
  succs [bb23, bb55]

bb23
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:63-1115:64)
  1: StorageDead(_47)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:63-1115:64)
  2: StorageDead(_46)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:63-1115:64)
  3: StorageDead(_45)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:63-1115:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
      kind: _43 = <core::option::Option<util::search::HalfMatch> as core::ops::Try>::branch(move _44) -> [return: bb24, unwind: bb55]
  }
  preds [bb22]
  succs [bb24, bb55]

bb24
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  1: PlaceMention(_43)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
  2: _49 = discriminant(_43)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
      kind: switchInt(move _49) -> [0: bb27, 1: bb26, otherwise: bb25]
  }
  preds [bb23]
  succs [bb25, bb26, bb27]

bb25
  0: FakeRead(ForMatchedPlace(None), _43)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
      kind: unreachable
  }
  preds [bb24]
  succs []

bb26
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
      kind: falseEdge -> [real: bb28, imaginary: bb27]
  }
  preds [bb24]
  succs [bb27, bb28]

bb27
  0: StorageLive(_53)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
  1: _53 = ((_43 as Continue).0: util::search::HalfMatch)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
  2: _42 = _53
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
  3: StorageDead(_53)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  4: FakeRead(ForLet(None), _42)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:17-1115:19)
  5: StorageDead(_43)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:65-1115:66)
  6: StorageLive(_54)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:25-1116:37)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:25-1116:27)
  8: _55 = &_42
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:25-1116:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:25-1116:37)
      kind: _54 = util::search::HalfMatch::pattern(move _55) -> [return: bb30, unwind: bb55]
  }
  preds [bb24, bb26]
  succs [bb30, bb55]

bb28
  0: StorageLive(_50)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  1: _50 = ((_43 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  2: StorageLive(_52)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  3: _52 = _50
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:22-1115:65)
      kind: _0 = <core::option::Option<util::primitives::PatternID> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _52) -> [return: bb29, unwind: bb55]
  }
  preds [bb26]
  succs [bb29, bb55]

bb29
  0: StorageDead(_52)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  1: StorageDead(_50)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:64-1115:65)
  2: StorageDead(_43)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1115:65-1115:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb49
  }
  preds [bb28]
  succs [bb49]

bb30
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:36-1116:37)
  1: _0 = core::option::Option::<util::primitives::PatternID>::Some(move _54)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:20-1116:38)
  2: StorageDead(_54)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:37-1116:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1116:13-1116:38)
      kind: goto -> bb49
  }
  preds [bb27]
  succs [bb49]

bb31
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:29-1114:30)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1114:29-1114:30)
  2: _36 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1117:10-1117:10)
  3: StorageDead(_37)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1117:9-1117:10)
  4: StorageDead(_36)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1117:9-1117:10)
  5: StorageLive(_56)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:9-1125:10)
  6: StorageLive(_57)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:45)
  7: StorageLive(_58)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:40)
  8: StorageLive(_59)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:26)
  9: StorageLive(_60)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:26)
  10: StorageLive(_61)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:16)
  11: _61 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:26)
      kind: _60 = nfa::thompson::pikevm::PikeVM::get_nfa(move _61) -> [return: bb32, unwind: bb55]
  }
  preds [bb21]
  succs [bb32, bb55]

bb32
  0: _59 = &(*_60)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:26)
  1: StorageDead(_61)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:25-1118:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:40)
      kind: _58 = nfa::thompson::nfa::NFA::pattern_len(move _59) -> [return: bb33, unwind: bb55]
  }
  preds [bb31]
  succs [bb33, bb55]

bb33
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:39-1118:40)
  1: _57 = Eq(move _58, const 1_usize)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:12-1118:45)
      kind: switchInt(move _57) -> [0: bb40, otherwise: bb34]
  }
  preds [bb32]
  succs [bb34, bb40]

bb34
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:44-1118:45)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:44-1118:45)
  2: StorageLive(_63)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:17-1119:27)
  3: StorageLive(_64)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:31-1119:35)
  4: _64 = core::option::Option::<util::primitives::NonMaxUsize>::None
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:31-1119:35)
  5: StorageLive(_65)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:37-1119:41)
  6: _65 = core::option::Option::<util::primitives::NonMaxUsize>::None
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:37-1119:41)
  7: _63 = [move _64, move _65]
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:30-1119:42)
  8: StorageDead(_65)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:41-1119:42)
  9: StorageDead(_64)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:41-1119:42)
  10: FakeRead(ForLet(None), _63)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1119:17-1119:27)
  11: StorageLive(_66)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:17-1120:20)
  12: StorageLive(_67)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:23-1120:27)
  13: _67 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:23-1120:27)
  14: StorageLive(_68)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:45-1120:50)
  15: _68 = &mut (*_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:45-1120:50)
  16: StorageLive(_69)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:52-1120:57)
  17: _69 = &(*_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:52-1120:57)
  18: StorageLive(_70)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:59-1120:70)
  19: StorageLive(_71)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:59-1120:70)
  20: StorageLive(_72)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:59-1120:70)
  21: _72 = &mut _63
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:59-1120:70)
  22: _71 = &mut (*_72)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:59-1120:70)
  23: _70 = move _71 as &mut [core::option::Option<util::primitives::NonMaxUsize>] (PointerCoercion(Unsize))
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:59-1120:70)
  24: StorageDead(_71)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:69-1120:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:23-1120:71)
      kind: _66 = nfa::thompson::pikevm::PikeVM::search_slots_imp(move _67, move _68, move _69, move _70) -> [return: bb35, unwind: bb55]
  }
  preds [bb33]
  succs [bb35, bb55]

bb35
  0: StorageDead(_70)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:70-1120:71)
  1: StorageDead(_69)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:70-1120:71)
  2: StorageDead(_68)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:70-1120:71)
  3: StorageDead(_67)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:70-1120:71)
  4: FakeRead(ForLet(None), _66)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:17-1120:20)
  5: StorageDead(_72)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1120:71-1120:72)
  6: StorageLive(_73)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:13-1123:58)
  7: StorageLive(_74)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:13-1123:18)
  8: _74 = &mut (*_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:13-1123:18)
  9: StorageLive(_75)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:35-1123:57)
  10: StorageLive(_76)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:35-1123:57)
  11: StorageLive(_77)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:42-1123:57)
  12: StorageLive(_78)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:36-1123:42)
  13: _78 = &_63
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:36-1123:42)
  14: StorageLive(_79)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:43-1123:56)
  15: StorageLive(_80)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:45-1123:56)
  16: StorageLive(_81)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:45-1123:50)
  17: _81 = &(*_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:45-1123:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:45-1123:56)
      kind: _80 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::len(move _81) -> [return: bb36, unwind: bb55]
  }
  preds [bb34]
  succs [bb36, bb55]

bb36
  0: StorageDead(_81)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:55-1123:56)
  1: _79 = core::ops::RangeTo::<usize> { end: move _80 }
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:43-1123:56)
  2: StorageDead(_80)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:55-1123:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:42-1123:57)
      kind: _77 = <[core::option::Option<util::primitives::NonMaxUsize>; 2] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _78, move _79) -> [return: bb37, unwind: bb55]
  }
  preds [bb35]
  succs [bb37, bb55]

bb37
  0: StorageDead(_79)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:56-1123:57)
  1: StorageDead(_78)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:56-1123:57)
  2: _76 = &(*_77)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:35-1123:57)
  3: _75 = &(*_76)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:35-1123:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:13-1123:58)
      kind: _73 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::copy_from_slice(move _74, move _75) -> [return: bb38, unwind: bb55]
  }
  preds [bb36]
  succs [bb38, bb55]

bb38
  0: StorageDead(_75)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:57-1123:58)
  1: StorageDead(_74)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:57-1123:58)
  2: StorageDead(_77)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:58-1123:59)
  3: StorageDead(_76)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:58-1123:59)
  4: StorageDead(_73)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1123:58-1123:59)
  5: StorageLive(_82)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1124:20-1124:23)
  6: _82 = _66
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1124:20-1124:23)
  7: StorageLive(_83)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1124:28-1124:45)
  8: _83 = {closure@regex-automata/src/nfa/thompson/pikevm.rs:1124:28: 1124:32}
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1124:28-1124:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1124:20-1124:46)
      kind: _0 = core::option::Option::<util::search::HalfMatch>::map::<util::primitives::PatternID, {closure@regex-automata/src/nfa/thompson/pikevm.rs:1124:28: 1124:32}>(move _82, move _83) -> [return: bb39, unwind: bb55]
  }
  preds [bb37]
  succs [bb39, bb55]

bb39
  0: StorageDead(_83)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1124:45-1124:46)
  1: StorageDead(_82)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1124:45-1124:46)
  2: StorageDead(_66)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1125:9-1125:10)
  3: StorageDead(_63)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1125:9-1125:10)
  4: StorageDead(_57)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1125:9-1125:10)
  5: StorageDead(_56)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1125:9-1125:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb50
  }
  preds [bb38]
  succs [bb50]

bb40
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:44-1118:45)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1118:44-1118:45)
  2: _56 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1125:10-1125:10)
  3: StorageDead(_57)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1125:9-1125:10)
  4: StorageDead(_56)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1125:9-1125:10)
  5: StorageLive(_84)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1126:13-1126:23)
  6: StorageLive(_85)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1126:31-1126:35)
  7: _85 = core::option::Option::<util::primitives::NonMaxUsize>::None
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1126:31-1126:35)
  8: StorageLive(_86)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1126:37-1126:40)
  9: _86 = _30
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1126:37-1126:40)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9-47:42)
      kind: _84 = std::vec::from_elem::<core::option::Option<util::primitives::NonMaxUsize>>(move _85, move _86) -> [return: bb41, unwind: bb55]
  }
  preds [bb33]
  succs [bb41, bb55]

bb41
  0: StorageDead(_86)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:41-47:42)
  1: StorageDead(_85)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:41-47:42)
  2: FakeRead(ForLet(None), _84)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1126:13-1126:23)
  3: StorageLive(_87)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:13-1127:16)
  4: StorageLive(_88)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:19-1127:23)
  5: _88 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:19-1127:23)
  6: StorageLive(_89)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:41-1127:46)
  7: _89 = &mut (*_2)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:41-1127:46)
  8: StorageLive(_90)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:48-1127:53)
  9: _90 = &(*_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:48-1127:53)
  10: StorageLive(_91)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
  11: StorageLive(_92)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
  12: StorageLive(_93)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
  13: StorageLive(_94)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
  14: _94 = &mut _84
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
  15: _93 = &mut (*_94)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
      kind: _92 = <std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::DerefMut>::deref_mut(move _93) -> [return: bb42, unwind: bb54]
  }
  preds [bb40]
  succs [bb42, bb54]

bb42
  0: _91 = &mut (*_92)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:55-1127:66)
  1: StorageDead(_93)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:65-1127:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:19-1127:67)
      kind: _87 = nfa::thompson::pikevm::PikeVM::search_slots_imp(move _88, move _89, move _90, move _91) -> [return: bb43, unwind: bb54]
  }
  preds [bb41]
  succs [bb43, bb54]

bb43
  0: StorageDead(_91)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:66-1127:67)
  1: StorageDead(_90)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:66-1127:67)
  2: StorageDead(_89)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:66-1127:67)
  3: StorageDead(_88)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:66-1127:67)
  4: FakeRead(ForLet(None), _87)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:13-1127:16)
  5: StorageDead(_94)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:67-1127:68)
  6: StorageDead(_92)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1127:67-1127:68)
  7: StorageLive(_95)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:9-1130:54)
  8: StorageLive(_96)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:9-1130:14)
  9: _96 = &mut (*_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:9-1130:14)
  10: StorageLive(_97)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:31-1130:53)
  11: StorageLive(_98)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:31-1130:53)
  12: StorageLive(_99)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:38-1130:53)
  13: StorageLive(_100)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:32-1130:38)
  14: _100 = &_84
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:32-1130:38)
  15: StorageLive(_101)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:39-1130:52)
  16: StorageLive(_102)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:41-1130:52)
  17: StorageLive(_103)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:41-1130:46)
  18: _103 = &(*_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:41-1130:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:41-1130:52)
      kind: _102 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::len(move _103) -> [return: bb44, unwind: bb54]
  }
  preds [bb42]
  succs [bb44, bb54]

bb44
  0: StorageDead(_103)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:51-1130:52)
  1: _101 = core::ops::RangeTo::<usize> { end: move _102 }
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:39-1130:52)
  2: StorageDead(_102)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:51-1130:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:38-1130:53)
      kind: _99 = <std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>> as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _100, move _101) -> [return: bb45, unwind: bb54]
  }
  preds [bb43]
  succs [bb45, bb54]

bb45
  0: StorageDead(_101)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:52-1130:53)
  1: StorageDead(_100)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:52-1130:53)
  2: _98 = &(*_99)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:31-1130:53)
  3: _97 = &(*_98)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:31-1130:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:9-1130:54)
      kind: _95 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::copy_from_slice(move _96, move _97) -> [return: bb46, unwind: bb54]
  }
  preds [bb44]
  succs [bb46, bb54]

bb46
  0: StorageDead(_97)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:53-1130:54)
  1: StorageDead(_96)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:53-1130:54)
  2: StorageDead(_99)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:54-1130:55)
  3: StorageDead(_98)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:54-1130:55)
  4: StorageDead(_95)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1130:54-1130:55)
  5: StorageLive(_104)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1131:9-1131:12)
  6: _104 = _87
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1131:9-1131:12)
  7: StorageLive(_105)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1131:17-1131:34)
  8: _105 = {closure@regex-automata/src/nfa/thompson/pikevm.rs:1131:17: 1131:21}
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1131:17-1131:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1131:9-1131:35)
      kind: _0 = core::option::Option::<util::search::HalfMatch>::map::<util::primitives::PatternID, {closure@regex-automata/src/nfa/thompson/pikevm.rs:1131:17: 1131:21}>(move _104, move _105) -> [return: bb47, unwind: bb54]
  }
  preds [bb45]
  succs [bb47, bb54]

bb47
  0: StorageDead(_105)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1131:34-1131:35)
  1: StorageDead(_104)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1131:34-1131:35)
  2: StorageDead(_87)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
      kind: drop(_84) -> [return: bb48, unwind: bb55]
  }
  preds [bb46]
  succs [bb48, bb55]

bb48
  0: StorageDead(_84)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:6-1132:6)
      kind: goto -> bb53
  }
  preds [bb47]
  succs [bb53]

bb49
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1117:9-1117:10)
  1: StorageDead(_37)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1117:9-1117:10)
  2: StorageDead(_36)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1117:9-1117:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb50
  }
  preds [bb29, bb30]
  succs [bb50]

bb50
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb52
  }
  preds [bb39, bb49]
  succs [bb52]

bb51
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1101:9-1101:10)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1101:9-1101:10)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1101:9-1101:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb52
  }
  preds [bb15, bb16]
  succs [bb52]

bb52
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:6-1132:6)
      kind: goto -> bb53
  }
  preds [bb50, bb51]
  succs [bb53]

bb53
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:6-1132:6)
      kind: return
  }
  preds [bb48, bb52]
  succs []

bb54
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1132:5-1132:6)
      kind: drop(_84) -> [return: bb55, unwind terminate(cleanup)]
  }
  preds [bb41, bb42, bb43, bb44, bb45, bb46]
  succs [bb55]

bb55
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:1091:5-1132:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb8, bb9, bb13, bb14, bb17, bb18, bb19, bb20, bb22, bb23, bb27, bb28, bb31, bb32, bb34, bb35, bb36, bb37, bb38, bb40, bb47, bb54]
  succs []

