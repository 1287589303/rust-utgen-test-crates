{
  "regex-automata/src/nfa/thompson/pikevm.rs:1114:12:1114:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "slots.len() >= min",
          "lhs": "slots.len()",
          "rhs": "min",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1097:25:1097:51": [
    {
      "Bool": {
        "Other": "self.get_nfa().has_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1115:22:1115:65": [
    {
      "Try": "self.search_slots_imp(cache, input, slots)?"
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1097:55:1097:79": [
    {
      "Bool": {
        "Other": "self.get_nfa().is_utf8()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1118:12:1118:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.get_nfa().pattern_len() == 1",
          "lhs": "self.get_nfa().pattern_len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1098:13:1098:22": [
    {
      "Bool": {
        "Other": "utf8empty"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1099:22:1099:65": [
    {
      "Try": "self.search_slots_imp(cache, input, slots)?"
    }
  ]
}