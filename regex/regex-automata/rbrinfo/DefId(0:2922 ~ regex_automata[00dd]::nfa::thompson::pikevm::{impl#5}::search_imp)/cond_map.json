{
  "regex-automata/src/nfa/thompson/pikevm.rs:1347:34:1347:44": [
    {
      "Bool": {
        "Other": "allmatches"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1374:16:1374:36": [
    {
      "Bool": {
        "Other": "input.get_earliest()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1293:20:1293:43": [
    {
      "Bool": {
        "Other": "let Some(ref pre) = pre"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1241:13:1241:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "input.haystack().len() < core::usize::MAX",
          "lhs": "input.haystack().len()",
          "rhs": "core::usize::MAX",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1231:12:1231:27": [
    {
      "Bool": {
        "Other": "input.is_done()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1274:16:1274:35": [
    {
      "Bool": {
        "Other": "curr.set.is_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1348:22:1348:30": [
    {
      "Bool": {
        "Other": "anchored"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1283:32:1283:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at > input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1256:16:1256:24": [
    {
      "Bool": {
        "Other": "anchored"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1283:20:1283:28": [
    {
      "Bool": {
        "Other": "anchored"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1366:16:1366:79": [
    {
      "Bool": {
        "Other": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1250:42:1250:66": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/pikevm.rs:1250:42:1250:66",
        "match_str": "self.start_config(input)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/pikevm.rs:1251:13:1251:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1251:21:1251:32"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1252:13:1252:25": {
            "pat": {
              "pat_str": "Some(config)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1252:29:1252:35"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1271:15:1271:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "at <= input.end()",
          "lhs": "at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1347:18:1347:30": [
    {
      "Bool": {
        "Other": "hm.is_some()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1295:27:1295:59": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/pikevm.rs:1295:27:1295:59",
        "match_str": "pre.find(input.haystack(), span)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/pikevm.rs:1296:25:1296:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1296:33:1296:38"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1297:25:1297:39": {
            "pat": {
              "pat_str": "Some(ref span)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1297:43:1297:58"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1277:20:1277:32": [
    {
      "Bool": {
        "Other": "hm.is_some()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1374:40:1374:52": [
    {
      "Bool": {
        "Other": "hm.is_some()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1348:34:1348:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == input.start()",
          "lhs": "at",
          "rhs": "input.start()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1277:37:1277:47": [
    {
      "Bool": {
        "Other": "allmatches"
      }
    }
  ]
}