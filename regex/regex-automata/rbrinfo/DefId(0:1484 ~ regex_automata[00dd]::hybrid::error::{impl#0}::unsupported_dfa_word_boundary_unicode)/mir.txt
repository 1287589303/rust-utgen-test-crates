bb0
  0: StorageLive(_1)
    SourceInfo(regex-automata/src/hybrid/error.rs:58:13-58:16)
  1: _1 = const "cannot build lazy DFAs for regexes with Unicode word boundaries; switch to ASCII word boundaries, or heuristically enable Unicode word boundaries or use a different regex engine"
    SourceInfo(regex-automata/src/hybrid/error.rs:58:19-61:43)
  2: FakeRead(ForLet(None), _1)
    SourceInfo(regex-automata/src/hybrid/error.rs:58:13-58:16)
  3: StorageLive(_2)
    SourceInfo(regex-automata/src/hybrid/error.rs:62:28-62:60)
  4: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/error.rs:62:56-62:59)
  5: _3 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/error.rs:62:56-62:59)
  6: _2 = hybrid::error::BuildErrorKind::Unsupported(move _3)
    SourceInfo(regex-automata/src/hybrid/error.rs:62:28-62:60)
  7: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/error.rs:62:59-62:60)
  8: _0 = hybrid::error::BuildError { kind: move _2 }
    SourceInfo(regex-automata/src/hybrid/error.rs:62:9-62:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/error.rs:62:61-62:62)
      kind: drop(_2) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/hybrid/error.rs:62:61-62:62)
  1: StorageDead(_1)
    SourceInfo(regex-automata/src/hybrid/error.rs:63:5-63:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/error.rs:63:6-63:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/error.rs:57:5-63:6)
      kind: resume
  }
  preds [bb0]
  succs []

