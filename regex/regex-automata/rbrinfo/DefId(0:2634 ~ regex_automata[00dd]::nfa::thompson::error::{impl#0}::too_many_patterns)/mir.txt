bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:109:13-109:18)
  1: _2 = const util::primitives::PatternID::LIMIT
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:109:21-109:37)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:109:13-109:18)
  3: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:28-110:76)
  4: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:62-110:67)
  5: _4 = _1
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:62-110:67)
  6: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:69-110:74)
  7: _5 = _2
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:69-110:74)
  8: _3 = nfa::thompson::error::BuildErrorKind::TooManyPatterns { given: move _4, limit: move _5 }
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:28-110:76)
  9: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:75-110:76)
  10: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:75-110:76)
  11: _0 = nfa::thompson::error::BuildError { kind: move _3 }
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:9-110:78)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:77-110:78)
      kind: drop(_3) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:110:77-110:78)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/error.rs:111:5-111:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:111:6-111:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/error.rs:108:5-111:6)
      kind: resume
  }
  preds [bb0]
  succs []

