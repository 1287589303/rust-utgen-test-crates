bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:9-238:48)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:9-238:18)
  2: _3 = &mut ((*_1).1: std::vec::Vec<nfa::thompson::range_trie::State>)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:9-238:18)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:26-238:47)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:26-238:37)
  5: _5 = &mut ((*_1).0: std::vec::Vec<nfa::thompson::range_trie::State>)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:26-238:37)
  6: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:44-238:46)
  7: _6 = core::ops::RangeFull
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:44-238:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:26-238:47)
      kind: _4 = std::vec::Vec::<nfa::thompson::range_trie::State>::drain::<core::ops::RangeFull>(move _5, move _6) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:46-238:47)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:46-238:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:9-238:48)
      kind: _2 = <std::vec::Vec<nfa::thompson::range_trie::State> as core::iter::Extend<nfa::thompson::range_trie::State>>::extend::<std::vec::Drain<'_, nfa::thompson::range_trie::State>>(move _3, move _4) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:47-238:48)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:47-238:48)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:48-238:49)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:239:9-239:25)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:239:9-239:13)
  5: _8 = &mut (*_1)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:239:9-239:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:239:9-239:25)
      kind: _7 = nfa::thompson::range_trie::RangeTrie::add_empty(move _8) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:239:24-239:25)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:239:25-239:26)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:240:9-240:25)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:240:9-240:13)
  4: _10 = &mut (*_1)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:240:9-240:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:240:9-240:25)
      kind: _9 = nfa::thompson::range_trie::RangeTrie::add_empty(move _10) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:240:24-240:25)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:240:25-240:26)
  2: _0 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:237:29-241:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:241:6-241:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:238:47-238:48)
      kind: drop(_4) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/range_trie.rs:237:5-241:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb5]
  succs []

