bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/search.rs:768:27-768:42)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/search.rs:768:27-768:42)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/search.rs:768:27-768:31)
  3: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/search.rs:768:27-768:31)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:768:27-768:42)
      kind: _4 = util::search::Input::<'_>::haystack(move _5) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = &(*_4)
    SourceInfo(regex-automata/src/util/search.rs:768:27-768:42)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/search.rs:768:41-768:42)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/search.rs:768:44-768:50)
  3: _6 = _2
    SourceInfo(regex-automata/src/util/search.rs:768:44-768:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:768:9-768:51)
      kind: _0 = util::utf8::is_boundary(move _3, move _6) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/search.rs:768:50-768:51)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/search.rs:768:50-768:51)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/search.rs:769:5-769:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:769:6-769:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/search.rs:767:5-769:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

