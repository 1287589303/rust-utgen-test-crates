{
  "regex-automata/src/meta/literal.rs:29:8:29:23": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "hirs.len() != 1",
          "lhs": "hirs.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:51:26:51:31": [
    {
      "For": {
        "iter_var": "e",
        "iter_range": "exprs"
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:30:13:30:50": [
    {
      "Bool": {
        "Other": "info.props()[0].look_set().is_empty()"
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:38:22:38:33": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/literal.rs:38:22:38:33",
        "match_str": "*hir.kind()",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-automata/src/meta/literal.rs:40:9:40:10": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/literal.rs:40:14:40:25"
          },
          "regex-automata/src/meta/literal.rs:39:9:39:39": {
            "pat": {
              "pat_str": "HirKind::Alternation(ref alts)",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/literal.rs:39:43:39:47"
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:32:13:32:53": [
    {
      "Bool": {
        "Other": "info.props()[0].is_alternation_literal()"
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:76:8:76:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "lits.len() < 3000",
          "lhs": "lits.len()",
          "rhs": "3000",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:23:9:23:54": [
    {
      "Bool": {
        "Other": "cfg!(feature = \"perf-literal-multisubstring\")"
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:46:15:46:26": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/literal.rs:46:15:46:26",
        "match_str": "*alt.kind()",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-automata/src/meta/literal.rs:47:13:47:49": {
            "pat": {
              "pat_str": "HirKind::Literal(Literal(ref bytes))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/literal.rs:47:53:49:14"
          },
          "regex-automata/src/meta/literal.rs:50:13:50:39": {
            "pat": {
              "pat_str": "HirKind::Concat(ref exprs)",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/literal.rs:50:43:59:14"
          },
          "regex-automata/src/meta/literal.rs:60:13:60:14": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:31:12:31:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "info.props()[0].explicit_captures_len() > 0",
          "lhs": "info.props()[0].explicit_captures_len()",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:33:12:33:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "info.config().get_match_kind() != MatchKind::LeftmostFirst",
          "lhs": "info.config().get_match_kind()",
          "rhs": "MatchKind::LeftmostFirst",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:52:27:52:36": [
    {
      "Match": {
        "match_source": "regex-automata/src/meta/literal.rs:52:27:52:36",
        "match_str": "*e.kind()",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-automata/src/meta/literal.rs:53:25:53:61": {
            "pat": {
              "pat_str": "HirKind::Literal(Literal(ref bytes))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/meta/literal.rs:53:65:55:26"
          },
          "regex-automata/src/meta/literal.rs:56:25:56:26": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "regex-automata/src/meta/literal.rs:44:16:44:20": [
    {
      "For": {
        "iter_var": "alt",
        "iter_range": "alts"
      }
    }
  ]
}