bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:43)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:34)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:34)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:25)
  4: _5 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:34)
      kind: _4 = dfa::sparse::Transitions::<T>::sparse(move _5) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _3 = &(*_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:34)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:33-1482:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1482:21-1482:43)
      kind: _2 = std::slice::<impl [u8]>::to_vec(move _3) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1482:42-1482:43)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1483:22-1483:42)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1483:22-1483:34)
  3: _7 = &((*_1).1: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1483:22-1483:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1483:22-1483:42)
      kind: _6 = <util::alphabet::ByteClasses as core::clone::Clone>::clone(move _7) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1483:41-1483:42)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1484:24-1484:38)
  2: _8 = ((*_1).2: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1484:24-1484:38)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1485:26-1485:42)
  4: _9 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1485:26-1485:42)
  5: _0 = dfa::sparse::Transitions::<std::vec::Vec<u8>> { sparse: move _2, classes: move _6, state_len: move _8, pattern_len: move _9 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:1481:9-1486:10)
  6: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1486:9-1486:10)
  7: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1486:9-1486:10)
  8: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1486:9-1486:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1486:9-1486:10)
      kind: drop(_2) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1486:9-1486:10)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1487:5-1487:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1487:6-1487:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1486:9-1486:10)
      kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1480:5-1487:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5]
  succs []

