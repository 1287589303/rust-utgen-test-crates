{
  "regex-automata/src/util/pool.rs:618:22:618:27": [
    {
      "For": {
        "iter_var": "_",
        "iter_range": "0..10"
      }
    }
  ],
  "regex-automata/src/util/pool.rs:606:28:606:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "caller % self.stacks.len()",
          "lhs": "caller",
          "rhs": "self.stacks.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/pool.rs:619:39:619:73": [
    {
      "Match": {
        "match_source": "regex-automata/src/util/pool.rs:619:39:619:73",
        "match_str": "self.stacks[stack_id].0.try_lock()",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-automata/src/util/pool.rs:621:21:621:30": {
            "pat": {
              "pat_str": "Ok(stack)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/pool.rs:621:34:621:39"
          },
          "regex-automata/src/util/pool.rs:620:21:620:27": {
            "pat": {
              "pat_str": "Err(_)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/util/pool.rs:620:31:620:39"
          }
        }
      }
    }
  ]
}