bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:80:5-82:6)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:80:8-80:24)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/utf8.rs:80:8-80:13)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/util/utf8.rs:80:8-80:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:80:8-80:24)
      kind: _3 = core::slice::<impl [u8]>::is_empty(move _4) -> [return: bb1, unwind: bb32]
  }
  preds []
  succs [bb1, bb32]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:80:8-80:24)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/utf8.rs:80:23-80:24)
  1: _0 = core::option::Option::<core::result::Result<char, u8>>::None
    SourceInfo(regex-automata/src/util/utf8.rs:81:16-81:20)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:82:5-82:6)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:82:5-82:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:93:2-93:2)
      kind: goto -> bb31
  }
  preds [bb1]
  succs [bb31]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/utf8.rs:80:23-80:24)
  1: _2 = const ()
    SourceInfo(regex-automata/src/util/utf8.rs:82:6-82:6)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:82:5-82:6)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:82:5-82:6)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/util/utf8.rs:83:9-83:18)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/utf8.rs:83:21-83:32)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/util/utf8.rs:83:21-83:26)
  7: _8 = &(*_1)
    SourceInfo(regex-automata/src/util/utf8.rs:83:21-83:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:83:21-83:32)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb4, unwind: bb32]
  }
  preds [bb1]
  succs [bb4, bb32]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/utf8.rs:83:31-83:32)
  1: _9 = SubWithOverflow(_7, const 1_usize)
    SourceInfo(regex-automata/src/util/utf8.rs:83:21-83:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:83:21-83:36)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, const 1_usize) -> [success: bb5, unwind: bb32]
  }
  preds [bb3]
  succs [bb5, bb32]

bb5
  0: _6 = move (_9.0: usize)
    SourceInfo(regex-automata/src/util/utf8.rs:83:21-83:36)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/utf8.rs:83:35-83:36)
  2: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/util/utf8.rs:83:9-83:18)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/utf8.rs:84:9-84:14)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/utf8.rs:84:17-84:28)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:84:17-84:22)
  6: _12 = &(*_1)
    SourceInfo(regex-automata/src/util/utf8.rs:84:17-84:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:84:17-84:28)
      kind: _11 = core::slice::<impl [u8]>::len(move _12) -> [return: bb6, unwind: bb32]
  }
  preds [bb4]
  succs [bb6, bb32]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/utf8.rs:84:27-84:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:84:17-84:46)
      kind: _10 = core::num::<impl usize>::saturating_sub(move _11, const 4_usize) -> [return: bb7, unwind: bb32]
  }
  preds [bb5]
  succs [bb7, bb32]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/utf8.rs:84:45-84:46)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(regex-automata/src/util/utf8.rs:84:9-84:14)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/utf8.rs:85:5-87:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:85:5-87:6)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:85:5-87:6)
      kind: falseUnwind -> [real: bb9, unwind: bb32]
  }
  preds [bb7, bb15]
  succs [bb9, bb32]

bb9
  0: StorageLive(_15)
    SourceInfo(regex-automata/src/util/utf8.rs:85:11-85:24)
  1: StorageLive(_16)
    SourceInfo(regex-automata/src/util/utf8.rs:85:11-85:16)
  2: _16 = _6
    SourceInfo(regex-automata/src/util/utf8.rs:85:11-85:16)
  3: StorageLive(_17)
    SourceInfo(regex-automata/src/util/utf8.rs:85:19-85:24)
  4: _17 = _10
    SourceInfo(regex-automata/src/util/utf8.rs:85:19-85:24)
  5: _15 = Gt(move _16, move _17)
    SourceInfo(regex-automata/src/util/utf8.rs:85:11-85:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:85:11-85:24)
      kind: switchInt(move _15) -> [0: bb16, otherwise: bb10]
  }
  preds [bb8]
  succs [bb10, bb16]

bb10
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/utf8.rs:85:23-85:24)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/utf8.rs:85:23-85:24)
  2: StorageLive(_18)
    SourceInfo(regex-automata/src/util/utf8.rs:85:29-85:69)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/util/utf8.rs:85:56-85:68)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/util/utf8.rs:85:62-85:67)
  5: _20 = _6
    SourceInfo(regex-automata/src/util/utf8.rs:85:62-85:67)
  6: _21 = Len((*_1))
    SourceInfo(regex-automata/src/util/utf8.rs:85:56-85:68)
  7: _22 = Lt(_20, _21)
    SourceInfo(regex-automata/src/util/utf8.rs:85:56-85:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:85:56-85:68)
      kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb11, unwind: bb32]
  }
  preds [bb9]
  succs [bb11, bb32]

bb11
  0: _19 = (*_1)[_20]
    SourceInfo(regex-automata/src/util/utf8.rs:85:56-85:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:85:29-85:69)
      kind: _18 = util::utf8::is_leading_or_invalid_byte(move _19) -> [return: bb12, unwind: bb32]
  }
  preds [bb10]
  succs [bb12, bb32]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:85:29-85:69)
      kind: switchInt(move _18) -> [0: bb14, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb14]

bb13
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/utf8.rs:85:68-85:69)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/util/utf8.rs:85:68-85:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb12]
  succs [bb17]

bb14
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/utf8.rs:85:68-85:69)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/util/utf8.rs:85:68-85:69)
  2: _23 = SubWithOverflow(_6, const 1_usize)
    SourceInfo(regex-automata/src/util/utf8.rs:86:9-86:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:86:9-86:19)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", _6, const 1_usize) -> [success: bb15, unwind: bb32]
  }
  preds [bb12]
  succs [bb15, bb32]

bb15
  0: _6 = move (_23.0: usize)
    SourceInfo(regex-automata/src/util/utf8.rs:86:9-86:19)
  1: _14 = const ()
    SourceInfo(regex-automata/src/util/utf8.rs:85:70-87:6)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/utf8.rs:87:5-87:6)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/util/utf8.rs:87:5-87:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:85:5-87:6)
      kind: goto -> bb8
  }
  preds [bb14]
  succs [bb8]

bb16
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/utf8.rs:85:23-85:24)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/utf8.rs:85:23-85:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb9]
  succs [bb17]

bb17
  0: StorageLive(_25)
    SourceInfo(regex-automata/src/util/utf8.rs:85:5-87:6)
  1: _13 = const ()
    SourceInfo(regex-automata/src/util/utf8.rs:85:5-87:6)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/util/utf8.rs:87:5-87:6)
  3: StorageDead(_18)
    SourceInfo(regex-automata/src/util/utf8.rs:87:5-87:6)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/util/utf8.rs:87:5-87:6)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/util/utf8.rs:87:5-87:6)
  6: StorageLive(_27)
    SourceInfo(regex-automata/src/util/utf8.rs:88:11-88:34)
  7: StorageLive(_28)
    SourceInfo(regex-automata/src/util/utf8.rs:88:18-88:33)
  8: StorageLive(_29)
    SourceInfo(regex-automata/src/util/utf8.rs:88:18-88:33)
  9: StorageLive(_30)
    SourceInfo(regex-automata/src/util/utf8.rs:88:24-88:33)
  10: StorageLive(_31)
    SourceInfo(regex-automata/src/util/utf8.rs:88:19-88:24)
  11: _31 = &(*_1)
    SourceInfo(regex-automata/src/util/utf8.rs:88:19-88:24)
  12: StorageLive(_32)
    SourceInfo(regex-automata/src/util/utf8.rs:88:25-88:32)
  13: StorageLive(_33)
    SourceInfo(regex-automata/src/util/utf8.rs:88:25-88:30)
  14: _33 = _6
    SourceInfo(regex-automata/src/util/utf8.rs:88:25-88:30)
  15: _32 = core::ops::RangeFrom::<usize> { start: move _33 }
    SourceInfo(regex-automata/src/util/utf8.rs:88:25-88:32)
  16: StorageDead(_33)
    SourceInfo(regex-automata/src/util/utf8.rs:88:31-88:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:88:24-88:33)
      kind: _30 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _31, move _32) -> [return: bb18, unwind: bb32]
  }
  preds [bb13, bb16]
  succs [bb18, bb32]

bb18
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/utf8.rs:88:32-88:33)
  1: StorageDead(_31)
    SourceInfo(regex-automata/src/util/utf8.rs:88:32-88:33)
  2: _29 = &(*_30)
    SourceInfo(regex-automata/src/util/utf8.rs:88:18-88:33)
  3: _28 = &(*_29)
    SourceInfo(regex-automata/src/util/utf8.rs:88:18-88:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:88:11-88:34)
      kind: _27 = util::utf8::decode(move _28) -> [return: bb19, unwind: bb32]
  }
  preds [bb17]
  succs [bb19, bb32]

bb19
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/util/utf8.rs:88:33-88:34)
  1: PlaceMention(_27)
    SourceInfo(regex-automata/src/util/utf8.rs:88:11-88:34)
  2: _35 = discriminant(_27)
    SourceInfo(regex-automata/src/util/utf8.rs:88:11-88:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:88:5-88:34)
      kind: switchInt(move _35) -> [0: bb21, 1: bb22, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb21, bb22]

bb20
  0: FakeRead(ForMatchedPlace(None), _27)
    SourceInfo(regex-automata/src/util/utf8.rs:88:11-88:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:88:11-88:34)
      kind: unreachable
  }
  preds [bb19, bb22]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:89:9-89:13)
      kind: falseEdge -> [real: bb25, imaginary: bb22]
  }
  preds [bb19]
  succs [bb22, bb25]

bb22
  0: _34 = discriminant(((_27 as Some).0: core::result::Result<char, u8>))
    SourceInfo(regex-automata/src/util/utf8.rs:88:11-88:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:88:5-88:34)
      kind: switchInt(move _34) -> [0: bb23, 1: bb24, otherwise: bb20]
  }
  preds [bb19, bb21]
  succs [bb20, bb23, bb24]

bb23
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:90:9-90:21)
      kind: falseEdge -> [real: bb26, imaginary: bb24]
  }
  preds [bb22]
  succs [bb24, bb26]

bb24
  0: StorageLive(_39)
    SourceInfo(regex-automata/src/util/utf8.rs:91:30-91:57)
  1: StorageLive(_40)
    SourceInfo(regex-automata/src/util/utf8.rs:91:34-91:56)
  2: StorageLive(_41)
    SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:55)
  3: StorageLive(_42)
    SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:51)
  4: StorageLive(_43)
    SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:45)
  5: _43 = &(*_1)
    SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:51)
      kind: _42 = core::slice::<impl [u8]>::len(move _43) -> [return: bb27, unwind: bb32]
  }
  preds [bb22, bb23]
  succs [bb27, bb32]

bb25
  0: _0 = core::option::Option::<core::result::Result<char, u8>>::None
    SourceInfo(regex-automata/src/util/utf8.rs:89:17-89:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:89:17-89:21)
      kind: goto -> bb30
  }
  preds [bb21]
  succs [bb30]

bb26
  0: StorageLive(_36)
    SourceInfo(regex-automata/src/util/utf8.rs:90:17-90:19)
  1: _36 = ((((_27 as Some).0: core::result::Result<char, u8>) as Ok).0: char)
    SourceInfo(regex-automata/src/util/utf8.rs:90:17-90:19)
  2: StorageLive(_37)
    SourceInfo(regex-automata/src/util/utf8.rs:90:30-90:36)
  3: StorageLive(_38)
    SourceInfo(regex-automata/src/util/utf8.rs:90:33-90:35)
  4: _38 = _36
    SourceInfo(regex-automata/src/util/utf8.rs:90:33-90:35)
  5: _37 = core::result::Result::<char, u8>::Ok(move _38)
    SourceInfo(regex-automata/src/util/utf8.rs:90:30-90:36)
  6: StorageDead(_38)
    SourceInfo(regex-automata/src/util/utf8.rs:90:35-90:36)
  7: _0 = core::option::Option::<core::result::Result<char, u8>>::Some(move _37)
    SourceInfo(regex-automata/src/util/utf8.rs:90:25-90:37)
  8: StorageDead(_37)
    SourceInfo(regex-automata/src/util/utf8.rs:90:36-90:37)
  9: StorageDead(_36)
    SourceInfo(regex-automata/src/util/utf8.rs:90:36-90:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:90:36-90:37)
      kind: goto -> bb30
  }
  preds [bb23]
  succs [bb30]

bb27
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/util/utf8.rs:91:50-91:51)
  1: _44 = SubWithOverflow(_42, const 1_usize)
    SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:55)
      kind: assert(!move (_44.1: bool), "attempt to compute `{} - {}`, which would overflow", move _42, const 1_usize) -> [success: bb28, unwind: bb32]
  }
  preds [bb24]
  succs [bb28, bb32]

bb28
  0: _41 = move (_44.0: usize)
    SourceInfo(regex-automata/src/util/utf8.rs:91:40-91:55)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/util/utf8.rs:91:54-91:55)
  2: _45 = Len((*_1))
    SourceInfo(regex-automata/src/util/utf8.rs:91:34-91:56)
  3: _46 = Lt(_41, _45)
    SourceInfo(regex-automata/src/util/utf8.rs:91:34-91:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:91:34-91:56)
      kind: assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _41) -> [success: bb29, unwind: bb32]
  }
  preds [bb27]
  succs [bb29, bb32]

bb29
  0: _40 = (*_1)[_41]
    SourceInfo(regex-automata/src/util/utf8.rs:91:34-91:56)
  1: _39 = core::result::Result::<char, u8>::Err(move _40)
    SourceInfo(regex-automata/src/util/utf8.rs:91:30-91:57)
  2: StorageDead(_40)
    SourceInfo(regex-automata/src/util/utf8.rs:91:56-91:57)
  3: _0 = core::option::Option::<core::result::Result<char, u8>>::Some(move _39)
    SourceInfo(regex-automata/src/util/utf8.rs:91:25-91:58)
  4: StorageDead(_39)
    SourceInfo(regex-automata/src/util/utf8.rs:91:57-91:58)
  5: StorageDead(_41)
    SourceInfo(regex-automata/src/util/utf8.rs:91:57-91:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:91:57-91:58)
      kind: goto -> bb30
  }
  preds [bb28]
  succs [bb30]

bb30
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/utf8.rs:93:1-93:2)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/utf8.rs:93:1-93:2)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/util/utf8.rs:93:1-93:2)
  3: StorageDead(_29)
    SourceInfo(regex-automata/src/util/utf8.rs:93:1-93:2)
  4: StorageDead(_27)
    SourceInfo(regex-automata/src/util/utf8.rs:93:1-93:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:93:2-93:2)
      kind: goto -> bb31
  }
  preds [bb25, bb26, bb29]
  succs [bb31]

bb31
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:93:2-93:2)
      kind: return
  }
  preds [bb2, bb30]
  succs []

bb32
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:79:1-93:2)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6, bb8, bb10, bb11, bb14, bb17, bb18, bb24, bb27, bb28]
  succs []

