bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:51)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:25)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:19)
  3: _4 = &((*_1).2: std::vec::Vec<dfa::onepass::Transition>)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:25)
      kind: _3 = std::vec::Vec::<dfa::onepass::Transition>::len(move _4) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:24-1537:25)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:28-1537:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1537:28-1537:51)
      kind: _5 = core::mem::size_of::<dfa::onepass::Transition>() -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: _6 = MulWithOverflow(_3, _5)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:51)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, move _5) -> [success: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: _2 = move (_6.0: usize)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1537:51)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:50-1537:51)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:50-1537:51)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:55)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:32)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:26)
  6: _9 = &((*_1).3: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:32)
      kind: _8 = std::vec::Vec::<util::primitives::StateID>::len(move _9) -> [return: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:31-1538:32)
  1: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:35-1538:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1538:35-1538:55)
      kind: _10 = core::mem::size_of::<util::primitives::StateID>() -> [return: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: _11 = MulWithOverflow(_8, _10)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:55)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", move _8, move _10) -> [success: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: _7 = move (_11.0: usize)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:15-1538:55)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:54-1538:55)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:54-1538:55)
  3: _12 = AddWithOverflow(_2, _7)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1538:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1538:55)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _7) -> [success: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: _0 = move (_12.0: usize)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1537:9-1538:55)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:54-1538:55)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/onepass.rs:1538:54-1538:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1539:6-1539:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/onepass.rs:1534:5-1539:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

