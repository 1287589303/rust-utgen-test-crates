bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-845:38)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-844:33)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-843:33)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-842:36)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-841:27)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-840:36)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-839:45)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-838:37)
  8: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:31-838:36)
  9: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:31-838:36)
  10: _11 = const dfa::sparse::LABEL
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:31-838:36)
  11: _10 = &(*_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:31-838:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-838:37)
      kind: _9 = util::wire::write_label_len(move _10) -> [return: bb1, unwind: bb18]
  }
  preds []
  succs [bb1, bb18]

bb1
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:36-838:37)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:839:11-839:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:839:11-839:45)
      kind: _12 = util::wire::write_endianness_check_len() -> [return: bb2, unwind: bb18]
  }
  preds [bb0]
  succs [bb2, bb18]

bb2
  0: _13 = AddWithOverflow(_9, _12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-839:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-839:45)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _12) -> [success: bb3, unwind: bb18]
  }
  preds [bb1]
  succs [bb3, bb18]

bb3
  0: _8 = move (_13.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-839:45)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:839:44-839:45)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:839:44-839:45)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:840:11-840:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:840:11-840:36)
      kind: _14 = util::wire::write_version_len() -> [return: bb4, unwind: bb18]
  }
  preds [bb2]
  succs [bb4, bb18]

bb4
  0: _15 = AddWithOverflow(_8, _14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-840:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-840:36)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _14) -> [success: bb5, unwind: bb18]
  }
  preds [bb3]
  succs [bb5, bb18]

bb5
  0: _7 = move (_15.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-840:36)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:840:35-840:36)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:840:35-840:36)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:841:11-841:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:841:11-841:27)
      kind: _16 = core::mem::size_of::<u32>() -> [return: bb6, unwind: bb18]
  }
  preds [bb4]
  succs [bb6, bb18]

bb6
  0: _17 = AddWithOverflow(_7, _16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-841:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-841:27)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _16) -> [success: bb7, unwind: bb18]
  }
  preds [bb5]
  succs [bb7, bb18]

bb7
  0: _6 = move (_17.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-841:27)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:841:26-841:27)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:841:26-841:27)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:842:11-842:36)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:842:11-842:21)
  5: _19 = &((*_1).5: dfa::dense::Flags)
    SourceInfo(regex-automata/src/dfa/sparse.rs:842:11-842:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:842:11-842:36)
      kind: _18 = dfa::dense::Flags::write_to_len(move _19) -> [return: bb8, unwind: bb18]
  }
  preds [bb6]
  succs [bb8, bb18]

bb8
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:842:35-842:36)
  1: _20 = AddWithOverflow(_6, _18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-842:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-842:36)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _18) -> [success: bb9, unwind: bb18]
  }
  preds [bb7]
  succs [bb9, bb18]

bb9
  0: _5 = move (_20.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-842:36)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:842:35-842:36)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:842:35-842:36)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:843:11-843:33)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:843:11-843:18)
  5: _22 = &((*_1).0: dfa::sparse::Transitions<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:843:11-843:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:843:11-843:33)
      kind: _21 = dfa::sparse::Transitions::<T>::write_to_len(move _22) -> [return: bb10, unwind: bb18]
  }
  preds [bb8]
  succs [bb10, bb18]

bb10
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:843:32-843:33)
  1: _23 = AddWithOverflow(_5, _21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-843:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-843:33)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _21) -> [success: bb11, unwind: bb18]
  }
  preds [bb9]
  succs [bb11, bb18]

bb11
  0: _4 = move (_23.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-843:33)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:843:32-843:33)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:843:32-843:33)
  3: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:844:11-844:33)
  4: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:844:11-844:18)
  5: _25 = &((*_1).1: dfa::sparse::StartTable<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:844:11-844:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:844:11-844:33)
      kind: _24 = dfa::sparse::StartTable::<T>::write_to_len(move _25) -> [return: bb12, unwind: bb18]
  }
  preds [bb10]
  succs [bb12, bb18]

bb12
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:844:32-844:33)
  1: _26 = AddWithOverflow(_4, _24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-844:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-844:33)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _24) -> [success: bb13, unwind: bb18]
  }
  preds [bb11]
  succs [bb13, bb18]

bb13
  0: _3 = move (_26.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-844:33)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:844:32-844:33)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:844:32-844:33)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:845:11-845:38)
  4: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:845:11-845:23)
  5: _28 = &((*_1).2: dfa::special::Special)
    SourceInfo(regex-automata/src/dfa/sparse.rs:845:11-845:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:845:11-845:38)
      kind: _27 = dfa::special::Special::write_to_len(move _28) -> [return: bb14, unwind: bb18]
  }
  preds [bb12]
  succs [bb14, bb18]

bb14
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:845:37-845:38)
  1: _29 = AddWithOverflow(_3, _27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-845:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-845:38)
      kind: assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _27) -> [success: bb15, unwind: bb18]
  }
  preds [bb13]
  succs [bb15, bb18]

bb15
  0: _2 = move (_29.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-845:38)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:845:37-845:38)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:845:37-845:38)
  3: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:846:11-846:38)
  4: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:846:11-846:23)
  5: _31 = &((*_1).4: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/dfa/sparse.rs:846:11-846:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:846:11-846:38)
      kind: _30 = util::alphabet::ByteSet::write_to_len(move _31) -> [return: bb16, unwind: bb18]
  }
  preds [bb14]
  succs [bb16, bb18]

bb16
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:846:37-846:38)
  1: _32 = AddWithOverflow(_2, _30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-846:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-846:38)
      kind: assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _30) -> [success: bb17, unwind: bb18]
  }
  preds [bb15]
  succs [bb17, bb18]

bb17
  0: _0 = move (_32.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:838:9-846:38)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:846:37-846:38)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:846:37-846:38)
  3: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:847:5-847:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:847:6-847:6)
      kind: return
  }
  preds [bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:837:5-847:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb15, bb16]
  succs []

