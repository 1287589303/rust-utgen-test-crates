bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:9-2525:28)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:9-2525:17)
  2: _4 = &mut ((*_1).0: std::collections::BTreeSet<util::primitives::StateID>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:9-2525:17)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:25-2525:27)
  4: _5 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:25-2525:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2525:9-2525:28)
      kind: _3 = std::collections::BTreeSet::<util::primitives::StateID>::insert(move _4, move _5) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:27-2525:28)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:27-2525:28)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2525:28-2525:29)
  3: _0 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2524:39-2526:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2526:6-2526:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2524:5-2526:6)
      kind: resume
  }
  preds [bb0]
  succs []

