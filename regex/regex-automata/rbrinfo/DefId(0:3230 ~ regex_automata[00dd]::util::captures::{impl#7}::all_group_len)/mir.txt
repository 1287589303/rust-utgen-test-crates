bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/captures.rs:2037:9-2037:24)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/captures.rs:2037:9-2037:13)
  2: _3 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:2037:9-2037:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2037:9-2037:24)
      kind: _2 = util::captures::GroupInfo::slot_len(move _3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/captures.rs:2037:23-2037:24)
  1: _4 = Eq(const 2_usize, const 0_usize)
    SourceInfo(regex-automata/src/util/captures.rs:2037:9-2037:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2037:9-2037:28)
      kind: assert(!move _4, "attempt to divide `{}` by zero", _2) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = Div(move _2, const 2_usize)
    SourceInfo(regex-automata/src/util/captures.rs:2037:9-2037:28)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/captures.rs:2037:27-2037:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2038:6-2038:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:2036:5-2038:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

