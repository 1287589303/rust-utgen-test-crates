bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:295:16-295:33)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:295:28-295:32)
  2: _4 = _2
    SourceInfo(regex-automata/src/util/alphabet.rs:295:28-295:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:295:16-295:33)
      kind: _3 = <usize as core::convert::From<u8>>::from(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:295:32-295:33)
  1: _5 = Len(((*_1).0: [u8; 256]))
    SourceInfo(regex-automata/src/util/alphabet.rs:295:9-295:34)
  2: _6 = Lt(_3, _5)
    SourceInfo(regex-automata/src/util/alphabet.rs:295:9-295:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:295:9-295:34)
      kind: assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = ((*_1).0: [u8; 256])[_3]
    SourceInfo(regex-automata/src/util/alphabet.rs:295:9-295:34)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:296:5-296:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:296:6-296:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:294:5-296:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

