bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:26-555:45)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:26-555:34)
  2: _5 = &((*_1).8: meta::wrappers::DFA)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:26-555:34)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:39-555:44)
  4: _6 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:39-555:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:555:26-555:45)
      kind: _4 = meta::wrappers::DFA::get(move _5, move _6) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:44-555:45)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:44-555:45)
  2: PlaceMention(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:26-555:45)
  3: _7 = discriminant(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:26-555:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:555:16-555:23)
      kind: switchInt(move _7) -> [1: bb2, otherwise: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:555:16-555:23)
      kind: falseEdge -> [real: bb3, imaginary: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:21-555:22)
  1: _8 = ((_4 as Some).0: &meta::wrappers::DFAEngine)
    SourceInfo(regex-automata/src/meta/strategy.rs:555:21-555:22)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:18-557:37)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:18-557:19)
  4: _10 = &(*_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:18-557:19)
  5: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:31-557:36)
  6: _11 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:31-557:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:557:18-557:37)
      kind: _9 = meta::wrappers::DFAEngine::try_search(move _10, move _11) -> [return: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:36-557:37)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:36-557:37)
  2: _0 = core::option::Option::<core::result::Result<core::option::Option<util::search::Match>, meta::error::RetryFailError>>::Some(move _9)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:13-557:38)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/meta/strategy.rs:557:37-557:38)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:9-558:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:555:9-563:10)
      kind: goto -> bb12
  }
  preds [bb3]
  succs [bb12]

bb5
  0: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:33-558:55)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:33-558:44)
  2: _13 = &((*_1).7: meta::wrappers::Hybrid)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:33-558:44)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:49-558:54)
  4: _14 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:49-558:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:558:33-558:55)
      kind: _12 = meta::wrappers::Hybrid::get(move _13, move _14) -> [return: bb6, unwind: bb13]
  }
  preds [bb1, bb2]
  succs [bb6, bb13]

bb6
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:54-558:55)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:54-558:55)
  2: PlaceMention(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:33-558:55)
  3: _15 = discriminant(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:33-558:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:558:23-558:30)
      kind: switchInt(move _15) -> [1: bb7, otherwise: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:558:23-558:30)
      kind: falseEdge -> [real: bb8, imaginary: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:28-558:29)
  1: _16 = ((_12 as Some).0: &meta::wrappers::HybridEngine)
    SourceInfo(regex-automata/src/meta/strategy.rs:558:28-558:29)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:18-560:56)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:18-560:19)
  4: _18 = &(*_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:18-560:19)
  5: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:31-560:48)
  6: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:31-560:48)
  7: _20 = &mut ((*_2).4: meta::wrappers::HybridCache)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:31-560:48)
  8: _19 = &mut (*_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:31-560:48)
  9: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:50-560:55)
  10: _21 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:50-560:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:560:18-560:56)
      kind: _17 = meta::wrappers::HybridEngine::try_search(move _18, move _19, move _21) -> [return: bb9, unwind: bb13]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:55-560:56)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:55-560:56)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:55-560:56)
  3: _0 = core::option::Option::<core::result::Result<core::option::Option<util::search::Match>, meta::error::RetryFailError>>::Some(move _17)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:13-560:57)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/meta/strategy.rs:560:56-560:57)
  5: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:561:9-561:10)
  6: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:561:9-561:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:558:16-563:10)
      kind: goto -> bb11
  }
  preds [bb8]
  succs [bb11]

bb10
  0: _0 = core::option::Option::<core::result::Result<core::option::Option<util::search::Match>, meta::error::RetryFailError>>::None
    SourceInfo(regex-automata/src/meta/strategy.rs:562:13-562:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:558:16-563:10)
      kind: goto -> bb11
  }
  preds [bb6, bb7]
  succs [bb11]

bb11
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:563:9-563:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:555:9-563:10)
      kind: goto -> bb12
  }
  preds [bb9, bb10]
  succs [bb12]

bb12
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:564:5-564:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:564:6-564:6)
      kind: return
  }
  preds [bb4, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:550:5-564:6)
      kind: resume
  }
  preds [bb0, bb3, bb5, bb8]
  succs []

