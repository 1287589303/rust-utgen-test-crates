bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/primitives.rs:284:9-284:36)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/primitives.rs:284:9-284:36)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/primitives.rs:284:19-284:35)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/primitives.rs:284:19-284:24)
  4: _6 = &_2
    SourceInfo(regex-automata/src/util/primitives.rs:284:19-284:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:284:19-284:35)
      kind: _5 = util::primitives::SmallIndex::as_usize(move _6) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/primitives.rs:284:34-284:35)
  1: _7 = Len((*_1))
    SourceInfo(regex-automata/src/util/primitives.rs:284:14-284:36)
  2: _8 = Lt(_5, _7)
    SourceInfo(regex-automata/src/util/primitives.rs:284:14-284:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:284:14-284:36)
      kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _5) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _4 = &mut (*_1)[_5]
    SourceInfo(regex-automata/src/util/primitives.rs:284:9-284:36)
  1: _3 = &mut (*_4)
    SourceInfo(regex-automata/src/util/primitives.rs:284:9-284:36)
  2: _0 = &mut (*_3)
    SourceInfo(regex-automata/src/util/primitives.rs:284:9-284:36)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/primitives.rs:285:5-285:6)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/primitives.rs:285:5-285:6)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/primitives.rs:285:5-285:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:285:6-285:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:283:5-285:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

