bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/wire.rs:323:9-323:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:323:21-323:47)
      kind: _2 = core::mem::align_of::<T>() -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/wire.rs:323:9-323:18)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/wire.rs:324:9-324:16)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/wire.rs:324:19-324:33)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/wire.rs:324:19-324:24)
  4: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/wire.rs:324:19-324:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:324:19-324:33)
      kind: _4 = core::slice::<impl [u8]>::as_ptr(move _5) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/wire.rs:324:32-324:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:324:19-324:44)
      kind: _3 = <*const u8 as util::int::Pointer>::as_usize(move _4) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/wire.rs:324:43-324:44)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/wire.rs:324:9-324:16)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/wire.rs:325:5-327:6)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/wire.rs:325:8-325:32)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/wire.rs:325:8-325:27)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/wire.rs:325:8-325:15)
  6: _9 = _3
    SourceInfo(regex-automata/src/util/wire.rs:325:8-325:15)
  7: StorageLive(_10)
    SourceInfo(regex-automata/src/util/wire.rs:325:18-325:27)
  8: _10 = _2
    SourceInfo(regex-automata/src/util/wire.rs:325:18-325:27)
  9: _11 = Eq(_10, const 0_usize)
    SourceInfo(regex-automata/src/util/wire.rs:325:8-325:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:325:8-325:27)
      kind: assert(!move _11, "attempt to calculate the remainder of `{}` with a divisor of zero", _9) -> [success: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: _8 = Rem(move _9, move _10)
    SourceInfo(regex-automata/src/util/wire.rs:325:8-325:27)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/wire.rs:325:26-325:27)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/wire.rs:325:26-325:27)
  3: _7 = Eq(move _8, const 0_usize)
    SourceInfo(regex-automata/src/util/wire.rs:325:8-325:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:325:8-325:32)
      kind: switchInt(move _7) -> [0: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/wire.rs:325:31-325:32)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/util/wire.rs:326:19-326:21)
  2: _13 = ()
    SourceInfo(regex-automata/src/util/wire.rs:326:19-326:21)
  3: _0 = core::result::Result::<(), util::wire::DeserializeError>::Ok(move _13)
    SourceInfo(regex-automata/src/util/wire.rs:326:16-326:22)
  4: StorageDead(_13)
    SourceInfo(regex-automata/src/util/wire.rs:326:21-326:22)
  5: StorageDead(_7)
    SourceInfo(regex-automata/src/util/wire.rs:327:5-327:6)
  6: StorageDead(_6)
    SourceInfo(regex-automata/src/util/wire.rs:327:5-327:6)
  7: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:329:1-329:2)
  8: StorageDead(_2)
    SourceInfo(regex-automata/src/util/wire.rs:329:1-329:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:329:2-329:2)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb6
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/wire.rs:325:31-325:32)
  1: _6 = const ()
    SourceInfo(regex-automata/src/util/wire.rs:327:6-327:6)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/wire.rs:327:5-327:6)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/wire.rs:327:5-327:6)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/util/wire.rs:328:9-328:65)
  5: StorageLive(_15)
    SourceInfo(regex-automata/src/util/wire.rs:328:46-328:55)
  6: _15 = _2
    SourceInfo(regex-automata/src/util/wire.rs:328:46-328:55)
  7: StorageLive(_16)
    SourceInfo(regex-automata/src/util/wire.rs:328:57-328:64)
  8: _16 = _3
    SourceInfo(regex-automata/src/util/wire.rs:328:57-328:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:328:9-328:65)
      kind: _14 = util::wire::DeserializeError::alignment_mismatch(move _15, move _16) -> [return: bb7, unwind: bb9]
  }
  preds [bb4]
  succs [bb7, bb9]

bb7
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/wire.rs:328:64-328:65)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/util/wire.rs:328:64-328:65)
  2: _0 = core::result::Result::<(), util::wire::DeserializeError>::Err(move _14)
    SourceInfo(regex-automata/src/util/wire.rs:328:5-328:66)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/wire.rs:328:65-328:66)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:329:1-329:2)
  5: StorageDead(_2)
    SourceInfo(regex-automata/src/util/wire.rs:329:1-329:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:329:2-329:2)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:329:2-329:2)
      kind: return
  }
  preds [bb5, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:320:1-329:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb6]
  succs []

