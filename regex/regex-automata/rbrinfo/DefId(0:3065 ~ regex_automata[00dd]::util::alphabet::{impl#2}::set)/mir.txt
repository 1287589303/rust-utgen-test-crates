bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:289:37-289:42)
  1: _4 = _3
    SourceInfo(regex-automata/src/util/alphabet.rs:289:37-289:42)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:289:16-289:33)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:289:28-289:32)
  4: _6 = _2
    SourceInfo(regex-automata/src/util/alphabet.rs:289:28-289:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:289:16-289:33)
      kind: _5 = <usize as core::convert::From<u8>>::from(move _6) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/alphabet.rs:289:32-289:33)
  1: _7 = Len(((*_1).0: [u8; 256]))
    SourceInfo(regex-automata/src/util/alphabet.rs:289:9-289:34)
  2: _8 = Lt(_5, _7)
    SourceInfo(regex-automata/src/util/alphabet.rs:289:9-289:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:289:9-289:34)
      kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _5) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: ((*_1).0: [u8; 256])[_5] = move _4
    SourceInfo(regex-automata/src/util/alphabet.rs:289:9-289:42)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:289:41-289:42)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:289:42-289:43)
  3: _0 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:288:48-290:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:290:6-290:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:288:5-290:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

