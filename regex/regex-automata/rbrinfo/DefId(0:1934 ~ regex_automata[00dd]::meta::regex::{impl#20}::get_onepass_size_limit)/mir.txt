bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:9-3086:32)
  1: _2 = ((*_1).6: core::option::Option<core::option::Option<usize>>)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:9-3086:32)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:43-3086:62)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:48-3086:61)
  4: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:52-3086:61)
  5: _6 = const 20_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:52-3086:61)
  6: _7 = Lt(move _6, const 64_u32)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:52-3086:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3086:52-3086:61)
      kind: assert(move _7, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _5 = Shl(const 1_usize, const 20_i32)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:52-3086:61)
  1: _8 = MulWithOverflow(const 1_usize, _5)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:48-3086:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3086:48-3086:61)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1_usize, move _5) -> [success: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _4 = move (_8.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:48-3086:61)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:60-3086:61)
  2: _3 = core::option::Option::<usize>::Some(move _4)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:43-3086:62)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:61-3086:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3086:9-3086:63)
      kind: _0 = core::option::Option::<core::option::Option<usize>>::unwrap_or(move _2, move _3) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:62-3086:63)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:3086:62-3086:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3087:6-3087:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3085:5-3087:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

