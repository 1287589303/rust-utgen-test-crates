bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/wire.rs:481:5-483:6)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/wire.rs:481:8-481:25)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/wire.rs:481:8-481:19)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/util/wire.rs:481:8-481:13)
  4: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/wire.rs:481:8-481:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:481:8-481:19)
      kind: _4 = core::str::<impl str>::len(move _5) -> [return: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/wire.rs:481:18-481:19)
  1: _3 = Gt(move _4, const 255_usize)
    SourceInfo(regex-automata/src/util/wire.rs:481:8-481:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:481:8-481:25)
      kind: switchInt(move _3) -> [0: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/wire.rs:481:24-481:25)
  1: StorageLive(_8)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  2: StorageLive(_9)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/wire.rs:482:16-482:57)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/wire.rs:482:16-482:57)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/wire.rs:482:16-482:57)
  6: _12 = [const "label must not be longer than 255 bytes"]
    SourceInfo(regex-automata/src/util/wire.rs:482:16-482:57)
  7: _11 = &_12
    SourceInfo(regex-automata/src/util/wire.rs:482:16-482:57)
  8: _10 = &(*_11)
    SourceInfo(regex-automata/src/util/wire.rs:482:16-482:57)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _9 = core::fmt::Arguments::<'_>::new_const::<1>(move _10) -> [return: bb3, unwind: bb16]
  }
  preds [bb1]
  succs [bb3, bb16]

bb3
  0: StorageDead(_10)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _8 = core::panicking::panic_fmt(move _9) -> bb16
  }
  preds [bb2]
  succs [bb16]

bb4
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/wire.rs:481:24-481:25)
  1: _2 = const ()
    SourceInfo(regex-automata/src/util/wire.rs:483:6-483:6)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/util/wire.rs:483:5-483:6)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/util/wire.rs:483:5-483:6)
  4: StorageLive(_13)
    SourceInfo(regex-automata/src/util/wire.rs:484:5-486:6)
  5: StorageLive(_14)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:63)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:53)
  7: StorageLive(_16)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:53)
  8: StorageLive(_17)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:31)
  9: StorageLive(_18)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:31)
  10: StorageLive(_19)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:24)
  11: StorageLive(_20)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:24)
  12: StorageLive(_21)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:13)
  13: _21 = &(*_1)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:484:8-484:24)
      kind: _20 = core::str::<impl str>::as_bytes(move _21) -> [return: bb5, unwind: bb16]
  }
  preds [bb1]
  succs [bb5, bb16]

bb5
  0: _19 = &(*_20)
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:24)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/util/wire.rs:484:23-484:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:484:8-484:31)
      kind: _18 = core::slice::<impl [u8]>::iter(move _19) -> [return: bb6, unwind: bb16]
  }
  preds [bb4]
  succs [bb6, bb16]

bb6
  0: _17 = &mut _18
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:31)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/wire.rs:484:30-484:31)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/wire.rs:484:41-484:52)
  3: _22 = {closure@regex-automata/src/util/wire.rs:484:41: 484:45}
    SourceInfo(regex-automata/src/util/wire.rs:484:41-484:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:484:8-484:53)
      kind: _16 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::position::<{closure@regex-automata/src/util/wire.rs:484:41: 484:45}>(move _17, move _22) -> [return: bb7, unwind: bb16]
  }
  preds [bb5]
  succs [bb7, bb16]

bb7
  0: _15 = &_16
    SourceInfo(regex-automata/src/util/wire.rs:484:8-484:53)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/wire.rs:484:52-484:53)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/util/wire.rs:484:52-484:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:484:8-484:63)
      kind: _14 = core::option::Option::<usize>::is_some(move _15) -> [return: bb8, unwind: bb16]
  }
  preds [bb6]
  succs [bb8, bb16]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:484:8-484:63)
      kind: switchInt(move _14) -> [0: bb11, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  4: StorageLive(_25)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  5: StorageLive(_26)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  6: StorageLive(_27)
    SourceInfo(regex-automata/src/util/wire.rs:485:16-485:50)
  7: StorageLive(_28)
    SourceInfo(regex-automata/src/util/wire.rs:485:16-485:50)
  8: StorageLive(_29)
    SourceInfo(regex-automata/src/util/wire.rs:485:16-485:50)
  9: _29 = [const "label must not contain NUL bytes"]
    SourceInfo(regex-automata/src/util/wire.rs:485:16-485:50)
  10: _28 = &_29
    SourceInfo(regex-automata/src/util/wire.rs:485:16-485:50)
  11: _27 = &(*_28)
    SourceInfo(regex-automata/src/util/wire.rs:485:16-485:50)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _26 = core::fmt::Arguments::<'_>::new_const::<1>(move _27) -> [return: bb10, unwind: bb16]
  }
  preds [bb8]
  succs [bb10, bb16]

bb10
  0: StorageDead(_27)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _25 = core::panicking::panic_fmt(move _26) -> bb16
  }
  preds [bb9]
  succs [bb16]

bb11
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  1: StorageDead(_18)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/util/wire.rs:484:62-484:63)
  4: _13 = const ()
    SourceInfo(regex-automata/src/util/wire.rs:486:6-486:6)
  5: StorageDead(_14)
    SourceInfo(regex-automata/src/util/wire.rs:486:5-486:6)
  6: StorageDead(_13)
    SourceInfo(regex-automata/src/util/wire.rs:486:5-486:6)
  7: StorageLive(_30)
    SourceInfo(regex-automata/src/util/wire.rs:487:9-487:18)
  8: StorageLive(_31)
    SourceInfo(regex-automata/src/util/wire.rs:487:21-487:32)
  9: StorageLive(_32)
    SourceInfo(regex-automata/src/util/wire.rs:487:21-487:26)
  10: _32 = &(*_1)
    SourceInfo(regex-automata/src/util/wire.rs:487:21-487:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:487:21-487:32)
      kind: _31 = core::str::<impl str>::len(move _32) -> [return: bb12, unwind: bb16]
  }
  preds [bb8]
  succs [bb12, bb16]

bb12
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/wire.rs:487:31-487:32)
  1: _33 = AddWithOverflow(_31, const 1_usize)
    SourceInfo(regex-automata/src/util/wire.rs:487:21-487:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:487:21-487:36)
      kind: assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _31, const 1_usize) -> [success: bb13, unwind: bb16]
  }
  preds [bb11]
  succs [bb13, bb16]

bb13
  0: _30 = move (_33.0: usize)
    SourceInfo(regex-automata/src/util/wire.rs:487:21-487:36)
  1: StorageDead(_31)
    SourceInfo(regex-automata/src/util/wire.rs:487:35-487:36)
  2: FakeRead(ForLet(None), _30)
    SourceInfo(regex-automata/src/util/wire.rs:487:9-487:18)
  3: StorageLive(_34)
    SourceInfo(regex-automata/src/util/wire.rs:488:5-488:14)
  4: _34 = _30
    SourceInfo(regex-automata/src/util/wire.rs:488:5-488:14)
  5: StorageLive(_35)
    SourceInfo(regex-automata/src/util/wire.rs:488:17-488:39)
  6: StorageLive(_36)
    SourceInfo(regex-automata/src/util/wire.rs:488:29-488:38)
  7: _36 = _30
    SourceInfo(regex-automata/src/util/wire.rs:488:29-488:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:488:17-488:39)
      kind: _35 = util::wire::padding_len(move _36) -> [return: bb14, unwind: bb16]
  }
  preds [bb12]
  succs [bb14, bb16]

bb14
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/util/wire.rs:488:38-488:39)
  1: _37 = AddWithOverflow(_34, _35)
    SourceInfo(regex-automata/src/util/wire.rs:488:5-488:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:488:5-488:39)
      kind: assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", move _34, move _35) -> [success: bb15, unwind: bb16]
  }
  preds [bb13]
  succs [bb15, bb16]

bb15
  0: _0 = move (_37.0: usize)
    SourceInfo(regex-automata/src/util/wire.rs:488:5-488:39)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/util/wire.rs:488:38-488:39)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/util/wire.rs:488:38-488:39)
  3: StorageDead(_30)
    SourceInfo(regex-automata/src/util/wire.rs:489:1-489:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:489:2-489:2)
      kind: return
  }
  preds [bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/wire.rs:480:1-489:2)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb4, bb5, bb6, bb7, bb9, bb10, bb11, bb12, bb13, bb14]
  succs []

