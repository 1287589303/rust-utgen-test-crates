bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:25-180:57)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:25-180:37)
  2: _4 = (_2.0: core::option::Option<util::search::MatchKind>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:25-180:37)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:41-180:56)
  4: _5 = ((*_1).0: core::option::Option<util::search::MatchKind>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:41-180:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:25-180:57)
      kind: _3 = core::option::Option::<util::search::MatchKind>::or(move _4, move _5) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:56-180:57)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:180:56-180:57)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:18-181:52)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:18-181:23)
  4: _7 = move (_2.1: core::option::Option<core::option::Option<util::prefilter::Prefilter>>)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:18-181:23)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:32-181:51)
  6: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:32-181:51)
  7: _9 = &(*_1)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:32-181:51)
  8: _8 = {closure@regex-automata/src/nfa/thompson/pikevm.rs:181:32: 181:34} { self: move _9 }
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:32-181:51)
  9: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:33-181:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:18-181:52)
      kind: _6 = core::option::Option::<core::option::Option<util::prefilter::Prefilter>>::or_else::<{closure@regex-automata/src/nfa/thompson/pikevm.rs:181:32: 181:34}>(move _7, move _8) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:51-181:52)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:51-181:52)
  2: _0 = nfa::thompson::pikevm::Config { match_kind: move _3, pre: move _6 }
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:179:9-182:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:182:9-182:10)
      kind: drop(_6) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:182:9-182:10)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:182:9-182:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:183:5-183:6)
      kind: drop(_2) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:183:6-183:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:181:51-181:52)
      kind: drop(_7) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:183:5-183:6)
      kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)]
  }
  preds [bb0, bb2, bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/pikevm.rs:178:5-183:6)
      kind: resume
  }
  preds [bb3, bb6]
  succs []

