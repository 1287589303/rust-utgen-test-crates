bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:57)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:25)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:19)
  3: _4 = &((*_1).0: std::vec::Vec<nfa::thompson::backtrack::Frame>)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:25)
      kind: _3 = std::vec::Vec::<nfa::thompson::backtrack::Frame>::len(move _4) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:24-1730:25)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:28-1730:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:28-1730:57)
      kind: _5 = core::mem::size_of::<nfa::thompson::backtrack::Frame>() -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _6 = MulWithOverflow(_3, _5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:57)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, move _5) -> [success: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _2 = move (_6.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1730:57)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:56-1730:57)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:56-1730:57)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1731:15-1731:42)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1731:15-1731:27)
  5: _8 = &((*_1).1: nfa::thompson::backtrack::Visited)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1731:15-1731:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1731:15-1731:42)
      kind: _7 = nfa::thompson::backtrack::Visited::memory_usage(move _8) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1731:41-1731:42)
  1: _9 = AddWithOverflow(_2, _7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1731:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1731:42)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _7) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _0 = move (_9.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1730:9-1731:42)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1731:41-1731:42)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1731:41-1731:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1732:6-1732:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1729:5-1732:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

