bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:944:9-944:34)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:944:9-944:13)
  2: _5 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:944:9-944:13)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:944:21-944:29)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/look.rs:944:21-944:29)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:944:31-944:33)
  6: _7 = _3
    SourceInfo(regex-automata/src/util/look.rs:944:31-944:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:944:9-944:34)
      kind: _4 = util::look::LookMatcher::is_end(move _5, move _6, move _7) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:944:9-944:34)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:944:33-944:34)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:944:33-944:34)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:944:33-944:34)
  3: _0 = const true
    SourceInfo(regex-automata/src/util/look.rs:944:9-944:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:944:9-944:69)
      kind: goto -> bb5
  }
  preds [bb1]
  succs [bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:944:33-944:34)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:944:33-944:34)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:944:33-944:34)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:944:38-944:50)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:944:47-944:49)
  5: _9 = _3
    SourceInfo(regex-automata/src/util/look.rs:944:47-944:49)
  6: _10 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:944:38-944:50)
  7: _11 = Lt(_9, _10)
    SourceInfo(regex-automata/src/util/look.rs:944:38-944:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:944:38-944:50)
      kind: assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb4, unwind: bb6]
  }
  preds [bb1]
  succs [bb4, bb6]

bb4
  0: _8 = (*_2)[_9]
    SourceInfo(regex-automata/src/util/look.rs:944:38-944:50)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:944:54-944:69)
  2: _12 = (((*_1).0: util::escape::DebugByte).0: u8)
    SourceInfo(regex-automata/src/util/look.rs:944:54-944:69)
  3: _0 = Eq(move _8, move _12)
    SourceInfo(regex-automata/src/util/look.rs:944:38-944:69)
  4: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:944:68-944:69)
  5: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:944:68-944:69)
  6: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:944:68-944:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:944:9-944:69)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:944:68-944:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:945:6-945:6)
      kind: return
  }
  preds [bb2, bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:943:5-945:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

