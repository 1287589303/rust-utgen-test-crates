bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:150:15-150:20)
  1: _2 = discriminant((*_1))
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:150:15-150:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:150:9-150:20)
      kind: switchInt(move _2) -> [0: bb5, 1: bb5, 2: bb2, 3: bb5, 4: bb5, 5: bb5, 6: bb3, 7: bb4, 8: bb5, 9: bb5, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5, bb5, bb5, bb5, bb5, bb5, bb5]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:150:15-150:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:150:15-150:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:158:13-158:46)
      kind: falseEdge -> [real: bb7, imaginary: bb3]
  }
  preds [bb0, bb5]
  succs [bb3, bb7]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:161:13-161:44)
      kind: falseEdge -> [real: bb11, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb11]

bb4
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:164:35-164:49)
  1: _13 = &(((*_1) as UnionReverse).0: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:164:35-164:49)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:17-165:33)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:17-165:27)
  4: _15 = &(*_13)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:17-165:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:17-165:33)
      kind: _14 = std::vec::Vec::<util::primitives::StateID>::len(move _15) -> [return: bb15, unwind: bb19]
  }
  preds [bb0, bb3]
  succs [bb15, bb19]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:151:13-157:34)
      kind: falseEdge -> [real: bb6, imaginary: bb2]
  }
  preds [bb0, bb0, bb0, bb0, bb0, bb0, bb0]
  succs [bb2, bb6]

bb6
  0: _0 = const 0_usize
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:157:38-157:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:157:38-157:39)
      kind: goto -> bb18
  }
  preds [bb5]
  succs [bb18]

bb7
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:158:29-158:44)
  1: _3 = &(((*_1) as Sparse).0: std::vec::Vec<nfa::thompson::nfa::Transition>)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:158:29-158:44)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:17-159:34)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:17-159:28)
  4: _5 = &(*_3)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:17-159:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:17-159:34)
      kind: _4 = std::vec::Vec::<nfa::thompson::nfa::Transition>::len(move _5) -> [return: bb8, unwind: bb19]
  }
  preds [bb2]
  succs [bb8, bb19]

bb8
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:33-159:34)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:37-159:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:37-159:65)
      kind: _6 = core::mem::size_of::<nfa::thompson::nfa::Transition>() -> [return: bb9, unwind: bb19]
  }
  preds [bb7]
  succs [bb9, bb19]

bb9
  0: _7 = MulWithOverflow(_4, _6)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:17-159:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:17-159:65)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _6) -> [success: bb10, unwind: bb19]
  }
  preds [bb8]
  succs [bb10, bb19]

bb10
  0: _0 = move (_7.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:17-159:65)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:64-159:65)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:159:64-159:65)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:160:13-160:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:160:13-160:14)
      kind: goto -> bb18
  }
  preds [bb9]
  succs [bb18]

bb11
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:161:28-161:42)
  1: _8 = &(((*_1) as Union).0: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:161:28-161:42)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:17-162:33)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:17-162:27)
  4: _10 = &(*_8)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:17-162:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:17-162:33)
      kind: _9 = std::vec::Vec::<util::primitives::StateID>::len(move _10) -> [return: bb12, unwind: bb19]
  }
  preds [bb3]
  succs [bb12, bb19]

bb12
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:32-162:33)
  1: StorageLive(_11)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:36-162:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:36-162:61)
      kind: _11 = core::mem::size_of::<util::primitives::StateID>() -> [return: bb13, unwind: bb19]
  }
  preds [bb11]
  succs [bb13, bb19]

bb13
  0: _12 = MulWithOverflow(_9, _11)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:17-162:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:17-162:61)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, move _11) -> [success: bb14, unwind: bb19]
  }
  preds [bb12]
  succs [bb14, bb19]

bb14
  0: _0 = move (_12.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:17-162:61)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:60-162:61)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:162:60-162:61)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:163:13-163:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:163:13-163:14)
      kind: goto -> bb18
  }
  preds [bb13]
  succs [bb18]

bb15
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:32-165:33)
  1: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:36-165:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:36-165:61)
      kind: _16 = core::mem::size_of::<util::primitives::StateID>() -> [return: bb16, unwind: bb19]
  }
  preds [bb4]
  succs [bb16, bb19]

bb16
  0: _17 = MulWithOverflow(_14, _16)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:17-165:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:17-165:61)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} * {}`, which would overflow", move _14, move _16) -> [success: bb17, unwind: bb19]
  }
  preds [bb15]
  succs [bb17, bb19]

bb17
  0: _0 = move (_17.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:17-165:61)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:60-165:61)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:165:60-165:61)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/builder.rs:166:13-166:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:166:13-166:14)
      kind: goto -> bb18
  }
  preds [bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:168:6-168:6)
      kind: return
  }
  preds [bb6, bb10, bb14, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/builder.rs:149:5-168:6)
      kind: resume
  }
  preds [bb4, bb7, bb8, bb9, bb11, bb12, bb13, bb15, bb16]
  succs []

