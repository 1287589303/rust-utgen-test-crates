bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:40:5-40:9)
  1: _2 = const util::utf8::is_word_byte::WORD
    SourceInfo(regex-automata/src/util/utf8.rs:40:5-40:9)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:40:10-40:20)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/util/utf8.rs:40:10-40:11)
  4: _4 = _1
    SourceInfo(regex-automata/src/util/utf8.rs:40:10-40:11)
  5: _3 = move _4 as usize (IntToInt)
    SourceInfo(regex-automata/src/util/utf8.rs:40:10-40:20)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/util/utf8.rs:40:19-40:20)
  7: _5 = Len(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:40:5-40:21)
  8: _6 = Lt(_3, _5)
    SourceInfo(regex-automata/src/util/utf8.rs:40:5-40:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:40:5-40:21)
      kind: assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _0 = _2[_3]
    SourceInfo(regex-automata/src/util/utf8.rs:40:5-40:21)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/utf8.rs:41:1-41:2)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/util/utf8.rs:41:1-41:2)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:41:2-41:2)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/utf8.rs:16:1-41:2)
      kind: resume
  }
  preds [bb0]
  succs []

