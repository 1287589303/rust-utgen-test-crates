bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/special.rs:428:9-428:11)
  1: _3 = &_2
    SourceInfo(regex-automata/src/dfa/special.rs:428:9-428:11)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/special.rs:428:15-428:19)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/special.rs:428:15-428:19)
  4: _5 = const dfa::DEAD
    SourceInfo(regex-automata/src/dfa/special.rs:428:15-428:19)
  5: _4 = &_5
    SourceInfo(regex-automata/src/dfa/special.rs:428:15-428:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:428:9-428:19)
      kind: _0 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/special.rs:428:18-428:19)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/special.rs:428:18-428:19)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/special.rs:429:5-429:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:429:6-429:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:427:5-429:6)
      kind: resume
  }
  preds [bb0]
  succs []

