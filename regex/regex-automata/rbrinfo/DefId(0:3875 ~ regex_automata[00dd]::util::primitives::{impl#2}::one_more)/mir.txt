bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/primitives.rs:235:9-235:24)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/primitives.rs:235:9-235:13)
  2: _3 = &(*_1)
    SourceInfo(regex-automata/src/util/primitives.rs:235:9-235:13)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:235:9-235:24)
      kind: _2 = util::primitives::SmallIndex::as_usize(move _3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/util/primitives.rs:235:23-235:24)
  1: _4 = AddWithOverflow(_2, const 1_usize)
    SourceInfo(regex-automata/src/util/primitives.rs:235:9-235:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:235:9-235:28)
      kind: assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_usize) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = move (_4.0: usize)
    SourceInfo(regex-automata/src/util/primitives.rs:235:9-235:28)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/util/primitives.rs:235:27-235:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:236:6-236:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/primitives.rs:234:5-236:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

