bb0
  0: StorageLive(_1)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:563:13-563:16)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:563:19-563:47)
      kind: _1 = nfa::thompson::nfa::NFA::never_match() -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: FakeRead(ForLet(None), _1)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:563:13-563:16)
  1: StorageLive(_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:564:42-564:45)
  2: _2 = move _1
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:564:42-564:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:564:9-564:46)
      kind: _0 = nfa::thompson::backtrack::BoundedBacktracker::new_from_nfa(move _2) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:564:45-564:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:565:5-565:6)
      kind: drop(_1) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_1)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:565:5-565:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:565:6-565:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:564:45-564:46)
      kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:565:5-565:6)
      kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:562:5-565:6)
      kind: resume
  }
  preds [bb0, bb2, bb5]
  succs []

