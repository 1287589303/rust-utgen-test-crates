bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:627:13-627:20)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:627:31-627:50)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:627:31-627:35)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:627:31-627:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:627:31-627:50)
      kind: _3 = dfa::sparse::DFA::<T>::write_to_len(move _4) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:627:49-627:50)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9-47:42)
      kind: _2 = std::vec::from_elem::<u8>(const 0_u8, move _3) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_3)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:41-47:42)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:627:13-627:20)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:9-631:46)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:9-631:37)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:9-631:13)
  5: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:9-631:13)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
  8: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
  9: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
  10: _11 = &mut _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
  11: _10 = &mut (*_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
      kind: _9 = <std::vec::Vec<u8> as core::ops::DerefMut>::deref_mut(move _10) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: _8 = &mut (*_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:28-631:36)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:35-631:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:631:9-631:37)
      kind: _6 = dfa::sparse::DFA::<T>::write_to::<E>(move _7, move _8) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:36-631:37)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:36-631:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:631:9-631:46)
      kind: _5 = core::result::Result::<usize, util::wire::SerializeError>::unwrap(move _6) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:45-631:46)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:46-631:47)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:46-631:47)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:631:46-631:47)
  4: _0 = move _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:632:9-632:12)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:633:5-633:6)
      kind: drop(_2) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:633:5-633:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:633:6-633:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:633:5-633:6)
      kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb2, bb3, bb4]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:626:5-633:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb7]
  succs []

