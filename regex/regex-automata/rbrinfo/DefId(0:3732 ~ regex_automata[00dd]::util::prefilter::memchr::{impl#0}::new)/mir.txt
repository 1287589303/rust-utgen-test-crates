bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:13-22:14)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:16-20:34)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:16-20:29)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:16-20:23)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:16-20:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:16-20:29)
      kind: _5 = core::slice::<impl [B]>::len(move _6) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:28-20:29)
  1: _4 = Ne(move _5, const 1_usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:16-20:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:16-20:34)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:33-20:34)
  1: _0 = core::option::Option::<util::prefilter::memchr::Memchr>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:21:24-21:28)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:22:13-22:14)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:22:13-22:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb1]
  succs [bb12]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:20:33-20:34)
  1: _3 = const ()
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:22:14-22:14)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:22:13-22:14)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:22:13-22:14)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:13-25:14)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:46)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:41)
  7: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:35)
  8: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:35)
  9: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:26)
  10: StorageLive(_14)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:24-23:25)
  11: _14 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:24-23:25)
  12: _15 = Len((*_2))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:26)
  13: _16 = Lt(_14, _15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:26)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb4, unwind: bb13]
  }
  preds [bb1]
  succs [bb4, bb13]

bb4
  0: _13 = &(*_2)[_14]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:35)
      kind: _12 = <B as core::convert::AsRef<[u8]>>::as_ref(move _13) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: _11 = &(*_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:35)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:34-23:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:41)
      kind: _10 = core::slice::<impl [u8]>::len(move _11) -> [return: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:40-23:41)
  1: _9 = Ne(move _10, const 1_usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:16-23:46)
      kind: switchInt(move _9) -> [0: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:45-23:46)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:45-23:46)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:45-23:46)
  3: _0 = core::option::Option::<util::prefilter::memchr::Memchr>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:24:24-24:28)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:25:13-25:14)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:25:13-25:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb8
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:45-23:46)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:45-23:46)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:23:45-23:46)
  3: _8 = const ()
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:25:14-25:14)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:25:13-25:14)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:25:13-25:14)
  6: StorageLive(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:18-26:48)
  7: StorageLive(_19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:47)
  8: StorageLive(_20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:44)
  9: StorageLive(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:35)
  10: StorageLive(_22)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:33-26:34)
  11: _22 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:33-26:34)
  12: _23 = Len((*_2))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:35)
  13: _24 = Lt(_22, _23)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:35)
      kind: assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb9, unwind: bb13]
  }
  preds [bb6]
  succs [bb9, bb13]

bb9
  0: _21 = &(*_2)[_22]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:44)
      kind: _20 = <B as core::convert::AsRef<[u8]>>::as_ref(move _21) -> [return: bb10, unwind: bb13]
  }
  preds [bb8]
  succs [bb10, bb13]

bb10
  0: StorageDead(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:43-26:44)
  1: StorageLive(_25)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:45-26:46)
  2: _25 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:45-26:46)
  3: _26 = Len((*_20))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:47)
  4: _27 = Lt(_25, _26)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:47)
      kind: assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb11, unwind: bb13]
  }
  preds [bb9]
  succs [bb11, bb13]

bb11
  0: _19 = (*_20)[_25]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:25-26:47)
  1: _18 = util::prefilter::memchr::Memchr(move _19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:18-26:48)
  2: StorageDead(_19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:47-26:48)
  3: _0 = core::option::Option::<util::prefilter::memchr::Memchr>::Some(move _18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:13-26:49)
  4: StorageDead(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:26:48-26:49)
  5: StorageDead(_25)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:28:5-28:6)
  6: StorageDead(_22)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:28:5-28:6)
  7: StorageDead(_20)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:28:5-28:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:28:6-28:6)
      kind: goto -> bb12
  }
  preds [bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:28:6-28:6)
      kind: return
  }
  preds [bb2, bb7, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:10:5-28:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb8, bb9, bb10]
  succs []

