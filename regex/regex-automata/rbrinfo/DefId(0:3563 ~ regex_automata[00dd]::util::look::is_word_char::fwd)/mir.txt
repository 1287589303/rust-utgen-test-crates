bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/look.rs:1586:12-1593:10)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:1586:18-1586:47)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:1586:31-1586:46)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:1586:31-1586:46)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:1586:40-1586:46)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:1586:32-1586:40)
  6: _8 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:1586:32-1586:40)
  7: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:1586:41-1586:45)
  8: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:1586:41-1586:43)
  9: _10 = _2
    SourceInfo(regex-automata/src/util/look.rs:1586:41-1586:43)
  10: _9 = core::ops::RangeFrom::<usize> { start: move _10 }
    SourceInfo(regex-automata/src/util/look.rs:1586:41-1586:45)
  11: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:1586:44-1586:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1586:40-1586:46)
      kind: _7 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _8, move _9) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:1586:45-1586:46)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:1586:45-1586:46)
  2: _6 = &(*_7)
    SourceInfo(regex-automata/src/util/look.rs:1586:31-1586:46)
  3: _5 = &(*_6)
    SourceInfo(regex-automata/src/util/look.rs:1586:31-1586:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1586:18-1586:47)
      kind: _4 = util::utf8::decode(move _5) -> [return: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:1586:46-1586:47)
  1: PlaceMention(_4)
    SourceInfo(regex-automata/src/util/look.rs:1586:18-1586:47)
  2: _12 = discriminant(_4)
    SourceInfo(regex-automata/src/util/look.rs:1586:18-1586:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1586:12-1586:47)
      kind: switchInt(move _12) -> [0: bb6, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb6]

bb3
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-automata/src/util/look.rs:1586:18-1586:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1586:18-1586:47)
      kind: unreachable
  }
  preds [bb2, bb4]
  succs []

bb4
  0: _11 = discriminant(((_4 as Some).0: core::result::Result<char, u8>))
    SourceInfo(regex-automata/src/util/look.rs:1586:18-1586:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1586:12-1586:47)
      kind: switchInt(move _11) -> [0: bb5, 1: bb6, otherwise: bb3]
  }
  preds [bb2]
  succs [bb3, bb5, bb6]

bb5
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:1588:21-1588:23)
  1: _13 = ((((_4 as Some).0: core::result::Result<char, u8>) as Ok).0: char)
    SourceInfo(regex-automata/src/util/look.rs:1588:21-1588:23)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:1588:29-1588:54)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:1588:51-1588:53)
  4: _15 = _13
    SourceInfo(regex-automata/src/util/look.rs:1588:51-1588:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1588:29-1588:54)
      kind: _14 = regex_syntax::try_is_word_character(move _15) -> [return: bb8, unwind: bb11]
  }
  preds [bb4, bb6]
  succs [bb8, bb11]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1587:13-1587:32)
      kind: falseEdge -> [real: bb7, imaginary: bb5]
  }
  preds [bb2, bb4]
  succs [bb5, bb7]

bb7
  0: _3 = const false
    SourceInfo(regex-automata/src/util/look.rs:1587:36-1587:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1587:36-1587:41)
      kind: goto -> bb10
  }
  preds [bb6]
  succs [bb10]

bb8
  0: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:1588:53-1588:54)
  1: StorageLive(_16)
    SourceInfo(regex-automata/src/util/look.rs:1589:17-1591:49)
  2: StorageLive(_17)
    SourceInfo(regex-automata/src/util/look.rs:1589:17-1591:49)
  3: _17 = const "since unicode-word-boundary, syntax and unicode-perl are all enabled, it is expected that try_is_word_character succeeds"
    SourceInfo(regex-automata/src/util/look.rs:1589:17-1591:49)
  4: _16 = &(*_17)
    SourceInfo(regex-automata/src/util/look.rs:1589:17-1591:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1588:29-1592:14)
      kind: _3 = core::result::Result::<bool, regex_syntax::UnicodeWordError>::expect(move _14, move _16) -> [return: bb9, unwind: bb11]
  }
  preds [bb5]
  succs [bb9, bb11]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:1592:13-1592:14)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:1592:13-1592:14)
  2: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:1592:13-1592:14)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:1592:13-1592:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1592:13-1592:14)
      kind: goto -> bb10
  }
  preds [bb8]
  succs [bb10]

bb10
  0: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::Ok(move _3)
    SourceInfo(regex-automata/src/util/look.rs:1586:9-1593:11)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/util/look.rs:1593:10-1593:11)
  2: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:1594:5-1594:6)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:1594:5-1594:6)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:1594:5-1594:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1594:6-1594:6)
      kind: return
  }
  preds [bb7, bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:1582:5-1594:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb8]
  succs []

