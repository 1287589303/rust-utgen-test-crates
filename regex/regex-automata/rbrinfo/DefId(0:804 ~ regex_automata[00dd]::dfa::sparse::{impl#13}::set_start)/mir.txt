bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2139:13-2139:24)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2139:27-2139:32)
  2: _6 = &_3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2139:27-2139:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2139:27-2139:43)
      kind: _5 = util::start::Start::as_usize(move _6) -> [return: bb1, unwind: bb29]
  }
  preds []
  succs [bb1, bb29]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2139:42-2139:43)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2139:13-2139:24)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2140:13-2140:18)
  3: PlaceMention(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2140:27-2140:35)
  4: _8 = discriminant(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2140:27-2140:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2140:21-2140:35)
      kind: switchInt(move _8) -> [0: bb3, 1: bb4, 2: bb5, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4, bb5]

bb2
  0: FakeRead(ForMatchedPlace(None), _2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2140:27-2140:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2140:27-2140:35)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2141:13-2141:25)
      kind: falseEdge -> [real: bb6, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb6]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2142:13-2142:26)
      kind: falseEdge -> [real: bb7, imaginary: bb5]
  }
  preds [bb1, bb3]
  succs [bb5, bb7]

bb5
  0: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2143:31-2143:34)
  1: _12 = ((_2 as Pattern).0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2143:31-2143:34)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2144:21-2144:24)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2144:27-2144:30)
  4: _14 = &_12
    SourceInfo(regex-automata/src/dfa/sparse.rs:2144:27-2144:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2144:27-2144:41)
      kind: _13 = util::primitives::PatternID::as_usize(move _14) -> [return: bb9, unwind: bb29]
  }
  preds [bb1, bb4]
  succs [bb9, bb29]

bb6
  0: _7 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:2141:29-2141:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2141:29-2141:40)
      kind: goto -> bb23
  }
  preds [bb3]
  succs [bb23]

bb7
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:30-2142:41)
  1: _9 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:30-2142:41)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:44-2142:55)
  3: _10 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:44-2142:55)
  4: _11 = AddWithOverflow(_9, _10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:30-2142:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2142:30-2142:55)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _10) -> [success: bb8, unwind: bb29]
  }
  preds [bb4]
  succs [bb8, bb29]

bb8
  0: _7 = move (_11.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:30-2142:55)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:54-2142:55)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2142:54-2142:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2142:54-2142:55)
      kind: goto -> bb23
  }
  preds [bb7]
  succs [bb23]

bb9
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2144:40-2144:41)
  1: FakeRead(ForLet(None), _13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2144:21-2144:24)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2145:21-2145:24)
  3: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2145:27-2146:33)
  4: _16 = ((*_1).4: core::option::Option<usize>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2145:27-2146:33)
  5: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2147:29-2147:68)
  6: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2147:29-2147:68)
  7: _18 = const "start states for each pattern enabled"
    SourceInfo(regex-automata/src/dfa/sparse.rs:2147:29-2147:68)
  8: _17 = &(*_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2147:29-2147:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2145:27-2147:69)
      kind: _15 = core::option::Option::<usize>::expect(move _16, move _17) -> [return: bb10, unwind: bb29]
  }
  preds [bb5]
  succs [bb10, bb29]

bb10
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2147:68-2147:69)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2147:68-2147:69)
  2: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2145:21-2145:24)
  3: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2147:69-2147:70)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:17-2148:67)
  5: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:25-2148:34)
  6: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:25-2148:28)
  7: _21 = _13
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:25-2148:28)
  8: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:31-2148:34)
  9: _22 = _15
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:31-2148:34)
  10: _20 = Lt(move _21, move _22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:25-2148:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2148:25-2148:34)
      kind: switchInt(move _20) -> [0: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12]

bb11
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:33-2148:34)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:33-2148:34)
  2: _19 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:67-2148:67)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:66-2148:67)
  4: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:66-2148:67)
  5: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2154:46)
  6: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2153:30)
  7: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2152:70)
  8: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2151:30)
  9: StorageLive(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2150:38)
  10: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2149:28)
  11: _40 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2149:28)
  12: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2150:34-2150:37)
  13: _41 = _13
    SourceInfo(regex-automata/src/dfa/sparse.rs:2150:34-2150:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2150:38)
      kind: _39 = core::num::<impl usize>::checked_mul(move _40, move _41) -> [return: bb15, unwind: bb29]
  }
  preds [bb10]
  succs [bb15, bb29]

bb12
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:33-2148:34)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:33-2148:34)
  2: StorageLive(_24)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
  3: StorageLive(_25)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:36-2148:61)
  5: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:36-2148:61)
  6: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:36-2148:61)
  7: _28 = [const "invalid pattern ID "]
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:36-2148:61)
  8: _27 = &_28
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:36-2148:61)
  9: _26 = &(*_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:36-2148:61)
  10: StorageLive(_29)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  11: StorageLive(_30)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  12: StorageLive(_31)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  13: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:56-2148:60)
  14: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:63-2148:66)
  15: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:63-2148:66)
  16: _34 = &_13
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:63-2148:66)
  17: _33 = &(*_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:63-2148:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2148:56-2148:60)
      kind: _32 = core::fmt::rt::Argument::<'_>::new_debug::<usize>(move _33) -> [return: bb13, unwind: bb29]
  }
  preds [bb10]
  succs [bb13, bb29]

bb13
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2148:59-2148:60)
  1: _31 = [move _32]
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  2: StorageDead(_32)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  3: _30 = &_31
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  4: _29 = &(*_30)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38-108:72)
      kind: _25 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _26, move _29) -> [return: bb14, unwind: bb29]
  }
  preds [bb12]
  succs [bb14, bb29]

bb14
  0: StorageDead(_29)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  1: StorageDead(_26)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:71-108:72)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9-108:73)
      kind: _24 = core::panicking::panic_fmt(move _25) -> bb29
  }
  preds [bb13]
  succs [bb29]

bb15
  0: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2150:37-2150:38)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2150:37-2150:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2151:30)
      kind: _38 = core::option::Option::<usize>::unwrap(move _39) -> [return: bb16, unwind: bb29]
  }
  preds [bb11]
  succs [bb16, bb29]

bb16
  0: StorageDead(_39)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2151:29-2151:30)
  1: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:34-2152:69)
  2: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:34-2152:60)
  3: StorageLive(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:34-2152:45)
  4: _44 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:34-2152:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2152:34-2152:60)
      kind: _43 = core::num::<impl usize>::checked_mul(move _44, const 2_usize) -> [return: bb17, unwind: bb29]
  }
  preds [bb15]
  succs [bb17, bb29]

bb17
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:59-2152:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2152:34-2152:69)
      kind: _42 = core::option::Option::<usize>::unwrap(move _43) -> [return: bb18, unwind: bb29]
  }
  preds [bb16]
  succs [bb18, bb29]

bb18
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:68-2152:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2152:70)
      kind: _37 = core::num::<impl usize>::checked_add(move _38, move _42) -> [return: bb19, unwind: bb29]
  }
  preds [bb17]
  succs [bb19, bb29]

bb19
  0: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:69-2152:70)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2152:69-2152:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2153:30)
      kind: _36 = core::option::Option::<usize>::unwrap(move _37) -> [return: bb20, unwind: bb29]
  }
  preds [bb18]
  succs [bb20, bb29]

bb20
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2153:29-2153:30)
  1: StorageLive(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2154:34-2154:45)
  2: _45 = _5
    SourceInfo(regex-automata/src/dfa/sparse.rs:2154:34-2154:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2154:46)
      kind: _35 = core::num::<impl usize>::checked_add(move _36, move _45) -> [return: bb21, unwind: bb29]
  }
  preds [bb19]
  succs [bb21, bb29]

bb21
  0: StorageDead(_45)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2154:45-2154:46)
  1: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2154:45-2154:46)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2149:17-2155:30)
      kind: _7 = core::option::Option::<usize>::unwrap(move _35) -> [return: bb22, unwind: bb29]
  }
  preds [bb20]
  succs [bb22, bb29]

bb22
  0: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2155:29-2155:30)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2156:13-2156:14)
  2: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2156:13-2156:14)
  3: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2156:13-2156:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2156:13-2156:14)
      kind: goto -> bb23
  }
  preds [bb21]
  succs [bb23]

bb23
  0: FakeRead(ForLet(None), _7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2140:13-2140:18)
  1: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2158:13-2158:18)
  2: StorageLive(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2158:21-2158:26)
  3: _47 = _7
    SourceInfo(regex-automata/src/dfa/sparse.rs:2158:21-2158:26)
  4: _48 = MulWithOverflow(_47, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2158:21-2158:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2158:21-2158:42)
      kind: assert(!move (_48.1: bool), "attempt to compute `{} * {}`, which would overflow", move _47, const util::primitives::StateID::SIZE) -> [success: bb24, unwind: bb29]
  }
  preds [bb6, bb8, bb22]
  succs [bb24, bb29]

bb24
  0: _46 = move (_48.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2158:21-2158:42)
  1: StorageDead(_47)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2158:41-2158:42)
  2: FakeRead(ForLet(None), _46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2158:13-2158:18)
  3: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2159:13-2159:16)
  4: StorageLive(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2159:19-2159:24)
  5: _50 = _46
    SourceInfo(regex-automata/src/dfa/sparse.rs:2159:19-2159:24)
  6: _51 = AddWithOverflow(_50, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2159:19-2159:40)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2159:19-2159:40)
      kind: assert(!move (_51.1: bool), "attempt to compute `{} + {}`, which would overflow", move _50, const util::primitives::StateID::SIZE) -> [success: bb25, unwind: bb29]
  }
  preds [bb23]
  succs [bb25, bb29]

bb25
  0: _49 = move (_51.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2159:19-2159:40)
  1: StorageDead(_50)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2159:39-2159:40)
  2: FakeRead(ForLet(None), _49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2159:13-2159:16)
  3: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2160:9-2163:10)
  4: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2161:13-2161:15)
  5: _53 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:2161:13-2161:15)
  6: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:13-2162:49)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:13-2162:49)
  8: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:37-2162:49)
  9: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:18-2162:37)
  10: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:18-2162:37)
  11: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:18-2162:28)
  12: _59 = &mut ((*_1).0: T)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:18-2162:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2162:18-2162:37)
      kind: _58 = <T as core::convert::AsMut<[u8]>>::as_mut(move _59) -> [return: bb26, unwind: bb29]
  }
  preds [bb24]
  succs [bb26, bb29]

bb26
  0: _57 = &mut (*_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:18-2162:37)
  1: StorageDead(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:36-2162:37)
  2: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:38-2162:48)
  3: StorageLive(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:38-2162:43)
  4: _61 = _46
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:38-2162:43)
  5: StorageLive(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:45-2162:48)
  6: _62 = _49
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:45-2162:48)
  7: _60 = core::ops::Range::<usize> { start: move _61, end: move _62 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:38-2162:48)
  8: StorageDead(_62)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:47-2162:48)
  9: StorageDead(_61)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:47-2162:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2162:37-2162:49)
      kind: _56 = <[u8] as core::ops::IndexMut<core::ops::Range<usize>>>::index_mut(move _57, move _60) -> [return: bb27, unwind: bb29]
  }
  preds [bb25]
  succs [bb27, bb29]

bb27
  0: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:48-2162:49)
  1: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:48-2162:49)
  2: _55 = &mut (*_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:13-2162:49)
  3: _54 = &mut (*_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2162:13-2162:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2160:9-2163:10)
      kind: _52 = util::wire::write_state_id::<util::wire::LE>(move _53, move _54) -> [return: bb28, unwind: bb29]
  }
  preds [bb26]
  succs [bb28, bb29]

bb28
  0: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2163:9-2163:10)
  1: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2163:9-2163:10)
  2: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2163:10-2163:11)
  3: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2163:10-2163:11)
  4: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2163:10-2163:11)
  5: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2163:10-2163:11)
  6: _0 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2138:76-2164:6)
  7: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2164:5-2164:6)
  8: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2164:5-2164:6)
  9: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2164:5-2164:6)
  10: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2164:5-2164:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2164:6-2164:6)
      kind: return
  }
  preds [bb27]
  succs []

bb29
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2138:5-2164:6)
      kind: resume
  }
  preds [bb0, bb5, bb7, bb9, bb11, bb12, bb13, bb14, bb15, bb16, bb17, bb18, bb19, bb20, bb21, bb23, bb24, bb25, bb26, bb27]
  succs []

