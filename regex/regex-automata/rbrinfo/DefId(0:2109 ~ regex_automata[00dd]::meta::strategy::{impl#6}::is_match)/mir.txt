bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:9-1056:10)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:46)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:32)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:32)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:17)
  5: _8 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:32)
      kind: _7 = util::search::Input::<'_>::get_anchored(move _8) -> [return: bb1, unwind: bb17]
  }
  preds []
  succs [bb1, bb17]

bb1
  0: _6 = &_7
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:32)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:31-1054:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:46)
      kind: _5 = util::search::Anchored::is_anchored(move _6) -> [return: bb2, unwind: bb17]
  }
  preds [bb0]
  succs [bb2, bb17]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1054:12-1054:46)
      kind: switchInt(move _5) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:45-1054:46)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:45-1054:46)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:20-1055:29)
  3: _10 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:20-1055:29)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:39-1055:44)
  5: _11 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:39-1055:44)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:46-1055:51)
  7: _12 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:46-1055:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1055:20-1055:52)
      kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::is_match(move _10, move _11, move _12) -> [return: bb4, unwind: bb17]
  }
  preds [bb2]
  succs [bb4, bb17]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:51-1055:52)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:51-1055:52)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1055:51-1055:52)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1056:9-1056:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1056:9-1056:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1065:6-1065:6)
      kind: goto -> bb16
  }
  preds [bb3]
  succs [bb16]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:45-1054:46)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1054:45-1054:46)
  2: _4 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1056:10-1056:10)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1056:9-1056:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1056:9-1056:10)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:62)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:19)
  7: _14 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:19)
  8: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:49-1057:54)
  9: _15 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:49-1057:54)
  10: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:56-1057:61)
  11: _16 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:56-1057:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:62)
      kind: _13 = meta::strategy::ReverseAnchored::try_search_half_anchored_rev(move _14, move _15, move _16) -> [return: bb6, unwind: bb17]
  }
  preds [bb2]
  succs [bb6, bb17]

bb6
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:61-1057:62)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:61-1057:62)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:61-1057:62)
  3: PlaceMention(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:62)
  4: _18 = discriminant(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1057:9-1057:62)
      kind: switchInt(move _18) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:62)
      kind: unreachable
  }
  preds [bb6, bb9]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1058:13-1058:22)
      kind: falseEdge -> [real: bb12, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb12]

bb9
  0: _17 = discriminant(((_13 as Ok).0: core::option::Option<util::search::HalfMatch>))
    SourceInfo(regex-automata/src/meta/strategy.rs:1057:15-1057:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1057:9-1057:62)
      kind: switchInt(move _17) -> [0: bb10, 1: bb11, otherwise: bb7]
  }
  preds [bb6, bb8]
  succs [bb7, bb10, bb11]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1062:13-1062:21)
      kind: falseEdge -> [real: bb14, imaginary: bb11]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: _0 = const true
    SourceInfo(regex-automata/src/meta/strategy.rs:1063:28-1063:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1063:28-1063:32)
      kind: goto -> bb15
  }
  preds [bb9, bb10]
  succs [bb15]

bb12
  0: StorageLive(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1058:17-1058:21)
  1: _19 = move ((_13 as Err).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/strategy.rs:1058:17-1058:21)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:17-1060:26)
  3: _20 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:17-1060:26)
  4: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:43-1060:48)
  5: _21 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:43-1060:48)
  6: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:50-1060:55)
  7: _22 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:50-1060:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1060:17-1060:56)
      kind: _0 = meta::strategy::Core::is_match_nofail(move _20, move _21, move _22) -> [return: bb13, unwind: bb17]
  }
  preds [bb8]
  succs [bb13, bb17]

bb13
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:55-1060:56)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:55-1060:56)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1060:55-1060:56)
  3: StorageDead(_19)
    SourceInfo(regex-automata/src/meta/strategy.rs:1061:13-1061:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1061:13-1061:14)
      kind: goto -> bb15
  }
  preds [bb12]
  succs [bb15]

bb14
  0: _0 = const false
    SourceInfo(regex-automata/src/meta/strategy.rs:1062:25-1062:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1062:25-1062:30)
      kind: goto -> bb15
  }
  preds [bb10]
  succs [bb15]

bb15
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1065:5-1065:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1065:6-1065:6)
      kind: goto -> bb16
  }
  preds [bb11, bb13, bb14]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1065:6-1065:6)
      kind: return
  }
  preds [bb4, bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1053:5-1065:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb12]
  succs []

