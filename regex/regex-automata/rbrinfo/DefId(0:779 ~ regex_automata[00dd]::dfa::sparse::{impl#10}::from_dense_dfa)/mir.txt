bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1839:13-1839:30)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1839:36-1839:65)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1839:36-1839:39)
  3: _5 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1839:36-1839:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1839:36-1839:65)
      kind: _4 = dfa::dense::DFA::<T>::starts_for_each_pattern(move _5) -> [return: bb1, unwind: bb22]
  }
  preds []
  succs [bb1, bb22]

bb1
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1839:36-1839:65)
      kind: switchInt(move _4) -> [0: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1839:64-1839:65)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1840:18-1840:35)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1840:18-1840:21)
  3: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1840:18-1840:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1840:18-1840:35)
      kind: _6 = dfa::dense::DFA::<T>::pattern_len(move _7) -> [return: bb3, unwind: bb22]
  }
  preds [bb1]
  succs [bb3, bb22]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1840:34-1840:35)
  1: _3 = core::option::Option::<usize>::Some(move _6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1840:13-1840:36)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1840:35-1840:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1839:33-1843:10)
      kind: goto -> bb5
  }
  preds [bb2]
  succs [bb5]

bb4
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1839:64-1839:65)
  1: _3 = core::option::Option::<usize>::None
    SourceInfo(regex-automata/src/dfa/sparse.rs:1842:13-1842:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1839:33-1843:10)
      kind: goto -> bb5
  }
  preds [bb1]
  succs [bb5]

bb5
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1843:9-1843:10)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1839:13-1839:30)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:13-1844:19)
  3: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:38-1844:41)
  4: _9 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:38-1844:41)
  5: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:43-1844:60)
  6: _10 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:43-1844:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1844:22-1844:61)
      kind: _8 = dfa::sparse::StartTable::<std::vec::Vec<u8>>::new::<T>(move _9, move _10) -> [return: bb6, unwind: bb22]
  }
  preds [bb3, bb4]
  succs [bb6, bb22]

bb6
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:60-1844:61)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:60-1844:61)
  2: FakeRead(ForLet(None), _8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1844:13-1844:19)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:9-1848:10)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:49)
  7: _14 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
      kind: _13 = dfa::dense::DFA::<T>::starts(move _14) -> [return: bb7, unwind: bb21]
  }
  preds [bb5]
  succs [bb7, bb21]

bb7
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:57-1845:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
      kind: _12 = <dfa::dense::StartStateIter<'_> as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb8, unwind: bb21]
  }
  preds [bb6]
  succs [bb8, bb21]

bb8
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:57-1845:58)
  1: PlaceMention(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  2: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  3: _15 = move _12
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:9-1848:10)
      kind: goto -> bb9
  }
  preds [bb7]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:9-1848:10)
      kind: falseUnwind -> [real: bb10, unwind: bb21]
  }
  preds [bb8, bb18]
  succs [bb10, bb21]

bb10
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  1: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  3: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  4: _20 = &mut _15
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  5: _19 = &mut (*_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
      kind: _18 = <dfa::dense::StartStateIter<'_> as core::iter::Iterator>::next(move _19) -> [return: bb11, unwind: bb21]
  }
  preds [bb9]
  succs [bb11, bb21]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:57-1845:58)
  1: PlaceMention(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  2: _21 = discriminant(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
      kind: switchInt(move _21) -> [0: bb13, 1: bb14, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: FakeRead(ForMatchedPlace(None), _18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:46-1845:58)
      kind: unreachable
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:9-1848:10)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:14-1845:26)
  1: _23 = (((_18 as Some).0: (util::primitives::StateID, util::search::Anchored, util::start::Start)).0: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:14-1845:26)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:28-1845:36)
  3: _24 = (((_18 as Some).0: (util::primitives::StateID, util::search::Anchored, util::start::Start)).1: util::search::Anchored)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:28-1845:36)
  4: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:38-1845:41)
  5: _25 = (((_18 as Some).0: (util::primitives::StateID, util::search::Anchored, util::start::Start)).2: util::start::Start)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:38-1845:41)
  6: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:17-1846:29)
  7: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:38-1846:64)
  8: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:38-1846:41)
  9: _28 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:38-1846:41)
  10: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:51-1846:63)
  11: _29 = _23
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:51-1846:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1846:38-1846:64)
      kind: _27 = dfa::dense::DFA::<T>::to_index(move _28, move _29) -> [return: bb16, unwind: bb21]
  }
  preds [bb11, bb13]
  succs [bb16, bb21]

bb15
  0: _11 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:9-1848:10)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  4: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  5: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  6: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  7: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1849:12-1849:14)
  8: _37 = move _8
    SourceInfo(regex-automata/src/dfa/sparse.rs:1849:12-1849:14)
  9: _0 = core::result::Result::<dfa::sparse::StartTable<std::vec::Vec<u8>>, dfa::dense::BuildError>::Ok(move _37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1849:9-1849:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1849:14-1849:15)
      kind: drop(_37) -> [return: bb19, unwind: bb21]
  }
  preds [bb13]
  succs [bb19, bb21]

bb16
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:63-1846:64)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:63-1846:64)
  2: _30 = Len((*_2))
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:32-1846:65)
  3: _31 = Lt(_27, _30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:32-1846:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1846:32-1846:65)
      kind: assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _27) -> [success: bb17, unwind: bb21]
  }
  preds [bb14]
  succs [bb17, bb21]

bb17
  0: _26 = (*_2)[_27]
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:32-1846:65)
  1: FakeRead(ForLet(None), _26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:17-1846:29)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1846:65-1846:66)
  3: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:13-1847:54)
  4: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:13-1847:15)
  5: _33 = &mut _8
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:13-1847:15)
  6: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:26-1847:34)
  7: _34 = _24
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:26-1847:34)
  8: StorageLive(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:36-1847:39)
  9: _35 = _25
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:36-1847:39)
  10: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:41-1847:53)
  11: _36 = _26
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:41-1847:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1847:13-1847:54)
      kind: _32 = dfa::sparse::StartTable::<std::vec::Vec<u8>>::set_start(move _33, move _34, move _35, move _36) -> [return: bb18, unwind: bb21]
  }
  preds [bb16]
  succs [bb18, bb21]

bb18
  0: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:53-1847:54)
  1: StorageDead(_35)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:53-1847:54)
  2: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:53-1847:54)
  3: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:53-1847:54)
  4: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1847:54-1847:55)
  5: _17 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:59-1848:10)
  6: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  7: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  8: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  9: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  10: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  11: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  12: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1848:9-1848:10)
  13: _16 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1845:9-1848:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1845:9-1848:10)
      kind: goto -> bb9
  }
  preds [bb17]
  succs [bb9]

bb19
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1849:14-1849:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1850:5-1850:6)
      kind: drop(_8) -> [return: bb20, unwind: bb22]
  }
  preds [bb15]
  succs [bb20, bb22]

bb20
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1850:5-1850:6)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1850:5-1850:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1850:6-1850:6)
      kind: return
  }
  preds [bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1850:5-1850:6)
      kind: drop(_8) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb6, bb7, bb9, bb10, bb14, bb15, bb16, bb17]
  succs [bb22]

bb22
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1831:5-1850:6)
      kind: resume
  }
  preds [bb0, bb2, bb5, bb19, bb21]
  succs []

