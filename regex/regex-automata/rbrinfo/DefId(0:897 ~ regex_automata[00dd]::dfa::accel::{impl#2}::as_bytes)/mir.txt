bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:238:13-238:19)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:238:22-238:33)
  2: _3 = &((*_1).0: A)
    SourceInfo(regex-automata/src/dfa/accel.rs:238:22-238:33)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:238:22-238:42)
      kind: _2 = <A as core::convert::AsRef<[u32]>>::as_ref(move _3) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:238:41-238:42)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/dfa/accel.rs:238:13-238:19)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:242:13-245:14)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:243:17-243:45)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:243:17-243:32)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:243:17-243:23)
  6: _7 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:243:17-243:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:243:17-243:32)
      kind: _6 = core::slice::<impl [u32]>::as_ptr(move _7) -> [return: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:243:31-243:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:243:17-243:45)
      kind: _5 = core::ptr::const_ptr::<impl *const u32>::cast::<u8>(move _6) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:243:44-243:45)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:45)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:29)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:23)
  4: _10 = &(*_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:29)
      kind: _9 = core::slice::<impl [u32]>::len(move _10) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:28-244:29)
  1: _11 = MulWithOverflow(_9, const dfa::accel::ACCEL_TY_SIZE)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:45)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, const dfa::accel::ACCEL_TY_SIZE) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _8 = move (_11.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:17-244:45)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:244:44-244:45)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:242:13-245:14)
      kind: _4 = core::slice::from_raw_parts::<'_, u8>(move _5, move _8) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: _0 = &(*_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:242:13-245:14)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/accel.rs:245:13-245:14)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:245:13-245:14)
  3: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/accel.rs:247:5-247:6)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:247:5-247:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:247:6-247:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:237:5-247:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

