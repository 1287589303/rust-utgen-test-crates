bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/look.rs:471:13-471:16)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/look.rs:471:19-471:28)
  2: _4 = (_1.0: u32)
    SourceInfo(regex-automata/src/util/look.rs:471:19-471:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:471:19-471:42)
      kind: _3 = core::num::<impl u32>::to_ne_bytes(move _4) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/look.rs:471:41-471:42)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/look.rs:471:13-471:16)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:472:20-472:26)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:472:24-472:25)
  4: _6 = const 0_usize
    SourceInfo(regex-automata/src/util/look.rs:472:24-472:25)
  5: _7 = Len(_3)
    SourceInfo(regex-automata/src/util/look.rs:472:20-472:26)
  6: _8 = Lt(_6, _7)
    SourceInfo(regex-automata/src/util/look.rs:472:20-472:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:472:20-472:26)
      kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: _5 = _3[_6]
    SourceInfo(regex-automata/src/util/look.rs:472:20-472:26)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:472:15-472:16)
  2: _9 = const 0_usize
    SourceInfo(regex-automata/src/util/look.rs:472:15-472:16)
  3: _10 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:472:9-472:17)
  4: _11 = Lt(_9, _10)
    SourceInfo(regex-automata/src/util/look.rs:472:9-472:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:472:9-472:17)
      kind: assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: (*_2)[_9] = move _5
    SourceInfo(regex-automata/src/util/look.rs:472:9-472:26)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:472:25-472:26)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:472:26-472:27)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:472:26-472:27)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:473:20-473:26)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:473:24-473:25)
  6: _13 = const 1_usize
    SourceInfo(regex-automata/src/util/look.rs:473:24-473:25)
  7: _14 = Len(_3)
    SourceInfo(regex-automata/src/util/look.rs:473:20-473:26)
  8: _15 = Lt(_13, _14)
    SourceInfo(regex-automata/src/util/look.rs:473:20-473:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:473:20-473:26)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: _12 = _3[_13]
    SourceInfo(regex-automata/src/util/look.rs:473:20-473:26)
  1: StorageLive(_16)
    SourceInfo(regex-automata/src/util/look.rs:473:15-473:16)
  2: _16 = const 1_usize
    SourceInfo(regex-automata/src/util/look.rs:473:15-473:16)
  3: _17 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:473:9-473:17)
  4: _18 = Lt(_16, _17)
    SourceInfo(regex-automata/src/util/look.rs:473:9-473:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:473:9-473:17)
      kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: (*_2)[_16] = move _12
    SourceInfo(regex-automata/src/util/look.rs:473:9-473:26)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:473:25-473:26)
  2: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:473:26-473:27)
  3: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:473:26-473:27)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:474:20-474:26)
  5: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:474:24-474:25)
  6: _20 = const 2_usize
    SourceInfo(regex-automata/src/util/look.rs:474:24-474:25)
  7: _21 = Len(_3)
    SourceInfo(regex-automata/src/util/look.rs:474:20-474:26)
  8: _22 = Lt(_20, _21)
    SourceInfo(regex-automata/src/util/look.rs:474:20-474:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:474:20-474:26)
      kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: _19 = _3[_20]
    SourceInfo(regex-automata/src/util/look.rs:474:20-474:26)
  1: StorageLive(_23)
    SourceInfo(regex-automata/src/util/look.rs:474:15-474:16)
  2: _23 = const 2_usize
    SourceInfo(regex-automata/src/util/look.rs:474:15-474:16)
  3: _24 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:474:9-474:17)
  4: _25 = Lt(_23, _24)
    SourceInfo(regex-automata/src/util/look.rs:474:9-474:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:474:9-474:17)
      kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: (*_2)[_23] = move _19
    SourceInfo(regex-automata/src/util/look.rs:474:9-474:26)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:474:25-474:26)
  2: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:474:26-474:27)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:474:26-474:27)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/util/look.rs:475:20-475:26)
  5: StorageLive(_27)
    SourceInfo(regex-automata/src/util/look.rs:475:24-475:25)
  6: _27 = const 3_usize
    SourceInfo(regex-automata/src/util/look.rs:475:24-475:25)
  7: _28 = Len(_3)
    SourceInfo(regex-automata/src/util/look.rs:475:20-475:26)
  8: _29 = Lt(_27, _28)
    SourceInfo(regex-automata/src/util/look.rs:475:20-475:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:475:20-475:26)
      kind: assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: _26 = _3[_27]
    SourceInfo(regex-automata/src/util/look.rs:475:20-475:26)
  1: StorageLive(_30)
    SourceInfo(regex-automata/src/util/look.rs:475:15-475:16)
  2: _30 = const 3_usize
    SourceInfo(regex-automata/src/util/look.rs:475:15-475:16)
  3: _31 = Len((*_2))
    SourceInfo(regex-automata/src/util/look.rs:475:9-475:17)
  4: _32 = Lt(_30, _31)
    SourceInfo(regex-automata/src/util/look.rs:475:9-475:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:475:9-475:17)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb9, unwind: bb10]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: (*_2)[_30] = move _26
    SourceInfo(regex-automata/src/util/look.rs:475:9-475:26)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:475:25-475:26)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/util/look.rs:475:26-475:27)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:475:26-475:27)
  4: _0 = const ()
    SourceInfo(regex-automata/src/util/look.rs:470:47-476:6)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/look.rs:476:5-476:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:476:6-476:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:470:5-476:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8]
  succs []

