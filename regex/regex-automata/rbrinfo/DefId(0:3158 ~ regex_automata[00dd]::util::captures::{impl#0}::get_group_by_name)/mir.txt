bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/captures.rs:508:13-508:18)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:70)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:38)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:38)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:25)
  6: _8 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:21-508:38)
      kind: _7 = util::captures::Captures::group_info(move _8) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: _6 = &(*_7)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:38)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/util/captures.rs:508:37-508:38)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:62)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:52)
  6: _12 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:48-508:62)
      kind: _11 = util::captures::Captures::pattern(move _12) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/captures.rs:508:61-508:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
      kind: _10 = <core::option::Option<util::primitives::PatternID> as core::ops::Try>::branch(move _11) -> [return: bb3, unwind: bb19]
  }
  preds [bb1]
  succs [bb3, bb19]

bb3
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  1: PlaceMention(_10)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  2: _13 = discriminant(_10)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
      kind: switchInt(move _13) -> [0: bb6, 1: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_17)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  1: _17 = ((_10 as Continue).0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  2: _9 = _17
    SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
  3: StorageDead(_17)
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  4: StorageLive(_18)
    SourceInfo(regex-automata/src/util/captures.rs:508:65-508:69)
  5: _18 = &(*_2)
    SourceInfo(regex-automata/src/util/captures.rs:508:65-508:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:21-508:70)
      kind: _5 = util::captures::GroupInfo::to_index(move _6, move _9, move _18) -> [return: bb9, unwind: bb19]
  }
  preds [bb3, bb5]
  succs [bb9, bb19]

bb7
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  1: _14 = ((_10 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  3: _16 = _14
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:48-508:63)
      kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _16) -> [return: bb8, unwind: bb19]
  }
  preds [bb5]
  succs [bb8, bb19]

bb8
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  1: StorageDead(_14)
    SourceInfo(regex-automata/src/util/captures.rs:508:62-508:63)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/captures.rs:508:69-508:70)
  3: StorageDead(_6)
    SourceInfo(regex-automata/src/util/captures.rs:508:69-508:70)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb7]
  succs [bb17]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-automata/src/util/captures.rs:508:69-508:70)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/captures.rs:508:69-508:70)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/captures.rs:508:69-508:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
      kind: _4 = <core::option::Option<usize> as core::ops::Try>::branch(move _5) -> [return: bb10, unwind: bb19]
  }
  preds [bb6]
  succs [bb10, bb19]

bb10
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  1: PlaceMention(_4)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
  2: _19 = discriminant(_4)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
      kind: switchInt(move _19) -> [0: bb13, 1: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12, bb13]

bb11
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
      kind: unreachable
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
      kind: falseEdge -> [real: bb14, imaginary: bb13]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
  1: _23 = ((_4 as Continue).0: usize)
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
  2: _3 = _23
    SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/util/captures.rs:508:13-508:18)
  5: StorageDead(_10)
    SourceInfo(regex-automata/src/util/captures.rs:508:71-508:72)
  6: StorageDead(_7)
    SourceInfo(regex-automata/src/util/captures.rs:508:71-508:72)
  7: StorageDead(_4)
    SourceInfo(regex-automata/src/util/captures.rs:508:71-508:72)
  8: StorageLive(_24)
    SourceInfo(regex-automata/src/util/captures.rs:509:9-509:13)
  9: _24 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:509:9-509:13)
  10: StorageLive(_25)
    SourceInfo(regex-automata/src/util/captures.rs:509:24-509:29)
  11: _25 = _3
    SourceInfo(regex-automata/src/util/captures.rs:509:24-509:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:509:9-509:30)
      kind: _0 = util::captures::Captures::get_group(move _24, move _25) -> [return: bb16, unwind: bb19]
  }
  preds [bb10, bb12]
  succs [bb16, bb19]

bb14
  0: StorageLive(_20)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  1: _20 = ((_4 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  3: _22 = _20
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:508:21-508:71)
      kind: _0 = <core::option::Option<util::search::Span> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _22) -> [return: bb15, unwind: bb19]
  }
  preds [bb12]
  succs [bb15, bb19]

bb15
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/util/captures.rs:508:70-508:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb17
  }
  preds [bb14]
  succs [bb17]

bb16
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/util/captures.rs:509:29-509:30)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/util/captures.rs:509:29-509:30)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/util/captures.rs:510:5-510:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:510:6-510:6)
      kind: goto -> bb18
  }
  preds [bb13]
  succs [bb18]

bb17
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/captures.rs:508:71-508:72)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/captures.rs:508:71-508:72)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/captures.rs:508:71-508:72)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/captures.rs:510:5-510:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:510:6-510:6)
      kind: goto -> bb18
  }
  preds [bb8, bb15]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:510:6-510:6)
      kind: return
  }
  preds [bb16, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:507:5-510:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb6, bb7, bb9, bb13, bb14]
  succs []

