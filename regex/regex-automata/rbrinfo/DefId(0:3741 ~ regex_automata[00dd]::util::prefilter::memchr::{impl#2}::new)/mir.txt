bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:13-81:14)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:16-79:34)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:16-79:29)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:16-79:23)
  4: _6 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:16-79:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:16-79:29)
      kind: _5 = core::slice::<impl [B]>::len(move _6) -> [return: bb1, unwind: bb15]
  }
  preds []
  succs [bb1, bb15]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:28-79:29)
  1: _4 = Ne(move _5, const 2_usize)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:16-79:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:16-79:34)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:33-79:34)
  1: _0 = core::option::Option::<util::prefilter::memchr::Memchr2>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:80:24-80:28)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:81:13-81:14)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:81:13-81:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb14
  }
  preds [bb1]
  succs [bb14]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:79:33-79:34)
  1: _3 = const ()
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:81:14-81:14)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:81:13-81:14)
  3: StorageDead(_3)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:81:13-81:14)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:13-84:14)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:62)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:31)
  7: StorageLive(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:31)
  8: StorageLive(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:24)
  9: _12 = &(*_2)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:31)
      kind: _11 = core::slice::<impl [B]>::iter(move _12) -> [return: bb4, unwind: bb15]
  }
  preds [bb1]
  succs [bb4, bb15]

bb4
  0: _10 = &mut _11
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:31)
  1: StorageDead(_12)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:30-82:31)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:36-82:61)
  3: _13 = {closure@regex-automata/src/util/prefilter/memchr.rs:82:36: 82:39}
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:36-82:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:62)
      kind: _9 = <core::slice::Iter<'_, B> as core::iter::Iterator>::all::<{closure@regex-automata/src/util/prefilter/memchr.rs:82:36: 82:39}>(move _10, move _13) -> [return: bb5, unwind: bb15]
  }
  preds [bb3]
  succs [bb5, bb15]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:17-82:62)
      kind: switchInt(move _9) -> [0: bb7, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:61-82:62)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:61-82:62)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:61-82:62)
  3: _8 = const ()
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:84:14-84:14)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:84:13-84:14)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:84:13-84:14)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:17-85:19)
  7: StorageLive(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:41)
  8: StorageLive(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:32)
  9: StorageLive(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:30-85:31)
  10: _18 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:30-85:31)
  11: _19 = Len((*_2))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:32)
  12: _20 = Lt(_18, _19)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:32)
      kind: assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb8, unwind: bb15]
  }
  preds [bb5]
  succs [bb8, bb15]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:61-82:62)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:61-82:62)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:82:61-82:62)
  3: _0 = core::option::Option::<util::prefilter::memchr::Memchr2>::None
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:83:24-83:28)
  4: StorageDead(_9)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:84:13-84:14)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:84:13-84:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb14
  }
  preds [bb5]
  succs [bb14]

bb8
  0: _17 = &(*_2)[_18]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:41)
      kind: _16 = <B as core::convert::AsRef<[u8]>>::as_ref(move _17) -> [return: bb9, unwind: bb15]
  }
  preds [bb6]
  succs [bb9, bb15]

bb9
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:40-85:41)
  1: StorageLive(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:42-85:43)
  2: _21 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:42-85:43)
  3: _22 = Len((*_16))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:44)
  4: _23 = Lt(_21, _22)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:44)
      kind: assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> [success: bb10, unwind: bb15]
  }
  preds [bb8]
  succs [bb10, bb15]

bb10
  0: _15 = (*_16)[_21]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:22-85:44)
  1: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:17-85:19)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:44-85:45)
  3: StorageDead(_18)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:44-85:45)
  4: StorageDead(_16)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:85:44-85:45)
  5: StorageLive(_24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:17-86:19)
  6: StorageLive(_25)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:41)
  7: StorageLive(_26)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:32)
  8: StorageLive(_27)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:30-86:31)
  9: _27 = const 1_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:30-86:31)
  10: _28 = Len((*_2))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:32)
  11: _29 = Lt(_27, _28)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:32)
      kind: assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb11, unwind: bb15]
  }
  preds [bb9]
  succs [bb11, bb15]

bb11
  0: _26 = &(*_2)[_27]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:41)
      kind: _25 = <B as core::convert::AsRef<[u8]>>::as_ref(move _26) -> [return: bb12, unwind: bb15]
  }
  preds [bb10]
  succs [bb12, bb15]

bb12
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:40-86:41)
  1: StorageLive(_30)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:42-86:43)
  2: _30 = const 0_usize
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:42-86:43)
  3: _31 = Len((*_25))
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:44)
  4: _32 = Lt(_30, _31)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:44)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb13, unwind: bb15]
  }
  preds [bb11]
  succs [bb13, bb15]

bb13
  0: _24 = (*_25)[_30]
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:22-86:44)
  1: FakeRead(ForLet(None), _24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:17-86:19)
  2: StorageDead(_30)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:44-86:45)
  3: StorageDead(_27)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:44-86:45)
  4: StorageDead(_25)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:86:44-86:45)
  5: StorageLive(_33)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:18-87:33)
  6: StorageLive(_34)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:26-87:28)
  7: _34 = _15
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:26-87:28)
  8: StorageLive(_35)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:30-87:32)
  9: _35 = _24
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:30-87:32)
  10: _33 = util::prefilter::memchr::Memchr2(move _34, move _35)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:18-87:33)
  11: StorageDead(_35)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:32-87:33)
  12: StorageDead(_34)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:32-87:33)
  13: _0 = core::option::Option::<util::prefilter::memchr::Memchr2>::Some(move _33)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:13-87:34)
  14: StorageDead(_33)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:87:33-87:34)
  15: StorageDead(_24)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:88:9-88:10)
  16: StorageDead(_15)
    SourceInfo(regex-automata/src/util/prefilter/memchr.rs:88:9-88:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:89:6-89:6)
      kind: goto -> bb14
  }
  preds [bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:89:6-89:6)
      kind: return
  }
  preds [bb2, bb7, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/prefilter/memchr.rs:69:5-89:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb6, bb8, bb9, bb10, bb11, bb12]
  succs []

