bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1379:27)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1378:38)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1377:27)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1376:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1376:25)
      kind: _5 = core::mem::size_of::<u32>() -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1377:11-1377:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1377:11-1377:27)
      kind: _6 = core::mem::size_of::<u32>() -> [return: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: _7 = AddWithOverflow(_5, _6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1377:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1377:27)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _6) -> [success: bb3, unwind: bb11]
  }
  preds [bb1]
  succs [bb3, bb11]

bb3
  0: _4 = move (_7.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1377:27)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1377:26-1377:27)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1377:26-1377:27)
  3: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1378:11-1378:38)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1378:11-1378:23)
  5: _9 = &((*_1).1: util::alphabet::ByteClasses)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1378:11-1378:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1378:11-1378:38)
      kind: _8 = util::alphabet::ByteClasses::write_to_len(move _9) -> [return: bb4, unwind: bb11]
  }
  preds [bb2]
  succs [bb4, bb11]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1378:37-1378:38)
  1: _10 = AddWithOverflow(_4, _8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1378:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1378:38)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _8) -> [success: bb5, unwind: bb11]
  }
  preds [bb3]
  succs [bb5, bb11]

bb5
  0: _3 = move (_10.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1378:38)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1378:37-1378:38)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1378:37-1378:38)
  3: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1379:11-1379:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1379:11-1379:27)
      kind: _11 = core::mem::size_of::<u32>() -> [return: bb6, unwind: bb11]
  }
  preds [bb4]
  succs [bb6, bb11]

bb6
  0: _12 = AddWithOverflow(_3, _11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1379:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1379:27)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _11) -> [success: bb7, unwind: bb11]
  }
  preds [bb5]
  succs [bb7, bb11]

bb7
  0: _2 = move (_12.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1379:27)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1379:26-1379:27)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1379:26-1379:27)
  3: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:30)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:24)
  5: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:24)
  6: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:15)
  7: _16 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:15)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:24)
      kind: _15 = dfa::sparse::Transitions::<T>::sparse(move _16) -> [return: bb8, unwind: bb11]
  }
  preds [bb6]
  succs [bb8, bb11]

bb8
  0: _14 = &(*_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:24)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:23-1380:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1380:11-1380:30)
      kind: _13 = core::slice::<impl [u8]>::len(move _14) -> [return: bb9, unwind: bb11]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:29-1380:30)
  1: _17 = AddWithOverflow(_2, _13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1380:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1380:30)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _13) -> [success: bb10, unwind: bb11]
  }
  preds [bb8]
  succs [bb10, bb11]

bb10
  0: _0 = move (_17.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1376:9-1380:30)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:29-1380:30)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1380:29-1380:30)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1381:5-1381:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1381:6-1381:6)
      kind: return
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1375:5-1381:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9]
  succs []

