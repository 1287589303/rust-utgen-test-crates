{
  "regex-automata/src/nfa/thompson/backtrack.rs:1301:28:1301:75": [
    {
      "Try": "self.try_search_slots_imp(cache, input, slots)?"
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1307:28:1307:75": [
    {
      "Try": "self.try_search_slots_imp(cache, input, slots)?"
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1306:12:1306:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "slots.len() >= min",
          "lhs": "slots.len()",
          "rhs": "min",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1300:13:1300:22": [
    {
      "Bool": {
        "Other": "utf8empty"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1310:12:1310:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.get_nfa().pattern_len() == 1",
          "lhs": "self.get_nfa().pattern_len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1312:23:1312:76": [
    {
      "Try": "self.try_search_slots_imp(cache, input, &mut enough)?"
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1299:25:1299:51": [
    {
      "Bool": {
        "Other": "self.get_nfa().has_empty()"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1319:19:1319:72": [
    {
      "Try": "self.try_search_slots_imp(cache, input, &mut enough)?"
    }
  ],
  "regex-automata/src/nfa/thompson/backtrack.rs:1299:55:1299:79": [
    {
      "Bool": {
        "Other": "self.get_nfa().is_utf8()"
      }
    }
  ]
}