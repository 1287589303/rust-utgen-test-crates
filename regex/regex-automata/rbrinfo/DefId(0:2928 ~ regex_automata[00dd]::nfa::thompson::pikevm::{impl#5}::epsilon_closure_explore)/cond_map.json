{
  "regex-automata/src/nfa/thompson/pikevm.rs:1699:25:1703:22": [
    {
      "Bool": {
        "Other": "self.nfa.look_matcher().matches_inline(\n                        look,\n                        input.haystack(),\n                        at,\n                    )"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1736:24:1736:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "slot.as_usize() < curr_slots.len()",
          "lhs": "slot.as_usize()",
          "rhs": "curr_slots.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1686:19:1686:39": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/pikevm.rs:1686:19:1686:39",
        "match_str": "*self.nfa.state(sid)",
        "match_kind": {
          "Enum": [
            "ByteRange",
            "Sparse",
            "Dense",
            "Look",
            "Union",
            "BinaryUnion",
            "Capture",
            "Fail",
            "Match"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/pikevm.rs:1726:17:1726:50": {
            "pat": {
              "pat_str": "State::BinaryUnion { alt1, alt2 }",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1726:54:1730:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1691:19:1691:38": {
            "pat": {
              "pat_str": "State::Dense { .. }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1691:42:1694:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1687:17:1687:28": {
            "pat": {
              "pat_str": "State::Fail",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1691:42:1694:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1731:17:1731:50": {
            "pat": {
              "pat_str": "State::Capture { next, slot, .. }",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1731:54:1746:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1695:17:1695:43": {
            "pat": {
              "pat_str": "State::Look { look, next }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1695:47:1707:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1688:19:1688:38": {
            "pat": {
              "pat_str": "State::Match { .. }",
              "kind": {
                "Enum": 8
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1691:42:1694:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1689:19:1689:42": {
            "pat": {
              "pat_str": "State::ByteRange { .. }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1691:42:1694:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1708:17:1708:48": {
            "pat": {
              "pat_str": "State::Union { ref alternates }",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1708:52:1725:18"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1690:19:1690:39": {
            "pat": {
              "pat_str": "State::Sparse { .. }",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1691:42:1694:18"
          }
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1683:17:1683:37": [
    {
      "Bool": {
        "Other": "next.set.insert(sid)"
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:1709:33:1709:50": [
    {
      "Match": {
        "match_source": "regex-automata/src/nfa/thompson/pikevm.rs:1709:33:1709:50",
        "match_str": "alternates.get(0)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/nfa/thompson/pikevm.rs:1711:25:1711:35": {
            "pat": {
              "pat_str": "Some(&sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1711:39:1711:42"
          },
          "regex-automata/src/nfa/thompson/pikevm.rs:1710:25:1710:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/nfa/thompson/pikevm.rs:1710:33:1710:39"
          }
        }
      }
    }
  ]
}