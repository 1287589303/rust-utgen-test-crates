{
  "regex-automata/src/dfa/determinize.rs:592:9:597:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())\n        + self.memory_usage_state\n        + self.stack.capacity() * size_of::<StateID>()\n        + self.scratch_state_builder.capacity()",
          "lhs": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())\n        + self.memory_usage_state\n        + self.stack.capacity() * size_of::<StateID>()",
          "rhs": "self.scratch_state_builder.capacity()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/determinize.rs:594:11:594:73": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.cache.len() * (size_of::<State>() + size_of::<StateID>())",
          "lhs": "self.cache.len()",
          "rhs": "(size_of::<State>() + size_of::<StateID>())",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/determinize.rs:592:9:596:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())\n        + self.memory_usage_state\n        + self.stack.capacity() * size_of::<StateID>()",
          "lhs": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())\n        + self.memory_usage_state",
          "rhs": "self.stack.capacity() * size_of::<StateID>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/determinize.rs:592:9:592:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.builder_states.len() * size_of::<State>()",
          "lhs": "self.builder_states.len()",
          "rhs": "size_of::<State>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/determinize.rs:592:9:594:73": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())",
          "lhs": "self.builder_states.len() * size_of::<State>()",
          "rhs": "self.cache.len() * (size_of::<State>() + size_of::<StateID>())",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/determinize.rs:596:11:596:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.stack.capacity() * size_of::<StateID>()",
          "lhs": "self.stack.capacity()",
          "rhs": "size_of::<StateID>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/determinize.rs:592:9:595:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())\n        + self.memory_usage_state",
          "lhs": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())",
          "rhs": "self.memory_usage_state",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/determinize.rs:594:30:594:73": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(size_of::<State>() + size_of::<StateID>())",
          "lhs": "size_of::<State>()",
          "rhs": "size_of::<StateID>()",
          "cmp_with_int": false
        }
      }
    }
  ]
}