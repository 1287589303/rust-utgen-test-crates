bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-596:55)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-595:34)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-594:73)
  3: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:55)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:34)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:28)
  6: _7 = &((*_1).3: std::vec::Vec<util::determinize::state::State>)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:34)
      kind: _6 = std::vec::Vec::<util::determinize::state::State>::len(move _7) -> [return: bb1, unwind: bb17]
  }
  preds []
  succs [bb1, bb17]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:33-592:34)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:37-592:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:592:37-592:55)
      kind: _8 = core::mem::size_of::<util::determinize::state::State>() -> [return: bb2, unwind: bb17]
  }
  preds [bb0]
  succs [bb2, bb17]

bb2
  0: _9 = MulWithOverflow(_6, _8)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:55)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _6, move _8) -> [success: bb3, unwind: bb17]
  }
  preds [bb1]
  succs [bb3, bb17]

bb3
  0: _5 = move (_9.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-592:55)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:54-592:55)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:54-592:55)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:73)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:27)
  5: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:21)
  6: _12 = &((*_1).4: std::collections::HashMap<util::determinize::state::State, util::primitives::StateID>)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:27)
      kind: _11 = std::collections::HashMap::<util::determinize::state::State, util::primitives::StateID>::len(move _12) -> [return: bb4, unwind: bb17]
  }
  preds [bb2]
  succs [bb4, bb17]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:26-594:27)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:30-594:73)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:31-594:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:594:31-594:49)
      kind: _14 = core::mem::size_of::<util::determinize::state::State>() -> [return: bb5, unwind: bb17]
  }
  preds [bb3]
  succs [bb5, bb17]

bb5
  0: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:52-594:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:594:52-594:72)
      kind: _15 = core::mem::size_of::<util::primitives::StateID>() -> [return: bb6, unwind: bb17]
  }
  preds [bb4]
  succs [bb6, bb17]

bb6
  0: _16 = AddWithOverflow(_14, _15)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:30-594:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:594:30-594:73)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> [success: bb7, unwind: bb17]
  }
  preds [bb5]
  succs [bb7, bb17]

bb7
  0: _13 = move (_16.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:30-594:73)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:72-594:73)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:72-594:73)
  3: _17 = MulWithOverflow(_11, _13)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:73)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} * {}`, which would overflow", move _11, move _13) -> [success: bb8, unwind: bb17]
  }
  preds [bb6]
  succs [bb8, bb17]

bb8
  0: _10 = move (_17.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:11-594:73)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:72-594:73)
  2: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:72-594:73)
  3: _18 = AddWithOverflow(_5, _10)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-594:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-594:73)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _10) -> [success: bb9, unwind: bb17]
  }
  preds [bb7]
  succs [bb9, bb17]

bb9
  0: _4 = move (_18.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-594:73)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:72-594:73)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/determinize.rs:594:72-594:73)
  3: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/determinize.rs:595:11-595:34)
  4: _19 = ((*_1).5: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:595:11-595:34)
  5: _20 = AddWithOverflow(_4, _19)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-595:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-595:34)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _19) -> [success: bb10, unwind: bb17]
  }
  preds [bb8]
  succs [bb10, bb17]

bb10
  0: _3 = move (_20.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-595:34)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/determinize.rs:595:33-595:34)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/determinize.rs:595:33-595:34)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:55)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:32)
  5: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:21)
  6: _23 = &((*_1).7: std::vec::Vec<util::primitives::StateID>)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:32)
      kind: _22 = std::vec::Vec::<util::primitives::StateID>::capacity(move _23) -> [return: bb11, unwind: bb17]
  }
  preds [bb9]
  succs [bb11, bb17]

bb11
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:31-596:32)
  1: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:35-596:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:596:35-596:55)
      kind: _24 = core::mem::size_of::<util::primitives::StateID>() -> [return: bb12, unwind: bb17]
  }
  preds [bb10]
  succs [bb12, bb17]

bb12
  0: _25 = MulWithOverflow(_22, _24)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:55)
      kind: assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", move _22, move _24) -> [success: bb13, unwind: bb17]
  }
  preds [bb11]
  succs [bb13, bb17]

bb13
  0: _21 = move (_25.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:11-596:55)
  1: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:54-596:55)
  2: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:54-596:55)
  3: _26 = AddWithOverflow(_3, _21)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-596:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-596:55)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _21) -> [success: bb14, unwind: bb17]
  }
  preds [bb12]
  succs [bb14, bb17]

bb14
  0: _2 = move (_26.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-596:55)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:54-596:55)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/determinize.rs:596:54-596:55)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/determinize.rs:597:11-597:48)
  4: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/determinize.rs:597:11-597:37)
  5: _28 = &((*_1).8: util::determinize::state::StateBuilderEmpty)
    SourceInfo(regex-automata/src/dfa/determinize.rs:597:11-597:37)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:597:11-597:48)
      kind: _27 = util::determinize::state::StateBuilderEmpty::capacity(move _28) -> [return: bb15, unwind: bb17]
  }
  preds [bb13]
  succs [bb15, bb17]

bb15
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/determinize.rs:597:47-597:48)
  1: _29 = AddWithOverflow(_2, _27)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-597:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-597:48)
      kind: assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _27) -> [success: bb16, unwind: bb17]
  }
  preds [bb14]
  succs [bb16, bb17]

bb16
  0: _0 = move (_29.0: usize)
    SourceInfo(regex-automata/src/dfa/determinize.rs:592:9-597:48)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/determinize.rs:597:47-597:48)
  2: StorageDead(_2)
    SourceInfo(regex-automata/src/dfa/determinize.rs:597:47-597:48)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:598:6-598:6)
      kind: return
  }
  preds [bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/determinize.rs:589:5-598:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb15]
  succs []

