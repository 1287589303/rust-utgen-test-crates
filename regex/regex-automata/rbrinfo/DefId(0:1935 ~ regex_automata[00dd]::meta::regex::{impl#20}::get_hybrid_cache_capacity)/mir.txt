bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:9-3094:35)
  1: _2 = ((*_1).7: core::option::Option<usize>)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:9-3094:35)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:46-3094:59)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:50-3094:59)
  4: _5 = const 20_i32 as u32 (IntToInt)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:50-3094:59)
  5: _6 = Lt(move _5, const 64_u32)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:50-3094:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3094:50-3094:59)
      kind: assert(move _6, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _4 = Shl(const 1_usize, const 20_i32)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:50-3094:59)
  1: _7 = MulWithOverflow(const 2_usize, _4)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:46-3094:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3094:46-3094:59)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _4) -> [success: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _3 = move (_7.0: usize)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:46-3094:59)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:58-3094:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3094:9-3094:60)
      kind: _0 = core::option::Option::<usize>::unwrap_or(move _2, move _3) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:59-3094:60)
  1: StorageDead(_2)
    SourceInfo(regex-automata/src/meta/regex.rs:3094:59-3094:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3095:6-3095:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/regex.rs:3093:5-3095:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

