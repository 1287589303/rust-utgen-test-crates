bb0
  0: _2 = MulWithOverflow(const 8_usize, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/special.rs:388:9-388:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:388:9-388:26)
      kind: assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_usize, const util::primitives::StateID::SIZE) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _0 = move (_2.0: usize)
    SourceInfo(regex-automata/src/dfa/special.rs:388:9-388:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:389:6-389:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/special.rs:387:5-389:6)
      kind: resume
  }
  preds [bb0]
  succs []

