bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:13-2774:19)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:22-2774:47)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:22-2774:32)
  3: _5 = &(*((*_1).1: &hybrid::dfa::Cache))
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:22-2774:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:22-2774:47)
      kind: _4 = hybrid::dfa::Cache::memory_usage(move _5) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:46-2774:47)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:15-2775:75)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:15-2775:19)
  3: _7 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:15-2775:19)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:74)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:68)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:68)
  7: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:57)
  8: _11 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:68)
      kind: _10 = util::determinize::state::StateBuilderNFA::as_bytes(move _11) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _9 = &(*_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:68)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:67-2775:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:52-2775:74)
      kind: _8 = core::slice::<impl [u8]>::len(move _9) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:73-2775:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:15-2775:75)
      kind: _6 = hybrid::dfa::LazyRef::<'_, '_>::memory_usage_for_one_more_state(move _7, move _8) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:74-2775:75)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:74-2775:75)
  2: _12 = AddWithOverflow(_4, _6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:22-2775:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:22-2775:75)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _6) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _3 = move (_12.0: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:22-2775:75)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:74-2775:75)
  2: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:74-2775:75)
  3: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2774:13-2774:19)
  4: StorageDead(_10)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2775:75-2775:76)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2776:9-2776:15)
  6: _13 = _3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2776:9-2776:15)
  7: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2776:19-2776:42)
  8: _14 = ((*((*_1).0: &hybrid::dfa::DFA)).6: usize)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2776:19-2776:42)
  9: _0 = Le(move _13, move _14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2776:9-2776:42)
  10: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2776:41-2776:42)
  11: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2776:41-2776:42)
  12: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:2777:5-2777:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2777:6-2777:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:2773:5-2777:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

