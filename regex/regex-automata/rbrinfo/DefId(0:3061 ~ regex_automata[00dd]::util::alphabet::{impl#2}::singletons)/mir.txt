bb0
  0: StorageLive(_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:229:13-229:24)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:229:27-229:47)
      kind: _1 = util::alphabet::ByteClasses::empty() -> [return: bb1, unwind: bb12]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: FakeRead(ForLet(None), _1)
    SourceInfo(regex-automata/src/util/alphabet.rs:229:13-229:24)
  1: StorageLive(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:9-232:10)
  2: StorageLive(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  3: StorageLive(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
      kind: _4 = core::ops::RangeInclusive::<u8>::new(const 0_u8, const u8::MAX) -> [return: bb2, unwind: bb12]
  }
  preds [bb0]
  succs [bb2, bb12]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
      kind: _3 = <core::ops::RangeInclusive<u8> as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb3, unwind: bb12]
  }
  preds [bb1]
  succs [bb3, bb12]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:24-230:25)
  1: PlaceMention(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  3: _5 = move _3
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:9-232:10)
      kind: goto -> bb4
  }
  preds [bb2]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:9-232:10)
      kind: falseUnwind -> [real: bb5, unwind: bb12]
  }
  preds [bb3, bb11]
  succs [bb5, bb12]

bb5
  0: StorageLive(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  2: StorageLive(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  4: _10 = &mut _5
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  5: _9 = &mut (*_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
      kind: _8 = <core::ops::RangeInclusive<u8> as core::iter::Iterator>::next(move _9) -> [return: bb6, unwind: bb12]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:24-230:25)
  1: PlaceMention(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  2: _11 = discriminant(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
      kind: switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _8)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:18-230:25)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:9-232:10)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:13-230:14)
  1: _13 = ((_8 as Some).0: u8)
    SourceInfo(regex-automata/src/util/alphabet.rs:230:13-230:14)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:13-231:30)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:13-231:20)
  4: _15 = &mut _1
    SourceInfo(regex-automata/src/util/alphabet.rs:231:13-231:20)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:25-231:26)
  6: _16 = _13
    SourceInfo(regex-automata/src/util/alphabet.rs:231:25-231:26)
  7: StorageLive(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:28-231:29)
  8: _17 = _13
    SourceInfo(regex-automata/src/util/alphabet.rs:231:28-231:29)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:231:13-231:30)
      kind: _14 = util::alphabet::ByteClasses::set(move _15, move _16, move _17) -> [return: bb11, unwind: bb12]
  }
  preds [bb6, bb8]
  succs [bb11, bb12]

bb10
  0: _2 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:230:9-232:10)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  2: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  3: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  4: StorageDead(_5)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  5: StorageDead(_3)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  6: StorageDead(_2)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  7: _0 = _1
    SourceInfo(regex-automata/src/util/alphabet.rs:233:9-233:16)
  8: StorageDead(_1)
    SourceInfo(regex-automata/src/util/alphabet.rs:234:5-234:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:234:6-234:6)
      kind: return
  }
  preds [bb8]
  succs []

bb11
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:29-231:30)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:29-231:30)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:29-231:30)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/util/alphabet.rs:231:30-231:31)
  4: _7 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:230:26-232:10)
  5: StorageDead(_13)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  6: StorageDead(_10)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  7: StorageDead(_8)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  8: StorageDead(_7)
    SourceInfo(regex-automata/src/util/alphabet.rs:232:9-232:10)
  9: _6 = const ()
    SourceInfo(regex-automata/src/util/alphabet.rs:230:9-232:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:230:9-232:10)
      kind: goto -> bb4
  }
  preds [bb9]
  succs [bb4]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/alphabet.rs:228:5-234:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb5, bb9]
  succs []

