bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:9-292:10)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:12-290:27)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:12-290:13)
  3: _5 = _2
    SourceInfo(regex-automata/src/dfa/accel.rs:290:12-290:13)
  4: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:17-290:27)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:17-290:21)
  6: _7 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:17-290:21)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:290:17-290:27)
      kind: _6 = dfa::accel::Accels::<A>::len(move _7) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:26-290:27)
  1: _4 = Ge(move _5, move _6)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:12-290:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:290:12-290:27)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:26-290:27)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:26-290:27)
  2: _0 = core::option::Option::<dfa::accel::Accel>::None
    SourceInfo(regex-automata/src/dfa/accel.rs:291:20-291:24)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:292:9-292:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:292:9-292:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:297:6-297:6)
      kind: goto -> bb10
  }
  preds [bb1]
  succs [bb10]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:26-290:27)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/accel.rs:290:26-290:27)
  2: _3 = const ()
    SourceInfo(regex-automata/src/dfa/accel.rs:292:10-292:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/accel.rs:292:9-292:10)
  4: StorageDead(_3)
    SourceInfo(regex-automata/src/dfa/accel.rs:292:9-292:10)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:13-293:19)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:38-293:51)
  7: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:38-293:39)
  8: _11 = _2
    SourceInfo(regex-automata/src/dfa/accel.rs:293:38-293:39)
  9: _12 = MulWithOverflow(_11, const dfa::accel::ACCEL_CAP)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:38-293:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:293:38-293:51)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} * {}`, which would overflow", move _11, const dfa::accel::ACCEL_CAP) -> [success: bb4, unwind: bb11]
  }
  preds [bb1]
  succs [bb4, bb11]

bb4
  0: _10 = move (_12.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:38-293:51)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:50-293:51)
  2: _13 = AddWithOverflow(const dfa::accel::ACCEL_TY_SIZE, _10)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:22-293:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:293:22-293:51)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", const dfa::accel::ACCEL_TY_SIZE, move _10) -> [success: bb5, unwind: bb11]
  }
  preds [bb3]
  succs [bb5, bb11]

bb5
  0: _9 = move (_13.0: usize)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:22-293:51)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:50-293:51)
  2: FakeRead(ForLet(None), _9)
    SourceInfo(regex-automata/src/dfa/accel.rs:293:13-293:19)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:13-294:18)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:21-294:66)
  5: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:39-294:65)
  6: StorageLive(_17)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:39-294:65)
  7: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:55-294:65)
  8: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:40-294:55)
  9: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:40-294:55)
  10: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:40-294:44)
  11: _21 = &(*_1)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:40-294:44)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:294:40-294:55)
      kind: _20 = dfa::accel::Accels::<A>::as_bytes(move _21) -> [return: bb6, unwind: bb11]
  }
  preds [bb4]
  succs [bb6, bb11]

bb6
  0: _19 = &(*_20)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:40-294:55)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:54-294:55)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:56-294:64)
  3: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:56-294:62)
  4: _23 = _9
    SourceInfo(regex-automata/src/dfa/accel.rs:294:56-294:62)
  5: _22 = core::ops::RangeFrom::<usize> { start: move _23 }
    SourceInfo(regex-automata/src/dfa/accel.rs:294:56-294:64)
  6: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:63-294:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:294:55-294:65)
      kind: _18 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _19, move _22) -> [return: bb7, unwind: bb11]
  }
  preds [bb5]
  succs [bb7, bb11]

bb7
  0: StorageDead(_22)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:64-294:65)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:64-294:65)
  2: _17 = &(*_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:39-294:65)
  3: _16 = &(*_17)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:39-294:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:294:21-294:66)
      kind: _15 = dfa::accel::Accel::from_slice(move _16) -> [return: bb8, unwind: bb11]
  }
  preds [bb6]
  succs [bb8, bb11]

bb8
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:65-294:66)
  1: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:21-295:61)
  2: StorageLive(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:21-295:61)
  3: _25 = const "Accels must contain valid accelerators"
    SourceInfo(regex-automata/src/dfa/accel.rs:295:21-295:61)
  4: _24 = &(*_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:21-295:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:294:21-295:62)
      kind: _14 = core::result::Result::<dfa::accel::Accel, util::wire::DeserializeError>::expect(move _15, move _24) -> [return: bb9, unwind: bb11]
  }
  preds [bb7]
  succs [bb9, bb11]

bb9
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:61-295:62)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:61-295:62)
  2: FakeRead(ForLet(None), _14)
    SourceInfo(regex-automata/src/dfa/accel.rs:294:13-294:18)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:62-295:63)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:62-295:63)
  5: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:62-295:63)
  6: StorageDead(_17)
    SourceInfo(regex-automata/src/dfa/accel.rs:295:62-295:63)
  7: StorageLive(_26)
    SourceInfo(regex-automata/src/dfa/accel.rs:296:14-296:19)
  8: _26 = move _14
    SourceInfo(regex-automata/src/dfa/accel.rs:296:14-296:19)
  9: _0 = core::option::Option::<dfa::accel::Accel>::Some(move _26)
    SourceInfo(regex-automata/src/dfa/accel.rs:296:9-296:20)
  10: StorageDead(_26)
    SourceInfo(regex-automata/src/dfa/accel.rs:296:19-296:20)
  11: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/accel.rs:297:5-297:6)
  12: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/accel.rs:297:5-297:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:297:6-297:6)
      kind: goto -> bb10
  }
  preds [bb8]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:297:6-297:6)
      kind: return
  }
  preds [bb2, bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/accel.rs:289:5-297:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6, bb7, bb8]
  succs []

