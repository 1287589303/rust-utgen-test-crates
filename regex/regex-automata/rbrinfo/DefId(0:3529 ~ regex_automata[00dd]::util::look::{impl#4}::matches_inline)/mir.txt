bb0
  0: PlaceMention(_2)
    SourceInfo(regex-automata/src/util/look.rs:664:15-664:19)
  1: _5 = discriminant(_2)
    SourceInfo(regex-automata/src/util/look.rs:664:15-664:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:664:9-664:19)
      kind: switchInt(move _5) -> [1: bb2, 2: bb3, 4: bb4, 8: bb5, 16: bb6, 32: bb7, 64: bb8, 128: bb9, 256: bb10, 512: bb11, 1024: bb12, 2048: bb13, 4096: bb14, 8192: bb15, 16384: bb16, 32768: bb17, 65536: bb18, 131072: bb19, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb15, bb16, bb17, bb18, bb19]

bb1
  0: FakeRead(ForMatchedPlace(None), _2)
    SourceInfo(regex-automata/src/util/look.rs:664:15-664:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:664:15-664:19)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:665:13-665:24)
      kind: falseEdge -> [real: bb20, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb20]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:666:13-666:22)
      kind: falseEdge -> [real: bb22, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb22]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:667:13-667:26)
      kind: falseEdge -> [real: bb24, imaginary: bb5]
  }
  preds [bb0, bb3]
  succs [bb5, bb24]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:668:13-668:24)
      kind: falseEdge -> [real: bb26, imaginary: bb6]
  }
  preds [bb0, bb4]
  succs [bb6, bb26]

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:669:13-669:28)
      kind: falseEdge -> [real: bb28, imaginary: bb7]
  }
  preds [bb0, bb5]
  succs [bb7, bb28]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:670:13-670:26)
      kind: falseEdge -> [real: bb30, imaginary: bb8]
  }
  preds [bb0, bb6]
  succs [bb8, bb30]

bb8
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:671:13-671:28)
      kind: falseEdge -> [real: bb32, imaginary: bb9]
  }
  preds [bb0, bb7]
  succs [bb9, bb32]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:672:13-672:34)
      kind: falseEdge -> [real: bb34, imaginary: bb10]
  }
  preds [bb0, bb8]
  succs [bb10, bb34]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:673:13-673:30)
      kind: falseEdge -> [real: bb36, imaginary: bb11]
  }
  preds [bb0, bb9]
  succs [bb11, bb36]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:674:13-674:36)
      kind: falseEdge -> [real: bb39, imaginary: bb12]
  }
  preds [bb0, bb10]
  succs [bb12, bb39]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:677:13-677:33)
      kind: falseEdge -> [real: bb42, imaginary: bb13]
  }
  preds [bb0, bb11]
  succs [bb13, bb42]

bb13
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:678:13-678:31)
      kind: falseEdge -> [real: bb44, imaginary: bb14]
  }
  preds [bb0, bb12]
  succs [bb14, bb44]

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:679:13-679:35)
      kind: falseEdge -> [real: bb46, imaginary: bb15]
  }
  preds [bb0, bb13]
  succs [bb15, bb46]

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:682:13-682:33)
      kind: falseEdge -> [real: bb49, imaginary: bb16]
  }
  preds [bb0, bb14]
  succs [bb16, bb49]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:685:13-685:37)
      kind: falseEdge -> [real: bb52, imaginary: bb17]
  }
  preds [bb0, bb15]
  succs [bb17, bb52]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:688:13-688:35)
      kind: falseEdge -> [real: bb54, imaginary: bb18]
  }
  preds [bb0, bb16]
  succs [bb18, bb54]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:691:13-691:39)
      kind: falseEdge -> [real: bb56, imaginary: bb19]
  }
  preds [bb0, bb17]
  succs [bb19, bb56]

bb19
  0: StorageLive(_62)
    SourceInfo(regex-automata/src/util/look.rs:695:17-695:60)
  1: StorageLive(_63)
    SourceInfo(regex-automata/src/util/look.rs:695:17-695:21)
  2: _63 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:695:17-695:21)
  3: StorageLive(_64)
    SourceInfo(regex-automata/src/util/look.rs:695:47-695:55)
  4: _64 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:695:47-695:55)
  5: StorageLive(_65)
    SourceInfo(regex-automata/src/util/look.rs:695:57-695:59)
  6: _65 = _4
    SourceInfo(regex-automata/src/util/look.rs:695:57-695:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:695:17-695:60)
      kind: _62 = util::look::LookMatcher::is_word_end_half_unicode(move _63, move _64, move _65) -> [return: bb59, unwind: bb62]
  }
  preds [bb0, bb18]
  succs [bb59, bb62]

bb20
  0: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:665:28-665:32)
  1: _6 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:665:28-665:32)
  2: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:665:42-665:50)
  3: _7 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:665:42-665:50)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:665:52-665:54)
  5: _8 = _4
    SourceInfo(regex-automata/src/util/look.rs:665:52-665:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:665:28-665:55)
      kind: _0 = util::look::LookMatcher::is_start(move _6, move _7, move _8) -> [return: bb21, unwind: bb62]
  }
  preds [bb2]
  succs [bb21, bb62]

bb21
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:665:54-665:55)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:665:54-665:55)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:665:54-665:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:665:54-665:55)
      kind: goto -> bb61
  }
  preds [bb20]
  succs [bb61]

bb22
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:666:26-666:30)
  1: _9 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:666:26-666:30)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:666:38-666:46)
  3: _10 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:666:38-666:46)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/util/look.rs:666:48-666:50)
  5: _11 = _4
    SourceInfo(regex-automata/src/util/look.rs:666:48-666:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:666:26-666:51)
      kind: _0 = util::look::LookMatcher::is_end(move _9, move _10, move _11) -> [return: bb23, unwind: bb62]
  }
  preds [bb3]
  succs [bb23, bb62]

bb23
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/util/look.rs:666:50-666:51)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:666:50-666:51)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:666:50-666:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:666:50-666:51)
      kind: goto -> bb61
  }
  preds [bb22]
  succs [bb61]

bb24
  0: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:667:30-667:34)
  1: _12 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:667:30-667:34)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:667:47-667:55)
  3: _13 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:667:47-667:55)
  4: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:667:57-667:59)
  5: _14 = _4
    SourceInfo(regex-automata/src/util/look.rs:667:57-667:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:667:30-667:60)
      kind: _0 = util::look::LookMatcher::is_start_lf(move _12, move _13, move _14) -> [return: bb25, unwind: bb62]
  }
  preds [bb4]
  succs [bb25, bb62]

bb25
  0: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:667:59-667:60)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:667:59-667:60)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:667:59-667:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:667:59-667:60)
      kind: goto -> bb61
  }
  preds [bb24]
  succs [bb61]

bb26
  0: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:668:28-668:32)
  1: _15 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:668:28-668:32)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/util/look.rs:668:43-668:51)
  3: _16 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:668:43-668:51)
  4: StorageLive(_17)
    SourceInfo(regex-automata/src/util/look.rs:668:53-668:55)
  5: _17 = _4
    SourceInfo(regex-automata/src/util/look.rs:668:53-668:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:668:28-668:56)
      kind: _0 = util::look::LookMatcher::is_end_lf(move _15, move _16, move _17) -> [return: bb27, unwind: bb62]
  }
  preds [bb5]
  succs [bb27, bb62]

bb27
  0: StorageDead(_17)
    SourceInfo(regex-automata/src/util/look.rs:668:55-668:56)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:668:55-668:56)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:668:55-668:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:668:55-668:56)
      kind: goto -> bb61
  }
  preds [bb26]
  succs [bb61]

bb28
  0: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:669:32-669:36)
  1: _18 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:669:32-669:36)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:669:51-669:59)
  3: _19 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:669:51-669:59)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:669:61-669:63)
  5: _20 = _4
    SourceInfo(regex-automata/src/util/look.rs:669:61-669:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:669:32-669:64)
      kind: _0 = util::look::LookMatcher::is_start_crlf(move _18, move _19, move _20) -> [return: bb29, unwind: bb62]
  }
  preds [bb6]
  succs [bb29, bb62]

bb29
  0: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:669:63-669:64)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:669:63-669:64)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:669:63-669:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:669:63-669:64)
      kind: goto -> bb61
  }
  preds [bb28]
  succs [bb61]

bb30
  0: StorageLive(_21)
    SourceInfo(regex-automata/src/util/look.rs:670:30-670:34)
  1: _21 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:670:30-670:34)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:670:47-670:55)
  3: _22 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:670:47-670:55)
  4: StorageLive(_23)
    SourceInfo(regex-automata/src/util/look.rs:670:57-670:59)
  5: _23 = _4
    SourceInfo(regex-automata/src/util/look.rs:670:57-670:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:670:30-670:60)
      kind: _0 = util::look::LookMatcher::is_end_crlf(move _21, move _22, move _23) -> [return: bb31, unwind: bb62]
  }
  preds [bb7]
  succs [bb31, bb62]

bb31
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:670:59-670:60)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:670:59-670:60)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/util/look.rs:670:59-670:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:670:59-670:60)
      kind: goto -> bb61
  }
  preds [bb30]
  succs [bb61]

bb32
  0: StorageLive(_24)
    SourceInfo(regex-automata/src/util/look.rs:671:32-671:36)
  1: _24 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:671:32-671:36)
  2: StorageLive(_25)
    SourceInfo(regex-automata/src/util/look.rs:671:51-671:59)
  3: _25 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:671:51-671:59)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/util/look.rs:671:61-671:63)
  5: _26 = _4
    SourceInfo(regex-automata/src/util/look.rs:671:61-671:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:671:32-671:64)
      kind: _0 = util::look::LookMatcher::is_word_ascii(move _24, move _25, move _26) -> [return: bb33, unwind: bb62]
  }
  preds [bb8]
  succs [bb33, bb62]

bb33
  0: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:671:63-671:64)
  1: StorageDead(_25)
    SourceInfo(regex-automata/src/util/look.rs:671:63-671:64)
  2: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:671:63-671:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:671:63-671:64)
      kind: goto -> bb61
  }
  preds [bb32]
  succs [bb61]

bb34
  0: StorageLive(_27)
    SourceInfo(regex-automata/src/util/look.rs:672:38-672:42)
  1: _27 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:672:38-672:42)
  2: StorageLive(_28)
    SourceInfo(regex-automata/src/util/look.rs:672:64-672:72)
  3: _28 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:672:64-672:72)
  4: StorageLive(_29)
    SourceInfo(regex-automata/src/util/look.rs:672:74-672:76)
  5: _29 = _4
    SourceInfo(regex-automata/src/util/look.rs:672:74-672:76)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:672:38-672:77)
      kind: _0 = util::look::LookMatcher::is_word_ascii_negate(move _27, move _28, move _29) -> [return: bb35, unwind: bb62]
  }
  preds [bb9]
  succs [bb35, bb62]

bb35
  0: StorageDead(_29)
    SourceInfo(regex-automata/src/util/look.rs:672:76-672:77)
  1: StorageDead(_28)
    SourceInfo(regex-automata/src/util/look.rs:672:76-672:77)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:672:76-672:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:672:76-672:77)
      kind: goto -> bb61
  }
  preds [bb34]
  succs [bb61]

bb36
  0: StorageLive(_30)
    SourceInfo(regex-automata/src/util/look.rs:673:34-673:68)
  1: StorageLive(_31)
    SourceInfo(regex-automata/src/util/look.rs:673:34-673:38)
  2: _31 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:673:34-673:38)
  3: StorageLive(_32)
    SourceInfo(regex-automata/src/util/look.rs:673:55-673:63)
  4: _32 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:673:55-673:63)
  5: StorageLive(_33)
    SourceInfo(regex-automata/src/util/look.rs:673:65-673:67)
  6: _33 = _4
    SourceInfo(regex-automata/src/util/look.rs:673:65-673:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:673:34-673:68)
      kind: _30 = util::look::LookMatcher::is_word_unicode(move _31, move _32, move _33) -> [return: bb37, unwind: bb62]
  }
  preds [bb10]
  succs [bb37, bb62]

bb37
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/util/look.rs:673:67-673:68)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/util/look.rs:673:67-673:68)
  2: StorageDead(_31)
    SourceInfo(regex-automata/src/util/look.rs:673:67-673:68)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:673:34-673:77)
      kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _30) -> [return: bb38, unwind: bb62]
  }
  preds [bb36]
  succs [bb38, bb62]

bb38
  0: StorageDead(_30)
    SourceInfo(regex-automata/src/util/look.rs:673:76-673:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:673:76-673:77)
      kind: goto -> bb61
  }
  preds [bb37]
  succs [bb61]

bb39
  0: StorageLive(_34)
    SourceInfo(regex-automata/src/util/look.rs:675:17-675:58)
  1: StorageLive(_35)
    SourceInfo(regex-automata/src/util/look.rs:675:17-675:21)
  2: _35 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:675:17-675:21)
  3: StorageLive(_36)
    SourceInfo(regex-automata/src/util/look.rs:675:45-675:53)
  4: _36 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:675:45-675:53)
  5: StorageLive(_37)
    SourceInfo(regex-automata/src/util/look.rs:675:55-675:57)
  6: _37 = _4
    SourceInfo(regex-automata/src/util/look.rs:675:55-675:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:675:17-675:58)
      kind: _34 = util::look::LookMatcher::is_word_unicode_negate(move _35, move _36, move _37) -> [return: bb40, unwind: bb62]
  }
  preds [bb11]
  succs [bb40, bb62]

bb40
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/util/look.rs:675:57-675:58)
  1: StorageDead(_36)
    SourceInfo(regex-automata/src/util/look.rs:675:57-675:58)
  2: StorageDead(_35)
    SourceInfo(regex-automata/src/util/look.rs:675:57-675:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:675:17-675:67)
      kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _34) -> [return: bb41, unwind: bb62]
  }
  preds [bb39]
  succs [bb41, bb62]

bb41
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/util/look.rs:675:66-675:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:675:66-675:67)
      kind: goto -> bb61
  }
  preds [bb40]
  succs [bb61]

bb42
  0: StorageLive(_38)
    SourceInfo(regex-automata/src/util/look.rs:677:37-677:41)
  1: _38 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:677:37-677:41)
  2: StorageLive(_39)
    SourceInfo(regex-automata/src/util/look.rs:677:62-677:70)
  3: _39 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:677:62-677:70)
  4: StorageLive(_40)
    SourceInfo(regex-automata/src/util/look.rs:677:72-677:74)
  5: _40 = _4
    SourceInfo(regex-automata/src/util/look.rs:677:72-677:74)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:677:37-677:75)
      kind: _0 = util::look::LookMatcher::is_word_start_ascii(move _38, move _39, move _40) -> [return: bb43, unwind: bb62]
  }
  preds [bb12]
  succs [bb43, bb62]

bb43
  0: StorageDead(_40)
    SourceInfo(regex-automata/src/util/look.rs:677:74-677:75)
  1: StorageDead(_39)
    SourceInfo(regex-automata/src/util/look.rs:677:74-677:75)
  2: StorageDead(_38)
    SourceInfo(regex-automata/src/util/look.rs:677:74-677:75)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:677:74-677:75)
      kind: goto -> bb61
  }
  preds [bb42]
  succs [bb61]

bb44
  0: StorageLive(_41)
    SourceInfo(regex-automata/src/util/look.rs:678:35-678:39)
  1: _41 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:678:35-678:39)
  2: StorageLive(_42)
    SourceInfo(regex-automata/src/util/look.rs:678:58-678:66)
  3: _42 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:678:58-678:66)
  4: StorageLive(_43)
    SourceInfo(regex-automata/src/util/look.rs:678:68-678:70)
  5: _43 = _4
    SourceInfo(regex-automata/src/util/look.rs:678:68-678:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:678:35-678:71)
      kind: _0 = util::look::LookMatcher::is_word_end_ascii(move _41, move _42, move _43) -> [return: bb45, unwind: bb62]
  }
  preds [bb13]
  succs [bb45, bb62]

bb45
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/util/look.rs:678:70-678:71)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/util/look.rs:678:70-678:71)
  2: StorageDead(_41)
    SourceInfo(regex-automata/src/util/look.rs:678:70-678:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:678:70-678:71)
      kind: goto -> bb61
  }
  preds [bb44]
  succs [bb61]

bb46
  0: StorageLive(_44)
    SourceInfo(regex-automata/src/util/look.rs:680:17-680:57)
  1: StorageLive(_45)
    SourceInfo(regex-automata/src/util/look.rs:680:17-680:21)
  2: _45 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:680:17-680:21)
  3: StorageLive(_46)
    SourceInfo(regex-automata/src/util/look.rs:680:44-680:52)
  4: _46 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:680:44-680:52)
  5: StorageLive(_47)
    SourceInfo(regex-automata/src/util/look.rs:680:54-680:56)
  6: _47 = _4
    SourceInfo(regex-automata/src/util/look.rs:680:54-680:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:680:17-680:57)
      kind: _44 = util::look::LookMatcher::is_word_start_unicode(move _45, move _46, move _47) -> [return: bb47, unwind: bb62]
  }
  preds [bb14]
  succs [bb47, bb62]

bb47
  0: StorageDead(_47)
    SourceInfo(regex-automata/src/util/look.rs:680:56-680:57)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/util/look.rs:680:56-680:57)
  2: StorageDead(_45)
    SourceInfo(regex-automata/src/util/look.rs:680:56-680:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:680:17-680:66)
      kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _44) -> [return: bb48, unwind: bb62]
  }
  preds [bb46]
  succs [bb48, bb62]

bb48
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/util/look.rs:680:65-680:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:680:65-680:66)
      kind: goto -> bb61
  }
  preds [bb47]
  succs [bb61]

bb49
  0: StorageLive(_48)
    SourceInfo(regex-automata/src/util/look.rs:683:17-683:55)
  1: StorageLive(_49)
    SourceInfo(regex-automata/src/util/look.rs:683:17-683:21)
  2: _49 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:683:17-683:21)
  3: StorageLive(_50)
    SourceInfo(regex-automata/src/util/look.rs:683:42-683:50)
  4: _50 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:683:42-683:50)
  5: StorageLive(_51)
    SourceInfo(regex-automata/src/util/look.rs:683:52-683:54)
  6: _51 = _4
    SourceInfo(regex-automata/src/util/look.rs:683:52-683:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:683:17-683:55)
      kind: _48 = util::look::LookMatcher::is_word_end_unicode(move _49, move _50, move _51) -> [return: bb50, unwind: bb62]
  }
  preds [bb15]
  succs [bb50, bb62]

bb50
  0: StorageDead(_51)
    SourceInfo(regex-automata/src/util/look.rs:683:54-683:55)
  1: StorageDead(_50)
    SourceInfo(regex-automata/src/util/look.rs:683:54-683:55)
  2: StorageDead(_49)
    SourceInfo(regex-automata/src/util/look.rs:683:54-683:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:683:17-683:64)
      kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _48) -> [return: bb51, unwind: bb62]
  }
  preds [bb49]
  succs [bb51, bb62]

bb51
  0: StorageDead(_48)
    SourceInfo(regex-automata/src/util/look.rs:683:63-683:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:683:63-683:64)
      kind: goto -> bb61
  }
  preds [bb50]
  succs [bb61]

bb52
  0: StorageLive(_52)
    SourceInfo(regex-automata/src/util/look.rs:686:17-686:21)
  1: _52 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:686:17-686:21)
  2: StorageLive(_53)
    SourceInfo(regex-automata/src/util/look.rs:686:47-686:55)
  3: _53 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:686:47-686:55)
  4: StorageLive(_54)
    SourceInfo(regex-automata/src/util/look.rs:686:57-686:59)
  5: _54 = _4
    SourceInfo(regex-automata/src/util/look.rs:686:57-686:59)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:686:17-686:60)
      kind: _0 = util::look::LookMatcher::is_word_start_half_ascii(move _52, move _53, move _54) -> [return: bb53, unwind: bb62]
  }
  preds [bb16]
  succs [bb53, bb62]

bb53
  0: StorageDead(_54)
    SourceInfo(regex-automata/src/util/look.rs:686:59-686:60)
  1: StorageDead(_53)
    SourceInfo(regex-automata/src/util/look.rs:686:59-686:60)
  2: StorageDead(_52)
    SourceInfo(regex-automata/src/util/look.rs:686:59-686:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:686:59-686:60)
      kind: goto -> bb61
  }
  preds [bb52]
  succs [bb61]

bb54
  0: StorageLive(_55)
    SourceInfo(regex-automata/src/util/look.rs:689:17-689:21)
  1: _55 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:689:17-689:21)
  2: StorageLive(_56)
    SourceInfo(regex-automata/src/util/look.rs:689:45-689:53)
  3: _56 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:689:45-689:53)
  4: StorageLive(_57)
    SourceInfo(regex-automata/src/util/look.rs:689:55-689:57)
  5: _57 = _4
    SourceInfo(regex-automata/src/util/look.rs:689:55-689:57)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:689:17-689:58)
      kind: _0 = util::look::LookMatcher::is_word_end_half_ascii(move _55, move _56, move _57) -> [return: bb55, unwind: bb62]
  }
  preds [bb17]
  succs [bb55, bb62]

bb55
  0: StorageDead(_57)
    SourceInfo(regex-automata/src/util/look.rs:689:57-689:58)
  1: StorageDead(_56)
    SourceInfo(regex-automata/src/util/look.rs:689:57-689:58)
  2: StorageDead(_55)
    SourceInfo(regex-automata/src/util/look.rs:689:57-689:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:689:57-689:58)
      kind: goto -> bb61
  }
  preds [bb54]
  succs [bb61]

bb56
  0: StorageLive(_58)
    SourceInfo(regex-automata/src/util/look.rs:692:17-692:62)
  1: StorageLive(_59)
    SourceInfo(regex-automata/src/util/look.rs:692:17-692:21)
  2: _59 = &(*_1)
    SourceInfo(regex-automata/src/util/look.rs:692:17-692:21)
  3: StorageLive(_60)
    SourceInfo(regex-automata/src/util/look.rs:692:49-692:57)
  4: _60 = &(*_3)
    SourceInfo(regex-automata/src/util/look.rs:692:49-692:57)
  5: StorageLive(_61)
    SourceInfo(regex-automata/src/util/look.rs:692:59-692:61)
  6: _61 = _4
    SourceInfo(regex-automata/src/util/look.rs:692:59-692:61)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:692:17-692:62)
      kind: _58 = util::look::LookMatcher::is_word_start_half_unicode(move _59, move _60, move _61) -> [return: bb57, unwind: bb62]
  }
  preds [bb18]
  succs [bb57, bb62]

bb57
  0: StorageDead(_61)
    SourceInfo(regex-automata/src/util/look.rs:692:61-692:62)
  1: StorageDead(_60)
    SourceInfo(regex-automata/src/util/look.rs:692:61-692:62)
  2: StorageDead(_59)
    SourceInfo(regex-automata/src/util/look.rs:692:61-692:62)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:692:17-692:71)
      kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _58) -> [return: bb58, unwind: bb62]
  }
  preds [bb56]
  succs [bb58, bb62]

bb58
  0: StorageDead(_58)
    SourceInfo(regex-automata/src/util/look.rs:692:70-692:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:692:70-692:71)
      kind: goto -> bb61
  }
  preds [bb57]
  succs [bb61]

bb59
  0: StorageDead(_65)
    SourceInfo(regex-automata/src/util/look.rs:695:59-695:60)
  1: StorageDead(_64)
    SourceInfo(regex-automata/src/util/look.rs:695:59-695:60)
  2: StorageDead(_63)
    SourceInfo(regex-automata/src/util/look.rs:695:59-695:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:695:17-695:69)
      kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _62) -> [return: bb60, unwind: bb62]
  }
  preds [bb19]
  succs [bb60, bb62]

bb60
  0: StorageDead(_62)
    SourceInfo(regex-automata/src/util/look.rs:695:68-695:69)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:695:68-695:69)
      kind: goto -> bb61
  }
  preds [bb59]
  succs [bb61]

bb61
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:698:6-698:6)
      kind: return
  }
  preds [bb21, bb23, bb25, bb27, bb29, bb31, bb33, bb35, bb38, bb41, bb43, bb45, bb48, bb51, bb53, bb55, bb58, bb60]
  succs []

bb62
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:658:5-698:6)
      kind: resume
  }
  preds [bb19, bb20, bb22, bb24, bb26, bb28, bb30, bb32, bb34, bb36, bb37, bb39, bb40, bb42, bb44, bb46, bb47, bb49, bb50, bb52, bb54, bb56, bb57, bb59]
  succs []

