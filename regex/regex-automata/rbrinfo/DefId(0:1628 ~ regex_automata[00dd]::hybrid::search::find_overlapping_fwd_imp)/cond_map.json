{
  "regex-automata/src/hybrid/search.rs:535:23:535:36": [
    {
      "Bool": {
        "Other": "sid.is_dead()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:483:20:483:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "match_index < match_len",
          "lhs": "match_index",
          "rhs": "match_len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:484:51:484:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "match_index + 1",
          "lhs": "match_index",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:512:20:512:43": [
    {
      "Bool": {
        "Other": "let Some(ref pre) = pre"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:519:37:519:52": [
    {
      "Bool": {
        "Other": "universal_start"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:493:16:493:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "state.at > input.end()",
          "lhs": "state.at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:506:15:508:45": [
    {
      "Try": "dfa\n            .next_state(cache, sid, input.haystack()[state.at])\n            .map_err(|_| gave_up(state.at))?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:478:13:478:41": [
    {
      "Try": "init_fwd(dfa, cache, input)?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:529:23:529:37": [
    {
      "Bool": {
        "Other": "sid.is_match()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:555:8:555:27": [
    {
      "Bool": {
        "Other": "state.mat.is_some()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:517:32:517:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "span.start > state.at",
          "lhs": "span.start",
          "rhs": "state.at",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:514:27:514:59": [
    {
      "Match": {
        "match_source": "regex-automata/src/hybrid/search.rs:514:27:514:59",
        "match_str": "pre.find(input.haystack(), span)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/hybrid/search.rs:515:25:515:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:515:33:515:46"
          },
          "regex-automata/src/hybrid/search.rs:516:25:516:39": {
            "pat": {
              "pat_str": "Some(ref span)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:516:43:526:26"
          }
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:475:25:475:33": [
    {
      "Match": {
        "match_source": "regex-automata/src/hybrid/search.rs:475:25:475:33",
        "match_str": "state.id",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-automata/src/hybrid/search.rs:476:9:476:13": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:476:17:479:10"
          },
          "regex-automata/src/hybrid/search.rs:480:9:480:18": {
            "pat": {
              "pat_str": "Some(sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-automata/src/hybrid/search.rs:480:22:497:10"
          }
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:520:43:522:39": [
    {
      "Try": "prefilter_restart(\n                                        dfa, cache, &input, state.at,\n                                    )?"
    }
  ],
  "regex-automata/src/hybrid/search.rs:505:11:505:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "state.at < input.end()",
          "lhs": "state.at",
          "rhs": "input.end()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:481:16:481:62": [
    {
      "Bool": {
        "Other": "let Some(match_index) = state.next_match_index"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:545:31:545:47": [
    {
      "Bool": {
        "Other": "sid.is_unknown()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:538:23:538:36": [
    {
      "Bool": {
        "Other": "sid.is_quit()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:509:12:509:27": [
    {
      "Bool": {
        "Other": "sid.is_tagged()"
      }
    }
  ],
  "regex-automata/src/hybrid/search.rs:511:16:511:30": [
    {
      "Bool": {
        "Other": "sid.is_start()"
      }
    }
  ]
}