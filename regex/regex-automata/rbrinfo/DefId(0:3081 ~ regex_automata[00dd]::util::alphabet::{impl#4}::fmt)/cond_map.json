{
  "regex-automata/src/util/alphabet.rs:497:31:497:54": [
    {
      "For": {
        "iter_var": "(i, class)",
        "iter_range": "self.iter().enumerate()"
      }
    }
  ],
  "regex-automata/src/util/alphabet.rs:502:37:502:63": [
    {
      "For": {
        "iter_var": "(start, end)",
        "iter_range": "self.element_ranges(class)"
      }
    }
  ],
  "regex-automata/src/util/alphabet.rs:499:21:499:37": [
    {
      "Try": "write!(f, \", \")?"
    }
  ],
  "regex-automata/src/util/alphabet.rs:503:24:503:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "start == end",
          "lhs": "start",
          "rhs": "end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/util/alphabet.rs:506:25:506:60": [
    {
      "Try": "write!(f, \"{:?}-{:?}\", start, end)?"
    }
  ],
  "regex-automata/src/util/alphabet.rs:496:13:496:39": [
    {
      "Try": "write!(f, \"ByteClasses(\")?"
    }
  ],
  "regex-automata/src/util/alphabet.rs:498:20:498:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/util/alphabet.rs:504:25:504:50": [
    {
      "Try": "write!(f, \"{:?}\", start)?"
    }
  ],
  "regex-automata/src/util/alphabet.rs:493:12:493:31": [
    {
      "Bool": {
        "Other": "self.is_singleton()"
      }
    }
  ],
  "regex-automata/src/util/alphabet.rs:501:17:501:58": [
    {
      "Try": "write!(f, \"{:?} => [\", class.as_usize())?"
    }
  ],
  "regex-automata/src/util/alphabet.rs:509:17:509:32": [
    {
      "Try": "write!(f, \"]\")?"
    }
  ]
}