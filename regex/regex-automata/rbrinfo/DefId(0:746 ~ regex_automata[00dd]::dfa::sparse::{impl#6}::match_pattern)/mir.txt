bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1175:9-1177:10)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1175:12-1175:36)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1175:12-1175:31)
  3: _6 = (((*_1).0: dfa::sparse::Transitions<T>).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1175:12-1175:31)
  4: _5 = Eq(move _6, const 1_usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1175:12-1175:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1175:12-1175:36)
      kind: switchInt(move _5) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1175:35-1175:36)
  1: _0 = const util::primitives::PatternID::ZERO
    SourceInfo(regex-automata/src/dfa/sparse.rs:1176:20-1176:35)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1177:9-1177:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1177:9-1177:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1179:6-1179:6)
      kind: goto -> bb5
  }
  preds [bb0]
  succs [bb5]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1175:35-1175:36)
  1: _4 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:1177:10-1177:10)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1177:9-1177:10)
  3: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1177:9-1177:10)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:9-1178:26)
  5: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:9-1178:26)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:9-1178:16)
  7: _10 = &((*_1).0: dfa::sparse::Transitions<T>)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:9-1178:16)
  8: StorageLive(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:23-1178:25)
  9: _11 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:23-1178:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1178:9-1178:26)
      kind: _9 = dfa::sparse::Transitions::<T>::state(move _10, move _11) -> [return: bb3, unwind: bb6]
  }
  preds [bb0]
  succs [bb3, bb6]

bb3
  0: _8 = &_9
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:9-1178:26)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:25-1178:26)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:25-1178:26)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:38-1178:49)
  4: _12 = _3
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:38-1178:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1178:9-1178:50)
      kind: _0 = dfa::sparse::State::<'_>::pattern_id(move _8, move _12) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:49-1178:50)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1178:49-1178:50)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:1179:5-1179:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1179:6-1179:6)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1179:6-1179:6)
      kind: return
  }
  preds [bb1, bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:1169:5-1179:6)
      kind: resume
  }
  preds [bb2, bb3]
  succs []

