bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2075:13-2075:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2075:27-2075:32)
  2: _5 = &_3
    SourceInfo(regex-automata/src/dfa/sparse.rs:2075:27-2075:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2075:27-2075:43)
      kind: _4 = util::start::Start::as_usize(move _5) -> [return: bb1, unwind: bb38]
  }
  preds []
  succs [bb1, bb38]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2075:42-2075:43)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2075:13-2075:24)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2076:13-2076:18)
  3: PlaceMention(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2076:27-2076:35)
  4: _7 = discriminant(_2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2076:27-2076:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2076:21-2076:35)
      kind: switchInt(move _7) -> [0: bb3, 1: bb4, 2: bb5, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4, bb5]

bb2
  0: FakeRead(ForMatchedPlace(None), _2)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2076:27-2076:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2076:27-2076:35)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2077:13-2077:25)
      kind: falseEdge -> [real: bb6, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb6]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2083:13-2083:26)
      kind: falseEdge -> [real: bb11, imaginary: bb5]
  }
  preds [bb1, bb3]
  succs [bb5, bb11]

bb5
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2089:31-2089:34)
  1: _23 = ((_2 as Pattern).0: util::primitives::PatternID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2089:31-2089:34)
  2: StorageLive(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2090:21-2090:24)
  3: PlaceMention(((*_1).4: core::option::Option<usize>))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2090:33-2090:49)
  4: _25 = discriminant(((*_1).4: core::option::Option<usize>))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2090:33-2090:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2090:27-2090:49)
      kind: switchInt(move _25) -> [0: bb18, 1: bb19, otherwise: bb17]
  }
  preds [bb1, bb4]
  succs [bb17, bb18, bb19]

bb6
  0: StorageLive(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2078:17-2080:18)
  1: StorageLive(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2078:21-2078:47)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2078:21-2078:30)
  3: _10 = &((*_1).1: dfa::start::StartKind)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2078:21-2078:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2078:21-2078:47)
      kind: _9 = dfa::start::StartKind::has_unanchored(move _10) -> [return: bb7, unwind: bb38]
  }
  preds [bb3]
  succs [bb7, bb38]

bb7
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2078:21-2078:47)
      kind: switchInt(move _9) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2078:46-2078:47)
  1: _8 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2080:18-2080:18)
  2: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2080:17-2080:18)
  3: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2080:17-2080:18)
  4: _6 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:2081:17-2081:28)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2081:17-2081:28)
      kind: goto -> bb30
  }
  preds [bb7]
  succs [bb30]

bb9
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2078:46-2078:47)
  1: StorageLive(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2079:32-2079:74)
  2: StorageLive(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2079:65-2079:73)
  3: _13 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2079:65-2079:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2079:32-2079:74)
      kind: _12 = dfa::automaton::StartError::unsupported_anchored(move _13) -> [return: bb10, unwind: bb38]
  }
  preds [bb7]
  succs [bb10, bb38]

bb10
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2079:73-2079:74)
  1: _0 = core::result::Result::<util::primitives::StateID, dfa::automaton::StartError>::Err(move _12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2079:28-2079:75)
  2: StorageDead(_12)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2079:74-2079:75)
  3: StorageDead(_9)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2080:17-2080:18)
  4: StorageDead(_8)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2080:17-2080:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb36
  }
  preds [bb9]
  succs [bb36]

bb11
  0: StorageLive(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2084:17-2086:18)
  1: StorageLive(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2084:21-2084:45)
  2: StorageLive(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2084:21-2084:30)
  3: _16 = &((*_1).1: dfa::start::StartKind)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2084:21-2084:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2084:21-2084:45)
      kind: _15 = dfa::start::StartKind::has_anchored(move _16) -> [return: bb12, unwind: bb38]
  }
  preds [bb4]
  succs [bb12, bb38]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2084:21-2084:45)
      kind: switchInt(move _15) -> [0: bb14, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb14]

bb13
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2084:44-2084:45)
  1: _14 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2086:18-2086:18)
  2: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2086:17-2086:18)
  3: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2086:17-2086:18)
  4: StorageLive(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:17-2087:28)
  5: _20 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:17-2087:28)
  6: StorageLive(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:31-2087:42)
  7: _21 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:31-2087:42)
  8: _22 = AddWithOverflow(_20, _21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:17-2087:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2087:17-2087:42)
      kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, move _21) -> [success: bb16, unwind: bb38]
  }
  preds [bb12]
  succs [bb16, bb38]

bb14
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2084:44-2084:45)
  1: StorageLive(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2085:32-2085:74)
  2: StorageLive(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2085:65-2085:73)
  3: _19 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2085:65-2085:73)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2085:32-2085:74)
      kind: _18 = dfa::automaton::StartError::unsupported_anchored(move _19) -> [return: bb15, unwind: bb38]
  }
  preds [bb12]
  succs [bb15, bb38]

bb15
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2085:73-2085:74)
  1: _0 = core::result::Result::<util::primitives::StateID, dfa::automaton::StartError>::Err(move _18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2085:28-2085:75)
  2: StorageDead(_18)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2085:74-2085:75)
  3: StorageDead(_15)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2086:17-2086:18)
  4: StorageDead(_14)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2086:17-2086:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb36
  }
  preds [bb14]
  succs [bb36]

bb16
  0: _6 = move (_22.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:17-2087:42)
  1: StorageDead(_21)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:41-2087:42)
  2: StorageDead(_20)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2087:41-2087:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2087:41-2087:42)
      kind: goto -> bb30
  }
  preds [bb13]
  succs [bb30]

bb17
  0: FakeRead(ForMatchedPlace(None), ((*_1).4: core::option::Option<usize>))
    SourceInfo(regex-automata/src/dfa/sparse.rs:2090:33-2090:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2090:33-2090:49)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2091:21-2091:25)
      kind: falseEdge -> [real: bb20, imaginary: bb19]
  }
  preds [bb5]
  succs [bb19, bb20]

bb19
  0: StorageLive(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2094:26-2094:29)
  1: _29 = ((((*_1).4: core::option::Option<usize>) as Some).0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2094:26-2094:29)
  2: _24 = _29
    SourceInfo(regex-automata/src/dfa/sparse.rs:2094:34-2094:37)
  3: StorageDead(_29)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2094:36-2094:37)
  4: FakeRead(ForLet(None), _24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2090:21-2090:24)
  5: StorageLive(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:17-2098:18)
  6: StorageLive(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:20-2096:41)
  7: StorageLive(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:20-2096:34)
  8: StorageLive(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:20-2096:23)
  9: _33 = &_23
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:20-2096:23)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2096:20-2096:34)
      kind: _32 = util::primitives::PatternID::as_usize(move _33) -> [return: bb22, unwind: bb38]
  }
  preds [bb5, bb18]
  succs [bb22, bb38]

bb20
  0: StorageLive(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2092:36-2092:78)
  1: StorageLive(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2092:69-2092:77)
  2: _28 = _2
    SourceInfo(regex-automata/src/dfa/sparse.rs:2092:69-2092:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2092:36-2092:78)
      kind: _27 = dfa::automaton::StartError::unsupported_anchored(move _28) -> [return: bb21, unwind: bb38]
  }
  preds [bb18]
  succs [bb21, bb38]

bb21
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2092:77-2092:78)
  1: _0 = core::result::Result::<util::primitives::StateID, dfa::automaton::StartError>::Err(move _27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2092:32-2092:79)
  2: StorageDead(_27)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2092:78-2092:79)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2092:25-2092:79)
      kind: goto -> bb35
  }
  preds [bb20]
  succs [bb35]

bb22
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:33-2096:34)
  1: StorageLive(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:38-2096:41)
  2: _34 = _24
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:38-2096:41)
  3: _31 = Ge(move _32, move _34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:20-2096:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2096:20-2096:41)
      kind: switchInt(move _31) -> [0: bb24, otherwise: bb23]
  }
  preds [bb19]
  succs [bb23, bb24]

bb23
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:40-2096:41)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:40-2096:41)
  2: _0 = core::result::Result::<util::primitives::StateID, dfa::automaton::StartError>::Ok(const dfa::DEAD)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2097:28-2097:36)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2098:17-2098:18)
  4: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2098:17-2098:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb35
  }
  preds [bb22]
  succs [bb35]

bb24
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:40-2096:41)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2096:40-2096:41)
  2: _30 = const ()
    SourceInfo(regex-automata/src/dfa/sparse.rs:2098:18-2098:18)
  3: StorageDead(_31)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2098:17-2098:18)
  4: StorageDead(_30)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2098:17-2098:18)
  5: StorageLive(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2100:53)
  6: StorageLive(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2099:34)
  7: StorageLive(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:22-2099:33)
  8: _38 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:22-2099:33)
  9: _39 = MulWithOverflow(const 2_usize, _38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2099:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2099:34)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _38) -> [success: bb25, unwind: bb38]
  }
  preds [bb22]
  succs [bb25, bb38]

bb25
  0: _37 = move (_39.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2099:34)
  1: StorageDead(_38)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:33-2099:34)
  2: StorageLive(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:23-2100:53)
  3: StorageLive(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:24-2100:35)
  4: _41 = ((*_1).3: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:24-2100:35)
  5: StorageLive(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:38-2100:52)
  6: StorageLive(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:38-2100:41)
  7: _43 = &_23
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:38-2100:41)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2100:38-2100:52)
      kind: _42 = util::primitives::PatternID::as_usize(move _43) -> [return: bb26, unwind: bb38]
  }
  preds [bb24]
  succs [bb26, bb38]

bb26
  0: StorageDead(_43)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:51-2100:52)
  1: _44 = MulWithOverflow(_41, _42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:23-2100:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2100:23-2100:53)
      kind: assert(!move (_44.1: bool), "attempt to compute `{} * {}`, which would overflow", move _41, move _42) -> [success: bb27, unwind: bb38]
  }
  preds [bb25]
  succs [bb27, bb38]

bb27
  0: _40 = move (_44.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:23-2100:53)
  1: StorageDead(_42)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:52-2100:53)
  2: StorageDead(_41)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:52-2100:53)
  3: _45 = AddWithOverflow(_37, _40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2100:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2100:53)
      kind: assert(!move (_45.1: bool), "attempt to compute `{} + {}`, which would overflow", move _37, move _40) -> [success: bb28, unwind: bb38]
  }
  preds [bb26]
  succs [bb28, bb38]

bb28
  0: _36 = move (_45.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2100:53)
  1: StorageDead(_40)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:52-2100:53)
  2: StorageDead(_37)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2100:52-2100:53)
  3: StorageLive(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2101:23-2101:34)
  4: _46 = _4
    SourceInfo(regex-automata/src/dfa/sparse.rs:2101:23-2101:34)
  5: _47 = AddWithOverflow(_36, _46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2101:34)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2101:34)
      kind: assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _36, move _46) -> [success: bb29, unwind: bb38]
  }
  preds [bb27]
  succs [bb29, bb38]

bb29
  0: _6 = move (_47.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2099:17-2101:34)
  1: StorageDead(_46)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2101:33-2101:34)
  2: StorageDead(_36)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2101:33-2101:34)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2102:13-2102:14)
  4: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2102:13-2102:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2102:13-2102:14)
      kind: goto -> bb30
  }
  preds [bb28]
  succs [bb30]

bb30
  0: FakeRead(ForLet(None), _6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2076:13-2076:18)
  1: StorageLive(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2104:13-2104:18)
  2: StorageLive(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2104:21-2104:26)
  3: _49 = _6
    SourceInfo(regex-automata/src/dfa/sparse.rs:2104:21-2104:26)
  4: _50 = MulWithOverflow(_49, const util::primitives::StateID::SIZE)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2104:21-2104:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2104:21-2104:42)
      kind: assert(!move (_50.1: bool), "attempt to compute `{} * {}`, which would overflow", move _49, const util::primitives::StateID::SIZE) -> [success: bb31, unwind: bb38]
  }
  preds [bb8, bb16, bb29]
  succs [bb31, bb38]

bb31
  0: _48 = move (_50.0: usize)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2104:21-2104:42)
  1: StorageDead(_49)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2104:41-2104:42)
  2: FakeRead(ForLet(None), _48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2104:13-2104:18)
  3: StorageLive(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:12-2107:67)
  4: StorageLive(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:12-2107:65)
  5: StorageLive(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:42-2107:64)
  6: StorageLive(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:42-2107:64)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:55-2107:64)
  8: StorageLive(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:43-2107:55)
  9: StorageLive(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:43-2107:55)
  10: StorageLive(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:43-2107:47)
  11: _58 = &(*_1)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:43-2107:47)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2107:43-2107:55)
      kind: _57 = dfa::sparse::StartTable::<T>::table(move _58) -> [return: bb32, unwind: bb38]
  }
  preds [bb30]
  succs [bb32, bb38]

bb32
  0: _56 = &(*_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:43-2107:55)
  1: StorageDead(_58)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:54-2107:55)
  2: StorageLive(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:56-2107:63)
  3: StorageLive(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:56-2107:61)
  4: _60 = _48
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:56-2107:61)
  5: _59 = core::ops::RangeFrom::<usize> { start: move _60 }
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:56-2107:63)
  6: StorageDead(_60)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:62-2107:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2107:55-2107:64)
      kind: _55 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _56, move _59) -> [return: bb33, unwind: bb38]
  }
  preds [bb31]
  succs [bb33, bb38]

bb33
  0: StorageDead(_59)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:63-2107:64)
  1: StorageDead(_56)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:63-2107:64)
  2: _54 = &(*_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:42-2107:64)
  3: _53 = &(*_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:42-2107:64)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2107:12-2107:65)
      kind: _52 = util::wire::read_state_id_unchecked(move _53) -> [return: bb34, unwind: bb38]
  }
  preds [bb32]
  succs [bb34, bb38]

bb34
  0: StorageDead(_53)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:64-2107:65)
  1: _51 = (_52.0: util::primitives::StateID)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:12-2107:67)
  2: _0 = core::result::Result::<util::primitives::StateID, dfa::automaton::StartError>::Ok(move _51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:9-2107:68)
  3: StorageDead(_51)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2107:67-2107:68)
  4: StorageDead(_48)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  5: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  6: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  7: StorageDead(_57)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  8: StorageDead(_55)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  9: StorageDead(_54)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  10: StorageDead(_52)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2108:6-2108:6)
      kind: goto -> bb37
  }
  preds [bb33]
  succs [bb37]

bb35
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2102:13-2102:14)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2102:13-2102:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb36
  }
  preds [bb21, bb23]
  succs [bb36]

bb36
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  1: StorageDead(_4)
    SourceInfo(regex-automata/src/dfa/sparse.rs:2108:5-2108:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2108:6-2108:6)
      kind: goto -> bb37
  }
  preds [bb10, bb15, bb35]
  succs [bb37]

bb37
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2108:6-2108:6)
      kind: return
  }
  preds [bb34, bb36]
  succs []

bb38
  Terminator {
      source_info: SourceInfo(regex-automata/src/dfa/sparse.rs:2070:5-2108:6)
      kind: resume
  }
  preds [bb0, bb6, bb9, bb11, bb13, bb14, bb19, bb20, bb24, bb25, bb26, bb27, bb28, bb30, bb31, bb32, bb33]
  succs []

