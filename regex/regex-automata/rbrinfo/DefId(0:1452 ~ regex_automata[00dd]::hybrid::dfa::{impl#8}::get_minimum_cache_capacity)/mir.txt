bb0
  0: StorageLive(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:13-3805:20)
  1: StorageLive(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
  2: StorageLive(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:50)
  3: StorageLive(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:27)
  4: _6 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:27)
  5: StorageLive(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:46-3805:49)
  6: _7 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:46-3805:49)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:50)
      kind: _5 = hybrid::dfa::Config::quit_set_from_nfa(move _6, move _7) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:49-3805:50)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:49-3805:50)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
      kind: _4 = <core::result::Result<util::alphabet::ByteSet, hybrid::error::BuildError> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb18]
  }
  preds [bb0]
  succs [bb2, bb18]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  1: PlaceMention(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
  2: _8 = discriminant(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
      kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
  1: _12 = ((_4 as Continue).0: util::alphabet::ByteSet)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
  2: _3 = _12
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
  3: StorageDead(_12)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:13-3805:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:51-3805:52)
      kind: drop(_4) -> [return: bb8, unwind: bb19]
  }
  preds [bb2, bb4]
  succs [bb8, bb19]

bb6
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  1: _9 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, hybrid::error::BuildError>)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  3: _11 = move _9
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:23-3805:51)
      kind: _0 = <core::result::Result<usize, hybrid::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hybrid::error::BuildError>>>::from_residual(move _11) -> [return: bb7, unwind: bb15]
  }
  preds [bb4]
  succs [bb7, bb15]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
      kind: drop(_9) -> [return: bb12, unwind: bb17]
  }
  preds [bb6]
  succs [bb12, bb17]

bb8
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:51-3805:52)
  1: StorageLive(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:13-3806:20)
  2: StorageLive(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:23-3806:27)
  3: _14 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:23-3806:27)
  4: StorageLive(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:50-3806:53)
  5: _15 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:50-3806:53)
  6: StorageLive(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:55-3806:63)
  7: StorageLive(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:55-3806:63)
  8: _17 = &_3
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:55-3806:63)
  9: _16 = &(*_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:55-3806:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:23-3806:64)
      kind: _13 = hybrid::dfa::Config::byte_classes_from_nfa(move _14, move _15, move _16) -> [return: bb9, unwind: bb19]
  }
  preds [bb5]
  succs [bb9, bb19]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:63-3806:64)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:63-3806:64)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:63-3806:64)
  3: FakeRead(ForLet(None), _13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:13-3806:20)
  4: StorageDead(_17)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3806:64-3806:65)
  5: StorageLive(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3807:13-3807:19)
  6: StorageLive(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3807:22-3807:26)
  7: _19 = &(*_1)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3807:22-3807:26)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3807:22-3807:56)
      kind: _18 = hybrid::dfa::Config::get_starts_for_each_pattern(move _19) -> [return: bb10, unwind: bb19]
  }
  preds [bb8]
  succs [bb10, bb19]

bb10
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3807:55-3807:56)
  1: FakeRead(ForLet(None), _18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3807:13-3807:19)
  2: StorageLive(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:12-3808:57)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:35-3808:38)
  4: _21 = &(*_2)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:35-3808:38)
  5: StorageLive(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:40-3808:48)
  6: StorageLive(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:40-3808:48)
  7: _23 = &_13
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:40-3808:48)
  8: _22 = &(*_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:40-3808:48)
  9: StorageLive(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:50-3808:56)
  10: _24 = _18
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:50-3808:56)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:12-3808:57)
      kind: _20 = hybrid::dfa::minimum_cache_capacity(move _21, move _22, move _24) -> [return: bb11, unwind: bb19]
  }
  preds [bb9]
  succs [bb11, bb19]

bb11
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:56-3808:57)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:56-3808:57)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:56-3808:57)
  3: _0 = core::result::Result::<usize, hybrid::error::BuildError>::Ok(move _20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:9-3808:58)
  4: StorageDead(_20)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3808:57-3808:58)
  5: StorageDead(_18)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:5-3809:6)
  6: StorageDead(_13)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:5-3809:6)
  7: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:5-3809:6)
  8: StorageDead(_23)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:5-3809:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:6-3809:6)
      kind: goto -> bb14
  }
  preds [bb10]
  succs [bb14]

bb12
  0: StorageDead(_9)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:51-3805:52)
      kind: drop(_4) -> [return: bb13, unwind: bb19]
  }
  preds [bb7]
  succs [bb13, bb19]

bb13
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:51-3805:52)
  1: StorageDead(_3)
    SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:5-3809:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:6-3809:6)
      kind: goto -> bb14
  }
  preds [bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3809:6-3809:6)
      kind: return
  }
  preds [bb11, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
      kind: drop(_11) -> [return: bb16, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
      kind: drop(_9) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb15]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:51-3805:52)
      kind: drop(_4) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb7, bb16]
  succs [bb19]

bb18
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3805:50-3805:51)
      kind: drop(_5) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-automata/src/hybrid/dfa.rs:3801:5-3809:6)
      kind: resume
  }
  preds [bb0, bb5, bb8, bb9, bb10, bb12, bb17, bb18]
  succs []

