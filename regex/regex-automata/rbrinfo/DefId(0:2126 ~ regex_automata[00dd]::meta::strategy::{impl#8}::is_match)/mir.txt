bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:9-1423:10)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:46)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:32)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:32)
  4: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:17)
  5: _8 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:17)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:32)
      kind: _7 = util::search::Input::<'_>::get_anchored(move _8) -> [return: bb1, unwind: bb21]
  }
  preds []
  succs [bb1, bb21]

bb1
  0: _6 = &_7
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:32)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:31-1421:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:46)
      kind: _5 = util::search::Anchored::is_anchored(move _6) -> [return: bb2, unwind: bb21]
  }
  preds [bb0]
  succs [bb2, bb21]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1421:12-1421:46)
      kind: switchInt(move _5) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:45-1421:46)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:45-1421:46)
  2: StorageLive(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:20-1422:29)
  3: _10 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:20-1422:29)
  4: StorageLive(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:39-1422:44)
  5: _11 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:39-1422:44)
  6: StorageLive(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:46-1422:51)
  7: _12 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:46-1422:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1422:20-1422:52)
      kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::is_match(move _10, move _11, move _12) -> [return: bb4, unwind: bb21]
  }
  preds [bb2]
  succs [bb4, bb21]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:51-1422:52)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:51-1422:52)
  2: StorageDead(_10)
    SourceInfo(regex-automata/src/meta/strategy.rs:1422:51-1422:52)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1423:9-1423:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1423:9-1423:10)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1439:6-1439:6)
      kind: goto -> bb20
  }
  preds [bb3]
  succs [bb20]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:45-1421:46)
  1: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1421:45-1421:46)
  2: _4 = const ()
    SourceInfo(regex-automata/src/meta/strategy.rs:1423:10-1423:10)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1423:9-1423:10)
  4: StorageDead(_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1423:9-1423:10)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
  6: StorageLive(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:19)
  7: _14 = &(*_1)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:19)
  8: StorageLive(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:42-1424:47)
  9: _15 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:42-1424:47)
  10: StorageLive(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:49-1424:54)
  11: _16 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:49-1424:54)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
      kind: _13 = meta::strategy::ReverseSuffix::try_search_half_start(move _14, move _15, move _16) -> [return: bb6, unwind: bb21]
  }
  preds [bb2]
  succs [bb6, bb21]

bb6
  0: StorageDead(_16)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:54-1424:55)
  1: StorageDead(_15)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:54-1424:55)
  2: StorageDead(_14)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:54-1424:55)
  3: PlaceMention(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
  4: _19 = discriminant(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1424:9-1424:55)
      kind: switchInt(move _19) -> [0: bb11, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb11]

bb7
  0: FakeRead(ForMatchedPlace(None), _13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
      kind: unreachable
  }
  preds [bb6, bb8, bb11]
  succs []

bb8
  0: _17 = discriminant(((_13 as Err).0: meta::error::RetryError))
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1424:9-1424:55)
      kind: switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb7]
  }
  preds [bb6]
  succs [bb7, bb9, bb10]

bb9
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1425:13-1425:45)
      kind: falseEdge -> [real: bb14, imaginary: bb10]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1429:13-1429:40)
      kind: falseEdge -> [real: bb16, imaginary: bb11]
  }
  preds [bb8, bb9]
  succs [bb11, bb16]

bb11
  0: _18 = discriminant(((_13 as Ok).0: core::option::Option<util::search::HalfMatch>))
    SourceInfo(regex-automata/src/meta/strategy.rs:1424:15-1424:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1424:9-1424:55)
      kind: switchInt(move _18) -> [0: bb12, 1: bb13, otherwise: bb7]
  }
  preds [bb6, bb10]
  succs [bb7, bb12, bb13]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1436:13-1436:21)
      kind: falseEdge -> [real: bb18, imaginary: bb13]
  }
  preds [bb11]
  succs [bb13, bb18]

bb13
  0: _0 = const true
    SourceInfo(regex-automata/src/meta/strategy.rs:1437:28-1437:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1437:28-1437:32)
      kind: goto -> bb19
  }
  preds [bb11, bb12]
  succs [bb19]

bb14
  0: StorageLive(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1425:39-1425:43)
  1: _20 = move ((((_13 as Err).0: meta::error::RetryError) as Quadratic).0: meta::error::RetryQuadraticError)
    SourceInfo(regex-automata/src/meta/strategy.rs:1425:39-1425:43)
  2: StorageLive(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:17-1427:26)
  3: _21 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:17-1427:26)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:43-1427:48)
  5: _22 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:43-1427:48)
  6: StorageLive(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:50-1427:55)
  7: _23 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:50-1427:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1427:17-1427:56)
      kind: _0 = meta::strategy::Core::is_match_nofail(move _21, move _22, move _23) -> [return: bb15, unwind: bb21]
  }
  preds [bb9]
  succs [bb15, bb21]

bb15
  0: StorageDead(_23)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:55-1427:56)
  1: StorageDead(_22)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:55-1427:56)
  2: StorageDead(_21)
    SourceInfo(regex-automata/src/meta/strategy.rs:1427:55-1427:56)
  3: StorageDead(_20)
    SourceInfo(regex-automata/src/meta/strategy.rs:1428:13-1428:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1428:13-1428:14)
      kind: goto -> bb19
  }
  preds [bb14]
  succs [bb19]

bb16
  0: StorageLive(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:1429:34-1429:38)
  1: _24 = move ((((_13 as Err).0: meta::error::RetryError) as Fail).0: meta::error::RetryFailError)
    SourceInfo(regex-automata/src/meta/strategy.rs:1429:34-1429:38)
  2: StorageLive(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:17-1434:26)
  3: _25 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:17-1434:26)
  4: StorageLive(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:43-1434:48)
  5: _26 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:43-1434:48)
  6: StorageLive(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:50-1434:55)
  7: _27 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:50-1434:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1434:17-1434:56)
      kind: _0 = meta::strategy::Core::is_match_nofail(move _25, move _26, move _27) -> [return: bb17, unwind: bb21]
  }
  preds [bb10]
  succs [bb17, bb21]

bb17
  0: StorageDead(_27)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:55-1434:56)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:55-1434:56)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/meta/strategy.rs:1434:55-1434:56)
  3: StorageDead(_24)
    SourceInfo(regex-automata/src/meta/strategy.rs:1435:13-1435:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1435:13-1435:14)
      kind: goto -> bb19
  }
  preds [bb16]
  succs [bb19]

bb18
  0: _0 = const false
    SourceInfo(regex-automata/src/meta/strategy.rs:1436:25-1436:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1436:25-1436:30)
      kind: goto -> bb19
  }
  preds [bb12]
  succs [bb19]

bb19
  0: StorageDead(_13)
    SourceInfo(regex-automata/src/meta/strategy.rs:1439:5-1439:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1439:6-1439:6)
      kind: goto -> bb20
  }
  preds [bb13, bb15, bb17, bb18]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1439:6-1439:6)
      kind: return
  }
  preds [bb4, bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1420:5-1439:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb14, bb16]
  succs []

