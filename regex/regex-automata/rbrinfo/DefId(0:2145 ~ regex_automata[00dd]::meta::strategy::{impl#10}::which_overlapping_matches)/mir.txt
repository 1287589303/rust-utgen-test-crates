bb0
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:9-1890:18)
  1: _5 = &((*_1).0: meta::strategy::Core)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:9-1890:18)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:45-1890:50)
  3: _6 = &mut (*_2)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:45-1890:50)
  4: StorageLive(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:52-1890:57)
  5: _7 = &(*_3)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:52-1890:57)
  6: StorageLive(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:59-1890:65)
  7: _8 = &mut (*_4)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:59-1890:65)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1890:9-1890:66)
      kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::which_overlapping_matches(move _5, move _6, move _7, move _8) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:65-1890:66)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:65-1890:66)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:65-1890:66)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/meta/strategy.rs:1890:65-1890:66)
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1891:6-1891:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/meta/strategy.rs:1884:5-1891:6)
      kind: resume
  }
  preds [bb0]
  succs []

