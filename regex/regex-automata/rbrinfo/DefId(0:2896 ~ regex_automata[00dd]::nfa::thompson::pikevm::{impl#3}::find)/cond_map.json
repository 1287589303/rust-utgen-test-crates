{
  "regex-automata/src/nfa/thompson/pikevm.rs:833:25:833:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "pid.as_usize() * 2 + 1",
          "lhs": "pid.as_usize() * 2",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:832:21:832:47": [
    {
      "Try": "slots[pid.as_usize() * 2]?"
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:821:12:821:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.get_nfa().pattern_len() == 1",
          "lhs": "self.get_nfa().pattern_len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:825:23:825:32": [
    {
      "Try": "slots[1]?"
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:823:23:823:68": [
    {
      "Try": "self.search_slots(cache, &input, &mut slots)?"
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:833:25:833:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "pid.as_usize() * 2",
          "lhs": "pid.as_usize()",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:831:19:831:64": [
    {
      "Try": "self.search_slots(cache, &input, &mut slots)?"
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:832:27:832:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "pid.as_usize() * 2",
          "lhs": "pid.as_usize()",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:833:19:833:49": [
    {
      "Try": "slots[pid.as_usize() * 2 + 1]?"
    }
  ],
  "regex-automata/src/nfa/thompson/pikevm.rs:824:25:824:34": [
    {
      "Try": "slots[0]?"
    }
  ]
}