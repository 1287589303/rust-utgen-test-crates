bb0
  0: PlaceMention(_2)
    SourceInfo(regex-automata/src/util/look.rs:842:15-842:19)
  1: _4 = discriminant(_2)
    SourceInfo(regex-automata/src/util/look.rs:842:15-842:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:842:9-842:19)
      kind: switchInt(move _4) -> [1: bb2, 2: bb2, 4: bb3, 8: bb3, 16: bb4, 32: bb4, 64: bb5, 128: bb5, 256: bb5, 512: bb5, 1024: bb5, 2048: bb5, 4096: bb5, 8192: bb5, 16384: bb5, 32768: bb5, 65536: bb5, 131072: bb5, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb2, bb3, bb3, bb4, bb4, bb5, bb5, bb5, bb5, bb5, bb5, bb5, bb5, bb5, bb5, bb5, bb5]

bb1
  0: FakeRead(ForMatchedPlace(None), _2)
    SourceInfo(regex-automata/src/util/look.rs:842:15-842:19)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:842:15-842:19)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:843:13-843:36)
      kind: falseEdge -> [real: bb6, imaginary: bb3]
  }
  preds [bb0, bb0]
  succs [bb3, bb6]

bb3
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:844:13-844:40)
      kind: falseEdge -> [real: bb7, imaginary: bb4]
  }
  preds [bb0, bb0, bb2]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:847:13-847:44)
      kind: falseEdge -> [real: bb9, imaginary: bb5]
  }
  preds [bb0, bb0, bb3]
  succs [bb5, bb9]

bb5
  0: StorageLive(_13)
    SourceInfo(regex-automata/src/util/look.rs:875:21-875:25)
  1: _13 = util::utf8::is_word_byte
    SourceInfo(regex-automata/src/util/look.rs:875:28-875:46)
  2: FakeRead(ForLet(None), _13)
    SourceInfo(regex-automata/src/util/look.rs:875:21-875:25)
  3: StorageLive(_14)
    SourceInfo(regex-automata/src/util/look.rs:878:21-878:25)
  4: _14 = {closure@regex-automata/src/util/look.rs:878:28: 878:36}
    SourceInfo(regex-automata/src/util/look.rs:878:28-878:61)
  5: FakeRead(ForLet(None), _14)
    SourceInfo(regex-automata/src/util/look.rs:878:21-878:25)
  6: StorageLive(_15)
    SourceInfo(regex-automata/src/util/look.rs:879:21-879:27)
  7: _15 = const 0_u16
    SourceInfo(regex-automata/src/util/look.rs:879:35-879:36)
  8: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/util/look.rs:879:21-879:27)
  9: AscribeUserType(_15, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(regex-automata/src/util/look.rs:879:29-879:32)
  10: StorageLive(_16)
    SourceInfo(regex-automata/src/util/look.rs:880:21-880:27)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:881:17-894:18)
      kind: goto -> bb12
  }
  preds [bb0, bb0, bb0, bb0, bb0, bb0, bb0, bb0, bb0, bb0, bb0, bb0, bb4]
  succs [bb12]

bb6
  0: _0 = const ()
    SourceInfo(regex-automata/src/util/look.rs:843:40-843:42)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:843:40-843:42)
      kind: goto -> bb36
  }
  preds [bb2]
  succs [bb36]

bb7
  0: StorageLive(_5)
    SourceInfo(regex-automata/src/util/look.rs:845:17-845:64)
  1: StorageLive(_6)
    SourceInfo(regex-automata/src/util/look.rs:845:17-845:20)
  2: _6 = &mut (*_3)
    SourceInfo(regex-automata/src/util/look.rs:845:17-845:20)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/util/look.rs:845:31-845:46)
  4: _7 = (((*_1).0: util::escape::DebugByte).0: u8)
    SourceInfo(regex-automata/src/util/look.rs:845:31-845:46)
  5: StorageLive(_8)
    SourceInfo(regex-automata/src/util/look.rs:845:48-845:63)
  6: _8 = (((*_1).0: util::escape::DebugByte).0: u8)
    SourceInfo(regex-automata/src/util/look.rs:845:48-845:63)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:845:17-845:64)
      kind: _5 = util::alphabet::ByteClassSet::set_range(move _6, move _7, move _8) -> [return: bb8, unwind: bb37]
  }
  preds [bb3]
  succs [bb8, bb37]

bb8
  0: StorageDead(_8)
    SourceInfo(regex-automata/src/util/look.rs:845:63-845:64)
  1: StorageDead(_7)
    SourceInfo(regex-automata/src/util/look.rs:845:63-845:64)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/util/look.rs:845:63-845:64)
  3: StorageDead(_5)
    SourceInfo(regex-automata/src/util/look.rs:845:64-845:65)
  4: _0 = const ()
    SourceInfo(regex-automata/src/util/look.rs:844:44-846:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:844:44-846:14)
      kind: goto -> bb36
  }
  preds [bb7]
  succs [bb36]

bb9
  0: StorageLive(_9)
    SourceInfo(regex-automata/src/util/look.rs:848:17-848:44)
  1: StorageLive(_10)
    SourceInfo(regex-automata/src/util/look.rs:848:17-848:20)
  2: _10 = &mut (*_3)
    SourceInfo(regex-automata/src/util/look.rs:848:17-848:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:848:17-848:44)
      kind: _9 = util::alphabet::ByteClassSet::set_range(move _10, const 13_u8, const 13_u8) -> [return: bb10, unwind: bb37]
  }
  preds [bb4]
  succs [bb10, bb37]

bb10
  0: StorageDead(_10)
    SourceInfo(regex-automata/src/util/look.rs:848:43-848:44)
  1: StorageDead(_9)
    SourceInfo(regex-automata/src/util/look.rs:848:44-848:45)
  2: StorageLive(_11)
    SourceInfo(regex-automata/src/util/look.rs:849:17-849:44)
  3: StorageLive(_12)
    SourceInfo(regex-automata/src/util/look.rs:849:17-849:20)
  4: _12 = &mut (*_3)
    SourceInfo(regex-automata/src/util/look.rs:849:17-849:20)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:849:17-849:44)
      kind: _11 = util::alphabet::ByteClassSet::set_range(move _12, const 10_u8, const 10_u8) -> [return: bb11, unwind: bb37]
  }
  preds [bb9]
  succs [bb11, bb37]

bb11
  0: StorageDead(_12)
    SourceInfo(regex-automata/src/util/look.rs:849:43-849:44)
  1: StorageDead(_11)
    SourceInfo(regex-automata/src/util/look.rs:849:44-849:45)
  2: _0 = const ()
    SourceInfo(regex-automata/src/util/look.rs:847:48-850:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:847:48-850:14)
      kind: goto -> bb36
  }
  preds [bb10]
  succs [bb36]

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:881:17-894:18)
      kind: falseUnwind -> [real: bb13, unwind: bb37]
  }
  preds [bb5, bb34]
  succs [bb13, bb37]

bb13
  0: StorageLive(_18)
    SourceInfo(regex-automata/src/util/look.rs:881:23-881:32)
  1: StorageLive(_19)
    SourceInfo(regex-automata/src/util/look.rs:881:23-881:25)
  2: _19 = _15
    SourceInfo(regex-automata/src/util/look.rs:881:23-881:25)
  3: _18 = Le(move _19, const 255_u16)
    SourceInfo(regex-automata/src/util/look.rs:881:23-881:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:881:23-881:32)
      kind: switchInt(move _18) -> [0: bb35, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb35]

bb14
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:881:31-881:32)
  1: StorageLive(_20)
    SourceInfo(regex-automata/src/util/look.rs:882:26-882:28)
  2: _20 = _15
    SourceInfo(regex-automata/src/util/look.rs:882:26-882:28)
  3: _21 = AddWithOverflow(_20, const 1_u16)
    SourceInfo(regex-automata/src/util/look.rs:882:26-882:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:882:26-882:32)
      kind: assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, const 1_u16) -> [success: bb15, unwind: bb37]
  }
  preds [bb13]
  succs [bb15, bb37]

bb15
  0: _16 = move (_21.0: u16)
    SourceInfo(regex-automata/src/util/look.rs:882:21-882:32)
  1: StorageDead(_20)
    SourceInfo(regex-automata/src/util/look.rs:882:31-882:32)
  2: StorageLive(_22)
    SourceInfo(regex-automata/src/util/look.rs:883:21-885:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:21-885:22)
      kind: goto -> bb16
  }
  preds [bb14]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:21-885:22)
      kind: falseUnwind -> [real: bb17, unwind: bb37]
  }
  preds [bb15, bb24]
  succs [bb17, bb37]

bb17
  0: StorageLive(_23)
    SourceInfo(regex-automata/src/util/look.rs:883:27-883:36)
  1: StorageLive(_24)
    SourceInfo(regex-automata/src/util/look.rs:883:27-883:29)
  2: _24 = _16
    SourceInfo(regex-automata/src/util/look.rs:883:27-883:29)
  3: _23 = Le(move _24, const 255_u16)
    SourceInfo(regex-automata/src/util/look.rs:883:27-883:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:27-883:36)
      kind: switchInt(move _23) -> [0: bb26, otherwise: bb18]
  }
  preds [bb16]
  succs [bb18, bb26]

bb18
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:883:35-883:36)
  1: StorageLive(_25)
    SourceInfo(regex-automata/src/util/look.rs:883:40-883:72)
  2: StorageLive(_26)
    SourceInfo(regex-automata/src/util/look.rs:883:40-883:54)
  3: StorageLive(_27)
    SourceInfo(regex-automata/src/util/look.rs:883:40-883:44)
  4: _27 = _13
    SourceInfo(regex-automata/src/util/look.rs:883:40-883:44)
  5: StorageLive(_28)
    SourceInfo(regex-automata/src/util/look.rs:883:45-883:53)
  6: StorageLive(_29)
    SourceInfo(regex-automata/src/util/look.rs:883:45-883:49)
  7: _29 = &_14
    SourceInfo(regex-automata/src/util/look.rs:883:45-883:49)
  8: StorageLive(_30)
    SourceInfo(regex-automata/src/util/look.rs:883:45-883:53)
  9: StorageLive(_31)
    SourceInfo(regex-automata/src/util/look.rs:883:50-883:52)
  10: _31 = _15
    SourceInfo(regex-automata/src/util/look.rs:883:50-883:52)
  11: _30 = (move _31,)
    SourceInfo(regex-automata/src/util/look.rs:883:45-883:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:45-883:53)
      kind: _28 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _29, move _30) -> [return: bb19, unwind: bb37]
  }
  preds [bb17]
  succs [bb19, bb37]

bb19
  0: StorageDead(_31)
    SourceInfo(regex-automata/src/util/look.rs:883:52-883:53)
  1: StorageDead(_30)
    SourceInfo(regex-automata/src/util/look.rs:883:52-883:53)
  2: StorageDead(_29)
    SourceInfo(regex-automata/src/util/look.rs:883:52-883:53)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:40-883:54)
      kind: _26 = move _27(move _28) -> [return: bb20, unwind: bb37]
  }
  preds [bb18]
  succs [bb20, bb37]

bb20
  0: StorageDead(_28)
    SourceInfo(regex-automata/src/util/look.rs:883:53-883:54)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/util/look.rs:883:53-883:54)
  2: StorageLive(_32)
    SourceInfo(regex-automata/src/util/look.rs:883:58-883:72)
  3: StorageLive(_33)
    SourceInfo(regex-automata/src/util/look.rs:883:58-883:62)
  4: _33 = _13
    SourceInfo(regex-automata/src/util/look.rs:883:58-883:62)
  5: StorageLive(_34)
    SourceInfo(regex-automata/src/util/look.rs:883:63-883:71)
  6: StorageLive(_35)
    SourceInfo(regex-automata/src/util/look.rs:883:63-883:67)
  7: _35 = &_14
    SourceInfo(regex-automata/src/util/look.rs:883:63-883:67)
  8: StorageLive(_36)
    SourceInfo(regex-automata/src/util/look.rs:883:63-883:71)
  9: StorageLive(_37)
    SourceInfo(regex-automata/src/util/look.rs:883:68-883:70)
  10: _37 = _16
    SourceInfo(regex-automata/src/util/look.rs:883:68-883:70)
  11: _36 = (move _37,)
    SourceInfo(regex-automata/src/util/look.rs:883:63-883:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:63-883:71)
      kind: _34 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _35, move _36) -> [return: bb21, unwind: bb37]
  }
  preds [bb19]
  succs [bb21, bb37]

bb21
  0: StorageDead(_37)
    SourceInfo(regex-automata/src/util/look.rs:883:70-883:71)
  1: StorageDead(_36)
    SourceInfo(regex-automata/src/util/look.rs:883:70-883:71)
  2: StorageDead(_35)
    SourceInfo(regex-automata/src/util/look.rs:883:70-883:71)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:58-883:72)
      kind: _32 = move _33(move _34) -> [return: bb22, unwind: bb37]
  }
  preds [bb20]
  succs [bb22, bb37]

bb22
  0: StorageDead(_34)
    SourceInfo(regex-automata/src/util/look.rs:883:71-883:72)
  1: StorageDead(_33)
    SourceInfo(regex-automata/src/util/look.rs:883:71-883:72)
  2: _25 = Eq(move _26, move _32)
    SourceInfo(regex-automata/src/util/look.rs:883:40-883:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:40-883:72)
      kind: switchInt(move _25) -> [0: bb25, otherwise: bb23]
  }
  preds [bb21]
  succs [bb23, bb25]

bb23
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/look.rs:883:71-883:72)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:883:71-883:72)
  2: _38 = AddWithOverflow(_16, const 1_u16)
    SourceInfo(regex-automata/src/util/look.rs:884:25-884:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:884:25-884:32)
      kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _16, const 1_u16) -> [success: bb24, unwind: bb37]
  }
  preds [bb22]
  succs [bb24, bb37]

bb24
  0: _16 = move (_38.0: u16)
    SourceInfo(regex-automata/src/util/look.rs:884:25-884:32)
  1: _17 = const ()
    SourceInfo(regex-automata/src/util/look.rs:883:73-885:22)
  2: StorageDead(_25)
    SourceInfo(regex-automata/src/util/look.rs:885:21-885:22)
  3: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:885:21-885:22)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:883:21-885:22)
      kind: goto -> bb16
  }
  preds [bb23]
  succs [bb16]

bb25
  0: StorageDead(_32)
    SourceInfo(regex-automata/src/util/look.rs:883:71-883:72)
  1: StorageDead(_26)
    SourceInfo(regex-automata/src/util/look.rs:883:71-883:72)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb22]
  succs [bb27]

bb26
  0: StorageDead(_24)
    SourceInfo(regex-automata/src/util/look.rs:883:35-883:36)
  Terminator {
      source_info: SourceInfo(regex-automata/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb17]
  succs [bb27]

bb27
  0: StorageLive(_40)
    SourceInfo(regex-automata/src/util/look.rs:883:21-885:22)
  1: _22 = const ()
    SourceInfo(regex-automata/src/util/look.rs:883:21-885:22)
  2: StorageDead(_40)
    SourceInfo(regex-automata/src/util/look.rs:885:21-885:22)
  3: StorageDead(_25)
    SourceInfo(regex-automata/src/util/look.rs:885:21-885:22)
  4: StorageDead(_23)
    SourceInfo(regex-automata/src/util/look.rs:885:21-885:22)
  5: StorageDead(_22)
    SourceInfo(regex-automata/src/util/look.rs:885:21-885:22)
  6: StorageLive(_42)
    SourceInfo(regex-automata/src/util/look.rs:888:21-888:39)
  7: StorageLive(_43)
    SourceInfo(regex-automata/src/util/look.rs:888:29-888:38)
  8: StorageLive(_44)
    SourceInfo(regex-automata/src/util/look.rs:888:29-888:31)
  9: _44 = _16
    SourceInfo(regex-automata/src/util/look.rs:888:29-888:31)
  10: _43 = Le(move _44, const 256_u16)
    SourceInfo(regex-automata/src/util/look.rs:888:29-888:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:888:29-888:38)
      kind: switchInt(move _43) -> [0: bb29, otherwise: bb28]
  }
  preds [bb25, bb26]
  succs [bb28, bb29]

bb28
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/util/look.rs:888:37-888:38)
  1: _42 = const ()
    SourceInfo(regex-automata/src/util/look.rs:888:39-888:39)
  2: StorageDead(_43)
    SourceInfo(regex-automata/src/util/look.rs:888:38-888:39)
  3: StorageDead(_42)
    SourceInfo(regex-automata/src/util/look.rs:888:38-888:39)
  4: StorageLive(_46)
    SourceInfo(regex-automata/src/util/look.rs:892:21-892:78)
  5: StorageLive(_47)
    SourceInfo(regex-automata/src/util/look.rs:892:21-892:24)
  6: _47 = &mut (*_3)
    SourceInfo(regex-automata/src/util/look.rs:892:21-892:24)
  7: StorageLive(_48)
    SourceInfo(regex-automata/src/util/look.rs:892:35-892:43)
  8: StorageLive(_49)
    SourceInfo(regex-automata/src/util/look.rs:892:35-892:39)
  9: _49 = &_14
    SourceInfo(regex-automata/src/util/look.rs:892:35-892:39)
  10: StorageLive(_50)
    SourceInfo(regex-automata/src/util/look.rs:892:35-892:43)
  11: StorageLive(_51)
    SourceInfo(regex-automata/src/util/look.rs:892:40-892:42)
  12: _51 = _15
    SourceInfo(regex-automata/src/util/look.rs:892:40-892:42)
  13: _50 = (move _51,)
    SourceInfo(regex-automata/src/util/look.rs:892:35-892:43)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:892:35-892:43)
      kind: _48 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _49, move _50) -> [return: bb30, unwind: bb37]
  }
  preds [bb27]
  succs [bb30, bb37]

bb29
  0: StorageDead(_44)
    SourceInfo(regex-automata/src/util/look.rs:888:37-888:38)
  1: StorageLive(_45)
    SourceInfo(regex-automata/src/util/look.rs:888:21-888:39)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:888:21-888:39)
      kind: _45 = core::panicking::panic(const "assertion failed: b2 <= 256") -> bb37
  }
  preds [bb27]
  succs [bb37]

bb30
  0: StorageDead(_51)
    SourceInfo(regex-automata/src/util/look.rs:892:42-892:43)
  1: StorageDead(_50)
    SourceInfo(regex-automata/src/util/look.rs:892:42-892:43)
  2: StorageDead(_49)
    SourceInfo(regex-automata/src/util/look.rs:892:42-892:43)
  3: StorageLive(_52)
    SourceInfo(regex-automata/src/util/look.rs:892:45-892:77)
  4: StorageLive(_53)
    SourceInfo(regex-automata/src/util/look.rs:892:45-892:49)
  5: _53 = &_14
    SourceInfo(regex-automata/src/util/look.rs:892:45-892:49)
  6: StorageLive(_54)
    SourceInfo(regex-automata/src/util/look.rs:892:45-892:77)
  7: StorageLive(_55)
    SourceInfo(regex-automata/src/util/look.rs:892:50-892:76)
  8: StorageLive(_56)
    SourceInfo(regex-automata/src/util/look.rs:892:50-892:67)
  9: StorageLive(_57)
    SourceInfo(regex-automata/src/util/look.rs:892:50-892:52)
  10: _57 = _16
    SourceInfo(regex-automata/src/util/look.rs:892:50-892:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:892:50-892:67)
      kind: _56 = core::num::<impl u16>::checked_sub(move _57, const 1_u16) -> [return: bb31, unwind: bb37]
  }
  preds [bb28]
  succs [bb31, bb37]

bb31
  0: StorageDead(_57)
    SourceInfo(regex-automata/src/util/look.rs:892:66-892:67)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:892:50-892:76)
      kind: _55 = core::option::Option::<u16>::unwrap(move _56) -> [return: bb32, unwind: bb37]
  }
  preds [bb30]
  succs [bb32, bb37]

bb32
  0: StorageDead(_56)
    SourceInfo(regex-automata/src/util/look.rs:892:75-892:76)
  1: _54 = (move _55,)
    SourceInfo(regex-automata/src/util/look.rs:892:45-892:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:892:45-892:77)
      kind: _52 = <{closure@regex-automata/src/util/look.rs:878:28: 878:36} as core::ops::Fn<(u16,)>>::call(move _53, move _54) -> [return: bb33, unwind: bb37]
  }
  preds [bb31]
  succs [bb33, bb37]

bb33
  0: StorageDead(_55)
    SourceInfo(regex-automata/src/util/look.rs:892:76-892:77)
  1: StorageDead(_54)
    SourceInfo(regex-automata/src/util/look.rs:892:76-892:77)
  2: StorageDead(_53)
    SourceInfo(regex-automata/src/util/look.rs:892:76-892:77)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:892:21-892:78)
      kind: _46 = util::alphabet::ByteClassSet::set_range(move _47, move _48, move _52) -> [return: bb34, unwind: bb37]
  }
  preds [bb32]
  succs [bb34, bb37]

bb34
  0: StorageDead(_52)
    SourceInfo(regex-automata/src/util/look.rs:892:77-892:78)
  1: StorageDead(_48)
    SourceInfo(regex-automata/src/util/look.rs:892:77-892:78)
  2: StorageDead(_47)
    SourceInfo(regex-automata/src/util/look.rs:892:77-892:78)
  3: StorageDead(_46)
    SourceInfo(regex-automata/src/util/look.rs:892:78-892:79)
  4: StorageLive(_58)
    SourceInfo(regex-automata/src/util/look.rs:893:26-893:28)
  5: _58 = _16
    SourceInfo(regex-automata/src/util/look.rs:893:26-893:28)
  6: _15 = move _58
    SourceInfo(regex-automata/src/util/look.rs:893:21-893:28)
  7: StorageDead(_58)
    SourceInfo(regex-automata/src/util/look.rs:893:27-893:28)
  8: _17 = const ()
    SourceInfo(regex-automata/src/util/look.rs:881:33-894:18)
  9: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:894:17-894:18)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:881:17-894:18)
      kind: goto -> bb12
  }
  preds [bb33]
  succs [bb12]

bb35
  0: StorageDead(_19)
    SourceInfo(regex-automata/src/util/look.rs:881:31-881:32)
  1: StorageLive(_60)
    SourceInfo(regex-automata/src/util/look.rs:881:17-894:18)
  2: _0 = const ()
    SourceInfo(regex-automata/src/util/look.rs:881:17-894:18)
  3: StorageDead(_60)
    SourceInfo(regex-automata/src/util/look.rs:894:17-894:18)
  4: StorageDead(_18)
    SourceInfo(regex-automata/src/util/look.rs:894:17-894:18)
  5: StorageDead(_16)
    SourceInfo(regex-automata/src/util/look.rs:895:13-895:14)
  6: StorageDead(_15)
    SourceInfo(regex-automata/src/util/look.rs:895:13-895:14)
  7: StorageDead(_14)
    SourceInfo(regex-automata/src/util/look.rs:895:13-895:14)
  8: StorageDead(_13)
    SourceInfo(regex-automata/src/util/look.rs:895:13-895:14)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:895:13-895:14)
      kind: goto -> bb36
  }
  preds [bb13]
  succs [bb36]

bb36
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:897:6-897:6)
      kind: return
  }
  preds [bb6, bb8, bb11, bb35]
  succs []

bb37
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/look.rs:837:5-897:6)
      kind: resume
  }
  preds [bb7, bb9, bb10, bb12, bb14, bb16, bb18, bb19, bb20, bb21, bb23, bb28, bb29, bb30, bb31, bb32, bb33]
  succs []

