bb0
  0: StorageLive(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:13-1821:24)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:55)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:41)
  3: StorageLive(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:30)
  4: _7 = &_2
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:30)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:41)
      kind: _6 = util::primitives::StateID::as_usize(move _7) -> [return: bb1, unwind: bb12]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:40-1821:41)
  1: StorageLive(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:44-1821:55)
  2: _8 = ((*_1).1: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:44-1821:55)
  3: _9 = MulWithOverflow(_6, _8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:55)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:55)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _6, move _8) -> [success: bb2, unwind: bb12]
  }
  preds [bb0]
  succs [bb2, bb12]

bb2
  0: _5 = move (_9.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:55)
  1: StorageDead(_8)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:54-1821:55)
  2: StorageDead(_6)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:54-1821:55)
  3: StorageLive(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:58-1821:60)
  4: _10 = _3
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:58-1821:60)
  5: _11 = AddWithOverflow(_5, _10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:60)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _10) -> [success: bb3, unwind: bb12]
  }
  preds [bb1]
  succs [bb3, bb12]

bb3
  0: _4 = move (_11.0: usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:27-1821:60)
  1: StorageDead(_10)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:59-1821:60)
  2: StorageDead(_5)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:59-1821:60)
  3: FakeRead(ForLet(None), _4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1821:13-1821:24)
  4: StorageLive(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:13-1822:24)
  5: StorageLive(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:27-1822:38)
  6: _13 = _4
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:27-1822:38)
  7: _14 = Eq(const nfa::thompson::backtrack::Visited::BLOCK_SIZE, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:27-1822:60)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:27-1822:60)
      kind: assert(!move _14, "attempt to divide `{}` by zero", _13) -> [success: bb4, unwind: bb12]
  }
  preds [bb2]
  succs [bb4, bb12]

bb4
  0: _12 = Div(move _13, const nfa::thompson::backtrack::Visited::BLOCK_SIZE)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:27-1822:60)
  1: StorageDead(_13)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:59-1822:60)
  2: FakeRead(ForLet(None), _12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1822:13-1822:24)
  3: StorageLive(_15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:13-1823:16)
  4: StorageLive(_16)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:19-1823:30)
  5: _16 = _4
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:19-1823:30)
  6: _17 = Eq(const nfa::thompson::backtrack::Visited::BLOCK_SIZE, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:19-1823:52)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:19-1823:52)
      kind: assert(!move _17, "attempt to calculate the remainder of `{}` with a divisor of zero", _16) -> [success: bb5, unwind: bb12]
  }
  preds [bb3]
  succs [bb5, bb12]

bb5
  0: _15 = Rem(move _16, const nfa::thompson::backtrack::Visited::BLOCK_SIZE)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:19-1823:52)
  1: StorageDead(_16)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:51-1823:52)
  2: FakeRead(ForLet(None), _15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1823:13-1823:16)
  3: StorageLive(_18)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:13-1824:27)
  4: StorageLive(_19)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:35-1824:38)
  5: _19 = _15
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:35-1824:38)
  6: _20 = Lt(_19, const 64_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:30-1824:38)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:30-1824:38)
      kind: assert(move _20, "attempt to shift left by `{}`, which would overflow", _19) -> [success: bb6, unwind: bb12]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: _18 = Shl(const 1_usize, move _19)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:30-1824:38)
  1: StorageDead(_19)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:37-1824:38)
  2: FakeRead(ForLet(None), _18)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1824:13-1824:27)
  3: StorageLive(_21)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:9-1827:10)
  4: StorageLive(_22)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:58)
  5: StorageLive(_23)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:53)
  6: StorageLive(_24)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:36)
  7: StorageLive(_25)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:23-1825:36)
  8: StorageLive(_26)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:23)
  9: _26 = &((*_1).0: std::vec::Vec<usize>)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:23)
  10: StorageLive(_27)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:24-1825:35)
  11: _27 = _12
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:24-1825:35)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:23-1825:36)
      kind: _25 = <std::vec::Vec<usize> as core::ops::Index<usize>>::index(move _26, move _27) -> [return: bb7, unwind: bb12]
  }
  preds [bb5]
  succs [bb7, bb12]

bb7
  0: _24 = (*_25)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:36)
  1: StorageDead(_27)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:35-1825:36)
  2: StorageDead(_26)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:35-1825:36)
  3: StorageLive(_28)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:39-1825:53)
  4: _28 = _18
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:39-1825:53)
  5: _23 = BitAnd(move _24, move _28)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:53)
  6: StorageDead(_28)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:52-1825:53)
  7: StorageDead(_24)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:52-1825:53)
  8: _22 = Ne(move _23, const 0_usize)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:58)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:12-1825:58)
      kind: switchInt(move _22) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:57-1825:58)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:57-1825:58)
  2: _0 = const false
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1826:20-1826:25)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1827:9-1827:10)
  4: StorageDead(_21)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1827:9-1827:10)
  5: StorageDead(_18)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  6: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  7: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  8: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:6-1830:6)
      kind: goto -> bb11
  }
  preds [bb7]
  succs [bb11]

bb9
  0: StorageDead(_25)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:57-1825:58)
  1: StorageDead(_23)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1825:57-1825:58)
  2: _21 = const ()
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1827:10-1827:10)
  3: StorageDead(_22)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1827:9-1827:10)
  4: StorageDead(_21)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1827:9-1827:10)
  5: StorageLive(_30)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:37-1828:51)
  6: _30 = _18
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:37-1828:51)
  7: StorageLive(_31)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:20-1828:33)
  8: StorageLive(_32)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:9-1828:20)
  9: _32 = &mut ((*_1).0: std::vec::Vec<usize>)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:9-1828:20)
  10: StorageLive(_33)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:21-1828:32)
  11: _33 = _12
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:21-1828:32)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:20-1828:33)
      kind: _31 = <std::vec::Vec<usize> as core::ops::IndexMut<usize>>::index_mut(move _32, move _33) -> [return: bb10, unwind: bb12]
  }
  preds [bb7]
  succs [bb10, bb12]

bb10
  0: StorageDead(_33)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:32-1828:33)
  1: StorageDead(_32)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:32-1828:33)
  2: (*_31) = BitOr((*_31), move _30)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:9-1828:51)
  3: StorageDead(_30)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:50-1828:51)
  4: StorageDead(_31)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1828:51-1828:52)
  5: _0 = const true
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1829:9-1829:13)
  6: StorageDead(_18)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  7: StorageDead(_15)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  8: StorageDead(_12)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  9: StorageDead(_4)
    SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:5-1830:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:6-1830:6)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1830:6-1830:6)
      kind: return
  }
  preds [bb8, bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-automata/src/nfa/thompson/backtrack.rs:1820:5-1830:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb9]
  succs []

