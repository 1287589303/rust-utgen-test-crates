{
  "regex-automata/src/dfa/onepass.rs:2420:17:2420:65": [
    {
      "Try": "writeln!(f, \"START(ALL): {:?}\", sid.as_usize())?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2399:22:2399:41": [
    {
      "For": {
        "iter_var": "index",
        "iter_range": "0..self.state_len()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2418:26:2418:56": [
    {
      "For": {
        "iter_var": "(i, &sid)",
        "iter_range": "self.starts.iter().enumerate()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2425:21:2425:26": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "i - 1",
          "lhs": "i",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2430:9:2430:61": [
    {
      "Try": "writeln!(f, \"state length: {:?}\", self.state_len())?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2419:16:2419:22": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "i == 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2405:17:2405:33": [
    {
      "Try": "write!(f, \"* \")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2414:13:2414:51": [
    {
      "Try": "debug_state_transitions(f, self, sid)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2407:17:2407:33": [
    {
      "Try": "write!(f, \"  \")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2398:9:2398:38": [
    {
      "Try": "writeln!(f, \"onepass::DFA(\")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2410:17:2410:34": [
    {
      "Bool": {
        "Other": "pateps.is_empty()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2409:13:2409:49": [
    {
      "Try": "write!(f, \"{:06?}\", sid.as_usize())?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2432:9:2432:26": [
    {
      "Try": "writeln!(f, \")\")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2415:13:2415:29": [
    {
      "Try": "write!(f, \"\\n\")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2411:17:2411:46": [
    {
      "Try": "write!(f, \" ({:?})\", pateps)?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2422:17:2427:19": [
    {
      "Try": "writeln!(\n                    f,\n                    \"START(pattern: {:?}): {:?}\",\n                    i - 1,\n                    sid.as_usize(),\n                )?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2417:9:2417:25": [
    {
      "Try": "writeln!(f, \"\")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2404:23:2404:52": [
    {
      "Bool": {
        "Other": "pateps.pattern_id().is_some()"
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2403:17:2403:33": [
    {
      "Try": "write!(f, \"D \")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2402:16:2402:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "sid == DEAD",
          "lhs": "sid",
          "rhs": "DEAD",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2413:13:2413:29": [
    {
      "Try": "write!(f, \": \")?"
    }
  ],
  "regex-automata/src/dfa/onepass.rs:2431:9:2431:65": [
    {
      "Try": "writeln!(f, \"pattern length: {:?}\", self.pattern_len())?"
    }
  ]
}