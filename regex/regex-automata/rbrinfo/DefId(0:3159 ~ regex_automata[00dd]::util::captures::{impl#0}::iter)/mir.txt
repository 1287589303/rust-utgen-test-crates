bb0
  0: StorageLive(_2)
    SourceInfo(regex-automata/src/util/captures.rs:577:13-577:18)
  1: StorageLive(_3)
    SourceInfo(regex-automata/src/util/captures.rs:577:21-578:23)
  2: StorageLive(_4)
    SourceInfo(regex-automata/src/util/captures.rs:577:21-577:25)
  3: _4 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:577:21-577:25)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:577:21-578:23)
      kind: _3 = util::captures::Captures::pattern(move _4) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-automata/src/util/captures.rs:578:22-578:23)
  1: StorageLive(_5)
    SourceInfo(regex-automata/src/util/captures.rs:579:21-579:63)
  2: StorageLive(_6)
    SourceInfo(regex-automata/src/util/captures.rs:579:21-579:51)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:579:21-579:51)
      kind: _6 = util::captures::GroupInfoPatternNames::<'static>::empty() -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:579:21-579:63)
      kind: _5 = <util::captures::GroupInfoPatternNames<'_> as core::iter::Iterator>::enumerate(move _6) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-automata/src/util/captures.rs:579:62-579:63)
  1: StorageLive(_7)
    SourceInfo(regex-automata/src/util/captures.rs:579:65-581:14)
  2: StorageLive(_8)
    SourceInfo(regex-automata/src/util/captures.rs:579:65-581:14)
  3: _8 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:579:65-581:14)
  4: _7 = {closure@regex-automata/src/util/captures.rs:579:65: 579:70} { self: move _8 }
    SourceInfo(regex-automata/src/util/captures.rs:579:65-581:14)
  5: StorageDead(_8)
    SourceInfo(regex-automata/src/util/captures.rs:579:69-579:70)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:577:21-581:15)
      kind: _2 = core::option::Option::<util::primitives::PatternID>::map_or::<core::iter::Enumerate<util::captures::GroupInfoPatternNames<'_>>, {closure@regex-automata/src/util/captures.rs:579:65: 579:70}>(move _3, move _5, move _7) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-automata/src/util/captures.rs:581:14-581:15)
  1: StorageDead(_5)
    SourceInfo(regex-automata/src/util/captures.rs:581:14-581:15)
  2: StorageDead(_3)
    SourceInfo(regex-automata/src/util/captures.rs:581:14-581:15)
  3: FakeRead(ForLet(None), _2)
    SourceInfo(regex-automata/src/util/captures.rs:577:13-577:18)
  4: StorageLive(_9)
    SourceInfo(regex-automata/src/util/captures.rs:582:37-582:41)
  5: _9 = &(*_1)
    SourceInfo(regex-automata/src/util/captures.rs:582:37-582:41)
  6: StorageLive(_10)
    SourceInfo(regex-automata/src/util/captures.rs:582:43-582:48)
  7: _10 = move _2
    SourceInfo(regex-automata/src/util/captures.rs:582:43-582:48)
  8: _0 = util::captures::CapturesPatternIter::<'_> { caps: move _9, names: move _10 }
    SourceInfo(regex-automata/src/util/captures.rs:582:9-582:50)
  9: StorageDead(_10)
    SourceInfo(regex-automata/src/util/captures.rs:582:49-582:50)
  10: StorageDead(_9)
    SourceInfo(regex-automata/src/util/captures.rs:582:49-582:50)
  11: StorageDead(_2)
    SourceInfo(regex-automata/src/util/captures.rs:583:5-583:6)
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:583:6-583:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-automata/src/util/captures.rs:576:5-583:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

