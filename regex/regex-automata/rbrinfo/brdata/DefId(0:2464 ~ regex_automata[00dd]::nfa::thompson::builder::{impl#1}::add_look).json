{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_look",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:813:5:819:6",
  "doc": "/// Add a \"look\" NFA state.\n///\n/// A \"look\" NFA state corresponds to a state with exactly one\n/// *conditional* epsilon transition to another NFA state. Namely, it\n/// represents one of a small set of simplistic look-around operators.\n///\n/// Callers may provide a \"dummy\" state ID (typically [`StateID::ZERO`]),\n/// and then change it later with [`patch`](Builder::patch).\n///\n/// # Errors\n///\n/// This returns an error if the state identifier space is exhausted, or if\n/// the configured heap size limit has been exceeded.\n",
  "code": [
    "pub fn add_look(",
    "    &mut self,",
    "    next: StateID,",
    "    look: Look,",
    ") -> Result<StateID, BuildError> {",
    "    self.add(State::Look { look, next })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}