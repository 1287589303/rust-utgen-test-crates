{
  "name": "regex_automata::util::prefilter::{impl#2}::new",
  "mod_info": {
    "name": "util::prefilter",
    "loc": "regex-automata/src/util/mod.rs:41:1:41:19"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/mod.rs:577:5:629:6",
  "doc": "/// Select what is believed to be the best prefilter algorithm for the\n/// match semantics and sequence of needles given.\n///\n/// This selection algorithm uses the needles as given without any\n/// modification. For example, if `[bar]` is given, then this doesn't\n/// try to select `memchr` for `b`. Instead, it would select `memmem`\n/// for `bar`. If callers would want `memchr` selected for `[bar]`, then\n/// callers should massages the literals themselves. That is, callers are\n/// responsible for heuristics surrounding which sequence of literals is\n/// best.\n///\n/// What this selection algorithm does is attempt to use the fastest\n/// prefilter that works for the literals given. So if `[a, b]`, is given,\n/// then `memchr2` is selected.\n///\n/// Of course, which prefilter is selected is also subject to what\n/// is available. For example, if `alloc` isn't enabled, then\n/// that limits which prefilters can be selected. Similarly, if\n/// `perf-literal-substring` isn't enabled, then nothing from the `memchr`\n/// crate can be returned.\n",
  "code": [
    "pub(crate) fn new<B: AsRef<[u8]>>(",
    "    kind: MatchKind,",
    "    needles: &[B],",
    ") -> Option<Choice> {",
    "    // An empty set means the regex matches nothing, so no sense in",
    "    // building a prefilter.",
    "    if needles.len() == 0 {",
    "        debug!(\"prefilter building failed: found empty set of literals\");",
    "        return None;",
    "    }",
    "    // If the regex can match the empty string, then the prefilter",
    "    // will by definition match at every position. This is obviously",
    "    // completely ineffective.",
    "    if needles.iter().any(|n| n.as_ref().is_empty()) {",
    "        debug!(\"prefilter building failed: literals match empty string\");",
    "        return None;",
    "    }",
    "    // BREADCRUMBS: Perhaps the literal optimizer should special case",
    "    // sequences of length two or three if the leading bytes of each are",
    "    // \"rare\"? Or perhaps, if there are two or three total possible leading",
    "    // bytes, regardless of the number of literals, and all are rare...",
    "    // Then well, perhaps we should use memchr2 or memchr3 in those cases?",
    "    if let Some(pre) = Memchr::new(kind, needles) {",
    "        debug!(\"prefilter built: memchr\");",
    "        return Some(Choice::Memchr(pre));",
    "    }",
    "    if let Some(pre) = Memchr2::new(kind, needles) {",
    "        debug!(\"prefilter built: memchr2\");",
    "        return Some(Choice::Memchr2(pre));",
    "    }",
    "    if let Some(pre) = Memchr3::new(kind, needles) {",
    "        debug!(\"prefilter built: memchr3\");",
    "        return Some(Choice::Memchr3(pre));",
    "    }",
    "    if let Some(pre) = Memmem::new(kind, needles) {",
    "        debug!(\"prefilter built: memmem\");",
    "        return Some(Choice::Memmem(pre));",
    "    }",
    "    if let Some(pre) = Teddy::new(kind, needles) {",
    "        debug!(\"prefilter built: teddy\");",
    "        return Some(Choice::Teddy(pre));",
    "    }",
    "    if let Some(pre) = ByteSet::new(kind, needles) {",
    "        debug!(\"prefilter built: byteset\");",
    "        return Some(Choice::ByteSet(pre));",
    "    }",
    "    if let Some(pre) = AhoCorasick::new(kind, needles) {",
    "        debug!(\"prefilter built: aho-corasick\");",
    "        return Some(Choice::AhoCorasick(pre));",
    "    }",
    "    debug!(\"prefilter building failed: no strategy could be found\");",
    "    None",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "false",
          "line": 583,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "true",
          "line": 590,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr2::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr3::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 607,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memmem::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Teddy::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 615,
          "bound": null
        },
        {
          "cond": "let Some(pre) = ByteSet::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "let Some(pre) = AhoCorasick::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        12,
        13,
        17,
        18,
        22,
        23,
        28,
        29,
        30,
        35,
        36,
        37,
        41,
        42,
        47,
        48,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr2::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr3::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 607,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memmem::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Teddy::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 615,
          "bound": null
        },
        {
          "cond": "let Some(pre) = ByteSet::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "let Some(pre) = AhoCorasick::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        }
      ],
      "ret": "Some(Choice::AhoCorasick(pre))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        12,
        13,
        17,
        18,
        22,
        23,
        28,
        29,
        30,
        35,
        36,
        37,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        50,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr2::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr3::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 607,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memmem::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Teddy::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 615,
          "bound": null
        },
        {
          "cond": "let Some(pre) = ByteSet::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        }
      ],
      "ret": "Some(Choice::ByteSet(pre))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        12,
        13,
        17,
        18,
        22,
        23,
        28,
        29,
        30,
        35,
        36,
        37,
        38,
        39,
        40,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr2::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr3::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 607,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memmem::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Teddy::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 615,
          "bound": null
        }
      ],
      "ret": "Some(Choice::Teddy(pre))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        12,
        13,
        17,
        18,
        22,
        23,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        51,
        52,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr2::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr3::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 607,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memmem::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        }
      ],
      "ret": "Some(Choice::Memmem(pre))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        12,
        13,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr2::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr3::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 607,
          "bound": null
        }
      ],
      "ret": "Some(Choice::Memchr3(pre))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        12,
        13,
        17,
        18,
        19,
        20,
        21,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr2::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        }
      ],
      "ret": "Some(Choice::Memchr2(pre))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        12,
        13,
        14,
        15,
        16,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "needles.len() == 0",
          "norm": "0 == needles.len()",
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "needles.iter().any(|n| n.as_ref().is_empty())",
          "norm": null,
          "value": "false",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(pre) = Memchr::new(kind, needles)",
          "norm": null,
          "value": "true",
          "line": 599,
          "bound": null
        }
      ],
      "ret": "Some(Choice::Memchr(pre))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        55
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}