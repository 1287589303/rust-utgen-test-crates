{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#5}::next",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1541:5:1595:6",
  "doc": "/// Starting from 'sid', if the position 'at' in the 'input' haystack has a\n/// transition defined out of 'sid', then add the state transitioned to and\n/// its epsilon closure to the 'next' set of states to explore.\n///\n/// 'stack' is used by the epsilon closure computation to perform a depth\n/// first traversal of the NFA.\n///\n/// 'curr_slot_table' should be the table of slots for the current set of\n/// states being explored. If there is a transition out of 'sid', then\n/// sid's row in the slot table is used to perform the epsilon closure.\n",
  "code": [
    "fn next(",
    "    &self,",
    "    stack: &mut Vec<FollowEpsilon>,",
    "    curr_slot_table: &mut SlotTable,",
    "    next: &mut ActiveStates,",
    "    input: &Input<'_>,",
    "    at: usize,",
    "    sid: StateID,",
    ") -> Option<PatternID> {",
    "    instrument!(|c| c.record_step(sid));",
    "    match *self.nfa.state(sid) {",
    "        State::Fail",
    "        | State::Look { .. }",
    "        | State::Union { .. }",
    "        | State::BinaryUnion { .. }",
    "        | State::Capture { .. } => None,",
    "        State::ByteRange { ref trans } => {",
    "            if trans.matches(input.haystack(), at) {",
    "                let slots = curr_slot_table.for_state(sid);",
    "                // OK because 'at <= haystack.len() < usize::MAX', so",
    "                // adding 1 will never wrap.",
    "                let at = at.wrapping_add(1);",
    "                self.epsilon_closure(",
    "                    stack, slots, next, input, at, trans.next,",
    "                );",
    "            }",
    "            None",
    "        }",
    "        State::Sparse(ref sparse) => {",
    "            if let Some(next_sid) = sparse.matches(input.haystack(), at) {",
    "                let slots = curr_slot_table.for_state(sid);",
    "                // OK because 'at <= haystack.len() < usize::MAX', so",
    "                // adding 1 will never wrap.",
    "                let at = at.wrapping_add(1);",
    "                self.epsilon_closure(",
    "                    stack, slots, next, input, at, next_sid,",
    "                );",
    "            }",
    "            None",
    "        }",
    "        State::Dense(ref dense) => {",
    "            if let Some(next_sid) = dense.matches(input.haystack(), at) {",
    "                let slots = curr_slot_table.for_state(sid);",
    "                // OK because 'at <= haystack.len() < usize::MAX', so",
    "                // adding 1 will never wrap.",
    "                let at = at.wrapping_add(1);",
    "                self.epsilon_closure(",
    "                    stack, slots, next, input, at, next_sid,",
    "                );",
    "            }",
    "            None",
    "        }",
    "        State::Match { pattern_id } => Some(pattern_id),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 0,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        }
      ],
      "ret": "Some(pattern_id)",
      "path": [
        0,
        1,
        6,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Fail or State::Capture { .. } or State::BinaryUnion { .. } or State::Look { .. } or State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        7,
        8,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Capture { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Fail or State::Capture { .. } or State::BinaryUnion { .. } or State::Look { .. } or State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        7,
        8,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::BinaryUnion { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Fail or State::Capture { .. } or State::BinaryUnion { .. } or State::Look { .. } or State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        7,
        8,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Fail or State::Capture { .. } or State::BinaryUnion { .. } or State::Look { .. } or State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        7,
        8,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Look { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Fail or State::Capture { .. } or State::BinaryUnion { .. } or State::Look { .. } or State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        7,
        8,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "let Some(next_sid) = dense.matches(input.haystack(), at)",
          "norm": null,
          "value": "true",
          "line": 1582,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        5,
        28,
        29,
        30,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "let Some(next_sid) = dense.matches(input.haystack(), at)",
          "norm": null,
          "value": "true",
          "line": 1582,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        5,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "let Some(next_sid) = sparse.matches(input.haystack(), at)",
          "norm": null,
          "value": "true",
          "line": 1570,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        18,
        19,
        20,
        26,
        27,
        38
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "let Some(next_sid) = sparse.matches(input.haystack(), at)",
          "norm": null,
          "value": "true",
          "line": 1570,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "trans.matches(input.haystack(), at)",
          "norm": null,
          "value": "true",
          "line": 1558,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*self.nfa.state(sid) matches State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(sid) matches State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 1551,
          "bound": null
        },
        {
          "cond": "trans.matches(input.haystack(), at)",
          "norm": null,
          "value": "false",
          "line": 1558,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        16,
        17,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}