{
  "name": "regex_automata::util::determinize::state::{impl#8}::pattern_offset_end",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:540:5:548:6",
  "doc": "/// Returns the offset into this state's representation where the pattern\n/// IDs end and the NFA state IDs begin.\n",
  "code": [
    "fn pattern_offset_end(&self) -> usize {",
    "    let encoded = self.encoded_pattern_len();",
    "    if encoded == 0 {",
    "        return 9;",
    "    }",
    "    // This arithmetic is OK since we were able to address this many bytes",
    "    // when writing to the state, thus, it must fit into a usize.",
    "    encoded.checked_mul(4).unwrap().checked_add(13).unwrap()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "encoded == 0",
          "norm": "0 == encoded",
          "value": "false",
          "line": 542,
          "bound": null
        }
      ],
      "ret": "9",
      "path": [
        0,
        1,
        2,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "encoded == 0",
          "norm": "0 == encoded",
          "value": "true",
          "line": 542,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}