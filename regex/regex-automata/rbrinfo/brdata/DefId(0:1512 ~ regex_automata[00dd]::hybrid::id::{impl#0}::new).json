{
  "name": "regex_automata::hybrid::id::{impl#0}::new",
  "mod_info": {
    "name": "hybrid::id",
    "loc": "regex-automata/src/hybrid/mod.rs:142:1:142:8"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/id.rs:190:5:196:6",
  "doc": "/// Create a new lazy state ID.\n///\n/// If the given identifier exceeds [`LazyStateID::MAX`], then this returns\n/// an error.\n",
  "code": [
    "pub(crate) fn new(id: usize) -> Result<LazyStateID, LazyStateIDError> {",
    "    if id > LazyStateID::MAX {",
    "        let attempted = u64::try_from(id).unwrap();",
    "        return Err(LazyStateIDError { attempted });",
    "    }",
    "    Ok(LazyStateID::new_unchecked(id))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "id > LazyStateID::MAX",
          "norm": "LazyStateID::MAX < id",
          "value": "true",
          "line": 191,
          "bound": null
        }
      ],
      "ret": "Err(LazyStateIDError { attempted })",
      "path": [
        0,
        1,
        2,
        3,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "id > LazyStateID::MAX",
          "norm": "LazyStateID::MAX < id",
          "value": "false",
          "line": 191,
          "bound": "id == LazyStateID::MAX"
        }
      ],
      "ret": "Ok(LazyStateID::new_unchecked(id))",
      "path": [
        0,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}