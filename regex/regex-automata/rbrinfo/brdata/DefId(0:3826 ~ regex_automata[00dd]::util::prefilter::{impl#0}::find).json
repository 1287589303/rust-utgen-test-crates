{
  "name": "regex_automata::util::prefilter::{impl#0}::find",
  "mod_info": {
    "name": "util::prefilter",
    "loc": "regex-automata/src/util/mod.rs:41:1:41:19"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/mod.rs:349:5:358:6",
  "doc": "/// Run this prefilter on `haystack[span.start..end]` and return a matching\n/// span if one exists.\n///\n/// The span returned is guaranteed to have a start position greater than\n/// or equal to the one given, and an end position less than or equal to\n/// the one given.\n///\n/// # Example\n///\n/// This example shows how to build a prefilter directly from an [`Hir`]\n/// expression, and use it to find an occurrence of a prefix from the regex\n/// pattern.\n///\n/// ```\n/// use regex_automata::{\n///     util::{prefilter::Prefilter, syntax},\n///     MatchKind, Span,\n/// };\n///\n/// let hir = syntax::parse(r\"Bruce \\w+\")?;\n/// let pre = Prefilter::from_hir_prefix(MatchKind::LeftmostFirst, &hir)\n///     .expect(\"a prefilter\");\n/// let hay = \"Hello Bruce Springsteen!\";\n/// assert_eq!(\n///     Some(Span::from(6..12)),\n///     pre.find(hay.as_bytes(), Span::from(0..hay.len())),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn find(&self, haystack: &[u8], span: Span) -> Option<Span> {",
    "    #[cfg(not(feature = \"alloc\"))]",
    "    {",
    "        unreachable!()",
    "    }",
    "    #[cfg(feature = \"alloc\")]",
    "    {",
    "        self.pre.find(haystack, span)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}