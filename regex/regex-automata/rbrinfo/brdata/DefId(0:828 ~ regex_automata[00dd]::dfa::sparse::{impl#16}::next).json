{
  "name": "regex_automata::dfa::sparse::{impl#16}::next",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:2222:5:2229:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<State<'a>> {",
    "    if self.id >= self.trans.sparse().len() {",
    "        return None;",
    "    }",
    "    let state = self.trans.state(StateID::new_unchecked(self.id));",
    "    self.id = self.id + state.write_to_len();",
    "    Some(state)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.id >= self.trans.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 2223,
          "bound": "self.id == self.trans.sparse().len()"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.id >= self.trans.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 2223,
          "bound": null
        }
      ],
      "ret": "Some(state)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}