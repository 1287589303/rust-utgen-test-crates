{
  "name": "regex_automata::util::wire::skip_initial_padding",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:340:1:346:2",
  "doc": "/// Reads a possibly empty amount of padding, up to 7 bytes, from the beginning\n/// of the given slice. All padding bytes must be NUL bytes.\n///\n/// This is useful because it can be theoretically necessary to pad the\n/// beginning of a serialized object with NUL bytes to ensure that it starts\n/// at a correctly aligned address. These padding bytes should come immediately\n/// before the label.\n///\n/// This returns the number of bytes read from the given slice.\n",
  "code": [
    "pub(crate) fn skip_initial_padding(slice: &[u8]) -> usize {",
    "    let mut nread = 0;",
    "    while nread < 7 && nread < slice.len() && slice[nread] == 0 {",
    "        nread += 1;",
    "    }",
    "    nread",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "nread < 7",
          "norm": "7 > nread",
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "nread < slice.len()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "slice[nread] == 0",
          "norm": "0 == slice[nread]",
          "value": "false",
          "line": 342,
          "bound": null
        },
        {
          "cond": "nread < 7",
          "norm": "7 > nread",
          "value": "false",
          "line": 342,
          "bound": "nread == 7"
        }
      ],
      "ret": "nread",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        1,
        2,
        11,
        12
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "nread < 7",
          "norm": "7 > nread",
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "nread < slice.len()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "slice[nread] == 0",
          "norm": "0 == slice[nread]",
          "value": "true",
          "line": 342,
          "bound": null
        }
      ],
      "ret": "nread",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "nread < 7",
          "norm": "7 > nread",
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "nread < slice.len()",
          "norm": null,
          "value": "false",
          "line": 342,
          "bound": "nread == slice.len()"
        }
      ],
      "ret": "nread",
      "path": [
        0,
        1,
        2,
        3,
        4,
        10,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "nread < 7",
          "norm": "7 > nread",
          "value": "false",
          "line": 342,
          "bound": "nread == 7"
        }
      ],
      "ret": "nread",
      "path": [
        0,
        1,
        2,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}