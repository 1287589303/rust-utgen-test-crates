{
  "name": "regex_automata::util::captures::{impl#0}::group_info",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:674:5:676:6",
  "doc": "/// Returns a reference to the underlying group info on which these\n/// captures are based.\n///\n/// The difference between `GroupInfo` and `Captures` is that the former\n/// defines the structure of capturing groups where as the latter is what\n/// stores the actual match information. So where as `Captures` only gives\n/// you access to the current match, `GroupInfo` lets you query any\n/// information about all capturing groups, even ones for patterns that\n/// weren't involved in a match.\n///\n/// Note that a `GroupInfo` uses reference counting internally, so it may\n/// be cloned cheaply.\n///\n/// # Example\n///\n/// This example shows how to get all capturing group names from the\n/// underlying `GroupInfo`. Notice that we don't even need to run a\n/// search.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, PatternID};\n///\n/// let re = PikeVM::new_many(&[\n///     r\"(?P<foo>a)\",\n///     r\"(a)(b)\",\n///     r\"ab\",\n///     r\"(?P<bar>a)(?P<quux>a)\",\n///     r\"(?P<foo>z)\",\n/// ])?;\n/// let caps = re.create_captures();\n///\n/// let expected = vec![\n///     (PatternID::must(0), 0, None),\n///     (PatternID::must(0), 1, Some(\"foo\")),\n///     (PatternID::must(1), 0, None),\n///     (PatternID::must(1), 1, None),\n///     (PatternID::must(1), 2, None),\n///     (PatternID::must(2), 0, None),\n///     (PatternID::must(3), 0, None),\n///     (PatternID::must(3), 1, Some(\"bar\")),\n///     (PatternID::must(3), 2, Some(\"quux\")),\n///     (PatternID::must(4), 0, None),\n///     (PatternID::must(4), 1, Some(\"foo\")),\n/// ];\n/// // We could also just use 're.get_nfa().group_info()'.\n/// let got: Vec<(PatternID, usize, Option<&str>)> =\n///     caps.group_info().all_names().collect();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn group_info(&self) -> &GroupInfo {",
    "    &self.group_info",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.group_info",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}