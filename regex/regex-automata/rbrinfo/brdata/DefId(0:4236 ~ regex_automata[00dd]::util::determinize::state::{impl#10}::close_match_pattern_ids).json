{
  "name": "regex_automata::util::determinize::state::{impl#10}::close_match_pattern_ids",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:701:5:715:6",
  "doc": "/// Indicate that no more pattern IDs will be added to this state.\n///\n/// Once this is called, callers must not call it or 'add_match_pattern_id'\n/// again.\n///\n/// This should not be exposed explicitly outside of this module. It\n/// should be called only when converting a StateBuilderMatches into a\n/// StateBuilderNFA.\n",
  "code": [
    "fn close_match_pattern_ids(&mut self) {",
    "    // If we never wrote any pattern IDs, then there's nothing to do here.",
    "    if !self.repr().has_pattern_ids() {",
    "        return;",
    "    }",
    "    let patsize = PatternID::SIZE;",
    "    let pattern_bytes = self.0.len() - 13;",
    "    // Every pattern ID uses 4 bytes, so number of bytes should be",
    "    // divisible by 4.",
    "    assert_eq!(pattern_bytes % patsize, 0);",
    "    // This unwrap is OK since we are guaranteed that the maximum number",
    "    // of possible patterns fits into a u32.",
    "    let count32 = u32::try_from(pattern_bytes / patsize).unwrap();",
    "    wire::NE::write_u32(count32, &mut self.0[9..13]);",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.repr().has_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 703,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.repr().has_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 703,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        9,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.repr().has_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 703,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}