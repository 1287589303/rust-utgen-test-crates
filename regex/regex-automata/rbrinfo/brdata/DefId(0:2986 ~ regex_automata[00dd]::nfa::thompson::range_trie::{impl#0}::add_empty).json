{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::add_empty",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:428:5:448:6",
  "doc": "",
  "code": [
    "pub fn add_empty(&mut self) -> StateID {",
    "    let id = match StateID::try_from(self.states.len()) {",
    "        Ok(id) => id,",
    "        Err(_) => {",
    "            // This generally should not happen since a range trie is",
    "            // only ever used to compile a single sequence of Unicode",
    "            // scalar values. If we ever got to this point, we would, at",
    "            // *minimum*, be using 96GB in just the range trie alone.",
    "            panic!(\"too many sequences added to range trie\");",
    "        }",
    "    };",
    "    // If we have some free states available, then use them to avoid",
    "    // more allocations.",
    "    if let Some(mut state) = self.free.pop() {",
    "        state.clear();",
    "        self.states.push(state);",
    "    } else {",
    "        self.states.push(State { transitions: vec![] });",
    "    }",
    "    id",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "StateID::try_from(self.states.len()) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 429,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        7,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "StateID::try_from(self.states.len()) matches Ok(id)",
          "norm": null,
          "value": "true",
          "line": 429,
          "bound": null
        },
        {
          "cond": "StateID::try_from(self.states.len()) matches Ok(id)",
          "norm": null,
          "value": "true",
          "line": 429,
          "bound": null
        },
        {
          "cond": "let Some(mut state) = self.free.pop()",
          "norm": null,
          "value": "true",
          "line": 441,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        13,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "StateID::try_from(self.states.len()) matches Ok(id)",
          "norm": null,
          "value": "true",
          "line": 429,
          "bound": null
        },
        {
          "cond": "StateID::try_from(self.states.len()) matches Ok(id)",
          "norm": null,
          "value": "true",
          "line": 429,
          "bound": null
        },
        {
          "cond": "let Some(mut state) = self.free.pop()",
          "norm": null,
          "value": "true",
          "line": 441,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        10,
        11,
        12,
        14,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}