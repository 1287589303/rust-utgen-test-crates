{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#2}::push",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:658:5:670:6",
  "doc": "/// Push a new empty state to visit along with any remaining ranges that\n/// still need to be inserted. The ID of the new empty state is returned.\n///\n/// If ranges is empty, then no new state is created and FINAL is returned.\n",
  "code": [
    "fn push(",
    "    trie: &mut RangeTrie,",
    "    stack: &mut Vec<NextInsert>,",
    "    ranges: &[Utf8Range],",
    ") -> StateID {",
    "    if ranges.is_empty() {",
    "        FINAL",
    "    } else {",
    "        let next_id = trie.add_empty();",
    "        stack.push(NextInsert::new(next_id, ranges));",
    "        next_id",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 663,
          "bound": null
        }
      ],
      "ret": "FINAL",
      "path": [
        0,
        1,
        2,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 663,
          "bound": null
        }
      ],
      "ret": "next_id",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}