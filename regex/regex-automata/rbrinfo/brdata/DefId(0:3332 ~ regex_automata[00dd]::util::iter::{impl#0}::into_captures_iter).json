{
  "name": "regex_automata::util::iter::{impl#0}::into_captures_iter",
  "mod_info": {
    "name": "util::iter",
    "loc": "regex-automata/src/util/mod.rs:36:1:36:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/iter.rs:607:5:616:6",
  "doc": "/// Given a closure that executes a single search, return an iterator over\n/// all successive non-overlapping `Captures` values.\n///\n/// The iterator returned yields result values. If the underlying regex\n/// engine is configured to never return an error, consider calling\n/// [`TryCapturesIter::infallible`] to convert errors into panics.\n///\n/// Unlike the other iterator constructors, this accepts an initial\n/// `Captures` value. This `Captures` value is reused for each search, and\n/// the iterator implementation clones it before returning it. The caller\n/// must provide this value because the iterator is purposely ignorant\n/// of the underlying regex engine and thus doesn't know how to create\n/// one itself. More to the point, a `Captures` value itself has a few\n/// different constructors, which change which kind of information is\n/// available to query in exchange for search performance.\n///\n/// # Example\n///\n/// This example shows how to use a `Searcher` to create a proper iterator\n/// over `Captures` values, which provides access to all capturing group\n/// spans for each match.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::iter::Searcher,\n///     Input,\n/// };\n///\n/// let re = PikeVM::new(\n///     r\"(?P<y>[0-9]{4})-(?P<m>[0-9]{2})-(?P<d>[0-9]{2})\",\n/// )?;\n/// let (mut cache, caps) = (re.create_cache(), re.create_captures());\n///\n/// let haystack = \"2010-03-14 2016-10-08 2020-10-22\";\n/// let input = Input::new(haystack);\n/// let mut it = Searcher::new(input)\n///     .into_captures_iter(caps, |input, caps| {\n///         re.search(&mut cache, input, caps);\n///         Ok(())\n///     });\n///\n/// let got = it.next().expect(\"first date\")?;\n/// let year = got.get_group_by_name(\"y\").expect(\"must match\");\n/// assert_eq!(\"2010\", &haystack[year]);\n///\n/// let got = it.next().expect(\"second date\")?;\n/// let month = got.get_group_by_name(\"m\").expect(\"must match\");\n/// assert_eq!(\"10\", &haystack[month]);\n///\n/// let got = it.next().expect(\"third date\")?;\n/// let day = got.get_group_by_name(\"d\").expect(\"must match\");\n/// assert_eq!(\"22\", &haystack[day]);\n///\n/// assert!(it.next().is_none());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn into_captures_iter<F>(",
    "    self,",
    "    caps: Captures,",
    "    finder: F,",
    ") -> TryCapturesIter<'h, F>",
    "where",
    "    F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,",
    "{",
    "    TryCapturesIter { it: self, caps, finder }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "TryCapturesIter { it: self, caps, finder }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}