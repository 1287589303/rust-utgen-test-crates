{
  "name": "regex_automata::meta::regex::{impl#20}::byte_classes",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2938:5:2940:6",
  "doc": "/// Whether to attempt to shrink the size of the alphabet for the regex\n/// pattern or not. When enabled, the alphabet is shrunk into a set of\n/// equivalence classes, where every byte in the same equivalence class\n/// cannot discriminate between a match or non-match.\n///\n/// **WARNING:** This is only useful for debugging DFAs. Disabling this\n/// does not yield any speed advantages. Indeed, disabling it can result\n/// in much higher memory usage. Disabling byte classes is useful for\n/// debugging the actual generated transitions because it lets one see the\n/// transitions defined on actual bytes instead of the equivalence classes.\n///\n/// This option is enabled by default and should never be disabled unless\n/// one is debugging the meta regex engine's internals.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Match};\n///\n/// let re = Regex::builder()\n///     .configure(Regex::config().byte_classes(false))\n///     .build(r\"[a-z]+\")?;\n/// let hay = \"!!quux!!\";\n/// assert_eq!(Some(Match::must(0, 2..6)), re.find(hay));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn byte_classes(self, yes: bool) -> Config {",
    "    Config { byte_classes: Some(yes), ..self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { byte_classes: Some(yes), ..self }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}