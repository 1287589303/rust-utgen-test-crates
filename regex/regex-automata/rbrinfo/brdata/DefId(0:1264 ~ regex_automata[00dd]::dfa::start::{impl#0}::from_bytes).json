{
  "name": "regex_automata::dfa::start::{impl#0}::from_bytes",
  "mod_info": {
    "name": "dfa::start",
    "loc": "regex-automata/src/dfa/mod.rs:360:1:360:11"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/start.rs:31:5:42:6",
  "doc": "",
  "code": [
    "pub(crate) fn from_bytes(",
    "    slice: &[u8],",
    ") -> Result<(StartKind, usize), DeserializeError> {",
    "    wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?;",
    "    let (n, nr) = wire::try_read_u32(slice, \"start kind integer\")?;",
    "    match n {",
    "        0 => Ok((StartKind::Both, nr)),",
    "        1 => Ok((StartKind::Unanchored, nr)),",
    "        2 => Ok((StartKind::Anchored, nr)),",
    "        _ => Err(DeserializeError::generic(\"unrecognized start kind\")),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?",
          "norm": null,
          "value": "Err/None",
          "line": 34,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 34,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"start kind integer\")?",
          "norm": null,
          "value": "Err/None",
          "line": 35,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        12,
        14,
        15,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 34,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"start kind integer\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 35,
          "bound": null
        },
        {
          "cond": "n matches 0",
          "norm": null,
          "value": "true",
          "line": 37,
          "bound": null
        },
        {
          "cond": "n matches 2",
          "norm": null,
          "value": "true",
          "line": 39,
          "bound": null
        },
        {
          "cond": "n matches 1",
          "norm": null,
          "value": "true",
          "line": 38,
          "bound": null
        },
        {
          "cond": "n matches _",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\"unrecognized start kind\"))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        13,
        16,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 34,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"start kind integer\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 35,
          "bound": null
        },
        {
          "cond": "n matches 2",
          "norm": null,
          "value": "true",
          "line": 39,
          "bound": null
        },
        {
          "cond": "n matches 2",
          "norm": null,
          "value": "true",
          "line": 36,
          "bound": null
        }
      ],
      "ret": "Ok((StartKind::Anchored, nr))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        13,
        19,
        22,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 34,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"start kind integer\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 35,
          "bound": null
        },
        {
          "cond": "n matches 1",
          "norm": null,
          "value": "true",
          "line": 38,
          "bound": null
        },
        {
          "cond": "n matches 1",
          "norm": null,
          "value": "true",
          "line": 36,
          "bound": null
        }
      ],
      "ret": "Ok((StartKind::Unanchored, nr))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        13,
        18,
        21,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 34,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"start kind integer\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 35,
          "bound": null
        },
        {
          "cond": "n matches 0",
          "norm": null,
          "value": "true",
          "line": 37,
          "bound": null
        },
        {
          "cond": "n matches 0",
          "norm": null,
          "value": "true",
          "line": 36,
          "bound": null
        }
      ],
      "ret": "Ok((StartKind::Both, nr))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        13,
        17,
        20,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}