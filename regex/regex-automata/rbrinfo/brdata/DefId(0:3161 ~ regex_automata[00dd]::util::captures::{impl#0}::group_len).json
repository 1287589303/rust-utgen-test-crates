{
  "name": "regex_automata::util::captures::{impl#0}::group_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:615:5:621:6",
  "doc": "/// Return the total number of capturing groups for the matching pattern.\n///\n/// If this `Captures` value does not correspond to a match, then this\n/// always returns `0`.\n///\n/// This always returns the same number of elements yielded by\n/// [`Captures::iter`]. That is, the number includes capturing groups even\n/// if they don't participate in the match.\n///\n/// # Example\n///\n/// This example shows how to count the total number of capturing groups\n/// associated with a pattern. Notice that it includes groups that did not\n/// participate in a match (just like `Captures::iter` does).\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::pikevm::PikeVM;\n///\n/// let re = PikeVM::new(\n///     // Matches first/last names, with an optional middle name.\n///     r\"^(?P<first>\\pL+)\\s+(?:(?P<middle>\\pL+)\\s+)?(?P<last>\\pL+)$\",\n/// )?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"Harry Potter\", &mut caps);\n/// assert_eq!(4, caps.group_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn group_len(&self) -> usize {",
    "    let pid = match self.pattern() {",
    "        None => return 0,",
    "        Some(pid) => pid,",
    "    };",
    "    self.group_info().group_len(pid)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pattern() matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pattern() matches None",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.pattern() matches None",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        1,
        3,
        5,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}