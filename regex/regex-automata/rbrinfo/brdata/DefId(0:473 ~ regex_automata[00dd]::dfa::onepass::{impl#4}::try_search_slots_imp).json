{
  "name": "regex_automata::dfa::onepass::{impl#4}::try_search_slots_imp",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2003:5:2036:6",
  "doc": "",
  "code": [
    "fn try_search_slots_imp(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    slots: &mut [Option<NonMaxUsize>],",
    ") -> Result<Option<PatternID>, MatchError> {",
    "    let utf8empty = self.get_nfa().has_empty() && self.get_nfa().is_utf8();",
    "    match self.search_imp(cache, input, slots)? {",
    "        None => return Ok(None),",
    "        Some(pid) if !utf8empty => return Ok(Some(pid)),",
    "        Some(pid) => {",
    "            // These slot indices are always correct because we know our",
    "            // 'pid' is valid and thus we know that the slot indices for it",
    "            // are valid.",
    "            let slot_start = pid.as_usize().wrapping_mul(2);",
    "            let slot_end = slot_start.wrapping_add(1);",
    "            // OK because we know we have a match and we know our caller",
    "            // provided slots are big enough (which we make true above if",
    "            // the caller didn't). Namely, we're only here when 'utf8empty'",
    "            // is true, and when that's true, we require slots for every",
    "            // pattern.",
    "            let start = slots[slot_start].unwrap().get();",
    "            let end = slots[slot_end].unwrap().get();",
    "            // If our match splits a codepoint, then we cannot report is",
    "            // as a match. And since one-pass DFAs only support anchored",
    "            // searches, we don't try to skip ahead to find the next match.",
    "            // We can just quit with nothing.",
    "            if start == end && !input.is_char_boundary(start) {",
    "                return Ok(None);",
    "            }",
    "            Ok(Some(pid))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        11,
        13,
        14,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "start == end",
          "norm": "end == start",
          "value": "true",
          "line": 2030,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(start)",
          "norm": null,
          "value": "true",
          "line": 2030,
          "bound": null
        }
      ],
      "ret": "Ok(Some(pid))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        12,
        17,
        20,
        21,
        18,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "start == end",
          "norm": "end == start",
          "value": "true",
          "line": 2030,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(start)",
          "norm": null,
          "value": "false",
          "line": 2030,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        12,
        17,
        20,
        21,
        18,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "start == end",
          "norm": "end == start",
          "value": "false",
          "line": 2030,
          "bound": null
        }
      ],
      "ret": "Ok(Some(pid))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        12,
        17,
        20,
        21,
        18,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 2012,
          "bound": null
        }
      ],
      "ret": "Ok(Some(pid))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        12,
        17,
        20,
        22,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        12,
        16,
        19,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        11,
        13,
        14,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "start == end",
          "norm": "end == start",
          "value": "true",
          "line": 2030,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(start)",
          "norm": null,
          "value": "true",
          "line": 2030,
          "bound": null
        }
      ],
      "ret": "Ok(Some(pid))",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        12,
        17,
        20,
        21,
        18,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "start == end",
          "norm": "end == start",
          "value": "true",
          "line": 2030,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(start)",
          "norm": null,
          "value": "false",
          "line": 2030,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        12,
        17,
        20,
        21,
        18,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 2012,
          "bound": null
        },
        {
          "cond": "start == end",
          "norm": "end == start",
          "value": "false",
          "line": 2030,
          "bound": null
        }
      ],
      "ret": "Ok(Some(pid))",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        12,
        17,
        20,
        21,
        18,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid) or Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 2012,
          "bound": null
        }
      ],
      "ret": "Ok(Some(pid))",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        12,
        17,
        20,
        22,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 2010,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        12,
        16,
        19,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}