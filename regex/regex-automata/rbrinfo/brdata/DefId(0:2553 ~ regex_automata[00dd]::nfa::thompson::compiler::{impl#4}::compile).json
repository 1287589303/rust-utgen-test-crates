{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::compile",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:939:5:994:6",
  "doc": "/// Compile the sequence of HIR expressions given. Pattern IDs are\n/// allocated starting from 0, in correspondence with the slice given.\n///\n/// It is legal to provide an empty slice. In that case, the NFA returned\n/// has no patterns and will never match anything.\n",
  "code": [
    "fn compile<H: Borrow<Hir>>(&self, exprs: &[H]) -> Result<NFA, BuildError> {",
    "    if exprs.len() > PatternID::LIMIT {",
    "        return Err(BuildError::too_many_patterns(exprs.len()));",
    "    }",
    "    if self.config.get_reverse()",
    "        && self.config.get_which_captures().is_any()",
    "    {",
    "        return Err(BuildError::unsupported_captures());",
    "    }",
    "",
    "    self.builder.borrow_mut().clear();",
    "    self.builder.borrow_mut().set_utf8(self.config.get_utf8());",
    "    self.builder.borrow_mut().set_reverse(self.config.get_reverse());",
    "    self.builder",
    "        .borrow_mut()",
    "        .set_look_matcher(self.config.get_look_matcher());",
    "    self.builder",
    "        .borrow_mut()",
    "        .set_size_limit(self.config.get_nfa_size_limit())?;",
    "",
    "    // We always add an unanchored prefix unless we were specifically told",
    "    // not to (for tests only), or if we know that the regex is anchored",
    "    // for all matches. When an unanchored prefix is not added, then the",
    "    // NFA's anchored and unanchored start states are equivalent.",
    "    let all_anchored = exprs.iter().all(|e| {",
    "        let props = e.borrow().properties();",
    "        if self.config.get_reverse() {",
    "            props.look_set_suffix().contains(hir::Look::End)",
    "        } else {",
    "            props.look_set_prefix().contains(hir::Look::Start)",
    "        }",
    "    });",
    "    let anchored = !self.config.get_unanchored_prefix() || all_anchored;",
    "    let unanchored_prefix = if anchored {",
    "        self.c_empty()?",
    "    } else {",
    "        self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
    "    };",
    "",
    "    let compiled = self.c_alt_iter(exprs.iter().map(|e| {",
    "        let _ = self.start_pattern()?;",
    "        let one = self.c_cap(0, None, e.borrow())?;",
    "        let match_state_id = self.add_match()?;",
    "        self.patch(one.end, match_state_id)?;",
    "        let _ = self.finish_pattern(one.start)?;",
    "        Ok(ThompsonRef { start: one.start, end: match_state_id })",
    "    }))?;",
    "    self.patch(unanchored_prefix.end, compiled.start)?;",
    "    let nfa = self",
    "        .builder",
    "        .borrow_mut()",
    "        .build(compiled.start, unanchored_prefix.start)?;",
    "",
    "    debug!(\"HIR-to-NFA compilation complete, config: {:?}\", self.config);",
    "    Ok(nfa)",
    "}"
  ],
  "size": {
    "chain": 44,
    "contra": 0,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "true",
          "line": 940,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::too_many_patterns(exprs.len()))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "true",
          "line": 944,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::unsupported_captures())",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Err/None",
          "line": 955,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        122,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 973,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Err/None",
          "line": 975,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        68,
        70,
        71,
        115,
        116,
        117,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 973,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Err/None",
          "line": 975,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        68,
        70,
        71,
        115,
        116,
        117,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "true",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.config.get_which_captures().is_any()",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Err/None",
          "line": 955,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        122,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 973,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Err/None",
          "line": 975,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        68,
        70,
        71,
        115,
        116,
        117,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 973,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        54,
        55,
        56,
        59,
        62,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Err/None",
          "line": 975,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        68,
        70,
        71,
        115,
        116,
        117,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Err/None",
          "line": 978,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        112,
        113,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 986,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        88,
        90,
        91,
        110,
        111,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 987,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        98,
        100,
        101,
        107,
        108,
        109,
        114,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "exprs.len() > PatternID::LIMIT",
          "norm": "PatternID::LIMIT < exprs.len()",
          "value": "false",
          "line": 940,
          "bound": "exprs.len() == PatternID::LIMIT"
        },
        {
          "cond": "self.config.get_reverse()",
          "norm": null,
          "value": "false",
          "line": 943,
          "bound": null
        },
        {
          "cond": "self.builder\n            .borrow_mut()\n            .set_size_limit(self.config.get_nfa_size_limit())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.config.get_unanchored_prefix()",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 975,
          "bound": null
        },
        {
          "cond": "self.c_alt_iter(exprs.iter().map(|e| {\n            let _ = self.start_pattern()?;\n            let one = self.c_cap(0, None, e.borrow())?;\n            let match_state_id = self.add_match()?;\n            self.patch(one.end, match_state_id)?;\n            let _ = self.finish_pattern(one.start)?;\n            Ok(ThompsonRef { start: one.start, end: match_state_id })\n        }))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 978,
          "bound": null
        },
        {
          "cond": "self.patch(unanchored_prefix.end, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 986,
          "bound": null
        },
        {
          "cond": "self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 987,
          "bound": null
        }
      ],
      "ret": "Ok(nfa)",
      "path": [
        0,
        1,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        53,
        63,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        99,
        102,
        103,
        104,
        105,
        106,
        125
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}