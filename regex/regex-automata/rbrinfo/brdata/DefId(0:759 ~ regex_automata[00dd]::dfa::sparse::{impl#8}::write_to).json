{
  "name": "regex_automata::dfa::sparse::{impl#8}::write_to",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1333:5:1371:6",
  "doc": "/// Writes a serialized form of this transition table to the buffer given.\n/// If the buffer is too small, then an error is returned. To determine\n/// how big the buffer must be, use `write_to_len`.\n",
  "code": [
    "fn write_to<E: Endian>(",
    "    &self,",
    "    mut dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    let nwrite = self.write_to_len();",
    "    if dst.len() < nwrite {",
    "        return Err(SerializeError::buffer_too_small(",
    "            \"sparse transition table\",",
    "        ));",
    "    }",
    "    dst = &mut dst[..nwrite];",
    "",
    "    // write state length",
    "    E::write_u32(u32::try_from(self.state_len).unwrap(), dst);",
    "    dst = &mut dst[size_of::<u32>()..];",
    "",
    "    // write pattern length",
    "    E::write_u32(u32::try_from(self.pattern_len).unwrap(), dst);",
    "    dst = &mut dst[size_of::<u32>()..];",
    "",
    "    // write byte class map",
    "    let n = self.classes.write_to(dst)?;",
    "    dst = &mut dst[n..];",
    "",
    "    // write number of bytes in sparse transitions",
    "    E::write_u32(u32::try_from(self.sparse().len()).unwrap(), dst);",
    "    dst = &mut dst[size_of::<u32>()..];",
    "",
    "    // write actual transitions",
    "    let mut id = DEAD;",
    "    while id.as_usize() < self.sparse().len() {",
    "        let state = self.state(id);",
    "        let n = state.write_to::<E>(&mut dst)?;",
    "        dst = &mut dst[n..];",
    "        // The next ID is the offset immediately following `state`.",
    "        id = StateID::new(id.as_usize() + state.write_to_len()).unwrap();",
    "    }",
    "    Ok(nwrite)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "true",
          "line": 1338,
          "bound": null
        }
      ],
      "ret": "Err(SerializeError::buffer_too_small(\n                \"sparse transition table\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 1338,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "self.classes.write_to(dst)?",
          "norm": null,
          "value": "Err/None",
          "line": 1354,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 1338,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "self.classes.write_to(dst)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1354,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "state.write_to::<E>(&mut dst)?",
          "norm": null,
          "value": "Err/None",
          "line": 1365,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 1338,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "self.classes.write_to(dst)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1354,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "state.write_to::<E>(&mut dst)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1365,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1363,
          "bound": "id.as_usize() == self.sparse().len()"
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        51,
        32,
        33,
        34,
        35,
        36,
        52,
        55
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 1338,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "self.classes.write_to(dst)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1354,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1363,
          "bound": "id.as_usize() == self.sparse().len()"
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        52,
        55
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}