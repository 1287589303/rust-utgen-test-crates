{
  "name": "regex_automata::util::captures::{impl#0}::all",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:215:5:218:6",
  "doc": "/// Create new storage for the offsets of all matching capturing groups.\n///\n/// This routine provides the most information for matches---namely, the\n/// spans of matching capturing groups---but also requires the regex search\n/// routines to do the most work.\n///\n/// It is unspecified behavior to use the returned `Captures` value in a\n/// search with a `GroupInfo` other than the one that is provided to this\n/// constructor.\n///\n/// # Example\n///\n/// This example shows that all capturing groups---but only ones that\n/// participated in a match---are available to query after a match has\n/// been found:\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::captures::Captures,\n///     Span, Match,\n/// };\n///\n/// let re = PikeVM::new(\n///     r\"^(?:(?P<lower>[a-z]+)|(?P<upper>[A-Z]+))(?P<digits>[0-9]+)$\",\n/// )?;\n/// let mut cache = re.create_cache();\n/// let mut caps = Captures::all(re.get_nfa().group_info().clone());\n///\n/// re.captures(&mut cache, \"ABC123\", &mut caps);\n/// assert!(caps.is_match());\n/// assert_eq!(Some(Match::must(0, 0..6)), caps.get_match());\n/// // The 'lower' group didn't match, so it won't have any offsets.\n/// assert_eq!(None, caps.get_group_by_name(\"lower\"));\n/// assert_eq!(Some(Span::from(0..3)), caps.get_group_by_name(\"upper\"));\n/// assert_eq!(Some(Span::from(3..6)), caps.get_group_by_name(\"digits\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn all(group_info: GroupInfo) -> Captures {",
    "    let slots = group_info.slot_len();",
    "    Captures { group_info, pid: None, slots: vec![None; slots] }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Captures { group_info, pid: None, slots: vec![None; slots] }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}