{
  "name": "regex_automata::dfa::sparse::{impl#12}::validate",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2017:5:2035:6",
  "doc": "/// Validates that every starting state ID in this table is valid.\n///\n/// That is, every starting state ID can be used to correctly decode a\n/// state in the DFA's sparse transitions.\n",
  "code": [
    "fn validate(",
    "    &self,",
    "    sp: &Special,",
    "    seen: &Seen,",
    ") -> Result<(), DeserializeError> {",
    "    for (id, _, _) in self.iter() {",
    "        if !seen.contains(&id) {",
    "            return Err(DeserializeError::generic(",
    "                \"found invalid start state ID\",",
    "            ));",
    "        }",
    "        if sp.is_match_state(id) {",
    "            return Err(DeserializeError::generic(",
    "                \"start states cannot be match states\",",
    "            ));",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(id, _, _) in self.iter()",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "seen.contains(&id)",
          "norm": null,
          "value": "true",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 2028,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                    \"start states cannot be match states\",\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        15,
        16,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(id, _, _) in self.iter()",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "seen.contains(&id)",
          "norm": null,
          "value": "true",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "(id, _, _) in self.iter()",
          "norm": null,
          "value": "false",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        17,
        3,
        4,
        5,
        7,
        9,
        19
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(id, _, _) in self.iter()",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "seen.contains(&id)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                    \"found invalid start state ID\",\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        12,
        13,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(id, _, _) in self.iter()",
          "norm": null,
          "value": "false",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}