{
  "name": "regex_automata::util::wire::try_read_u16_as_usize",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:679:1:688:2",
  "doc": "/// Try to read a u16 as a usize from the beginning of the given slice in\n/// native endian format. If the slice has fewer than 2 bytes or if the\n/// deserialized number cannot be represented by usize, then this returns an\n/// error. The error message will include the `what` description of what is\n/// being deserialized, for better error messages. `what` should be a noun in\n/// singular form.\n///\n/// Upon success, this also returns the number of bytes read.\n",
  "code": [
    "pub(crate) fn try_read_u16_as_usize(",
    "    slice: &[u8],",
    "    what: &'static str,",
    ") -> Result<(usize, usize), DeserializeError> {",
    "    try_read_u16(slice, what).and_then(|(n, nr)| {",
    "        usize::try_from(n)",
    "            .map(|n| (n, nr))",
    "            .map_err(|_| DeserializeError::invalid_usize(what))",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}