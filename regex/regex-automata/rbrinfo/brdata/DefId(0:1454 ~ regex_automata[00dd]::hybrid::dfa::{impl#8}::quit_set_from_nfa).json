{
  "name": "regex_automata::hybrid::dfa::{impl#8}::quit_set_from_nfa",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:3849:5:3873:6",
  "doc": "/// Return the quit set for this configuration and the given NFA.\n///\n/// This may return an error if the NFA is incompatible with this\n/// configuration's quit set. For example, if the NFA has a Unicode word\n/// boundary and the quit set doesn't include non-ASCII bytes.\n",
  "code": [
    "fn quit_set_from_nfa(",
    "    &self,",
    "    nfa: &thompson::NFA,",
    ") -> Result<ByteSet, BuildError> {",
    "    let mut quit = self.quitset.unwrap_or(ByteSet::empty());",
    "    if nfa.look_set_any().contains_word_unicode() {",
    "        if self.get_unicode_word_boundary() {",
    "            for b in 0x80..=0xFF {",
    "                quit.add(b);",
    "            }",
    "        } else {",
    "            // If heuristic support for Unicode word boundaries wasn't",
    "            // enabled, then we can still check if our quit set is correct.",
    "            // If the caller set their quit bytes in a way that causes the",
    "            // DFA to quit on at least all non-ASCII bytes, then that's all",
    "            // we need for heuristic support to work.",
    "            if !quit.contains_range(0x80, 0xFF) {",
    "                return Err(",
    "                    BuildError::unsupported_dfa_word_boundary_unicode(),",
    "                );",
    "            }",
    "        }",
    "    }",
    "    Ok(quit)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 3854,
          "bound": null
        },
        {
          "cond": "self.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 3855,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "true",
          "line": 3856,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 3856,
          "bound": null
        }
      ],
      "ret": "Ok(quit)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        10,
        11,
        12,
        14,
        16,
        24,
        26,
        27
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 3854,
          "bound": null
        },
        {
          "cond": "self.get_unicode_word_boundary()",
          "norm": null,
          "value": "true",
          "line": 3855,
          "bound": null
        },
        {
          "cond": "b in 0x80..=0xFF",
          "norm": null,
          "value": "false",
          "line": 3856,
          "bound": null
        }
      ],
      "ret": "Ok(quit)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        24,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 3854,
          "bound": null
        },
        {
          "cond": "self.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 3855,
          "bound": null
        },
        {
          "cond": "quit.contains_range(0x80, 0xFF)",
          "norm": null,
          "value": "true",
          "line": 3865,
          "bound": null
        }
      ],
      "ret": "Ok(quit)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        19,
        20,
        24,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 3854,
          "bound": null
        },
        {
          "cond": "self.get_unicode_word_boundary()",
          "norm": null,
          "value": "false",
          "line": 3855,
          "bound": null
        },
        {
          "cond": "quit.contains_range(0x80, 0xFF)",
          "norm": null,
          "value": "false",
          "line": 3865,
          "bound": null
        }
      ],
      "ret": "Err(\n                        BuildError::unsupported_dfa_word_boundary_unicode(),\n                    )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        19,
        21,
        22,
        23,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "nfa.look_set_any().contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 3854,
          "bound": null
        }
      ],
      "ret": "Ok(quit)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}