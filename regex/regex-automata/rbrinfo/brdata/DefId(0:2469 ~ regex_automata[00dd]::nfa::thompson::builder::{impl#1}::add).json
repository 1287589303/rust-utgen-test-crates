{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1114:5:1121:6",
  "doc": "/// The common implementation of \"add a state.\" It handles the common\n/// error cases of state ID exhausting (by owning state ID allocation) and\n/// whether the size limit has been exceeded.\n",
  "code": [
    "fn add(&mut self, state: State) -> Result<StateID, BuildError> {",
    "    let id = StateID::new(self.states.len())",
    "        .map_err(|_| BuildError::too_many_states(self.states.len()))?;",
    "    self.memory_states += state.memory_usage();",
    "    self.states.push(state);",
    "    self.check_size_limit()?;",
    "    Ok(id)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "StateID::new(self.states.len())\n            .map_err(|_| BuildError::too_many_states(self.states.len()))?",
          "norm": null,
          "value": "Err/None",
          "line": 1115,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "StateID::new(self.states.len())\n            .map_err(|_| BuildError::too_many_states(self.states.len()))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1115,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 1119,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        19,
        20,
        22,
        23,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "StateID::new(self.states.len())\n            .map_err(|_| BuildError::too_many_states(self.states.len()))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1115,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1119,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        21,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}