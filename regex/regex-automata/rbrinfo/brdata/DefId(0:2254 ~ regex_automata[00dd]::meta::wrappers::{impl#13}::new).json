{
  "name": "regex_automata::meta::wrappers::{impl#13}::new",
  "mod_info": {
    "name": "meta::wrappers",
    "loc": "regex-automata/src/meta/mod.rs:62:1:62:14"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/wrappers.rs:854:5:943:6",
  "doc": "",
  "code": [
    "pub(crate) fn new(",
    "    info: &RegexInfo,",
    "    pre: Option<Prefilter>,",
    "    nfa: &NFA,",
    "    nfarev: &NFA,",
    ") -> Option<DFAEngine> {",
    "    #[cfg(feature = \"dfa-build\")]",
    "    {",
    "        if !info.config().get_dfa() {",
    "            return None;",
    "        }",
    "        // If our NFA is anything but small, don't even bother with a DFA.",
    "        if let Some(state_limit) = info.config().get_dfa_state_limit() {",
    "            if nfa.states().len() > state_limit {",
    "                debug!(",
    "                    \"skipping full DFA because NFA has {} states, \\",
    "                     which exceeds the heuristic limit of {}\",",
    "                    nfa.states().len(),",
    "                    state_limit,",
    "                );",
    "                return None;",
    "            }",
    "        }",
    "        // We cut the size limit in four because the total heap used by",
    "        // DFA construction is determinization aux memory and the DFA",
    "        // itself, and those things are configured independently in the",
    "        // lower level DFA builder API. And then split that in two because",
    "        // of forward and reverse DFAs.",
    "        let size_limit = info.config().get_dfa_size_limit().map(|n| n / 4);",
    "        let dfa_config = dfa::dense::Config::new()",
    "            .match_kind(info.config().get_match_kind())",
    "            .prefilter(pre.clone())",
    "            // Enabling this is necessary for ensuring we can service any",
    "            // kind of 'Input' search without error. For the full DFA, this",
    "            // can be quite costly. But since we have such a small bound",
    "            // on the size of the DFA, in practice, any multl-regexes are",
    "            // probably going to blow the limit anyway.",
    "            .starts_for_each_pattern(true)",
    "            .byte_classes(info.config().get_byte_classes())",
    "            .unicode_word_boundary(true)",
    "            .specialize_start_states(pre.is_some())",
    "            .determinize_size_limit(size_limit)",
    "            .dfa_size_limit(size_limit);",
    "        let result = dfa::dense::Builder::new()",
    "            .configure(dfa_config.clone())",
    "            .build_from_nfa(&nfa);",
    "        let fwd = match result {",
    "            Ok(fwd) => fwd,",
    "            Err(_err) => {",
    "                debug!(\"forward full DFA failed to build: {}\", _err);",
    "                return None;",
    "            }",
    "        };",
    "        let result = dfa::dense::Builder::new()",
    "            .configure(",
    "                dfa_config",
    "                    .clone()",
    "                    // We never need unanchored reverse searches, so",
    "                    // there's no point in building it into the DFA, which",
    "                    // WILL take more space. (This isn't done for the lazy",
    "                    // DFA because the DFA is, well, lazy. It doesn't pay",
    "                    // the cost for supporting unanchored searches unless",
    "                    // you actually do an unanchored search, which we",
    "                    // don't.)",
    "                    .start_kind(dfa::StartKind::Anchored)",
    "                    .match_kind(MatchKind::All)",
    "                    .prefilter(None)",
    "                    .specialize_start_states(false),",
    "            )",
    "            .build_from_nfa(&nfarev);",
    "        let rev = match result {",
    "            Ok(rev) => rev,",
    "            Err(_err) => {",
    "                debug!(\"reverse full DFA failed to build: {}\", _err);",
    "                return None;",
    "            }",
    "        };",
    "        let engine = dfa::regex::Builder::new().build_from_dfas(fwd, rev);",
    "        debug!(",
    "            \"fully compiled forward and reverse DFAs built, {} bytes\",",
    "            engine.forward().memory_usage()",
    "                + engine.reverse().memory_usage(),",
    "        );",
    "        Some(DFAEngine(engine))",
    "    }",
    "    #[cfg(not(feature = \"dfa-build\"))]",
    "    {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 862,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        70,
        71,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 862,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        54,
        68,
        69,
        71,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 862,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        }
      ],
      "ret": "Some(DFAEngine(engine))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 862,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "nfa.states().len() > state_limit",
          "norm": null,
          "value": "true",
          "line": 867,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 862,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "nfa.states().len() > state_limit",
          "norm": null,
          "value": "false",
          "line": 867,
          "bound": "nfa.states().len() == state_limit"
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        70,
        71,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 862,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "nfa.states().len() > state_limit",
          "norm": null,
          "value": "false",
          "line": 867,
          "bound": "nfa.states().len() == state_limit"
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        54,
        68,
        69,
        71,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 862,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "nfa.states().len() > state_limit",
          "norm": null,
          "value": "false",
          "line": 867,
          "bound": "nfa.states().len() == state_limit"
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Ok(fwd)",
          "norm": null,
          "value": "true",
          "line": 900,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 924,
          "bound": null
        }
      ],
      "ret": "Some(DFAEngine(engine))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 862,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}