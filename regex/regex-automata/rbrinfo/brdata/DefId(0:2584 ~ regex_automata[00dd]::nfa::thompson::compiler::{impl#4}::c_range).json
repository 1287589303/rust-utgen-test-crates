{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::c_range",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1586:5:1589:6",
  "doc": "/// Compile a \"range\" state with one transition that may only be followed\n/// if the input byte is in the (inclusive) range given.\n///\n/// Both the `start` and `end` locations point to the state created.\n/// Callers will likely want to keep the `start`, but patch the `end` to\n/// point to some other state.\n",
  "code": [
    "fn c_range(&self, start: u8, end: u8) -> Result<ThompsonRef, BuildError> {",
    "    let id = self.add_range(start, end)?;",
    "    Ok(ThompsonRef { start: id, end: id })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.add_range(start, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 1587,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.add_range(start, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1587,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: id, end: id })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}