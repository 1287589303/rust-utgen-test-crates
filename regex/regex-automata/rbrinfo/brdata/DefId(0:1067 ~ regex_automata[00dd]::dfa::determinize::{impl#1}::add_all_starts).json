{
  "name": "regex_automata::dfa::determinize::{impl#1}::add_all_starts",
  "mod_info": {
    "name": "dfa::determinize",
    "loc": "regex-automata/src/dfa/mod.rs:350:1:350:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/determinize.rs:322:5:354:6",
  "doc": "/// Compute the set of DFA start states and add their identifiers in\n/// 'dfa_state_ids' (no duplicates are added).\n",
  "code": [
    "fn add_all_starts(",
    "    &mut self,",
    "    dfa_state_ids: &mut Vec<StateID>,",
    ") -> Result<(), BuildError> {",
    "    // These should be the first states added.",
    "    assert!(dfa_state_ids.is_empty());",
    "    // We only want to add (un)anchored starting states that is consistent",
    "    // with our DFA's configuration. Unconditionally adding both (although",
    "    // it is the default) can make DFAs quite a bit bigger.",
    "    if self.dfa.start_kind().has_unanchored() {",
    "        self.add_start_group(Anchored::No, dfa_state_ids)?;",
    "    }",
    "    if self.dfa.start_kind().has_anchored() {",
    "        self.add_start_group(Anchored::Yes, dfa_state_ids)?;",
    "    }",
    "    // I previously has an 'assert' here checking that either",
    "    // 'dfa_state_ids' was non-empty, or the NFA had zero patterns. But it",
    "    // turns out this isn't always true. For example, the NFA might have",
    "    // one or more patterns but where all such patterns are just 'fail'",
    "    // states. These will ultimately just compile down to DFA dead states,",
    "    // and since the dead state was added earlier, no new DFA states are",
    "    // added. And thus, it is valid and okay for 'dfa_state_ids' to be",
    "    // empty even if there are a non-zero number of patterns in the NFA.",
    "",
    "    // We only need to compute anchored start states for each pattern if it",
    "    // was requested to do so.",
    "    if self.dfa.starts_for_each_pattern() {",
    "        for pid in self.nfa.patterns() {",
    "            self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?;",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 20,
    "contra": 4,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Err/None",
          "line": 332,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        55,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Err/None",
          "line": 335,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        26,
        53,
        54,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Err/None",
          "line": 350,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        44,
        46,
        47,
        51,
        52,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 350,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        45,
        48,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        49,
        50,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Err/None",
          "line": 350,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        44,
        46,
        47,
        51,
        52,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 350,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        45,
        48,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::No, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 332,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        17,
        18,
        28,
        29,
        30,
        49,
        50,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Err/None",
          "line": 335,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        26,
        53,
        54,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Err/None",
          "line": 350,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        44,
        46,
        47,
        51,
        52,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 350,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        45,
        48,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "true",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Yes, dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 335,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        49,
        50,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Err/None",
          "line": 350,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        44,
        46,
        47,
        51,
        52,
        57
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 349,
          "bound": null
        },
        {
          "cond": "self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 350,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        39,
        41,
        42,
        45,
        48,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 349,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        38,
        40,
        50,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 327,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_unanchored()",
          "norm": null,
          "value": "false",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.dfa.start_kind().has_anchored()",
          "norm": null,
          "value": "false",
          "line": 334,
          "bound": null
        },
        {
          "cond": "self.dfa.starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        15,
        16,
        17,
        18,
        28,
        29,
        30,
        49,
        50,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "dfa_state_ids.is_empty()",
          "norm": null,
          "value": "false",
          "line": 327,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        70
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}