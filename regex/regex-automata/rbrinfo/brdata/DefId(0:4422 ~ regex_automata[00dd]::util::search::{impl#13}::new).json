{
  "name": "regex_automata::util::search::{impl#13}::new",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1017:5:1021:6",
  "doc": "/// Create a new match from a pattern ID and a span.\n///\n/// This constructor is generic over how a span is provided. While\n/// a [`Span`] may be given directly, one may also provide a\n/// `std::ops::Range<usize>`.\n///\n/// # Panics\n///\n/// This panics if `end < start`.\n///\n/// # Example\n///\n/// This shows how to create a match for the first pattern in a regex\n/// object using convenient range syntax.\n///\n/// ```\n/// use regex_automata::{Match, PatternID};\n///\n/// let m = Match::new(PatternID::ZERO, 5..10);\n/// assert_eq!(0, m.pattern().as_usize());\n/// assert_eq!(5, m.start());\n/// assert_eq!(10, m.end());\n/// ```\n",
  "code": [
    "pub fn new<S: Into<Span>>(pattern: PatternID, span: S) -> Match {",
    "    let span: Span = span.into();",
    "    assert!(span.start <= span.end, \"invalid match span\");",
    "    Match { pattern, span }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "span.start <= span.end",
          "norm": "span.end >= span.start",
          "value": "true",
          "line": 1019,
          "bound": "span.start == span.end"
        }
      ],
      "ret": "Match { pattern, span }",
      "path": [
        0,
        1,
        2,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "span.start <= span.end",
          "norm": "span.end >= span.start",
          "value": "false",
          "line": 1019,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}