{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#3}::try_is_match",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:899:5:906:6",
  "doc": "/// Returns true if and only if this regex matches the given haystack.\n///\n/// In the case of a backtracking regex engine, and unlike most other\n/// regex engines in this crate, short circuiting isn't practical. However,\n/// this routine may still be faster because it instructs backtracking to\n/// not keep track of any capturing groups.\n///\n/// # Errors\n///\n/// This routine only errors if the search could not complete. For this\n/// backtracking regex engine, this only occurs when the haystack length\n/// exceeds [`BoundedBacktracker::max_haystack_len`].\n///\n/// When a search cannot complete, callers cannot know whether a match\n/// exists or not.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::nfa::thompson::backtrack::BoundedBacktracker;\n///\n/// let re = BoundedBacktracker::new(\"foo[0-9]+bar\")?;\n/// let mut cache = re.create_cache();\n///\n/// assert!(re.try_is_match(&mut cache, \"foo12345bar\")?);\n/// assert!(!re.try_is_match(&mut cache, \"foobar\")?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: consistency with search APIs\n///\n/// `is_match` is guaranteed to return `true` whenever `find` returns a\n/// match. This includes searches that are executed entirely within a\n/// codepoint:\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::backtrack::BoundedBacktracker,\n///     Input,\n/// };\n///\n/// let re = BoundedBacktracker::new(\"a*\")?;\n/// let mut cache = re.create_cache();\n///\n/// assert!(!re.try_is_match(&mut cache, Input::new(\"☃\").span(1..2))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Notice that when UTF-8 mode is disabled, then the above reports a\n/// match because the restriction against zero-width matches that split a\n/// codepoint has been lifted:\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::{backtrack::BoundedBacktracker, NFA},\n///     Input,\n/// };\n///\n/// let re = BoundedBacktracker::builder()\n///     .thompson(NFA::config().utf8(false))\n///     .build(\"a*\")?;\n/// let mut cache = re.create_cache();\n///\n/// assert!(re.try_is_match(&mut cache, Input::new(\"☃\").span(1..2))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn try_is_match<'h, I: Into<Input<'h>>>(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: I,",
    ") -> Result<bool, MatchError> {",
    "    let input = input.into().earliest(true);",
    "    self.try_search_slots(cache, &input, &mut []).map(|pid| pid.is_some())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}