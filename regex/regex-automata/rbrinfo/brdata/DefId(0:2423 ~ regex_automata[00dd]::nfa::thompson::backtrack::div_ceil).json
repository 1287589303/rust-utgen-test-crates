{
  "name": "regex_automata::nfa::thompson::backtrack::div_ceil",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:1881:1:1887:2",
  "doc": "/// Integer division, but rounds up instead of down.\n",
  "code": [
    "fn div_ceil(lhs: usize, rhs: usize) -> usize {",
    "    if lhs % rhs == 0 {",
    "        lhs / rhs",
    "    } else {",
    "        (lhs / rhs) + 1",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "lhs % rhs == 0",
          "norm": "0 == lhs % rhs",
          "value": "false",
          "line": 1882,
          "bound": null
        }
      ],
      "ret": "lhs / rhs",
      "path": [
        0,
        1,
        2,
        3,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "lhs % rhs == 0",
          "norm": "0 == lhs % rhs",
          "value": "true",
          "line": 1882,
          "bound": null
        }
      ],
      "ret": "(lhs / rhs) + 1",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}