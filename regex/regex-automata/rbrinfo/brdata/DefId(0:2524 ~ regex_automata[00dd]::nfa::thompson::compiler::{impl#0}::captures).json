{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::captures",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:343:5:349:6",
  "doc": "/// Whether to include 'Capture' states in the NFA.\n///\n/// Currently, enabling this setting requires disabling the\n/// [`reverse`](Config::reverse) setting. If both are enabled, then the\n/// compiler will return an error. It is expected that this limitation will\n/// be lifted in the future.\n///\n/// This is enabled by default.\n///\n/// # Example\n///\n/// This example demonstrates that some regex engines, like the Pike VM,\n/// require capturing states to be present in the NFA to report match\n/// offsets.\n///\n/// (Note that since this method is deprecated, the example below uses\n/// [`Config::which_captures`] to disable capture states.)\n///\n/// ```\n/// use regex_automata::nfa::thompson::{\n///     pikevm::PikeVM,\n///     NFA,\n///     WhichCaptures,\n/// };\n///\n/// let re = PikeVM::builder()\n///     .thompson(NFA::config().which_captures(WhichCaptures::None))\n///     .build(r\"[a-z]+\")?;\n/// let mut cache = re.create_cache();\n///\n/// assert!(re.is_match(&mut cache, \"abc\"));\n/// assert_eq!(None, re.find(&mut cache, \"abc\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn captures(self, yes: bool) -> Config {",
    "    self.which_captures(if yes {",
    "        WhichCaptures::All",
    "    } else {",
    "        WhichCaptures::None",
    "    })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "yes",
          "norm": null,
          "value": "true",
          "line": 344,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "yes",
          "norm": null,
          "value": "false",
          "line": 344,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}