{
  "name": "regex_automata::nfa::thompson::nfa::{impl#4}::remap",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1694:5:1723:6",
  "doc": "/// Remap the transitions in this state using the given map. Namely, the\n/// given map should be indexed according to the transitions currently\n/// in this state.\n///\n/// This is used during the final phase of the NFA compiler, which turns\n/// its intermediate NFA into the final NFA.\n",
  "code": [
    "fn remap(&mut self, remap: &[StateID]) {",
    "    match *self {",
    "        State::ByteRange { ref mut trans } => {",
    "            trans.next = remap[trans.next]",
    "        }",
    "        State::Sparse(SparseTransitions { ref mut transitions }) => {",
    "            for t in transitions.iter_mut() {",
    "                t.next = remap[t.next];",
    "            }",
    "        }",
    "        State::Dense(DenseTransitions { ref mut transitions }) => {",
    "            for sid in transitions.iter_mut() {",
    "                *sid = remap[*sid];",
    "            }",
    "        }",
    "        State::Look { ref mut next, .. } => *next = remap[*next],",
    "        State::Union { ref mut alternates } => {",
    "            for alt in alternates.iter_mut() {",
    "                *alt = remap[*alt];",
    "            }",
    "        }",
    "        State::BinaryUnion { ref mut alt1, ref mut alt2 } => {",
    "            *alt1 = remap[*alt1];",
    "            *alt2 = remap[*alt2];",
    "        }",
    "        State::Capture { ref mut next, .. } => *next = remap[*next],",
    "        State::Fail => {}",
    "        State::Match { .. } => {}",
    "    }",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 3,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches State::Capture { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Capture { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches State::BinaryUnion { ref mut alt1, ref mut alt2 }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::BinaryUnion { ref mut alt1, ref mut alt2 }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        48,
        49,
        50,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "alt in alternates.iter_mut()",
          "norm": null,
          "value": "true",
          "line": 1711,
          "bound": null
        },
        {
          "cond": "alt in alternates.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1711,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        37,
        38,
        39,
        40,
        41,
        42,
        45,
        47,
        40,
        41,
        42,
        44,
        46,
        54
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Union { ref mut alternates }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "alt in alternates.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1711,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        37,
        38,
        39,
        40,
        41,
        42,
        44,
        46,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Look { ref mut next, .. }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        35,
        36,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self matches State::Dense(DenseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Dense(DenseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "sid in transitions.iter_mut()",
          "norm": null,
          "value": "true",
          "line": 1705,
          "bound": null
        },
        {
          "cond": "sid in transitions.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1705,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        34,
        27,
        28,
        29,
        31,
        33,
        54
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self matches State::Dense(DenseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Dense(DenseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "sid in transitions.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1705,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        33,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self matches State::Sparse(SparseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Sparse(SparseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "t in transitions.iter_mut()",
          "norm": null,
          "value": "true",
          "line": 1700,
          "bound": null
        },
        {
          "cond": "t in transitions.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1700,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        16,
        17,
        18,
        20,
        22,
        54
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*self matches State::Sparse(SparseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::Sparse(SparseTransitions { ref mut transitions })",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "t in transitions.iter_mut()",
          "norm": null,
          "value": "false",
          "line": 1700,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*self matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { ref mut trans }",
          "norm": null,
          "value": "true",
          "line": 1695,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        11,
        12,
        54
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}