{
  "name": "regex_automata::dfa::determinize::{impl#1}::add_one_start",
  "mod_info": {
    "name": "dfa::determinize",
    "loc": "regex-automata/src/dfa/mod.rs:350:1:350:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/determinize.rs:462:5:492:6",
  "doc": "/// Add a new DFA start state corresponding to the given starting NFA\n/// state, and the starting search configuration. (The starting search\n/// configuration essentially tells us which look-behind assertions are\n/// true for this particular state.)\n///\n/// The boolean returned indicates whether the state ID returned is a newly\n/// created state, or a previously cached state.\n",
  "code": [
    "fn add_one_start(",
    "    &mut self,",
    "    nfa_start: StateID,",
    "    start: Start,",
    ") -> Result<(StateID, bool), BuildError> {",
    "    // Compute the look-behind assertions that are true in this starting",
    "    // configuration, and the determine the epsilon closure. While",
    "    // computing the epsilon closure, we only follow condiional epsilon",
    "    // transitions that satisfy the look-behind assertions in 'look_have'.",
    "    let mut builder_matches = self.get_state_builder().into_matches();",
    "    util::determinize::set_lookbehind_from_start(",
    "        self.nfa,",
    "        &start,",
    "        &mut builder_matches,",
    "    );",
    "    self.sparses.set1.clear();",
    "    util::determinize::epsilon_closure(",
    "        self.nfa,",
    "        nfa_start,",
    "        builder_matches.look_have(),",
    "        &mut self.stack,",
    "        &mut self.sparses.set1,",
    "    );",
    "    let mut builder = builder_matches.into_nfa();",
    "    util::determinize::add_nfa_states(",
    "        &self.nfa,",
    "        &self.sparses.set1,",
    "        &mut builder,",
    "    );",
    "    self.maybe_add_state(builder)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}