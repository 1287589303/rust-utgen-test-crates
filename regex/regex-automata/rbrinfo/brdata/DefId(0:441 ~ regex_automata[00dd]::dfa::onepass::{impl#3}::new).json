{
  "name": "regex_automata::dfa::onepass::{impl#3}::new",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1167:5:1169:6",
  "doc": "/// Parse the given regular expression using the default configuration and\n/// return the corresponding one-pass DFA.\n///\n/// If you want a non-default configuration, then use the [`Builder`] to\n/// set your own configuration.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{dfa::onepass::DFA, Match};\n///\n/// let re = DFA::new(\"foo[0-9]+bar\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"foo12345barzzz\", &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..11)), caps.get_match());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new(pattern: &str) -> Result<DFA, BuildError> {",
    "    DFA::builder().build(pattern)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}