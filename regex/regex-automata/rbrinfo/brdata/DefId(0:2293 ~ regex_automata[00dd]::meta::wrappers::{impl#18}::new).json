{
  "name": "regex_automata::meta::wrappers::{impl#18}::new",
  "mod_info": {
    "name": "meta::wrappers",
    "loc": "regex-automata/src/meta/mod.rs:62:1:62:14"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/wrappers.rs:1254:5:1316:6",
  "doc": "",
  "code": [
    "pub(crate) fn new(",
    "    info: &RegexInfo,",
    "    nfarev: &NFA,",
    ") -> Option<ReverseDFAEngine> {",
    "    #[cfg(feature = \"dfa-build\")]",
    "    {",
    "        if !info.config().get_dfa() {",
    "            return None;",
    "        }",
    "        // If our NFA is anything but small, don't even bother with a DFA.",
    "        if let Some(state_limit) = info.config().get_dfa_state_limit() {",
    "            if nfarev.states().len() > state_limit {",
    "                debug!(",
    "                    \"skipping full reverse DFA because NFA has {} states, \\",
    "                     which exceeds the heuristic limit of {}\",",
    "                    nfarev.states().len(),",
    "                    state_limit,",
    "\t);",
    "                return None;",
    "            }",
    "        }",
    "        // We cut the size limit in two because the total heap used by DFA",
    "        // construction is determinization aux memory and the DFA itself,",
    "        // and those things are configured independently in the lower level",
    "        // DFA builder API.",
    "        let size_limit = info.config().get_dfa_size_limit().map(|n| n / 2);",
    "        // Since we only use this for reverse searches, we can hard-code",
    "        // a number of things like match semantics, prefilters, starts",
    "        // for each pattern and so on. We also disable acceleration since",
    "        // it's incompatible with limited searches (which is the only",
    "        // operation we support for this kind of engine at the moment).",
    "        let dfa_config = dfa::dense::Config::new()",
    "            .match_kind(MatchKind::All)",
    "            .prefilter(None)",
    "            .accelerate(false)",
    "            .start_kind(dfa::StartKind::Anchored)",
    "            .starts_for_each_pattern(false)",
    "            .byte_classes(info.config().get_byte_classes())",
    "            .unicode_word_boundary(true)",
    "            .specialize_start_states(false)",
    "            .determinize_size_limit(size_limit)",
    "            .dfa_size_limit(size_limit);",
    "        let result = dfa::dense::Builder::new()",
    "            .configure(dfa_config)",
    "            .build_from_nfa(&nfarev);",
    "        let rev = match result {",
    "            Ok(rev) => rev,",
    "            Err(_err) => {",
    "                debug!(\"full reverse DFA failed to build: {}\", _err);",
    "                return None;",
    "            }",
    "        };",
    "        debug!(",
    "            \"fully compiled reverse DFA built, {} bytes\",",
    "            rev.memory_usage()",
    "        );",
    "        Some(ReverseDFAEngine(rev))",
    "    }",
    "    #[cfg(not(feature = \"dfa-build\"))]",
    "    {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        45,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        }
      ],
      "ret": "Some(ReverseDFAEngine(rev))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        48
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "nfarev.states().len() > state_limit",
          "norm": null,
          "value": "true",
          "line": 1265,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "nfarev.states().len() > state_limit",
          "norm": null,
          "value": "false",
          "line": 1265,
          "bound": "nfarev.states().len() == state_limit"
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        45,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "let Some(state_limit) = info.config().get_dfa_state_limit()",
          "norm": null,
          "value": "true",
          "line": 1264,
          "bound": null
        },
        {
          "cond": "nfarev.states().len() > state_limit",
          "norm": null,
          "value": "false",
          "line": 1265,
          "bound": "nfarev.states().len() == state_limit"
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        }
      ],
      "ret": "Some(ReverseDFAEngine(rev))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "info.config().get_dfa()",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        48
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}