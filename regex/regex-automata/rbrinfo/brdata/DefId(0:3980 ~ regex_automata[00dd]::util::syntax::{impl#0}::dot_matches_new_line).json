{
  "name": "regex_automata::util::syntax::{impl#0}::dot_matches_new_line",
  "mod_info": {
    "name": "util::syntax",
    "loc": "regex-automata/src/util/mod.rs:45:1:45:16"
  },
  "visible": true,
  "loc": "regex-automata/src/util/syntax.rs:222:5:225:6",
  "doc": "/// Enable or disable the \"dot matches any character\" flag by default.\n///\n/// When this is enabled, `.` will match any character. When it's disabled,\n/// then `.` will match any character except for a new line character.\n///\n/// Note that `.` is impacted by whether the \"unicode\" setting is enabled\n/// or not. When Unicode is enabled (the default), `.` will match any UTF-8\n/// encoding of any Unicode scalar value (sans a new line, depending on\n/// whether this \"dot matches new line\" option is enabled). When Unicode\n/// mode is disabled, `.` will match any byte instead. Because of this,\n/// when Unicode mode is disabled, `.` can only be used when the \"allow\n/// invalid UTF-8\" option is enabled, since `.` could otherwise match\n/// invalid UTF-8.\n///\n/// By default this is disabled. It may alternatively be selectively\n/// enabled in the regular expression itself via the `s` flag.\n",
  "code": [
    "pub fn dot_matches_new_line(mut self, yes: bool) -> Config {",
    "    self.dot_matches_new_line = yes;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}