{
  "name": "regex_automata::meta::regex::{impl#21}::configure",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3600:5:3603:6",
  "doc": "/// Configure the behavior of a `Regex`.\n///\n/// This configuration controls non-syntax options related to the behavior\n/// of a `Regex`. This includes things like whether empty matches can split\n/// a codepoint, prefilters, line terminators and a long list of options\n/// for configuring which regex engines the meta regex engine will be able\n/// to use internally.\n///\n/// # Example\n///\n/// This example shows how to disable UTF-8 empty mode. This will permit\n/// empty matches to occur between the UTF-8 encoding of a codepoint.\n///\n/// ```\n/// use regex_automata::{meta::Regex, Match};\n///\n/// let re = Regex::new(\"\")?;\n/// let got: Vec<Match> = re.find_iter(\"☃\").collect();\n/// // Matches only occur at the beginning and end of the snowman.\n/// assert_eq!(got, vec![\n///     Match::must(0, 0..0),\n///     Match::must(0, 3..3),\n/// ]);\n///\n/// let re = Regex::builder()\n///     .configure(Regex::config().utf8_empty(false))\n///     .build(\"\")?;\n/// let got: Vec<Match> = re.find_iter(\"☃\").collect();\n/// // Matches now occur at every position!\n/// assert_eq!(got, vec![\n///     Match::must(0, 0..0),\n///     Match::must(0, 1..1),\n///     Match::must(0, 2..2),\n///     Match::must(0, 3..3),\n/// ]);\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn configure(&mut self, config: Config) -> &mut Builder {",
    "    self.config = self.config.overwrite(config);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}