{
  "name": "regex_automata::meta::regex::{impl#4}::pattern_len",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1616:5:1618:6",
  "doc": "/// Returns the total number of patterns in this regex.\n///\n/// The standard [`Regex::new`] constructor always results in a `Regex`\n/// with a single pattern, but [`Regex::new_many`] permits building a\n/// multi-pattern regex.\n///\n/// A `Regex` guarantees that the maximum possible `PatternID` returned in\n/// any match is `Regex::pattern_len() - 1`. In the case where the number\n/// of patterns is `0`, a match is impossible.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"(?m)^[a-z]$\")?;\n/// assert_eq!(1, re.pattern_len());\n///\n/// let re = Regex::new_many::<&str>(&[])?;\n/// assert_eq!(0, re.pattern_len());\n///\n/// let re = Regex::new_many(&[\"a\", \"b\", \"c\"])?;\n/// assert_eq!(3, re.pattern_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn pattern_len(&self) -> usize {",
    "    self.imp.info.pattern_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}