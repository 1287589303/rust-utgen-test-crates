{
  "name": "regex_automata::dfa::determinize::{impl#1}::memory_usage",
  "mod_info": {
    "name": "dfa::determinize",
    "loc": "regex-automata/src/dfa/mod.rs:350:1:350:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/determinize.rs:589:5:598:6",
  "doc": "/// Return the memory usage, in bytes, of this determinizer at the current\n/// point in time. This does not include memory used by the NFA or the\n/// dense DFA itself.\n",
  "code": [
    "fn memory_usage(&self) -> usize {",
    "    use core::mem::size_of;",
    "",
    "    self.builder_states.len() * size_of::<State>()",
    "    // Maps likely use more memory than this, but it's probably close.",
    "    + self.cache.len() * (size_of::<State>() + size_of::<StateID>())",
    "    + self.memory_usage_state",
    "    + self.stack.capacity() * size_of::<StateID>()",
    "    + self.scratch_state_builder.capacity()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.builder_states.len() * size_of::<State>()\n        // Maps likely use more memory than this, but it's probably close.\n        + self.cache.len() * (size_of::<State>() + size_of::<StateID>())\n        + self.memory_usage_state\n        + self.stack.capacity() * size_of::<StateID>()\n        + self.scratch_state_builder.capacity()",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}