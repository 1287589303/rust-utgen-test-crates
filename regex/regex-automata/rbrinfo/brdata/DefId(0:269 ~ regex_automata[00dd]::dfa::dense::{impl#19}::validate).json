{
  "name": "regex_automata::dfa::dense::{impl#19}::validate",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4138:5:4158:6",
  "doc": "/// Validates that every state ID in this start table is valid by checking\n/// it against the given transition table (which must be for the same DFA).\n///\n/// That is, every state ID can be used to correctly index a state.\n",
  "code": [
    "fn validate(&self, dfa: &DFA<T>) -> Result<(), DeserializeError> {",
    "    let tt = &dfa.tt;",
    "    if !self.universal_start_unanchored.map_or(true, |s| tt.is_valid(s)) {",
    "        return Err(DeserializeError::generic(",
    "            \"found invalid universal unanchored starting state ID\",",
    "        ));",
    "    }",
    "    if !self.universal_start_anchored.map_or(true, |s| tt.is_valid(s)) {",
    "        return Err(DeserializeError::generic(",
    "            \"found invalid universal anchored starting state ID\",",
    "        ));",
    "    }",
    "    for &id in self.table() {",
    "        if !tt.is_valid(id) {",
    "            return Err(DeserializeError::generic(",
    "                \"found invalid starting state ID\",",
    "            ));",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.universal_start_unanchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "true",
          "line": 4140,
          "bound": null
        },
        {
          "cond": "self.universal_start_anchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "true",
          "line": 4145,
          "bound": null
        },
        {
          "cond": "&id in self.table()",
          "norm": null,
          "value": "true",
          "line": 4150,
          "bound": null
        },
        {
          "cond": "tt.is_valid(id)",
          "norm": null,
          "value": "true",
          "line": 4151,
          "bound": null
        },
        {
          "cond": "&id in self.table()",
          "norm": null,
          "value": "false",
          "line": 4150,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        10,
        11,
        12,
        13,
        16,
        18,
        19,
        11,
        12,
        13,
        15,
        17,
        23
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.universal_start_unanchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "true",
          "line": 4140,
          "bound": null
        },
        {
          "cond": "self.universal_start_anchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "true",
          "line": 4145,
          "bound": null
        },
        {
          "cond": "&id in self.table()",
          "norm": null,
          "value": "true",
          "line": 4150,
          "bound": null
        },
        {
          "cond": "tt.is_valid(id)",
          "norm": null,
          "value": "false",
          "line": 4151,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                    \"found invalid starting state ID\",\n                ))",
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        10,
        11,
        12,
        13,
        16,
        18,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.universal_start_unanchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "true",
          "line": 4140,
          "bound": null
        },
        {
          "cond": "self.universal_start_anchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "true",
          "line": 4145,
          "bound": null
        },
        {
          "cond": "&id in self.table()",
          "norm": null,
          "value": "false",
          "line": 4150,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.universal_start_unanchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "true",
          "line": 4140,
          "bound": null
        },
        {
          "cond": "self.universal_start_anchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "false",
          "line": 4145,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"found invalid universal anchored starting state ID\",\n            ))",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.universal_start_unanchored.map_or(true, |s| tt.is_valid(s))",
          "norm": null,
          "value": "false",
          "line": 4140,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"found invalid universal unanchored starting state ID\",\n            ))",
      "path": [
        0,
        1,
        3,
        4,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}