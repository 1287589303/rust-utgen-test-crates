{
  "name": "regex_automata::dfa::automaton::Automaton::start_state_reverse",
  "mod_info": {
    "name": "dfa::automaton",
    "loc": "regex-automata/src/dfa/mod.rs:348:1:348:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/automaton.rs:315:5:329:6",
  "doc": "/// Return the ID of the start state for this DFA when executing a reverse\n/// search.\n///\n/// This is a convenience routine for calling [`Automaton::start_state`]\n/// that converts the given [`Input`] to a [start\n/// configuration](start::Config). Additionally, if an error occurs, it is\n/// converted from a [`StartError`] to a [`MatchError`] using the offset\n/// information in the given [`Input`].\n///\n/// # Errors\n///\n/// This may return a [`MatchError`] if the search needs to give up\n/// when determining the start state (for example, if it sees a \"quit\"\n/// byte). This can also return an error if the given `Input` contains an\n/// unsupported [`Anchored`] configuration.\n",
  "code": [
    "fn start_state_reverse(",
    "    &self,",
    "    input: &Input<'_>,",
    ") -> Result<StateID, MatchError> {",
    "    let config = start::Config::from_input_reverse(input);",
    "    self.start_state(&config).map_err(|err| match err {",
    "        StartError::Quit { byte } => {",
    "            let offset = input.end();",
    "            MatchError::quit(byte, offset)",
    "        }",
    "        StartError::UnsupportedAnchored { mode } => {",
    "            MatchError::unsupported_anchored(mode)",
    "        }",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}