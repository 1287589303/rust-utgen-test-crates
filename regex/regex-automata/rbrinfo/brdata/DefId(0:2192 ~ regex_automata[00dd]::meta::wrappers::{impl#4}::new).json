{
  "name": "regex_automata::meta::wrappers::{impl#4}::new",
  "mod_info": {
    "name": "meta::wrappers",
    "loc": "regex-automata/src/meta/mod.rs:62:1:62:14"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/wrappers.rs:198:5:225:6",
  "doc": "",
  "code": [
    "pub(crate) fn new(",
    "    info: &RegexInfo,",
    "    pre: Option<Prefilter>,",
    "    nfa: &NFA,",
    ") -> Result<Option<BoundedBacktrackerEngine>, BuildError> {",
    "    #[cfg(feature = \"nfa-backtrack\")]",
    "    {",
    "        if !info.config().get_backtrack()",
    "            || info.config().get_match_kind() != MatchKind::LeftmostFirst",
    "        {",
    "            return Ok(None);",
    "        }",
    "        let backtrack_config = backtrack::Config::new().prefilter(pre);",
    "        let engine = backtrack::Builder::new()",
    "            .configure(backtrack_config)",
    "            .build_from_nfa(nfa.clone())",
    "            .map_err(BuildError::nfa)?;",
    "        debug!(",
    "            \"BoundedBacktracker built (max haystack length: {:?})\",",
    "            engine.max_haystack_len()",
    "        );",
    "        Ok(Some(BoundedBacktrackerEngine(engine)))",
    "    }",
    "    #[cfg(not(feature = \"nfa-backtrack\"))]",
    "    {",
    "        Ok(None)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "info.config().get_backtrack()",
          "norm": null,
          "value": "true",
          "line": 205,
          "bound": null
        },
        {
          "cond": "info.config().get_match_kind() != MatchKind::LeftmostFirst",
          "norm": "MatchKind::LeftmostFirst != info.config().get_match_kind()",
          "value": "true",
          "line": 206,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "info.config().get_backtrack()",
          "norm": null,
          "value": "true",
          "line": 205,
          "bound": null
        },
        {
          "cond": "info.config().get_match_kind() != MatchKind::LeftmostFirst",
          "norm": "MatchKind::LeftmostFirst != info.config().get_match_kind()",
          "value": "false",
          "line": 206,
          "bound": null
        },
        {
          "cond": "backtrack::Builder::new()\n                .configure(backtrack_config)\n                .build_from_nfa(nfa.clone())\n                .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        33,
        34,
        35,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "info.config().get_backtrack()",
          "norm": null,
          "value": "true",
          "line": 205,
          "bound": null
        },
        {
          "cond": "info.config().get_match_kind() != MatchKind::LeftmostFirst",
          "norm": "MatchKind::LeftmostFirst != info.config().get_match_kind()",
          "value": "false",
          "line": 206,
          "bound": null
        },
        {
          "cond": "backtrack::Builder::new()\n                .configure(backtrack_config)\n                .build_from_nfa(nfa.clone())\n                .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 211,
          "bound": null
        }
      ],
      "ret": "Ok(Some(BoundedBacktrackerEngine(engine)))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "info.config().get_backtrack()",
          "norm": null,
          "value": "false",
          "line": 205,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        4,
        9,
        10,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}