{
  "name": "regex_automata::dfa::onepass::{impl#3}::new_many",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1192:5:1194:6",
  "doc": "/// Like `new`, but parses multiple patterns into a single \"multi regex.\"\n/// This similarly uses the default regex configuration.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{dfa::onepass::DFA, Match};\n///\n/// let re = DFA::new_many(&[\"[a-z]+\", \"[0-9]+\"])?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"abc123\", &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..3)), caps.get_match());\n///\n/// re.captures(&mut cache, \"123abc\", &mut caps);\n/// assert_eq!(Some(Match::must(1, 0..3)), caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<DFA, BuildError> {",
    "    DFA::builder().build_many(patterns)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}