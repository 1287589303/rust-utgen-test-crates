{
  "name": "regex_automata::util::search::{impl#0}::set_anchored",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:558:5:560:6",
  "doc": "/// Set the anchor mode of a search.\n///\n/// This is like [`Input::anchored`], except it mutates the search\n/// configuration in place.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{Anchored, Input, PatternID};\n///\n/// let mut input = Input::new(\"foobar\");\n/// assert_eq!(Anchored::No, input.get_anchored());\n///\n/// let pid = PatternID::must(5);\n/// input.set_anchored(Anchored::Pattern(pid));\n/// assert_eq!(Anchored::Pattern(pid), input.get_anchored());\n/// ```\n",
  "code": [
    "pub fn set_anchored(&mut self, mode: Anchored) {",
    "    self.anchored = mode;",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}