{
  "name": "regex_automata::util::captures::{impl#1}::set_pattern",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1134:5:1136:6",
  "doc": "/// Set the pattern on this `Captures` value.\n///\n/// When the pattern ID is `None`, then this `Captures` value does not\n/// correspond to a match (`is_match` will return `false`). Otherwise, it\n/// corresponds to a match.\n///\n/// This is useful in search implementations where you might want to\n/// initially call `set_pattern(None)` in order to avoid the cost of\n/// calling `clear()` if it turns out to not be necessary.\n///\n/// # Example\n///\n/// This example shows that `set_pattern` merely overwrites the pattern ID.\n/// It does not actually change the underlying slot values.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::pikevm::PikeVM;\n///\n/// let re = PikeVM::new(r\"^(?P<first>\\pL+)\\s+(?P<last>\\pL+)$\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"Bruce Springsteen\", &mut caps);\n/// assert!(caps.is_match());\n/// assert!(caps.pattern().is_some());\n/// let slots: Vec<Option<usize>> =\n///     caps.slots().iter().map(|s| s.map(|x| x.get())).collect();\n/// // Note that the following ordering is considered an API guarantee.\n/// assert_eq!(slots, vec![\n///     Some(0),\n///     Some(17),\n///     Some(0),\n///     Some(5),\n///     Some(6),\n///     Some(17),\n/// ]);\n///\n/// // Now set the pattern to None. Note that the slot values remain.\n/// caps.set_pattern(None);\n/// assert!(!caps.is_match());\n/// assert!(!caps.pattern().is_some());\n/// let slots: Vec<Option<usize>> =\n///     caps.slots().iter().map(|s| s.map(|x| x.get())).collect();\n/// // Note that the following ordering is considered an API guarantee.\n/// assert_eq!(slots, vec![\n///     Some(0),\n///     Some(17),\n///     Some(0),\n///     Some(5),\n///     Some(6),\n///     Some(17),\n/// ]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn set_pattern(&mut self, pid: Option<PatternID>) {",
    "    self.pid = pid;",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}