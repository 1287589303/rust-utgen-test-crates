{
  "name": "regex_automata::meta::error::{impl#14}::from",
  "mod_info": {
    "name": "meta::error",
    "loc": "regex-automata/src/meta/mod.rs:53:1:53:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/error.rs:226:5:240:6",
  "doc": "",
  "code": [
    "fn from(merr: MatchError) -> RetryFailError {",
    "    use crate::util::search::MatchErrorKind::*;",
    "",
    "    match *merr.kind() {",
    "        Quit { offset, .. } => RetryFailError::from_offset(offset),",
    "        GaveUp { offset } => RetryFailError::from_offset(offset),",
    "        // These can never occur because we avoid them by construction",
    "        // or with higher level control flow logic. For example, the",
    "        // backtracker's wrapper will never hand out a backtracker engine",
    "        // when the haystack would be too long.",
    "        HaystackTooLong { .. } | UnsupportedAnchored { .. } => {",
    "            unreachable!(\"found impossible error in meta engine: {}\", merr)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*merr.kind() matches UnsupportedAnchored { .. }",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        10,
        11,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*merr.kind() matches HaystackTooLong { .. }",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        10,
        11,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*merr.kind() matches GaveUp { offset }",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "*merr.kind() matches GaveUp { offset }",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        8,
        9,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*merr.kind() matches Quit { offset, .. }",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "*merr.kind() matches Quit { offset, .. }",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        7,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}