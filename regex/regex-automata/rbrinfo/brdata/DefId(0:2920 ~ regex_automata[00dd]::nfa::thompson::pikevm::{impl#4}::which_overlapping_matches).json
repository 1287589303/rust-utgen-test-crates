{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#4}::which_overlapping_matches",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1208:5:1215:6",
  "doc": "/// Writes the set of patterns that match anywhere in the given search\n/// configuration to `patset`. If multiple patterns match at the same\n/// position and this `PikeVM` was configured with [`MatchKind::All`]\n/// semantics, then all matching patterns are written to the given set.\n///\n/// Unless all of the patterns in this `PikeVM` are anchored, then\n/// generally speaking, this will visit every byte in the haystack.\n///\n/// This search routine *does not* clear the pattern set. This gives some\n/// flexibility to the caller (e.g., running multiple searches with the\n/// same pattern set), but does make the API bug-prone if you're reusing\n/// the same pattern set for multiple searches but intended them to be\n/// independent.\n///\n/// If a pattern ID matched but the given `PatternSet` does not have\n/// sufficient capacity to store it, then it is not inserted and silently\n/// dropped.\n///\n/// # Example\n///\n/// This example shows how to find all matching patterns in a haystack,\n/// even when some patterns match at the same position as other patterns.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     Input, MatchKind, PatternSet,\n/// };\n///\n/// let patterns = &[\n///     r\"\\w+\", r\"\\d+\", r\"\\pL+\", r\"foo\", r\"bar\", r\"barfoo\", r\"foobar\",\n/// ];\n/// let re = PikeVM::builder()\n///     .configure(PikeVM::config().match_kind(MatchKind::All))\n///     .build_many(patterns)?;\n/// let mut cache = re.create_cache();\n///\n/// let input = Input::new(\"foobar\");\n/// let mut patset = PatternSet::new(re.pattern_len());\n/// re.which_overlapping_matches(&mut cache, &input, &mut patset);\n/// let expected = vec![0, 2, 3, 4, 6];\n/// let got: Vec<usize> = patset.iter().map(|p| p.as_usize()).collect();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn which_overlapping_matches(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    patset: &mut PatternSet,",
    ") {",
    "    self.which_overlapping_imp(cache, input, patset)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}