{
  "name": "regex_automata::meta::regex::{impl#4}::memory_usage",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1894:5:1896:6",
  "doc": "/// Return the total approximate heap memory, in bytes, used by this `Regex`.\n///\n/// Note that currently, there is no high level configuration for setting\n/// a limit on the specific value returned by this routine. Instead, the\n/// following routines can be used to control heap memory at a bit of a\n/// lower level:\n///\n/// * [`Config::nfa_size_limit`] controls how big _any_ of the NFAs are\n/// allowed to be.\n/// * [`Config::onepass_size_limit`] controls how big the one-pass DFA is\n/// allowed to be.\n/// * [`Config::hybrid_cache_capacity`] controls how much memory the lazy\n/// DFA is permitted to allocate to store its transition table.\n/// * [`Config::dfa_size_limit`] controls how big a fully compiled DFA is\n/// allowed to be.\n/// * [`Config::dfa_state_limit`] controls the conditions under which the\n/// meta regex engine will even attempt to build a fully compiled DFA.\n",
  "code": [
    "pub fn memory_usage(&self) -> usize {",
    "    self.imp.strat.memory_usage()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}