{
  "name": "regex_automata::meta::error::{impl#0}::syntax_error",
  "mod_info": {
    "name": "meta::error",
    "loc": "regex-automata/src/meta/mod.rs:53:1:53:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/error.rs:74:5:79:6",
  "doc": "/// If this error corresponds to a syntax error, then a reference to it is\n/// returned by this method.\n",
  "code": [
    "pub fn syntax_error(&self) -> Option<&regex_syntax::Error> {",
    "    match self.kind {",
    "        BuildErrorKind::Syntax { ref err, .. } => Some(err),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.kind matches BuildErrorKind::Syntax { ref err, .. }",
          "norm": null,
          "value": "false",
          "line": 76,
          "bound": null
        },
        {
          "cond": "self.kind matches _",
          "norm": null,
          "value": "true",
          "line": 77,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.kind matches BuildErrorKind::Syntax { ref err, .. }",
          "norm": null,
          "value": "true",
          "line": 75,
          "bound": null
        },
        {
          "cond": "self.kind matches BuildErrorKind::Syntax { ref err, .. }",
          "norm": null,
          "value": "true",
          "line": 75,
          "bound": null
        }
      ],
      "ret": "Some(err)",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}