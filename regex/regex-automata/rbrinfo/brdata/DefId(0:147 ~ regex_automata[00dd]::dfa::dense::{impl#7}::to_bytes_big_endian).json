{
  "name": "regex_automata::dfa::dense::{impl#7}::to_bytes_big_endian",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:1844:5:1846:6",
  "doc": "/// Serialize this DFA as raw bytes to a `Vec<u8>` in big endian\n/// format. Upon success, the `Vec<u8>` and the initial padding length are\n/// returned.\n///\n/// The written bytes are guaranteed to be deserialized correctly and\n/// without errors in a semver compatible release of this crate by a\n/// `DFA`'s deserialization APIs (assuming all other criteria for the\n/// deserialization APIs has been satisfied):\n///\n/// * [`DFA::from_bytes`]\n/// * [`DFA::from_bytes_unchecked`]\n///\n/// The padding returned is non-zero if the returned `Vec<u8>` starts at\n/// an address that does not have the same alignment as `u32`. The padding\n/// corresponds to the number of leading bytes written to the returned\n/// `Vec<u8>`.\n///\n/// # Example\n///\n/// This example shows how to serialize and deserialize a DFA:\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};\n///\n/// // Compile our original DFA.\n/// let original_dfa = DFA::new(\"foo[0-9]+\")?;\n///\n/// // N.B. We use native endianness here to make the example work, but\n/// // using to_bytes_big_endian would work on a big endian target.\n/// let (buf, _) = original_dfa.to_bytes_native_endian();\n/// // Even if buf has initial padding, DFA::from_bytes will automatically\n/// // ignore it.\n/// let dfa: DFA<&[u32]> = DFA::from_bytes(&buf)?.0;\n///\n/// let expected = Some(HalfMatch::must(0, 8));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"foo12345\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn to_bytes_big_endian(&self) -> (Vec<u8>, usize) {",
    "    self.to_bytes::<wire::BE>()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}