{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_range",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:756:5:761:6",
  "doc": "/// Add a \"range\" NFA state.\n///\n/// A \"range\" NFA state is a state with one outgoing transition to another\n/// state, where that transition may only be followed if the current input\n/// byte falls between a range of bytes given.\n///\n/// # Errors\n///\n/// This returns an error if the state identifier space is exhausted, or if\n/// the configured heap size limit has been exceeded.\n",
  "code": [
    "pub fn add_range(",
    "    &mut self,",
    "    trans: Transition,",
    ") -> Result<StateID, BuildError> {",
    "    self.add(State::ByteRange { trans })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}