{
  "name": "regex_automata::meta::regex::{impl#17}::next",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2254:5:2272:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Span> {",
    "    if self.limit == 0 {",
    "        return None;",
    "    }",
    "",
    "    self.limit -= 1;",
    "    if self.limit > 0 {",
    "        return self.splits.next();",
    "    }",
    "",
    "    let len = self.splits.finder.it.input().haystack().len();",
    "    if self.splits.last > len {",
    "        // We've already returned all substrings.",
    "        None",
    "    } else {",
    "        // self.n == 0, so future calls will return None immediately",
    "        Some(Span::from(self.splits.last..len))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "false",
          "line": 2255,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 2255,
          "bound": null
        },
        {
          "cond": "self.limit > 0",
          "norm": "0 < self.limit",
          "value": "true",
          "line": 2260,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 2255,
          "bound": null
        },
        {
          "cond": "self.limit > 0",
          "norm": "0 < self.limit",
          "value": "false",
          "line": 2260,
          "bound": "self.limit == 0"
        },
        {
          "cond": "self.splits.last > len",
          "norm": "len < self.splits.last",
          "value": "true",
          "line": 2265,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 2255,
          "bound": null
        },
        {
          "cond": "self.limit > 0",
          "norm": "0 < self.limit",
          "value": "false",
          "line": 2260,
          "bound": "self.limit == 0"
        },
        {
          "cond": "self.splits.last > len",
          "norm": "len < self.splits.last",
          "value": "false",
          "line": 2265,
          "bound": "self.splits.last == len"
        }
      ],
      "ret": "Some(Span::from(self.splits.last..len))",
      "path": [
        0,
        2,
        3,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}