{
  "name": "regex_automata::nfa::thompson::builder::{impl#0}::goto",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:133:5:146:6",
  "doc": "/// If this state is an unconditional epsilon transition, then this returns\n/// the target of the transition.\n",
  "code": [
    "fn goto(&self) -> Option<StateID> {",
    "    match *self {",
    "        State::Empty { next } => Some(next),",
    "        State::Union { ref alternates } if alternates.len() == 1 => {",
    "            Some(alternates[0])",
    "        }",
    "        State::UnionReverse { ref alternates }",
    "            if alternates.len() == 1 =>",
    "        {",
    "            Some(alternates[0])",
    "        }",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 144,
          "bound": null
        },
        {
          "cond": "*self matches State::UnionReverse { ref alternates }",
          "norm": null,
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "*self matches State::Empty { next }",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "*self matches State::Union { ref alternates }",
          "norm": null,
          "value": "false",
          "line": 136,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches State::UnionReverse { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "*self matches State::UnionReverse { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "alternates.len() == 1",
          "norm": "1 == alternates.len()",
          "value": "false",
          "line": 140,
          "bound": null
        }
      ],
      "ret": "Some(alternates[0])",
      "path": [
        0,
        4,
        11,
        12,
        13,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches State::UnionReverse { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "*self matches State::UnionReverse { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "alternates.len() == 1",
          "norm": "1 == alternates.len()",
          "value": "true",
          "line": 140,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        4,
        11,
        12,
        14,
        1,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "*self matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "alternates.len() == 1",
          "norm": "1 == alternates.len()",
          "value": "false",
          "line": 136,
          "bound": null
        }
      ],
      "ret": "Some(alternates[0])",
      "path": [
        0,
        3,
        6,
        7,
        8,
        10,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "*self matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "alternates.len() == 1",
          "norm": "1 == alternates.len()",
          "value": "true",
          "line": 136,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        3,
        6,
        7,
        9,
        1,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches State::Empty { next }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "*self matches State::Empty { next }",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Some(next)",
      "path": [
        0,
        2,
        5,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}