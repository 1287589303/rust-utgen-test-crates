{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::memory_usage",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1169:5:1177:6",
  "doc": "/// Returns the memory usage, in bytes, of this NFA.\n///\n/// This does **not** include the stack size used up by this NFA. To\n/// compute that, use `std::mem::size_of::<NFA>()`.\n///\n/// # Example\n///\n/// This example shows that large Unicode character classes can use quite\n/// a bit of memory.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// let nfa_unicode = NFA::new(r\"\\w\")?;\n/// let nfa_ascii = NFA::new(r\"(?-u:\\w)\")?;\n///\n/// assert!(10 * nfa_ascii.memory_usage() < nfa_unicode.memory_usage());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn memory_usage(&self) -> usize {",
    "    use core::mem::size_of;",
    "",
    "    size_of::<Inner>() // allocated on the heap via Arc",
    "        + self.0.states.len() * size_of::<State>()",
    "        + self.0.start_pattern.len() * size_of::<StateID>()",
    "        + self.0.group_info.memory_usage()",
    "        + self.0.memory_extra",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "size_of::<Inner>() // allocated on the heap via Arc\n            + self.0.states.len() * size_of::<State>()\n            + self.0.start_pattern.len() * size_of::<StateID>()\n            + self.0.group_info.memory_usage()\n            + self.0.memory_extra",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}