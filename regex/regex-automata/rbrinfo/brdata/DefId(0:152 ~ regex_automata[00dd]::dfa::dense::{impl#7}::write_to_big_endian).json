{
  "name": "regex_automata::dfa::dense::{impl#7}::write_to_big_endian",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:2020:5:2025:6",
  "doc": "/// Serialize this DFA as raw bytes to the given slice, in big endian\n/// format. Upon success, the total number of bytes written to `dst` is\n/// returned.\n///\n/// The written bytes are guaranteed to be deserialized correctly and\n/// without errors in a semver compatible release of this crate by a\n/// `DFA`'s deserialization APIs (assuming all other criteria for the\n/// deserialization APIs has been satisfied):\n///\n/// * [`DFA::from_bytes`]\n/// * [`DFA::from_bytes_unchecked`]\n///\n/// Note that unlike the various `to_byte_*` routines, this does not write\n/// any padding. Callers are responsible for handling alignment correctly.\n///\n/// # Errors\n///\n/// This returns an error if the given destination slice is not big enough\n/// to contain the full serialized DFA. If an error occurs, then nothing\n/// is written to `dst`.\n///\n/// # Example\n///\n/// This example shows how to serialize and deserialize a DFA without\n/// dynamic memory allocation.\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense::DFA}, HalfMatch, Input};\n///\n/// // Compile our original DFA.\n/// let original_dfa = DFA::new(\"foo[0-9]+\")?;\n///\n/// // Create a 4KB buffer on the stack to store our serialized DFA. We\n/// // need to use a special type to force the alignment of our [u8; N]\n/// // array to be aligned to a 4 byte boundary. Otherwise, deserializing\n/// // the DFA may fail because of an alignment mismatch.\n/// #[repr(C)]\n/// struct Aligned<B: ?Sized> {\n///     _align: [u32; 0],\n///     bytes: B,\n/// }\n/// let mut buf = Aligned { _align: [], bytes: [0u8; 4 * (1<<10)] };\n/// // N.B. We use native endianness here to make the example work, but\n/// // using write_to_big_endian would work on a big endian target.\n/// let written = original_dfa.write_to_native_endian(&mut buf.bytes)?;\n/// let dfa: DFA<&[u32]> = DFA::from_bytes(&buf.bytes[..written])?.0;\n///\n/// let expected = Some(HalfMatch::must(0, 8));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"foo12345\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn write_to_big_endian(",
    "    &self,",
    "    dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    self.as_ref().write_to::<wire::BE>(dst)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}