{
  "name": "regex_automata::dfa::sparse::{impl#9}::state_mut",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1719:5:1746:6",
  "doc": "/// Return a convenient mutable representation of the given state.\n/// This panics if the state is invalid.\n",
  "code": [
    "fn state_mut(&mut self, id: StateID) -> StateMut<'_> {",
    "    let mut state = &mut self.sparse_mut()[id.as_usize()..];",
    "    let mut ntrans = wire::read_u16(&state).as_usize();",
    "    let is_match = (1 << 15) & ntrans != 0;",
    "    ntrans &= !(1 << 15);",
    "    state = &mut state[2..];",
    "",
    "    let (input_ranges, state) = state.split_at_mut(ntrans * 2);",
    "    let (next, state) = state.split_at_mut(ntrans * StateID::SIZE);",
    "    let (pattern_ids, state) = if is_match {",
    "        let npats = wire::read_u32(&state).as_usize();",
    "        state[4..].split_at_mut(npats * 4)",
    "    } else {",
    "        (&mut [][..], state)",
    "    };",
    "",
    "    let accel_len = usize::from(state[0]);",
    "    let accel = &mut state[1..accel_len + 1];",
    "    StateMut {",
    "        id,",
    "        is_match,",
    "        ntrans,",
    "        input_ranges,",
    "        next,",
    "        pattern_ids,",
    "        accel,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "is_match",
          "norm": null,
          "value": "true",
          "line": 1728,
          "bound": null
        }
      ],
      "ret": "StateMut {\n            id,\n            is_match,\n            ntrans,\n            input_ranges,\n            next,\n            pattern_ids,\n            accel,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "is_match",
          "norm": null,
          "value": "false",
          "line": 1728,
          "bound": null
        }
      ],
      "ret": "StateMut {\n            id,\n            is_match,\n            ntrans,\n            input_ranges,\n            next,\n            pattern_ids,\n            accel,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}