{
  "name": "regex_automata::util::search::{impl#19}::pattern",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1554:5:1559:6",
  "doc": "/// Returns the pattern ID associated with this configuration if it is an\n/// anchored search for a specific pattern. Otherwise `None` is returned.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{Anchored, PatternID};\n///\n/// assert_eq!(None, Anchored::No.pattern());\n/// assert_eq!(None, Anchored::Yes.pattern());\n///\n/// let pid = PatternID::must(5);\n/// assert_eq!(Some(pid), Anchored::Pattern(pid).pattern());\n/// ```\n",
  "code": [
    "pub fn pattern(&self) -> Option<PatternID> {",
    "    match *self {",
    "        Anchored::Pattern(pid) => Some(pid),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1557,
          "bound": null
        },
        {
          "cond": "*self matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "false",
          "line": 1556,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 1555,
          "bound": null
        },
        {
          "cond": "*self matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 1555,
          "bound": null
        }
      ],
      "ret": "Some(pid)",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}