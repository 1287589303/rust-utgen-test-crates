{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::c_at_least",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1228:5:1301:6",
  "doc": "/// Compile the given expression such that it may be matched `n` or more\n/// times, where `n` can be any integer. (Although a particularly large\n/// integer is likely to run afoul of any configured size limits.)\n///\n/// When `greedy` is true, then the preference is for the expression to\n/// match as much as possible. Otherwise, it will match as little as\n/// possible.\n",
  "code": [
    "fn c_at_least(",
    "    &self,",
    "    expr: &Hir,",
    "    greedy: bool,",
    "    n: u32,",
    ") -> Result<ThompsonRef, BuildError> {",
    "    if n == 0 {",
    "        // When the expression cannot match the empty string, then we",
    "        // can get away with something much simpler: just one 'alt'",
    "        // instruction that optionally repeats itself. But if the expr",
    "        // can match the empty string... see below.",
    "        if expr.properties().minimum_len().map_or(false, |len| len > 0) {",
    "            let union = if greedy {",
    "                self.add_union()",
    "            } else {",
    "                self.add_union_reverse()",
    "            }?;",
    "            let compiled = self.c(expr)?;",
    "            self.patch(union, compiled.start)?;",
    "            self.patch(compiled.end, union)?;",
    "            return Ok(ThompsonRef { start: union, end: union });",
    "        }",
    "",
    "        // What's going on here? Shouldn't x* be simpler than this? It",
    "        // turns out that when implementing leftmost-first (Perl-like)",
    "        // match semantics, x* results in an incorrect preference order",
    "        // when computing the transitive closure of states if and only if",
    "        // 'x' can match the empty string. So instead, we compile x* as",
    "        // (x+)?, which preserves the correct preference order.",
    "        //",
    "        // See: https://github.com/rust-lang/regex/issues/779",
    "        let compiled = self.c(expr)?;",
    "        let plus = if greedy {",
    "            self.add_union()",
    "        } else {",
    "            self.add_union_reverse()",
    "        }?;",
    "        self.patch(compiled.end, plus)?;",
    "        self.patch(plus, compiled.start)?;",
    "",
    "        let question = if greedy {",
    "            self.add_union()",
    "        } else {",
    "            self.add_union_reverse()",
    "        }?;",
    "        let empty = self.add_empty()?;",
    "        self.patch(question, compiled.start)?;",
    "        self.patch(question, empty)?;",
    "        self.patch(plus, empty)?;",
    "        Ok(ThompsonRef { start: question, end: empty })",
    "    } else if n == 1 {",
    "        let compiled = self.c(expr)?;",
    "        let union = if greedy {",
    "            self.add_union()",
    "        } else {",
    "            self.add_union_reverse()",
    "        }?;",
    "        self.patch(compiled.end, union)?;",
    "        self.patch(union, compiled.start)?;",
    "        Ok(ThompsonRef { start: compiled.start, end: union })",
    "    } else {",
    "        let prefix = self.c_exactly(expr, n - 1)?;",
    "        let last = self.c(expr)?;",
    "        let union = if greedy {",
    "            self.add_union()",
    "        } else {",
    "            self.add_union_reverse()",
    "        }?;",
    "        self.patch(prefix.end, last.start)?;",
    "        self.patch(last.end, union)?;",
    "        self.patch(union, last.start)?;",
    "        Ok(ThompsonRef { start: prefix.start, end: union })",
    "    }",
    "}"
  ],
  "size": {
    "chain": 62,
    "contra": 0,
    "min_set": 27
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Err/None",
          "line": 1240,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        13,
        15,
        16,
        272,
        273,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        14,
        17,
        18,
        19,
        21,
        23,
        24,
        269,
        270,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1246,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        14,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        29,
        31,
        32,
        267,
        268,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1246,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1247,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        14,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        30,
        33,
        34,
        35,
        37,
        39,
        40,
        265,
        266,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1246,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1247,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: union })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        14,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        30,
        33,
        34,
        35,
        38,
        41,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Err/None",
          "line": 1240,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        272,
        273,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        19,
        21,
        23,
        24,
        269,
        270,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1246,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        29,
        31,
        32,
        267,
        268,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1246,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1247,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        30,
        33,
        34,
        35,
        37,
        39,
        40,
        265,
        266,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "true",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1246,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1247,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: union })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        30,
        33,
        34,
        35,
        38,
        41,
        271,
        274,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Err/None",
          "line": 1259,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        46,
        48,
        49,
        262,
        263,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1260,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        58,
        60,
        61,
        259,
        260,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Err/None",
          "line": 1265,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        66,
        68,
        69,
        257,
        258,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1266,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        74,
        76,
        77,
        255,
        256,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1268,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        86,
        88,
        89,
        252,
        253,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1273,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        249,
        250,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        102,
        104,
        105,
        247,
        248,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1275,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        110,
        112,
        113,
        245,
        246,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        118,
        120,
        121,
        243,
        244,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: question, end: empty })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        119,
        122,
        216,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1268,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        252,
        253,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1273,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        249,
        250,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        102,
        104,
        105,
        247,
        248,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1275,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        110,
        112,
        113,
        245,
        246,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        118,
        120,
        121,
        243,
        244,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: question, end: empty })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        51,
        52,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        119,
        122,
        216,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1260,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        58,
        60,
        61,
        259,
        260,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Err/None",
          "line": 1265,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        66,
        68,
        69,
        257,
        258,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1266,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        74,
        76,
        77,
        255,
        256,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1268,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        86,
        88,
        89,
        252,
        253,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1273,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        249,
        250,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        102,
        104,
        105,
        247,
        248,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1275,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        110,
        112,
        113,
        245,
        246,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        118,
        120,
        121,
        243,
        244,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: question, end: empty })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        79,
        80,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        119,
        122,
        216,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1268,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        252,
        253,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1273,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        249,
        250,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        102,
        104,
        105,
        247,
        248,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1275,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        110,
        112,
        113,
        245,
        246,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        118,
        120,
        121,
        243,
        244,
        251,
        254,
        261,
        264,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "expr.properties().minimum_len().map_or(false, |len| len > 0)",
          "norm": null,
          "value": "false",
          "line": 1239,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1259,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, plus)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1265,
          "bound": null
        },
        {
          "cond": "self.patch(plus, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1266,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1268,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1273,
          "bound": null
        },
        {
          "cond": "self.patch(question, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "self.patch(question, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1275,
          "bound": null
        },
        {
          "cond": "self.patch(plus, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1276,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: question, end: empty })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        42,
        43,
        44,
        47,
        50,
        53,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        67,
        70,
        71,
        72,
        75,
        78,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        98,
        99,
        100,
        103,
        106,
        107,
        108,
        111,
        114,
        115,
        116,
        119,
        122,
        216,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Err/None",
          "line": 1279,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        124,
        125,
        126,
        128,
        130,
        131,
        239,
        240,
        241,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1280,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        133,
        134,
        137,
        138,
        140,
        142,
        143,
        236,
        237,
        238,
        241,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1285,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        133,
        134,
        137,
        138,
        141,
        144,
        145,
        146,
        148,
        150,
        151,
        234,
        235,
        238,
        241,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1286,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        133,
        134,
        137,
        138,
        141,
        144,
        145,
        146,
        149,
        152,
        153,
        154,
        156,
        158,
        159,
        232,
        233,
        238,
        241,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1286,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: compiled.start, end: union })",
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        133,
        134,
        137,
        138,
        141,
        144,
        145,
        146,
        149,
        152,
        153,
        154,
        157,
        160,
        215,
        216,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1280,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        135,
        136,
        137,
        138,
        140,
        142,
        143,
        236,
        237,
        238,
        241,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1285,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        135,
        136,
        137,
        138,
        141,
        144,
        145,
        146,
        148,
        150,
        151,
        234,
        235,
        238,
        241,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1286,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        135,
        136,
        137,
        138,
        141,
        144,
        145,
        146,
        149,
        152,
        153,
        154,
        156,
        158,
        159,
        232,
        233,
        238,
        241,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "false",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1279,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1280,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1285,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1286,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: compiled.start, end: union })",
      "path": [
        0,
        123,
        124,
        125,
        126,
        129,
        132,
        135,
        136,
        137,
        138,
        141,
        144,
        145,
        146,
        149,
        152,
        153,
        154,
        157,
        160,
        215,
        216,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Err/None",
          "line": 1289,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        166,
        168,
        169,
        229,
        230,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Err/None",
          "line": 1290,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        174,
        176,
        177,
        226,
        227,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1291,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        179,
        180,
        183,
        184,
        186,
        188,
        189,
        223,
        224,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1296,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        179,
        180,
        183,
        184,
        187,
        190,
        191,
        192,
        194,
        196,
        197,
        221,
        222,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1296,
          "bound": null
        },
        {
          "cond": "self.patch(last.end, union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1297,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        179,
        180,
        183,
        184,
        187,
        190,
        191,
        192,
        195,
        198,
        199,
        200,
        202,
        204,
        205,
        219,
        220,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1296,
          "bound": null
        },
        {
          "cond": "self.patch(last.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1297,
          "bound": null
        },
        {
          "cond": "self.patch(union, last.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1298,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        179,
        180,
        183,
        184,
        187,
        190,
        191,
        192,
        195,
        198,
        199,
        200,
        203,
        206,
        207,
        208,
        210,
        212,
        213,
        217,
        218,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1296,
          "bound": null
        },
        {
          "cond": "self.patch(last.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1297,
          "bound": null
        },
        {
          "cond": "self.patch(union, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1298,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: prefix.start, end: union })",
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        179,
        180,
        183,
        184,
        187,
        190,
        191,
        192,
        195,
        198,
        199,
        200,
        203,
        206,
        207,
        208,
        211,
        214,
        215,
        216,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Err/None",
          "line": 1291,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        181,
        182,
        183,
        184,
        186,
        188,
        189,
        223,
        224,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1296,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        181,
        182,
        183,
        184,
        187,
        190,
        191,
        192,
        194,
        196,
        197,
        221,
        222,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1296,
          "bound": null
        },
        {
          "cond": "self.patch(last.end, union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1297,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        181,
        182,
        183,
        184,
        187,
        190,
        191,
        192,
        195,
        198,
        199,
        200,
        202,
        204,
        205,
        219,
        220,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1296,
          "bound": null
        },
        {
          "cond": "self.patch(last.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1297,
          "bound": null
        },
        {
          "cond": "self.patch(union, last.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1298,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        181,
        182,
        183,
        184,
        187,
        190,
        191,
        192,
        195,
        198,
        199,
        200,
        203,
        206,
        207,
        208,
        210,
        212,
        213,
        217,
        218,
        225,
        228,
        231,
        242,
        275,
        276
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 1234,
          "bound": null
        },
        {
          "cond": "n == 1",
          "norm": "1 == n",
          "value": "true",
          "line": 1278,
          "bound": null
        },
        {
          "cond": "self.c_exactly(expr, n - 1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1289,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1290,
          "bound": null
        },
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1291,
          "bound": null
        },
        {
          "cond": "self.patch(prefix.end, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1296,
          "bound": null
        },
        {
          "cond": "self.patch(last.end, union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1297,
          "bound": null
        },
        {
          "cond": "self.patch(union, last.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1298,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: prefix.start, end: union })",
      "path": [
        0,
        123,
        161,
        162,
        163,
        164,
        167,
        170,
        171,
        172,
        175,
        178,
        181,
        182,
        183,
        184,
        187,
        190,
        191,
        192,
        195,
        198,
        199,
        200,
        203,
        206,
        207,
        208,
        211,
        214,
        215,
        216,
        276
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}