{
  "name": "regex_automata::nfa::thompson::range_trie::{impl#0}::insert",
  "mod_info": {
    "name": "nfa::thompson::range_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:70:1:70:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/range_trie.rs:295:5:426:6",
  "doc": "/// Inserts a new sequence of ranges into this trie.\n///\n/// The sequence given must be non-empty and must not have a length\n/// exceeding 4.\n",
  "code": [
    "pub fn insert(&mut self, ranges: &[Utf8Range]) {",
    "    assert!(!ranges.is_empty());",
    "    assert!(ranges.len() <= 4);",
    "",
    "    let mut stack = mem::replace(&mut self.insert_stack, vec![]);",
    "    stack.clear();",
    "",
    "    stack.push(NextInsert::new(ROOT, ranges));",
    "    while let Some(next) = stack.pop() {",
    "        let (state_id, ranges) = (next.state_id(), next.ranges());",
    "        assert!(!ranges.is_empty());",
    "",
    "        let (mut new, rest) = (ranges[0], &ranges[1..]);",
    "",
    "        // i corresponds to the position of the existing transition on",
    "        // which we are operating. Typically, the result is to remove the",
    "        // transition and replace it with two or more new transitions",
    "        // corresponding to the partitions generated by splitting the",
    "        // 'new' with the ith transition's range.",
    "        let mut i = self.state(state_id).find(new);",
    "",
    "        // In this case, there is no overlap *and* the new range is greater",
    "        // than all existing ranges. So we can just add it to the end.",
    "        if i == self.state(state_id).transitions.len() {",
    "            let next_id = NextInsert::push(self, &mut stack, rest);",
    "            self.add_transition(state_id, new, next_id);",
    "            continue;",
    "        }",
    "",
    "        // The need for this loop is a bit subtle, buf basically, after",
    "        // we've handled the partitions from our initial split, it's",
    "        // possible that there will be a partition leftover that overlaps",
    "        // with a subsequent transition. If so, then we have to repeat",
    "        // the split process again with the leftovers and that subsequent",
    "        // transition.",
    "        'OUTER: loop {",
    "            let old = self.state(state_id).transitions[i].clone();",
    "            let split = match Split::new(old.range, new) {",
    "                Some(split) => split,",
    "                None => {",
    "                    let next_id = NextInsert::push(self, &mut stack, rest);",
    "                    self.add_transition_at(i, state_id, new, next_id);",
    "                    continue;",
    "                }",
    "            };",
    "            let splits = split.as_slice();",
    "            // If we only have one partition, then the ranges must be",
    "            // equivalent. There's nothing to do here for this state, so",
    "            // just move on to the next one.",
    "            if splits.len() == 1 {",
    "                // ... but only if we have anything left to do.",
    "                if !rest.is_empty() {",
    "                    stack.push(NextInsert::new(old.next_id, rest));",
    "                }",
    "                break;",
    "            }",
    "            // At this point, we know that 'split' is non-empty and there",
    "            // must be some overlap AND that the two ranges are not",
    "            // equivalent. Therefore, the existing range MUST be removed",
    "            // and split up somehow. Instead of actually doing the removal",
    "            // and then a subsequent insertion---with all the memory",
    "            // shuffling that entails---we simply overwrite the transition",
    "            // at position `i` for the first new transition we want to",
    "            // insert. After that, we're forced to do expensive inserts.",
    "            let mut first = true;",
    "            let mut add_trans =",
    "                |trie: &mut RangeTrie, pos, from, range, to| {",
    "                    if first {",
    "                        trie.set_transition_at(pos, from, range, to);",
    "                        first = false;",
    "                    } else {",
    "                        trie.add_transition_at(pos, from, range, to);",
    "                    }",
    "                };",
    "            for (j, &srange) in splits.iter().enumerate() {",
    "                match srange {",
    "                    SplitRange::Old(r) => {",
    "                        // Deep clone the state pointed to by the ith",
    "                        // transition. This is always necessary since 'old'",
    "                        // is always coupled with at least a 'both'",
    "                        // partition. We don't want any new changes made",
    "                        // via the 'both' partition to impact the part of",
    "                        // the transition that doesn't overlap with the",
    "                        // new range.",
    "                        let dup_id = self.duplicate(old.next_id);",
    "                        add_trans(self, i, state_id, r, dup_id);",
    "                    }",
    "                    SplitRange::New(r) => {",
    "                        // This is a bit subtle, but if this happens to be",
    "                        // the last partition in our split, it is possible",
    "                        // that this overlaps with a subsequent transition.",
    "                        // If it does, then we must repeat the whole",
    "                        // splitting process over again with `r` and the",
    "                        // subsequent transition.",
    "                        {",
    "                            let trans = &self.state(state_id).transitions;",
    "                            if j + 1 == splits.len()",
    "                                && i < trans.len()",
    "                                && intersects(r, trans[i].range)",
    "                            {",
    "                                new = r;",
    "                                continue 'OUTER;",
    "                            }",
    "                        }",
    "",
    "                        // ... otherwise, setup exploration for a new",
    "                        // empty state and add a brand new transition for",
    "                        // this new range.",
    "                        let next_id =",
    "                            NextInsert::push(self, &mut stack, rest);",
    "                        add_trans(self, i, state_id, r, next_id);",
    "                    }",
    "                    SplitRange::Both(r) => {",
    "                        // Continue adding the remaining ranges on this",
    "                        // path and update the transition with the new",
    "                        // range.",
    "                        if !rest.is_empty() {",
    "                            stack.push(NextInsert::new(old.next_id, rest));",
    "                        }",
    "                        add_trans(self, i, state_id, r, old.next_id);",
    "                    }",
    "                }",
    "                i += 1;",
    "            }",
    "            // If we've reached this point, then we know that there are",
    "            // no subsequent transitions with any overlap. Therefore, we",
    "            // can stop processing this range and move on to the next one.",
    "            break;",
    "        }",
    "    }",
    "    self.insert_stack = stack;",
    "}"
  ],
  "size": {
    "chain": 23,
    "contra": 12,
    "min_set": 13
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 296,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        105
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 305,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        103,
        105
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "true",
          "line": 318,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "true",
          "line": 346,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        46,
        47,
        48,
        52,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "false",
          "line": 346,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        46,
        47,
        49,
        50,
        51,
        52,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Both(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "true",
          "line": 411,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        67,
        87,
        88,
        92,
        93,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Both(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "false",
          "line": 411,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        67,
        87,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "j + 1 == splits.len()",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "i < trans.len()",
          "norm": null,
          "value": "true",
          "line": 392,
          "bound": null
        },
        {
          "cond": "intersects(r, trans[i].range)",
          "norm": null,
          "value": "false",
          "line": 393,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        66,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        81,
        84,
        85,
        86,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "j + 1 == splits.len()",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "i < trans.len()",
          "norm": null,
          "value": "false",
          "line": 392,
          "bound": "i == trans.len()"
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        66,
        71,
        72,
        73,
        74,
        75,
        76,
        82,
        84,
        85,
        86,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "j + 1 == splits.len()",
          "norm": null,
          "value": "false",
          "line": 391,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        66,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Old(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Old(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        68,
        69,
        70,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "true",
          "line": 346,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        46,
        47,
        48,
        52,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "false",
          "line": 346,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        46,
        47,
        49,
        50,
        51,
        52,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Both(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "true",
          "line": 411,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        67,
        87,
        88,
        92,
        93,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Both(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "rest.is_empty()",
          "norm": null,
          "value": "false",
          "line": 411,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        67,
        87,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "j + 1 == splits.len()",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "i < trans.len()",
          "norm": null,
          "value": "true",
          "line": 392,
          "bound": null
        },
        {
          "cond": "intersects(r, trans[i].range)",
          "norm": null,
          "value": "false",
          "line": 393,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        66,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        81,
        84,
        85,
        86,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "j + 1 == splits.len()",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "i < trans.len()",
          "norm": null,
          "value": "false",
          "line": 392,
          "bound": "i == trans.len()"
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        66,
        71,
        72,
        73,
        74,
        75,
        76,
        82,
        84,
        85,
        86,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::New(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "j + 1 == splits.len()",
          "norm": null,
          "value": "false",
          "line": 391,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        66,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 369,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Old(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "srange matches SplitRange::Old(r)",
          "norm": null,
          "value": "true",
          "line": 370,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        62,
        65,
        68,
        69,
        70,
        94,
        95,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "true",
          "line": 297,
          "bound": "ranges.len() == 4"
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        },
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 305,
          "bound": null
        },
        {
          "cond": "i == self.state(state_id).transitions.len()",
          "norm": null,
          "value": "false",
          "line": 318,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches None",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "Split::new(old.range, new) matches Some(split)",
          "norm": null,
          "value": "true",
          "line": 332,
          "bound": null
        },
        {
          "cond": "splits.len() == 1",
          "norm": "1 == splits.len()",
          "value": "true",
          "line": 344,
          "bound": null
        },
        {
          "cond": "(j, &srange) in splits.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 369,
          "bound": null
        },
        {
          "cond": "let Some(next) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        42,
        43,
        97,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        44,
        45,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        96,
        12,
        13,
        14,
        98,
        99,
        101,
        102
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 296,
          "bound": null
        },
        {
          "cond": "ranges.len() <= 4",
          "norm": "4 >= ranges.len()",
          "value": "false",
          "line": 297,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        6,
        105
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}