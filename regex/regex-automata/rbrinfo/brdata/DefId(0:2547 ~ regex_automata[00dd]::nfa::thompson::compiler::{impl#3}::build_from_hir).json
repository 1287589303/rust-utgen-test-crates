{
  "name": "regex_automata::nfa::thompson::compiler::{impl#3}::build_from_hir",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:836:5:838:6",
  "doc": "/// Compile the given high level intermediate representation of a regular\n/// expression into an NFA.\n///\n/// If there was a problem building the NFA, then an error is returned. The\n/// only error that can occur is if the compiled regex would exceed the\n/// size limits configured on this builder, or if any part of the NFA would\n/// exceed the integer representations used. (For example, too many states\n/// might plausibly occur on a 16-bit target.)\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, pikevm::PikeVM}, Match};\n/// use regex_syntax::hir::{Hir, Class, ClassBytes, ClassBytesRange};\n///\n/// let hir = Hir::class(Class::Bytes(ClassBytes::new(vec![\n///     ClassBytesRange::new(b'0', b'9'),\n///     ClassBytesRange::new(b'A', b'Z'),\n///     ClassBytesRange::new(b'_', b'_'),\n///     ClassBytesRange::new(b'a', b'z'),\n/// ])));\n///\n/// let config = NFA::config().nfa_size_limit(Some(1_000));\n/// let nfa = NFA::compiler().configure(config).build_from_hir(&hir)?;\n///\n/// let re = PikeVM::new_from_nfa(nfa)?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n/// let expected = Some(Match::must(0, 3..4));\n/// re.captures(&mut cache, \"!@#A#@!\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_from_hir(&self, expr: &Hir) -> Result<NFA, BuildError> {",
    "    self.build_many_from_hir(&[expr])",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}