{
  "name": "regex_automata::hybrid::regex::{impl#0}::new_many",
  "mod_info": {
    "name": "hybrid::regex",
    "loc": "regex-automata/src/hybrid/mod.rs:143:1:143:15"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/regex.rs:146:5:150:6",
  "doc": "/// Like `new`, but parses multiple patterns into a single \"multi regex.\"\n/// This similarly uses the default regex configuration.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{hybrid::regex::Regex, Match};\n///\n/// let re = Regex::new_many(&[\"[a-z]+\", \"[0-9]+\"])?;\n/// let mut cache = re.create_cache();\n///\n/// let mut it = re.find_iter(&mut cache, \"abc 1 foo 4567 0 quux\");\n/// assert_eq!(Some(Match::must(0, 0..3)), it.next());\n/// assert_eq!(Some(Match::must(1, 4..5)), it.next());\n/// assert_eq!(Some(Match::must(0, 6..9)), it.next());\n/// assert_eq!(Some(Match::must(1, 10..14)), it.next());\n/// assert_eq!(Some(Match::must(1, 15..16)), it.next());\n/// assert_eq!(Some(Match::must(0, 17..21)), it.next());\n/// assert_eq!(None, it.next());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new_many<P: AsRef<str>>(",
    "    patterns: &[P],",
    ") -> Result<Regex, BuildError> {",
    "    Regex::builder().build_many(patterns)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}