{
  "name": "regex_automata::dfa::automaton::Automaton::get_prefilter",
  "mod_info": {
    "name": "dfa::automaton",
    "loc": "regex-automata/src/dfa/mod.rs:348:1:348:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/automaton.rs:1160:5:1162:6",
  "doc": "/// Returns the prefilter associated with a DFA, if one exists.\n///\n/// The default implementation of this trait always returns `None`. And\n/// indeed, it is always correct to return `None`.\n///\n/// For DFAs in this crate, a prefilter can be attached to a DFA via\n/// [`dense::Config::prefilter`](crate::dfa::dense::Config::prefilter).\n///\n/// Do note that prefilters are not serialized by DFAs in this crate.\n/// So if you deserialize a DFA that had a prefilter attached to it\n/// at serialization time, then it will not have a prefilter after\n/// deserialization.\n",
  "code": [
    "fn get_prefilter(&self) -> Option<&Prefilter> {",
    "    None",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "None",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}