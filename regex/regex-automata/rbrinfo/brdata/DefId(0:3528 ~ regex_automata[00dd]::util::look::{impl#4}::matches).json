{
  "name": "regex_automata::util::look::{impl#4}::matches",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:635:5:637:6",
  "doc": "/// Returns true when the position `at` in `haystack` satisfies the given\n/// look-around assertion.\n///\n/// # Panics\n///\n/// This panics when testing any Unicode word boundary assertion in this\n/// set and when the Unicode word data is not available. Specifically, this\n/// only occurs when the `unicode-word-boundary` feature is not enabled.\n///\n/// Since it's generally expected that this routine is called inside of\n/// a matching engine, callers should check the error condition when\n/// building the matching engine. If there is a Unicode word boundary\n/// in the matcher and the data isn't available, then the matcher should\n/// fail to build.\n///\n/// Callers can check the error condition with [`LookSet::available`].\n///\n/// This also may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n",
  "code": [
    "pub fn matches(&self, look: Look, haystack: &[u8], at: usize) -> bool {",
    "    self.matches_inline(look, haystack, at)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}