{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#5}::nexts_overlapping",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1495:5:1528:6",
  "doc": "/// Like 'nexts', but for the overlapping case. This doesn't write any\n/// slots, and instead just writes which pattern matched in 'patset'.\n",
  "code": [
    "fn nexts_overlapping(",
    "    &self,",
    "    stack: &mut Vec<FollowEpsilon>,",
    "    curr: &mut ActiveStates,",
    "    next: &mut ActiveStates,",
    "    input: &Input<'_>,",
    "    at: usize,",
    "    patset: &mut PatternSet,",
    ") {",
    "    instrument!(|c| c.record_state_set(&curr.set));",
    "    let utf8empty = self.get_nfa().has_empty() && self.get_nfa().is_utf8();",
    "    let ActiveStates { ref set, ref mut slot_table } = *curr;",
    "    for sid in set.iter() {",
    "        let pid = match self.next(stack, slot_table, next, input, at, sid)",
    "        {",
    "            None => continue,",
    "            Some(pid) => pid,",
    "        };",
    "        // This handles the case of finding a zero-width match that splits",
    "        // a codepoint. Namely, if we're in UTF-8 mode AND we know we can",
    "        // match the empty string, then the only valid way of getting to",
    "        // this point with an offset that splits a codepoint is when we",
    "        // have an empty match. Such matches, in UTF-8 mode, must not be",
    "        // reported. So we just skip them here and pretend as if we did",
    "        // not see a match.",
    "        if utf8empty && !input.is_char_boundary(at) {",
    "            continue;",
    "        }",
    "        let _ = patset.try_insert(pid);",
    "        if !self.config.get_match_kind().continue_past_first_match() {",
    "            break;",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 14,
    "contra": 8,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(at)",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "true",
          "line": 1524,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        29,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(at)",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "false",
          "line": 1524,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(at)",
          "norm": null,
          "value": "false",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        21,
        22,
        24,
        33,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "true",
          "line": 1524,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        25,
        26,
        27,
        28,
        29,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "false",
          "line": 1524,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        25,
        26,
        27,
        28,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches None",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches None",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        19,
        32,
        33,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(at)",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "true",
          "line": 1524,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        29,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(at)",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "false",
          "line": 1524,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(at)",
          "norm": null,
          "value": "false",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        21,
        22,
        24,
        33,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "true",
          "line": 1524,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        25,
        26,
        27,
        28,
        29,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1520,
          "bound": null
        },
        {
          "cond": "self.config.get_match_kind().continue_past_first_match()",
          "norm": null,
          "value": "false",
          "line": 1524,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        20,
        25,
        26,
        27,
        28,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "true",
          "line": 1507,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches None",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "self.next(stack, slot_table, next, input, at, sid) matches None",
          "norm": null,
          "value": "true",
          "line": 1508,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        19,
        32,
        33,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1505,
          "bound": null
        },
        {
          "cond": "sid in set.iter()",
          "norm": null,
          "value": "false",
          "line": 1507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        31
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}