{
  "name": "regex_automata::meta::wrappers::{impl#1}::new",
  "mod_info": {
    "name": "meta::wrappers",
    "loc": "regex-automata/src/meta/mod.rs:62:1:62:14"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/wrappers.rs:74:5:88:6",
  "doc": "",
  "code": [
    "pub(crate) fn new(",
    "    info: &RegexInfo,",
    "    pre: Option<Prefilter>,",
    "    nfa: &NFA,",
    ") -> Result<PikeVMEngine, BuildError> {",
    "    let pikevm_config = pikevm::Config::new()",
    "        .match_kind(info.config().get_match_kind())",
    "        .prefilter(pre);",
    "    let engine = pikevm::Builder::new()",
    "        .configure(pikevm_config)",
    "        .build_from_nfa(nfa.clone())",
    "        .map_err(BuildError::nfa)?;",
    "    debug!(\"PikeVM built\");",
    "    Ok(PikeVMEngine(engine))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "pikevm::Builder::new()\n            .configure(pikevm_config)\n            .build_from_nfa(nfa.clone())\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 82,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        24,
        25,
        26,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "pikevm::Builder::new()\n            .configure(pikevm_config)\n            .build_from_nfa(nfa.clone())\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 82,
          "bound": null
        }
      ],
      "ret": "Ok(PikeVMEngine(engine))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        28
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}