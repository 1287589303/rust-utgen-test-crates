{
  "name": "regex_automata::hybrid::dfa::{impl#8}::specialize_start_states",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:3448:5:3451:6",
  "doc": "/// Enable specializing start states in the lazy DFA.\n///\n/// When start states are specialized, an implementor of a search routine\n/// using a lazy DFA can tell when the search has entered a starting state.\n/// When start states aren't specialized, then it is impossible to know\n/// whether the search has entered a start state.\n///\n/// Ideally, this option wouldn't need to exist and we could always\n/// specialize start states. The problem is that start states can be quite\n/// active. This in turn means that an efficient search routine is likely\n/// to ping-pong between a heavily optimized hot loop that handles most\n/// states and to a less optimized specialized handling of start states.\n/// This causes branches to get heavily mispredicted and overall can\n/// materially decrease throughput. Therefore, specializing start states\n/// should only be enabled when it is needed.\n///\n/// Knowing whether a search is in a start state is typically useful when a\n/// prefilter is active for the search. A prefilter is typically only run\n/// when in a start state and a prefilter can greatly accelerate a search.\n/// Therefore, the possible cost of specializing start states is worth it\n/// in this case. Otherwise, if you have no prefilter, there is likely no\n/// reason to specialize start states.\n///\n/// This is disabled by default, but note that it is automatically\n/// enabled (or disabled) if [`Config::prefilter`] is set. Namely, unless\n/// `specialize_start_states` has already been set, [`Config::prefilter`]\n/// will automatically enable or disable it based on whether a prefilter\n/// is present or not, respectively. This is done because a prefilter's\n/// effectiveness is rooted in being executed whenever the DFA is in a\n/// start state, and that's only possible to do when they are specialized.\n///\n/// Note that it is plausibly reasonable to _disable_ this option\n/// explicitly while _enabling_ a prefilter. In that case, a prefilter\n/// will still be run at the beginning of a search, but never again. This\n/// in theory could strike a good balance if you're in a situation where a\n/// prefilter is likely to produce many false positive candidates.\n///\n/// # Example\n///\n/// This example shows how to enable start state specialization and then\n/// shows how to check whether a state is a start state or not.\n///\n/// ```\n/// use regex_automata::{hybrid::dfa::DFA, MatchError, Input};\n///\n/// let dfa = DFA::builder()\n///     .configure(DFA::config().specialize_start_states(true))\n///     .build(r\"[a-z]+\")?;\n/// let mut cache = dfa.create_cache();\n///\n/// let haystack = \"123 foobar 4567\".as_bytes();\n/// let sid = dfa.start_state_forward(&mut cache, &Input::new(haystack))?;\n/// // The ID returned by 'start_state_forward' will always be tagged as\n/// // a start state when start state specialization is enabled.\n/// assert!(sid.is_tagged());\n/// assert!(sid.is_start());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Compare the above with the default lazy DFA configuration where\n/// start states are _not_ specialized. In this case, the start state\n/// is not tagged and `sid.is_start()` returns false.\n///\n/// ```\n/// use regex_automata::{hybrid::dfa::DFA, MatchError, Input};\n///\n/// let dfa = DFA::new(r\"[a-z]+\")?;\n/// let mut cache = dfa.create_cache();\n///\n/// let haystack = \"123 foobar 4567\".as_bytes();\n/// let sid = dfa.start_state_forward(&mut cache, &Input::new(haystack))?;\n/// // Start states are not tagged in the default configuration!\n/// assert!(!sid.is_tagged());\n/// assert!(!sid.is_start());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn specialize_start_states(mut self, yes: bool) -> Config {",
    "    self.specialize_start_states = Some(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}