{
  "name": "regex_automata::dfa::dense::{impl#24}::write_to",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4467:5:4506:6",
  "doc": "/// Writes a serialized form of these match states to the buffer given. If\n/// the buffer is too small, then an error is returned. To determine how\n/// big the buffer must be, use `write_to_len`.\n",
  "code": [
    "fn write_to<E: Endian>(",
    "    &self,",
    "    mut dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    let nwrite = self.write_to_len();",
    "    if dst.len() < nwrite {",
    "        return Err(SerializeError::buffer_too_small(\"match states\"));",
    "    }",
    "    dst = &mut dst[..nwrite];",
    "",
    "    // write state ID length",
    "    // Unwrap is OK since number of states is guaranteed to fit in a u32.",
    "    E::write_u32(u32::try_from(self.len()).unwrap(), dst);",
    "    dst = &mut dst[size_of::<u32>()..];",
    "",
    "    // write slice offset pairs",
    "    for &pid in self.slices() {",
    "        let n = wire::write_pattern_id::<E>(pid, &mut dst);",
    "        dst = &mut dst[n..];",
    "    }",
    "",
    "    // write unique pattern ID length",
    "    // Unwrap is OK since number of patterns is guaranteed to fit in a u32.",
    "    E::write_u32(u32::try_from(self.pattern_len).unwrap(), dst);",
    "    dst = &mut dst[size_of::<u32>()..];",
    "",
    "    // write pattern ID length",
    "    // Unwrap is OK since we check at construction (and deserialization)",
    "    // that the number of patterns is representable as a u32.",
    "    E::write_u32(u32::try_from(self.pattern_ids().len()).unwrap(), dst);",
    "    dst = &mut dst[size_of::<u32>()..];",
    "",
    "    // write pattern IDs",
    "    for &pid in self.pattern_ids() {",
    "        let n = wire::write_pattern_id::<E>(pid, &mut dst);",
    "        dst = &mut dst[n..];",
    "    }",
    "",
    "    Ok(nwrite)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 3,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "true",
          "line": 4472,
          "bound": null
        }
      ],
      "ret": "Err(SerializeError::buffer_too_small(\"match states\"))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 4472,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "&pid in self.slices()",
          "norm": null,
          "value": "true",
          "line": 4483,
          "bound": null
        },
        {
          "cond": "&pid in self.slices()",
          "norm": null,
          "value": "false",
          "line": 4483,
          "bound": null
        },
        {
          "cond": "&pid in self.pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 4500,
          "bound": null
        },
        {
          "cond": "&pid in self.pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 4500,
          "bound": null
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        15,
        16,
        17,
        19,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        45,
        46,
        38,
        39,
        40,
        42,
        44,
        47
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 4472,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "&pid in self.slices()",
          "norm": null,
          "value": "true",
          "line": 4483,
          "bound": null
        },
        {
          "cond": "&pid in self.slices()",
          "norm": null,
          "value": "false",
          "line": 4483,
          "bound": null
        },
        {
          "cond": "&pid in self.pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 4500,
          "bound": null
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        15,
        16,
        17,
        19,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        47
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 4472,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "&pid in self.slices()",
          "norm": null,
          "value": "false",
          "line": 4483,
          "bound": null
        },
        {
          "cond": "&pid in self.pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 4500,
          "bound": null
        },
        {
          "cond": "&pid in self.pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 4500,
          "bound": null
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        45,
        46,
        38,
        39,
        40,
        42,
        44,
        47
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 4472,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "&pid in self.slices()",
          "norm": null,
          "value": "false",
          "line": 4483,
          "bound": null
        },
        {
          "cond": "&pid in self.pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 4500,
          "bound": null
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        47
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}