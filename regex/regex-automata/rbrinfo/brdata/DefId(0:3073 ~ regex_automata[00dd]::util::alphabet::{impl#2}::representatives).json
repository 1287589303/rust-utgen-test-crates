{
  "name": "regex_automata::util::alphabet::{impl#2}::representatives",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:412:5:441:6",
  "doc": "/// Returns an iterator over a sequence of representative bytes from each\n/// equivalence class within the range of bytes given.\n///\n/// When the given range is unbounded on both sides, the iterator yields\n/// exactly N items, where N is equivalent to the number of equivalence\n/// classes. Each item is an arbitrary byte drawn from each equivalence\n/// class.\n///\n/// This is useful when one is determinizing an NFA and the NFA's alphabet\n/// hasn't been converted to equivalence classes. Picking an arbitrary byte\n/// from each equivalence class then permits a full exploration of the NFA\n/// instead of using every possible byte value and thus potentially saves\n/// quite a lot of redundant work.\n///\n/// # Example\n///\n/// This shows an example of what a complete sequence of representatives\n/// might look like from a real example.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, util::alphabet::Unit};\n///\n/// let nfa = NFA::new(\"[a-z]+\")?;\n/// let classes = nfa.byte_classes();\n/// let reps: Vec<Unit> = classes.representatives(..).collect();\n/// // Note that the specific byte values yielded are not guaranteed!\n/// let expected = vec![\n///     Unit::u8(b'\\x00'),\n///     Unit::u8(b'a'),\n///     Unit::u8(b'{'),\n///     Unit::eoi(3),\n/// ];\n/// assert_eq!(expected, reps);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Note though, that you can ask for an arbitrary range of bytes, and only\n/// representatives for that range will be returned:\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, util::alphabet::Unit};\n///\n/// let nfa = NFA::new(\"[a-z]+\")?;\n/// let classes = nfa.byte_classes();\n/// let reps: Vec<Unit> = classes.representatives(b'A'..=b'z').collect();\n/// // Note that the specific byte values yielded are not guaranteed!\n/// let expected = vec![\n///     Unit::u8(b'A'),\n///     Unit::u8(b'a'),\n/// ];\n/// assert_eq!(expected, reps);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn representatives<R: core::ops::RangeBounds<u8>>(",
    "    &self,",
    "    range: R,",
    ") -> ByteClassRepresentatives<'_> {",
    "    use core::ops::Bound;",
    "",
    "    let cur_byte = match range.start_bound() {",
    "        Bound::Included(&i) => usize::from(i),",
    "        Bound::Excluded(&i) => usize::from(i).checked_add(1).unwrap(),",
    "        Bound::Unbounded => 0,",
    "    };",
    "    let end_byte = match range.end_bound() {",
    "        Bound::Included(&i) => {",
    "            Some(usize::from(i).checked_add(1).unwrap())",
    "        }",
    "        Bound::Excluded(&i) => Some(usize::from(i)),",
    "        Bound::Unbounded => None,",
    "    };",
    "    assert_ne!(",
    "        cur_byte,",
    "        usize::MAX,",
    "        \"start range must be less than usize::MAX\",",
    "    );",
    "    ByteClassRepresentatives {",
    "        classes: self,",
    "        cur_byte,",
    "        end_byte,",
    "        last_class: None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 18,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        12,
        13,
        17,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        5,
        12,
        13,
        17,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        12,
        13,
        16,
        22,
        23,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        5,
        12,
        13,
        16,
        22,
        23,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        12,
        13,
        15,
        18,
        19,
        20,
        21,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        5,
        12,
        13,
        15,
        18,
        19,
        20,
        21,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        22,
        23,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        22,
        23,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        18,
        19,
        20,
        21,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        18,
        19,
        20,
        21,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        7,
        12,
        13,
        17,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        3,
        6,
        7,
        12,
        13,
        17,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        7,
        12,
        13,
        16,
        22,
        23,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        3,
        6,
        7,
        12,
        13,
        16,
        22,
        23,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        7,
        12,
        13,
        15,
        18,
        19,
        20,
        21,
        24,
        25,
        26,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }",
      "path": [
        0,
        1,
        3,
        6,
        7,
        12,
        13,
        15,
        18,
        19,
        20,
        21,
        24,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}