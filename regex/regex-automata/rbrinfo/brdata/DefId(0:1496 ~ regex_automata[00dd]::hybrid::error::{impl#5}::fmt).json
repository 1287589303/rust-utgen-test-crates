{
  "name": "regex_automata::hybrid::error::{impl#5}::fmt",
  "mod_info": {
    "name": "hybrid::error",
    "loc": "regex-automata/src/hybrid/mod.rs:141:1:141:11"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/error.rs:164:5:202:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    match *self {",
    "        StartError::Cache { .. } => write!(",
    "            f,",
    "            \"error computing start state because of cache inefficiency\"",
    "        ),",
    "        StartError::Quit { byte } => write!(",
    "            f,",
    "            \"error computing start state because the look-behind byte \\",
    "             {:?} triggered a quit state\",",
    "            crate::util::escape::DebugByte(byte),",
    "        ),",
    "        StartError::UnsupportedAnchored { mode: Anchored::Yes } => {",
    "            write!(",
    "                f,",
    "                \"error computing start state because \\",
    "                 anchored searches are not supported or enabled\"",
    "            )",
    "        }",
    "        StartError::UnsupportedAnchored { mode: Anchored::No } => {",
    "            write!(",
    "                f,",
    "                \"error computing start state because \\",
    "                 unanchored searches are not supported or enabled\"",
    "            )",
    "        }",
    "        StartError::UnsupportedAnchored {",
    "            mode: Anchored::Pattern(pid),",
    "        } => {",
    "            write!(",
    "                f,",
    "                \"error computing start state because \\",
    "                 anchored searches for a specific pattern ({}) \\",
    "                 are not supported or enabled\",",
    "                pid.as_usize(),",
    "            )",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches StartError::UnsupportedAnchored { mode: Anchored::No } or StartError::UnsupportedAnchored { mode: Anchored::Yes } or StartError::UnsupportedAnchored {\n                mode: Anchored::Pattern(pid),\n            }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        },
        {
          "cond": "*self matches StartError::UnsupportedAnchored { mode: Anchored::No } or StartError::UnsupportedAnchored { mode: Anchored::Yes } or StartError::UnsupportedAnchored {\n                mode: Anchored::Pattern(pid),\n            }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        7,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches StartError::UnsupportedAnchored { mode: Anchored::No } or StartError::UnsupportedAnchored { mode: Anchored::Yes } or StartError::UnsupportedAnchored {\n                mode: Anchored::Pattern(pid),\n            }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        },
        {
          "cond": "*self matches StartError::Quit { byte }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        },
        {
          "cond": "*self matches StartError::UnsupportedAnchored { mode: Anchored::Yes }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        5,
        15,
        16,
        17,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches StartError::UnsupportedAnchored { mode: Anchored::No } or StartError::UnsupportedAnchored { mode: Anchored::Yes } or StartError::UnsupportedAnchored {\n                mode: Anchored::Pattern(pid),\n            }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        },
        {
          "cond": "*self matches StartError::Cache { .. }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        },
        {
          "cond": "*self matches StartError::UnsupportedAnchored { mode: Anchored::No }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        6,
        18,
        19,
        20,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches StartError::Quit { byte }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        },
        {
          "cond": "*self matches StartError::Quit { byte }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        11,
        12,
        13,
        14,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches StartError::Cache { .. }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        },
        {
          "cond": "*self matches StartError::Cache { .. }",
          "norm": null,
          "value": "true",
          "line": 165,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        25
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}