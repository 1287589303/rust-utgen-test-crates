{
  "name": "regex_automata::meta::regex::{impl#20}::overwrite",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3211:5:3234:6",
  "doc": "/// Overwrite the default configuration such that the options in `o` are\n/// always used. If an option in `o` is not set, then the corresponding\n/// option in `self` is used. If it's not set in `self` either, then it\n/// remains not set.\n",
  "code": [
    "pub(crate) fn overwrite(&self, o: Config) -> Config {",
    "    Config {",
    "        match_kind: o.match_kind.or(self.match_kind),",
    "        utf8_empty: o.utf8_empty.or(self.utf8_empty),",
    "        autopre: o.autopre.or(self.autopre),",
    "        pre: o.pre.or_else(|| self.pre.clone()),",
    "        which_captures: o.which_captures.or(self.which_captures),",
    "        nfa_size_limit: o.nfa_size_limit.or(self.nfa_size_limit),",
    "        onepass_size_limit: o",
    "            .onepass_size_limit",
    "            .or(self.onepass_size_limit),",
    "        hybrid_cache_capacity: o",
    "            .hybrid_cache_capacity",
    "            .or(self.hybrid_cache_capacity),",
    "        hybrid: o.hybrid.or(self.hybrid),",
    "        dfa: o.dfa.or(self.dfa),",
    "        dfa_size_limit: o.dfa_size_limit.or(self.dfa_size_limit),",
    "        dfa_state_limit: o.dfa_state_limit.or(self.dfa_state_limit),",
    "        onepass: o.onepass.or(self.onepass),",
    "        backtrack: o.backtrack.or(self.backtrack),",
    "        byte_classes: o.byte_classes.or(self.byte_classes),",
    "        line_terminator: o.line_terminator.or(self.line_terminator),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config {\n            match_kind: o.match_kind.or(self.match_kind),\n            utf8_empty: o.utf8_empty.or(self.utf8_empty),\n            autopre: o.autopre.or(self.autopre),\n            pre: o.pre.or_else(|| self.pre.clone()),\n            which_captures: o.which_captures.or(self.which_captures),\n            nfa_size_limit: o.nfa_size_limit.or(self.nfa_size_limit),\n            onepass_size_limit: o\n                .onepass_size_limit\n                .or(self.onepass_size_limit),\n            hybrid_cache_capacity: o\n                .hybrid_cache_capacity\n                .or(self.hybrid_cache_capacity),\n            hybrid: o.hybrid.or(self.hybrid),\n            dfa: o.dfa.or(self.dfa),\n            dfa_size_limit: o.dfa_size_limit.or(self.dfa_size_limit),\n            dfa_state_limit: o.dfa_state_limit.or(self.dfa_state_limit),\n            onepass: o.onepass.or(self.onepass),\n            backtrack: o.backtrack.or(self.backtrack),\n            byte_classes: o.byte_classes.or(self.byte_classes),\n            line_terminator: o.line_terminator.or(self.line_terminator),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}