{
  "name": "regex_automata::meta::stopat::dfa_try_search_half_fwd",
  "mod_info": {
    "name": "meta::stopat",
    "loc": "regex-automata/src/meta/mod.rs:60:1:60:12"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/stopat.rs:52:1:97:2",
  "doc": "",
  "code": [
    "pub(crate) fn dfa_try_search_half_fwd(",
    "    dfa: &crate::dfa::dense::DFA<alloc::vec::Vec<u32>>,",
    "    input: &Input<'_>,",
    ") -> Result<Result<HalfMatch, usize>, RetryFailError> {",
    "    use crate::dfa::{accel, Automaton};",
    "",
    "    let mut mat = None;",
    "    let mut sid = dfa.start_state_forward(input)?;",
    "    let mut at = input.start();",
    "    while at < input.end() {",
    "        sid = dfa.next_state(sid, input.haystack()[at]);",
    "        if dfa.is_special_state(sid) {",
    "            if dfa.is_match_state(sid) {",
    "                let pattern = dfa.match_pattern(sid, 0);",
    "                mat = Some(HalfMatch::new(pattern, at));",
    "                if input.get_earliest() {",
    "                    return Ok(mat.ok_or(at));",
    "                }",
    "                if dfa.is_accel_state(sid) {",
    "                    let needs = dfa.accelerator(sid);",
    "                    at = accel::find_fwd(needs, input.haystack(), at)",
    "                        .unwrap_or(input.end());",
    "                    continue;",
    "                }",
    "            } else if dfa.is_accel_state(sid) {",
    "                let needs = dfa.accelerator(sid);",
    "                at = accel::find_fwd(needs, input.haystack(), at)",
    "                    .unwrap_or(input.end());",
    "                continue;",
    "            } else if dfa.is_dead_state(sid) {",
    "                return Ok(mat.ok_or(at));",
    "            } else if dfa.is_quit_state(sid) {",
    "                return Err(MatchError::quit(input.haystack()[at], at).into());",
    "            } else {",
    "                // Ideally we wouldn't use a DFA that specialized start states",
    "                // and thus 'is_start_state()' could never be true here, but in",
    "                // practice we reuse the DFA created for the full regex which",
    "                // will specialize start states whenever there is a prefilter.",
    "                debug_assert!(dfa.is_start_state(sid));",
    "            }",
    "        }",
    "        at += 1;",
    "    }",
    "    dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?;",
    "    Ok(mat.ok_or(at))",
    "}"
  ],
  "size": {
    "chain": 17,
    "contra": 10,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Err/None",
          "line": 59,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        81,
        82,
        83,
        84
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 64,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 67,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        79,
        80,
        83,
        84
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 64,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 67,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 70,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 95,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        66,
        10,
        11,
        12,
        65,
        67,
        68,
        70,
        72,
        73,
        76,
        77,
        80,
        83,
        84
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 64,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 67,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 70,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        66,
        10,
        11,
        12,
        65,
        67,
        68,
        71,
        74,
        75,
        84
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 64,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 67,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 70,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 95,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        27,
        34,
        61,
        63,
        64,
        10,
        11,
        12,
        65,
        67,
        68,
        70,
        72,
        73,
        76,
        77,
        80,
        83,
        84
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "true",
          "line": 64,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 67,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 70,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        27,
        34,
        61,
        63,
        64,
        10,
        11,
        12,
        65,
        67,
        68,
        71,
        74,
        75,
        84
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 64,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 76,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 95,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        66,
        10,
        11,
        12,
        65,
        67,
        68,
        70,
        72,
        73,
        76,
        77,
        80,
        83,
        84
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 64,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "true",
          "line": 76,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        66,
        10,
        11,
        12,
        65,
        67,
        68,
        71,
        74,
        75,
        84
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 64,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 76,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "true",
          "line": 81,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        35,
        36,
        43,
        44,
        45,
        46,
        78,
        79,
        80,
        83,
        84
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 64,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 76,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 81,
          "bound": null
        },
        {
          "cond": "dfa.is_quit_state(sid)",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(input.haystack()[at], at).into())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        35,
        36,
        43,
        44,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        78,
        79,
        80,
        83,
        84
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 64,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 76,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 81,
          "bound": null
        },
        {
          "cond": "dfa.is_quit_state(sid)",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 95,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        35,
        36,
        43,
        44,
        47,
        48,
        54,
        55,
        56,
        57,
        60,
        61,
        63,
        64,
        10,
        11,
        12,
        65,
        67,
        68,
        70,
        72,
        73,
        76,
        77,
        80,
        83,
        84
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 64,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 76,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 81,
          "bound": null
        },
        {
          "cond": "dfa.is_quit_state(sid)",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        35,
        36,
        43,
        44,
        47,
        48,
        54,
        55,
        56,
        57,
        60,
        61,
        63,
        64,
        10,
        11,
        12,
        65,
        67,
        68,
        71,
        74,
        75,
        84
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        },
        {
          "cond": "dfa.is_match_state(sid)",
          "norm": null,
          "value": "false",
          "line": 64,
          "bound": null
        },
        {
          "cond": "dfa.is_accel_state(sid)",
          "norm": null,
          "value": "false",
          "line": 76,
          "bound": null
        },
        {
          "cond": "dfa.is_dead_state(sid)",
          "norm": null,
          "value": "false",
          "line": 81,
          "bound": null
        },
        {
          "cond": "dfa.is_quit_state(sid)",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "dfa.is_start_state(sid)",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        35,
        36,
        43,
        44,
        47,
        48,
        54,
        55,
        56,
        58,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 95,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        62,
        63,
        64,
        10,
        11,
        12,
        65,
        67,
        68,
        70,
        72,
        73,
        76,
        77,
        80,
        83,
        84
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "true",
          "line": 61,
          "bound": null
        },
        {
          "cond": "dfa.is_special_state(sid)",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        62,
        63,
        64,
        10,
        11,
        12,
        65,
        67,
        68,
        71,
        74,
        75,
        84
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Err/None",
          "line": 95,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        65,
        67,
        68,
        70,
        72,
        73,
        76,
        77,
        80,
        83,
        84
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "dfa.start_state_forward(input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 59,
          "bound": null
        },
        {
          "cond": "at < input.end()",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": "at == input.end()"
        },
        {
          "cond": "dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        }
      ],
      "ret": "Ok(mat.ok_or(at))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        65,
        67,
        68,
        71,
        74,
        75,
        84
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}