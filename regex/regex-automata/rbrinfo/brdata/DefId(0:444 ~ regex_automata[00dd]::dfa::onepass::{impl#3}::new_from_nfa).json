{
  "name": "regex_automata::dfa::onepass::{impl#3}::new_from_nfa",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1231:5:1233:6",
  "doc": "/// Like `new`, but builds a one-pass DFA directly from an NFA. This is\n/// useful if you already have an NFA, or even if you hand-assembled the\n/// NFA.\n///\n/// # Example\n///\n/// This shows how to hand assemble a regular expression via its HIR,\n/// compile an NFA from it and build a one-pass DFA from the NFA.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::onepass::DFA,\n///     nfa::thompson::NFA,\n///     Match,\n/// };\n/// use regex_syntax::hir::{Hir, Class, ClassBytes, ClassBytesRange};\n///\n/// let hir = Hir::class(Class::Bytes(ClassBytes::new(vec![\n///     ClassBytesRange::new(b'0', b'9'),\n///     ClassBytesRange::new(b'A', b'Z'),\n///     ClassBytesRange::new(b'_', b'_'),\n///     ClassBytesRange::new(b'a', b'z'),\n/// ])));\n///\n/// let config = NFA::config().nfa_size_limit(Some(1_000));\n/// let nfa = NFA::compiler().configure(config).build_from_hir(&hir)?;\n///\n/// let re = DFA::new_from_nfa(nfa)?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// let expected = Some(Match::must(0, 0..1));\n/// re.captures(&mut cache, \"A\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new_from_nfa(nfa: NFA) -> Result<DFA, BuildError> {",
    "    DFA::builder().build_from_nfa(nfa)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}