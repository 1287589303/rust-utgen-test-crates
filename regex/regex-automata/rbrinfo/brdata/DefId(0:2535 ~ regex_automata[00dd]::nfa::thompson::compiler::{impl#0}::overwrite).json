{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::overwrite",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:525:5:536:6",
  "doc": "/// Overwrite the default configuration such that the options in `o` are\n/// always used. If an option in `o` is not set, then the corresponding\n/// option in `self` is used. If it's not set in `self` either, then it\n/// remains not set.\n",
  "code": [
    "pub(crate) fn overwrite(&self, o: Config) -> Config {",
    "    Config {",
    "        utf8: o.utf8.or(self.utf8),",
    "        reverse: o.reverse.or(self.reverse),",
    "        nfa_size_limit: o.nfa_size_limit.or(self.nfa_size_limit),",
    "        shrink: o.shrink.or(self.shrink),",
    "        which_captures: o.which_captures.or(self.which_captures),",
    "        look_matcher: o.look_matcher.or_else(|| self.look_matcher.clone()),",
    "        #[cfg(test)]",
    "        unanchored_prefix: o.unanchored_prefix.or(self.unanchored_prefix),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config {\n            utf8: o.utf8.or(self.utf8),\n            reverse: o.reverse.or(self.reverse),\n            nfa_size_limit: o.nfa_size_limit.or(self.nfa_size_limit),\n            shrink: o.shrink.or(self.shrink),\n            which_captures: o.which_captures.or(self.which_captures),\n            look_matcher: o.look_matcher.or_else(|| self.look_matcher.clone()),\n            #[cfg(test)]\n            unanchored_prefix: o.unanchored_prefix.or(self.unanchored_prefix),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}