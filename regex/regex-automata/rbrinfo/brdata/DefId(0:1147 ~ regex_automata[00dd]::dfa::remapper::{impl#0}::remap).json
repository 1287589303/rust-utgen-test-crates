{
  "name": "regex_automata::dfa::remapper::{impl#0}::remap",
  "mod_info": {
    "name": "dfa::remapper",
    "loc": "regex-automata/src/dfa/mod.rs:354:1:354:14"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/remapper.rs:115:5:150:6",
  "doc": "/// Complete the remapping process by rewriting all state IDs in the\n/// remappable value according to the swaps performed.\n",
  "code": [
    "pub(super) fn remap(mut self, r: &mut impl Remappable) {",
    "    // Update the map to account for states that have been swapped",
    "    // multiple times. For example, if (A, C) and (C, G) are swapped, then",
    "    // transitions previously pointing to A should now point to G. But if",
    "    // we don't update our map, they will erroneously be set to C. All we",
    "    // do is follow the swaps in our map until we see our original state",
    "    // ID.",
    "    //",
    "    // The intuition here is to think about how changes are made to the",
    "    // map: only through pairwise swaps. That means that starting at any",
    "    // given state, it is always possible to find the loop back to that",
    "    // state by following the swaps represented in the map (which might be",
    "    // 0 swaps).",
    "    //",
    "    // We are also careful to clone the map before starting in order to",
    "    // freeze it. We use the frozen map to find our loops, since we need to",
    "    // update our map as well. Without freezing it, our updates could break",
    "    // the loops referenced above and produce incorrect results.",
    "    let oldmap = self.map.clone();",
    "    for i in 0..r.state_len() {",
    "        let cur_id = self.idxmap.to_state_id(i);",
    "        let mut new_id = oldmap[i];",
    "        if cur_id == new_id {",
    "            continue;",
    "        }",
    "        loop {",
    "            let id = oldmap[self.idxmap.to_index(new_id)];",
    "            if cur_id == id {",
    "                self.map[i] = new_id;",
    "                break;",
    "            }",
    "            new_id = id;",
    "        }",
    "    }",
    "    r.remap(|next| self.map[self.idxmap.to_index(next)]);",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 3,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i in 0..r.state_len()",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "cur_id == new_id",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "i in 0..r.state_len()",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        4,
        5,
        6,
        8,
        10,
        24,
        25,
        26
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i in 0..r.state_len()",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "cur_id == new_id",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": null
        },
        {
          "cond": "cur_id == id",
          "norm": null,
          "value": "true",
          "line": 142,
          "bound": null
        },
        {
          "cond": "i in 0..r.state_len()",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        4,
        5,
        6,
        8,
        10,
        24,
        25,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "i in 0..r.state_len()",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "cur_id == new_id",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": null
        },
        {
          "cond": "cur_id == id",
          "norm": null,
          "value": "false",
          "line": 142,
          "bound": null
        },
        {
          "cond": "cur_id == id",
          "norm": null,
          "value": "true",
          "line": 142,
          "bound": null
        },
        {
          "cond": "i in 0..r.state_len()",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        23,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        4,
        5,
        6,
        8,
        10,
        24,
        25,
        26
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "i in 0..r.state_len()",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}