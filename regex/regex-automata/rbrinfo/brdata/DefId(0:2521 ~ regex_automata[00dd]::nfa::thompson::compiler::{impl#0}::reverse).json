{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::reverse",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:199:5:202:6",
  "doc": "/// Reverse the NFA.\n///\n/// A NFA reversal is performed by reversing all of the concatenated\n/// sub-expressions in the original pattern, recursively. (Look around\n/// operators are also inverted.) The resulting NFA can be used to match\n/// the pattern starting from the end of a string instead of the beginning\n/// of a string.\n///\n/// Reversing the NFA is useful for building a reverse DFA, which is most\n/// useful for finding the start of a match after its ending position has\n/// been found. NFA execution engines typically do not work on reverse\n/// NFAs. For example, currently, the Pike VM reports the starting location\n/// of matches without a reverse NFA.\n///\n/// Currently, enabling this setting requires disabling the\n/// [`captures`](Config::captures) setting. If both are enabled, then the\n/// compiler will return an error. It is expected that this limitation will\n/// be lifted in the future.\n///\n/// This is disabled by default.\n///\n/// # Example\n///\n/// This example shows how to build a DFA from a reverse NFA, and then use\n/// the DFA to search backwards.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{self, Automaton},\n///     nfa::thompson::{NFA, WhichCaptures},\n///     HalfMatch, Input,\n/// };\n///\n/// let dfa = dfa::dense::Builder::new()\n///     .thompson(NFA::config()\n///         .which_captures(WhichCaptures::None)\n///         .reverse(true)\n///     )\n///     .build(\"baz[0-9]+\")?;\n/// let expected = Some(HalfMatch::must(0, 3));\n/// assert_eq!(\n///     expected,\n///     dfa.try_search_rev(&Input::new(\"foobaz12345bar\"))?,\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn reverse(mut self, yes: bool) -> Config {",
    "    self.reverse = Some(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}