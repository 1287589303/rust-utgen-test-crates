{
  "name": "regex_automata::hybrid::dfa::{impl#8}::byte_classes_from_nfa",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:3815:5:3842:6",
  "doc": "/// Returns the byte class map used during search from the given NFA.\n///\n/// If byte classes are disabled on this configuration, then a map is\n/// returned that puts each byte in its own equivalent class.\n",
  "code": [
    "fn byte_classes_from_nfa(",
    "    &self,",
    "    nfa: &thompson::NFA,",
    "    quit: &ByteSet,",
    ") -> ByteClasses {",
    "    if !self.get_byte_classes() {",
    "        // The lazy DFA will always use the equivalence class map, but",
    "        // enabling this option is useful for debugging. Namely, this will",
    "        // cause all transitions to be defined over their actual bytes",
    "        // instead of an opaque equivalence class identifier. The former is",
    "        // much easier to grok as a human.",
    "        ByteClasses::singletons()",
    "    } else {",
    "        let mut set = nfa.byte_class_set().clone();",
    "        // It is important to distinguish any \"quit\" bytes from all other",
    "        // bytes. Otherwise, a non-quit byte may end up in the same class",
    "        // as a quit byte, and thus cause the DFA stop when it shouldn't.",
    "        //",
    "        // Test case:",
    "        //",
    "        //   regex-cli find match hybrid --unicode-word-boundary \\",
    "        //     -p '^#' -p '\\b10\\.55\\.182\\.100\\b' -y @conn.json.1000x.log",
    "        if !quit.is_empty() {",
    "            set.add_set(&quit);",
    "        }",
    "        set.byte_classes()",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 3820,
          "bound": null
        },
        {
          "cond": "quit.is_empty()",
          "norm": null,
          "value": "true",
          "line": 3837,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_byte_classes()",
          "norm": null,
          "value": "true",
          "line": 3820,
          "bound": null
        },
        {
          "cond": "quit.is_empty()",
          "norm": null,
          "value": "false",
          "line": 3837,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.get_byte_classes()",
          "norm": null,
          "value": "false",
          "line": 3820,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}