{
  "name": "regex_automata::dfa::accel::{impl#1}::from_bytes_unchecked",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/accel.rs:186:5:221:6",
  "doc": "/// Deserialize a sequence of accelerators from the given bytes. If there\n/// was a problem deserializing, then an error is returned.\n///\n/// This is guaranteed to run in constant time. This does not guarantee\n/// that every accelerator in the returned collection is valid. Thus,\n/// accessing one may panic, or not-safe code that relies on accelerators\n/// being correct my result in UB.\n///\n/// Callers may check the validity of every accelerator with the `validate`\n/// method.\n",
  "code": [
    "pub fn from_bytes_unchecked(",
    "    mut slice: &'a [u8],",
    ") -> Result<(Accels<&'a [AccelTy]>, usize), DeserializeError> {",
    "    let slice_start = slice.as_ptr().as_usize();",
    "",
    "    let (accel_len, _) =",
    "        wire::try_read_u32_as_usize(slice, \"accelerators length\")?;",
    "    // The accelerator length is part of the accel_tys slice that",
    "    // we deserialize. This is perhaps a bit idiosyncratic. It would",
    "    // probably be better to split out the length into a real field.",
    "",
    "    let accel_tys_len = wire::add(",
    "        wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,",
    "        1,",
    "        \"total number of accel_tys\",",
    "    )?;",
    "    let accel_tys_bytes_len = wire::mul(",
    "        ACCEL_TY_SIZE,",
    "        accel_tys_len,",
    "        \"total number of bytes in accelerators\",",
    "    )?;",
    "    wire::check_slice_len(slice, accel_tys_bytes_len, \"accelerators\")?;",
    "    wire::check_alignment::<AccelTy>(slice)?;",
    "    let accel_tys = &slice[..accel_tys_bytes_len];",
    "    slice = &slice[accel_tys_bytes_len..];",
    "    // SAFETY: We've checked the length and alignment above, and since",
    "    // slice is just bytes and AccelTy is just a u32, we can safely cast to",
    "    // a slice of &[AccelTy].",
    "    let accels = unsafe {",
    "        core::slice::from_raw_parts(",
    "            accel_tys.as_ptr().cast::<AccelTy>(),",
    "            accel_tys_len,",
    "        )",
    "    };",
    "    Ok((Accels { accels }, slice.as_ptr().as_usize() - slice_start))",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"accelerators length\")?",
          "norm": null,
          "value": "Err/None",
          "line": 192,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"accelerators length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 192,
          "bound": null
        },
        {
          "cond": "wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?",
          "norm": null,
          "value": "Err/None",
          "line": 198,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        13,
        15,
        16,
        54,
        55,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"accelerators length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 192,
          "bound": null
        },
        {
          "cond": "wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 198,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,\n            1,\n            \"total number of accel_tys\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 197,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        20,
        22,
        23,
        54,
        55,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"accelerators length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 192,
          "bound": null
        },
        {
          "cond": "wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 198,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,\n            1,\n            \"total number of accel_tys\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            ACCEL_TY_SIZE,\n            accel_tys_len,\n            \"total number of bytes in accelerators\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 202,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        27,
        29,
        30,
        53,
        55,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"accelerators length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 192,
          "bound": null
        },
        {
          "cond": "wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 198,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,\n            1,\n            \"total number of accel_tys\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            ACCEL_TY_SIZE,\n            accel_tys_len,\n            \"total number of bytes in accelerators\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 202,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, accel_tys_bytes_len, \"accelerators\")?",
          "norm": null,
          "value": "Err/None",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        28,
        31,
        32,
        34,
        36,
        37,
        53,
        55,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"accelerators length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 192,
          "bound": null
        },
        {
          "cond": "wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 198,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,\n            1,\n            \"total number of accel_tys\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            ACCEL_TY_SIZE,\n            accel_tys_len,\n            \"total number of bytes in accelerators\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 202,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, accel_tys_bytes_len, \"accelerators\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 207,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<AccelTy>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 208,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        28,
        31,
        32,
        35,
        38,
        39,
        41,
        43,
        44,
        53,
        55,
        56,
        57
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"accelerators length\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 192,
          "bound": null
        },
        {
          "cond": "wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 198,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,\n            1,\n            \"total number of accel_tys\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            ACCEL_TY_SIZE,\n            accel_tys_len,\n            \"total number of bytes in accelerators\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 202,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, accel_tys_bytes_len, \"accelerators\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 207,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<AccelTy>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Ok((Accels { accels }, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        28,
        31,
        32,
        35,
        38,
        39,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        57
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}