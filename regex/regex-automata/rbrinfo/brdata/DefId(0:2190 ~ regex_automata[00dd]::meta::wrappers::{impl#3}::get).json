{
  "name": "regex_automata::meta::wrappers::{impl#3}::get",
  "mod_info": {
    "name": "meta::wrappers",
    "loc": "regex-automata/src/meta/mod.rs:62:1:62:14"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/wrappers.rs:162:5:188:6",
  "doc": "",
  "code": [
    "pub(crate) fn get(",
    "    &self,",
    "    input: &Input<'_>,",
    ") -> Option<&BoundedBacktrackerEngine> {",
    "    let engine = self.0.as_ref()?;",
    "    // It is difficult to make the backtracker give up early if it is",
    "    // guaranteed to eventually wind up in a match state. This is because",
    "    // of the greedy nature of a backtracker: it just blindly mushes",
    "    // forward. Every other regex engine is able to give up more quickly,",
    "    // so even if the backtracker might be able to zip through faster than",
    "    // (say) the PikeVM, we prefer the theoretical benefit that some other",
    "    // engine might be able to scan much less of the haystack than the",
    "    // backtracker.",
    "    //",
    "    // Now, if the haystack is really short already, then we allow the",
    "    // backtracker to run. (This hasn't been litigated quantitatively with",
    "    // benchmarks. Just a hunch.)",
    "    if input.get_earliest() && input.haystack().len() > 128 {",
    "        return None;",
    "    }",
    "    // If the backtracker is just going to return an error because the",
    "    // haystack is too long, then obviously do not use it.",
    "    if input.get_span().len() > engine.max_haystack_len() {",
    "        return None;",
    "    }",
    "    Some(engine)",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.0.as_ref()?",
          "norm": null,
          "value": "Err/None",
          "line": 166,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.0.as_ref()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 166,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "input.haystack().len() > 128",
          "norm": "128 < input.haystack().len()",
          "value": "true",
          "line": 179,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.0.as_ref()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 166,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "input.haystack().len() > 128",
          "norm": "128 < input.haystack().len()",
          "value": "false",
          "line": 179,
          "bound": "input.haystack().len() == 128"
        },
        {
          "cond": "input.get_span().len() > engine.max_haystack_len()",
          "norm": "engine.max_haystack_len() < input.get_span().len()",
          "value": "true",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        17,
        18,
        19,
        21,
        22
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.0.as_ref()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 166,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "input.haystack().len() > 128",
          "norm": "128 < input.haystack().len()",
          "value": "false",
          "line": 179,
          "bound": "input.haystack().len() == 128"
        },
        {
          "cond": "input.get_span().len() > engine.max_haystack_len()",
          "norm": "engine.max_haystack_len() < input.get_span().len()",
          "value": "false",
          "line": 184,
          "bound": "input.get_span().len() == engine.max_haystack_len()"
        }
      ],
      "ret": "Some(engine)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        17,
        18,
        20,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.0.as_ref()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 166,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > engine.max_haystack_len()",
          "norm": "engine.max_haystack_len() < input.get_span().len()",
          "value": "true",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        8,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.0.as_ref()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 166,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": null
        },
        {
          "cond": "input.get_span().len() > engine.max_haystack_len()",
          "norm": "engine.max_haystack_len() < input.get_span().len()",
          "value": "false",
          "line": 184,
          "bound": "input.get_span().len() == engine.max_haystack_len()"
        }
      ],
      "ret": "Some(engine)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        14,
        15,
        16,
        17,
        18,
        20,
        22
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}