{
  "name": "regex_automata::hybrid::dfa::skip_empty_utf8_splits_overlapping",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:4245:1:4277:2",
  "doc": "/// Runs the given overlapping `search` function (forwards or backwards) until\n/// a match is found whose offset does not split a codepoint.\n///\n/// This is *not* always correct to call. It should only be called when the\n/// underlying NFA has UTF-8 mode enabled *and* it can produce zero-width\n/// matches. Calling this when both of those things aren't true might result\n/// in legitimate matches getting skipped.\n",
  "code": [
    "fn skip_empty_utf8_splits_overlapping<F>(",
    "    input: &Input<'_>,",
    "    state: &mut OverlappingState,",
    "    mut search: F,",
    ") -> Result<(), MatchError>",
    "where",
    "    F: FnMut(&Input<'_>, &mut OverlappingState) -> Result<(), MatchError>,",
    "{",
    "    // Note that this routine works for forwards and reverse searches",
    "    // even though there's no code here to handle those cases. That's",
    "    // because overlapping searches drive themselves to completion via",
    "    // `OverlappingState`. So all we have to do is push it until no matches are",
    "    // found.",
    "",
    "    let mut hm = match state.get_match() {",
    "        None => return Ok(()),",
    "        Some(hm) => hm,",
    "    };",
    "    if input.get_anchored().is_anchored() {",
    "        if !input.is_char_boundary(hm.offset()) {",
    "            state.mat = None;",
    "        }",
    "        return Ok(());",
    "    }",
    "    while !input.is_char_boundary(hm.offset()) {",
    "        search(input, state)?;",
    "        hm = match state.get_match() {",
    "            None => return Ok(()),",
    "            Some(hm) => hm,",
    "        };",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 1,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "state.get_match() matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "true",
          "line": 4263,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(hm.offset())",
          "norm": null,
          "value": "true",
          "line": 4264,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "state.get_match() matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "true",
          "line": 4263,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(hm.offset())",
          "norm": null,
          "value": "false",
          "line": 4264,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "state.get_match() matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 4263,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(hm.offset())",
          "norm": null,
          "value": "true",
          "line": 4269,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        6,
        7,
        14,
        15,
        16,
        17,
        18,
        19,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "state.get_match() matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 4263,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(hm.offset())",
          "norm": null,
          "value": "false",
          "line": 4269,
          "bound": null
        },
        {
          "cond": "search(input, state)?",
          "norm": null,
          "value": "Err/None",
          "line": 4270,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        24,
        26,
        27,
        34,
        35,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "state.get_match() matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 4263,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(hm.offset())",
          "norm": null,
          "value": "false",
          "line": 4269,
          "bound": null
        },
        {
          "cond": "search(input, state)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4270,
          "bound": null
        },
        {
          "cond": "state.get_match() matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 4271,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(hm.offset())",
          "norm": null,
          "value": "true",
          "line": 4269,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        6,
        7,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        25,
        28,
        29,
        32,
        15,
        16,
        17,
        18,
        19,
        38
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "state.get_match() matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        },
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 4263,
          "bound": null
        },
        {
          "cond": "input.is_char_boundary(hm.offset())",
          "norm": null,
          "value": "false",
          "line": 4269,
          "bound": null
        },
        {
          "cond": "search(input, state)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4270,
          "bound": null
        },
        {
          "cond": "state.get_match() matches None",
          "norm": null,
          "value": "true",
          "line": 4271,
          "bound": null
        },
        {
          "cond": "state.get_match() matches None",
          "norm": null,
          "value": "true",
          "line": 4271,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        4,
        6,
        7,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        25,
        28,
        29,
        31,
        33,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "state.get_match() matches None",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        },
        {
          "cond": "state.get_match() matches None",
          "norm": null,
          "value": "true",
          "line": 4259,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}