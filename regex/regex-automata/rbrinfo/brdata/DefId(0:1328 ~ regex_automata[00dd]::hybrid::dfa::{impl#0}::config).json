{
  "name": "regex_automata::hybrid::dfa::{impl#0}::config",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:258:5:260:6",
  "doc": "/// Return a default configuration for a `DFA`.\n///\n/// This is a convenience routine to avoid needing to import the [`Config`]\n/// type when customizing the construction of a lazy DFA.\n///\n/// # Example\n///\n/// This example shows how to build a lazy DFA that heuristically supports\n/// Unicode word boundaries.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{hybrid::dfa::DFA, HalfMatch, MatchError, Input};\n///\n/// let re = DFA::builder()\n///     .configure(DFA::config().unicode_word_boundary(true))\n///     .build(r\"\\b\\w+\\b\")?;\n/// let mut cache = re.create_cache();\n///\n/// // Since our haystack is all ASCII, the DFA search sees then and knows\n/// // it is legal to interpret Unicode word boundaries as ASCII word\n/// // boundaries.\n/// let input = Input::new(\"!!foo!!\");\n/// let expected = HalfMatch::must(0, 5);\n/// assert_eq!(Some(expected), re.try_search_fwd(&mut cache, &input)?);\n///\n/// // But if our haystack contains non-ASCII, then the search will fail\n/// // with an error.\n/// let input = Input::new(\"!!βββ!!\");\n/// let expected = MatchError::quit(b'\\xCE', 2);\n/// assert_eq!(Err(expected), re.try_search_fwd(&mut cache, &input));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn config() -> Config {",
    "    Config::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}