{
  "name": "regex_automata::util::prefilter::teddy::{impl#0}::new",
  "mod_info": {
    "name": "util::prefilter::teddy",
    "loc": "regex-automata/src/util/prefilter/mod.rs:40:1:40:11"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/teddy.rs:39:5:80:6",
  "doc": "",
  "code": [
    "pub(crate) fn new<B: AsRef<[u8]>>(",
    "    kind: MatchKind,",
    "    needles: &[B],",
    ") -> Option<Teddy> {",
    "    #[cfg(not(feature = \"perf-literal-multisubstring\"))]",
    "    {",
    "        None",
    "    }",
    "    #[cfg(feature = \"perf-literal-multisubstring\")]",
    "    {",
    "        // We only really support leftmost-first semantics. In",
    "        // theory we could at least support leftmost-longest, as the",
    "        // aho-corasick crate does, but regex-automata doesn't know about",
    "        // leftmost-longest currently.",
    "        //",
    "        // And like the aho-corasick prefilter, if we're using `All`",
    "        // semantics, then we can still use leftmost semantics for a",
    "        // prefilter. (This might be a suspicious choice for the literal",
    "        // engine, which uses a prefilter as a regex engine directly, but",
    "        // that only happens when using leftmost-first semantics.)",
    "        let (packed_match_kind, ac_match_kind) = match kind {",
    "            MatchKind::LeftmostFirst | MatchKind::All => (",
    "                aho_corasick::packed::MatchKind::LeftmostFirst,",
    "                aho_corasick::MatchKind::LeftmostFirst,",
    "            ),",
    "        };",
    "        let minimum_len =",
    "            needles.iter().map(|n| n.as_ref().len()).min().unwrap_or(0);",
    "        let packed = aho_corasick::packed::Config::new()",
    "            .match_kind(packed_match_kind)",
    "            .builder()",
    "            .extend(needles)",
    "            .build()?;",
    "        let anchored_ac = aho_corasick::dfa::DFA::builder()",
    "            .match_kind(ac_match_kind)",
    "            .start_kind(aho_corasick::StartKind::Anchored)",
    "            .prefilter(false)",
    "            .build(needles)",
    "            .ok()?;",
    "        Some(Teddy { searcher: packed, anchored_ac, minimum_len })",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "kind matches MatchKind::LeftmostFirst",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "aho_corasick::packed::Config::new()\n                .match_kind(packed_match_kind)\n                .builder()\n                .extend(needles)\n                .build()?",
          "norm": null,
          "value": "Err/None",
          "line": 67,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "kind matches MatchKind::LeftmostFirst",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "aho_corasick::packed::Config::new()\n                .match_kind(packed_match_kind)\n                .builder()\n                .extend(needles)\n                .build()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 67,
          "bound": null
        },
        {
          "cond": "aho_corasick::dfa::DFA::builder()\n                .match_kind(ac_match_kind)\n                .start_kind(aho_corasick::StartKind::Anchored)\n                .prefilter(false)\n                .build(needles)\n                .ok()?",
          "norm": null,
          "value": "Err/None",
          "line": 72,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        40,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "kind matches MatchKind::LeftmostFirst",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "aho_corasick::packed::Config::new()\n                .match_kind(packed_match_kind)\n                .builder()\n                .extend(needles)\n                .build()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 67,
          "bound": null
        },
        {
          "cond": "aho_corasick::dfa::DFA::builder()\n                .match_kind(ac_match_kind)\n                .start_kind(aho_corasick::StartKind::Anchored)\n                .prefilter(false)\n                .build(needles)\n                .ok()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 72,
          "bound": null
        }
      ],
      "ret": "Some(Teddy { searcher: packed, anchored_ac, minimum_len })",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "kind matches MatchKind::All",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "aho_corasick::packed::Config::new()\n                .match_kind(packed_match_kind)\n                .builder()\n                .extend(needles)\n                .build()?",
          "norm": null,
          "value": "Err/None",
          "line": 67,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "kind matches MatchKind::All",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "aho_corasick::packed::Config::new()\n                .match_kind(packed_match_kind)\n                .builder()\n                .extend(needles)\n                .build()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 67,
          "bound": null
        },
        {
          "cond": "aho_corasick::dfa::DFA::builder()\n                .match_kind(ac_match_kind)\n                .start_kind(aho_corasick::StartKind::Anchored)\n                .prefilter(false)\n                .build(needles)\n                .ok()?",
          "norm": null,
          "value": "Err/None",
          "line": 72,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        40,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "kind matches MatchKind::All",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "aho_corasick::packed::Config::new()\n                .match_kind(packed_match_kind)\n                .builder()\n                .extend(needles)\n                .build()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 67,
          "bound": null
        },
        {
          "cond": "aho_corasick::dfa::DFA::builder()\n                .match_kind(ac_match_kind)\n                .start_kind(aho_corasick::StartKind::Anchored)\n                .prefilter(false)\n                .build(needles)\n                .ok()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 72,
          "bound": null
        }
      ],
      "ret": "Some(Teddy { searcher: packed, anchored_ac, minimum_len })",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        44
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}