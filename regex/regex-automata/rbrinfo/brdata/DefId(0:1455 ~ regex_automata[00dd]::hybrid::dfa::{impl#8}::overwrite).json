{
  "name": "regex_automata::hybrid::dfa::{impl#8}::overwrite",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:3879:5:3905:6",
  "doc": "/// Overwrite the default configuration such that the options in `o` are\n/// always used. If an option in `o` is not set, then the corresponding\n/// option in `self` is used. If it's not set in `self` either, then it\n/// remains not set.\n",
  "code": [
    "fn overwrite(&self, o: Config) -> Config {",
    "    Config {",
    "        match_kind: o.match_kind.or(self.match_kind),",
    "        pre: o.pre.or_else(|| self.pre.clone()),",
    "        starts_for_each_pattern: o",
    "            .starts_for_each_pattern",
    "            .or(self.starts_for_each_pattern),",
    "        byte_classes: o.byte_classes.or(self.byte_classes),",
    "        unicode_word_boundary: o",
    "            .unicode_word_boundary",
    "            .or(self.unicode_word_boundary),",
    "        quitset: o.quitset.or(self.quitset),",
    "        specialize_start_states: o",
    "            .specialize_start_states",
    "            .or(self.specialize_start_states),",
    "        cache_capacity: o.cache_capacity.or(self.cache_capacity),",
    "        skip_cache_capacity_check: o",
    "            .skip_cache_capacity_check",
    "            .or(self.skip_cache_capacity_check),",
    "        minimum_cache_clear_count: o",
    "            .minimum_cache_clear_count",
    "            .or(self.minimum_cache_clear_count),",
    "        minimum_bytes_per_state: o",
    "            .minimum_bytes_per_state",
    "            .or(self.minimum_bytes_per_state),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config {\n            match_kind: o.match_kind.or(self.match_kind),\n            pre: o.pre.or_else(|| self.pre.clone()),\n            starts_for_each_pattern: o\n                .starts_for_each_pattern\n                .or(self.starts_for_each_pattern),\n            byte_classes: o.byte_classes.or(self.byte_classes),\n            unicode_word_boundary: o\n                .unicode_word_boundary\n                .or(self.unicode_word_boundary),\n            quitset: o.quitset.or(self.quitset),\n            specialize_start_states: o\n                .specialize_start_states\n                .or(self.specialize_start_states),\n            cache_capacity: o.cache_capacity.or(self.cache_capacity),\n            skip_cache_capacity_check: o\n                .skip_cache_capacity_check\n                .or(self.skip_cache_capacity_check),\n            minimum_cache_clear_count: o\n                .minimum_cache_clear_count\n                .or(self.minimum_cache_clear_count),\n            minimum_bytes_per_state: o\n                .minimum_bytes_per_state\n                .or(self.minimum_bytes_per_state),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}