{
  "name": "regex_automata::meta::regex::{impl#2}::search_half",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:975:5:984:6",
  "doc": "/// Returns the end offset of the leftmost match. If no match exists, then\n/// `None` is returned.\n///\n/// This is distinct from [`Regex::search`] in that it only returns the end\n/// of a match and not the start of the match. Depending on a variety of\n/// implementation details, this _may_ permit the regex engine to do less\n/// overall work. For example, if a DFA is being used to execute a search,\n/// then the start of a match usually requires running a separate DFA in\n/// reverse to the find the start of a match. If one only needs the end of\n/// a match, then the separate reverse scan to find the start of a match\n/// can be skipped. (Note that the reverse scan is avoided even when using\n/// `Regex::search` when possible, for example, in the case of an anchored\n/// search.)\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Input, HalfMatch};\n///\n/// let re = Regex::new(r\"Samwise|Sam\")?;\n/// let input = Input::new(\n///     \"one of the chief characters, Samwise the Brave\",\n/// );\n/// assert_eq!(Some(HalfMatch::must(0, 36)), re.search_half(&input));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn search_half(&self, input: &Input<'_>) -> Option<HalfMatch> {",
    "    if self.imp.info.is_impossible(input) {",
    "        return None;",
    "    }",
    "    let mut guard = self.pool.get();",
    "    let result = self.imp.strat.search_half(&mut guard, input);",
    "    // See 'Regex::search' for why we put the guard back explicitly.",
    "    PoolGuard::put(guard);",
    "    result",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.imp.info.is_impossible(input)",
          "norm": null,
          "value": "true",
          "line": 976,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.imp.info.is_impossible(input)",
          "norm": null,
          "value": "false",
          "line": 976,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}