{
  "name": "regex_automata::meta::regex::{impl#4}::captures_len",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1671:5:1677:6",
  "doc": "/// Returns the total number of capturing groups.\n///\n/// This includes the implicit capturing group corresponding to the\n/// entire match. Therefore, the minimum value returned is `1`.\n///\n/// # Example\n///\n/// This shows a few patterns and how many capture groups they have.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let len = |pattern| {\n///     Regex::new(pattern).map(|re| re.captures_len())\n/// };\n///\n/// assert_eq!(1, len(\"a\")?);\n/// assert_eq!(2, len(\"(a)\")?);\n/// assert_eq!(3, len(\"(a)|(b)\")?);\n/// assert_eq!(5, len(\"(a)(b)|(c)(d)\")?);\n/// assert_eq!(2, len(\"(a)|b\")?);\n/// assert_eq!(2, len(\"a|(b)\")?);\n/// assert_eq!(2, len(\"(b)*\")?);\n/// assert_eq!(2, len(\"(b)+\")?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: multiple patterns\n///\n/// This routine also works for multiple patterns. The total number is\n/// the sum of the capture groups of each pattern.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let len = |patterns| {\n///     Regex::new_many(patterns).map(|re| re.captures_len())\n/// };\n///\n/// assert_eq!(2, len(&[\"a\", \"b\"])?);\n/// assert_eq!(4, len(&[\"(a)\", \"(b)\"])?);\n/// assert_eq!(6, len(&[\"(a)|(b)\", \"(c)|(d)\"])?);\n/// assert_eq!(8, len(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"])?);\n/// assert_eq!(3, len(&[\"(a)\", \"b\"])?);\n/// assert_eq!(3, len(&[\"a\", \"(b)\"])?);\n/// assert_eq!(4, len(&[\"(a)\", \"(b)*\"])?);\n/// assert_eq!(4, len(&[\"(a)+\", \"(b)+\"])?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn captures_len(&self) -> usize {",
    "    self.imp",
    "        .info",
    "        .props_union()",
    "        .explicit_captures_len()",
    "        .saturating_add(self.pattern_len())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}