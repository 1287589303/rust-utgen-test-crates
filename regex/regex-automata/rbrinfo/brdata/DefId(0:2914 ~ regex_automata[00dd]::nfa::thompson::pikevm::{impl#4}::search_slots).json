{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#4}::search_slots",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1091:5:1132:6",
  "doc": "/// Executes a leftmost forward search and writes the spans of capturing\n/// groups that participated in a match into the provided `slots`, and\n/// returns the matching pattern ID. The contents of the slots for patterns\n/// other than the matching pattern are unspecified. If no match was found,\n/// then `None` is returned and the contents of `slots` is unspecified.\n///\n/// This is like [`PikeVM::search`], but it accepts a raw slots slice\n/// instead of a `Captures` value. This is useful in contexts where you\n/// don't want or need to allocate a `Captures`.\n///\n/// It is legal to pass _any_ number of slots to this routine. If the regex\n/// engine would otherwise write a slot offset that doesn't fit in the\n/// provided slice, then it is simply skipped. In general though, there are\n/// usually three slice lengths you might want to use:\n///\n/// * An empty slice, if you only care about which pattern matched.\n/// * A slice with\n/// [`pattern_len() * 2`](crate::nfa::thompson::NFA::pattern_len)\n/// slots, if you only care about the overall match spans for each matching\n/// pattern.\n/// * A slice with\n/// [`slot_len()`](crate::util::captures::GroupInfo::slot_len) slots, which\n/// permits recording match offsets for every capturing group in every\n/// pattern.\n///\n/// # Example\n///\n/// This example shows how to find the overall match offsets in a\n/// multi-pattern search without allocating a `Captures` value. Indeed, we\n/// can put our slots right on the stack.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, PatternID, Input};\n///\n/// let re = PikeVM::new_many(&[\n///     r\"\\pL+\",\n///     r\"\\d+\",\n/// ])?;\n/// let mut cache = re.create_cache();\n/// let input = Input::new(\"!@#123\");\n///\n/// // We only care about the overall match offsets here, so we just\n/// // allocate two slots for each pattern. Each slot records the start\n/// // and end of the match.\n/// let mut slots = [None; 4];\n/// let pid = re.search_slots(&mut cache, &input, &mut slots);\n/// assert_eq!(Some(PatternID::must(1)), pid);\n///\n/// // The overall match offsets are always at 'pid * 2' and 'pid * 2 + 1'.\n/// // See 'GroupInfo' for more details on the mapping between groups and\n/// // slot indices.\n/// let slot_start = pid.unwrap().as_usize() * 2;\n/// let slot_end = slot_start + 1;\n/// assert_eq!(Some(3), slots[slot_start].map(|s| s.get()));\n/// assert_eq!(Some(6), slots[slot_end].map(|s| s.get()));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn search_slots(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    slots: &mut [Option<NonMaxUsize>],",
    ") -> Option<PatternID> {",
    "    let utf8empty = self.get_nfa().has_empty() && self.get_nfa().is_utf8();",
    "    if !utf8empty {",
    "        let hm = self.search_slots_imp(cache, input, slots)?;",
    "        return Some(hm.pattern());",
    "    }",
    "    // There is an unfortunate special case where if the regex can",
    "    // match the empty string and UTF-8 mode is enabled, the search",
    "    // implementation requires that the slots have at least as much space",
    "    // to report the bounds of any match. This is so zero-width matches",
    "    // that split a codepoint can be filtered out.",
    "    //",
    "    // Note that if utf8empty is true, we specialize the case for when",
    "    // the number of patterns is 1. In that case, we can just use a stack",
    "    // allocation. Otherwise we resort to a heap allocation, which we",
    "    // convince ourselves we're fine with due to the pathological nature of",
    "    // this case.",
    "    let min = self.get_nfa().group_info().implicit_slot_len();",
    "    if slots.len() >= min {",
    "        let hm = self.search_slots_imp(cache, input, slots)?;",
    "        return Some(hm.pattern());",
    "    }",
    "    if self.get_nfa().pattern_len() == 1 {",
    "        let mut enough = [None, None];",
    "        let got = self.search_slots_imp(cache, input, &mut enough);",
    "        // This is OK because we know `enough` is strictly bigger than",
    "        // `slots`, otherwise this special case isn't reached.",
    "        slots.copy_from_slice(&enough[..slots.len()]);",
    "        return got.map(|hm| hm.pattern());",
    "    }",
    "    let mut enough = vec![None; min];",
    "    let got = self.search_slots_imp(cache, input, &mut enough);",
    "    // This is OK because we know `enough` is strictly bigger than `slots`,",
    "    // otherwise this special case isn't reached.",
    "    slots.copy_from_slice(&enough[..slots.len()]);",
    "    got.map(|hm| hm.pattern())",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "true",
          "line": 1114,
          "bound": "slots.len() == min"
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Err/None",
          "line": 1115,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        28,
        29,
        49,
        50,
        52,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "true",
          "line": 1114,
          "bound": "slots.len() == min"
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1115,
          "bound": null
        }
      ],
      "ret": "Some(hm.pattern())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        30,
        49,
        50,
        52,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "false",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "false",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        17,
        18,
        19,
        20,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        50,
        52,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "false",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "true",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        17,
        18,
        19,
        20,
        21,
        31,
        32,
        33,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Err/None",
          "line": 1099,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1099,
          "bound": null
        }
      ],
      "ret": "Some(hm.pattern())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        16,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "true",
          "line": 1114,
          "bound": "slots.len() == min"
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Err/None",
          "line": 1115,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        28,
        29,
        49,
        50,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "true",
          "line": 1114,
          "bound": "slots.len() == min"
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1115,
          "bound": null
        }
      ],
      "ret": "Some(hm.pattern())",
      "path": [
        0,
        1,
        2,
        4,
        7,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        30,
        49,
        50,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "false",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "false",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        17,
        18,
        19,
        20,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        50,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "slots.len() >= min",
          "norm": "min <= slots.len()",
          "value": "false",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "true",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        17,
        18,
        19,
        20,
        21,
        31,
        32,
        33,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Err/None",
          "line": 1099,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        12,
        14,
        15,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1097,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "self.search_slots_imp(cache, input, slots)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1099,
          "bound": null
        }
      ],
      "ret": "Some(hm.pattern())",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        10,
        13,
        16,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}