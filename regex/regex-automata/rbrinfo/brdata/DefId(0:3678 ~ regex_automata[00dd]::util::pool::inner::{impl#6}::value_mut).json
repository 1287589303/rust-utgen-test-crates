{
  "name": "regex_automata::util::pool::inner::{impl#6}::value_mut",
  "mod_info": {
    "name": "util::pool::inner",
    "loc": "regex-automata/src/util/pool.rs:235:1:793:2"
  },
  "visible": false,
  "loc": "regex-automata/src/util/pool.rs:704:9:725:10",
  "doc": "/// Return the underlying value as a mutable borrow.\n",
  "code": [
    "pub(super) fn value_mut(&mut self) -> &mut T {",
    "    match self.value {",
    "        Ok(ref mut v) => &mut **v,",
    "        // SAFETY: This is safe because the only way a PoolGuard gets",
    "        // created for self.value=None is when the current thread",
    "        // corresponds to the owning thread, of which there can only",
    "        // be one. Thus, we are guaranteed to be providing exclusive",
    "        // access here which makes this safe.",
    "        //",
    "        // Also, since 'owner_val' is guaranteed to be initialized",
    "        // before an owned PoolGuard is created, the unwrap_unchecked",
    "        // is safe.",
    "        Err(id) => unsafe {",
    "            // This assert is *not* necessary for safety, since we",
    "            // should never be here if the guard had been put back into",
    "            // the pool. This is a sanity check to make sure we didn't",
    "            // break an internal invariant.",
    "            debug_assert_ne!(THREAD_ID_DROPPED, id);",
    "            (*self.pool.owner_val.get()).as_mut().unwrap_unchecked()",
    "        },",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.value matches Err(id)",
          "norm": null,
          "value": "true",
          "line": 705,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        5,
        6,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.value matches Err(id)",
          "norm": null,
          "value": "true",
          "line": 705,
          "bound": null
        },
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        }
      ],
      "ret": "match self.value {\n                Ok(ref mut v) => &mut **v,\n                // SAFETY: This is safe because the only way a PoolGuard gets\n                // created for self.value=None is when the current thread\n                // corresponds to the owning thread, of which there can only\n                // be one. Thus, we are guaranteed to be providing exclusive\n                // access here which makes this safe.\n                //\n                // Also, since 'owner_val' is guaranteed to be initialized\n                // before an owned PoolGuard is created, the unwrap_unchecked\n                // is safe.\n                Err(id) => unsafe {\n                    // This assert is *not* necessary for safety, since we\n                    // should never be here if the guard had been put back into\n                    // the pool. This is a sanity check to make sure we didn't\n                    // break an internal invariant.\n                    debug_assert_ne!(THREAD_ID_DROPPED, id);\n                    (*self.pool.owner_val.get()).as_mut().unwrap_unchecked()\n                },\n            }",
      "path": [
        0,
        3,
        5,
        7,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.value matches Ok(ref mut v)",
          "norm": null,
          "value": "true",
          "line": 705,
          "bound": null
        },
        {
          "cond": "self.value matches Ok(ref mut v)",
          "norm": null,
          "value": "true",
          "line": 705,
          "bound": null
        }
      ],
      "ret": "match self.value {\n                Ok(ref mut v) => &mut **v,\n                // SAFETY: This is safe because the only way a PoolGuard gets\n                // created for self.value=None is when the current thread\n                // corresponds to the owning thread, of which there can only\n                // be one. Thus, we are guaranteed to be providing exclusive\n                // access here which makes this safe.\n                //\n                // Also, since 'owner_val' is guaranteed to be initialized\n                // before an owned PoolGuard is created, the unwrap_unchecked\n                // is safe.\n                Err(id) => unsafe {\n                    // This assert is *not* necessary for safety, since we\n                    // should never be here if the guard had been put back into\n                    // the pool. This is a sanity check to make sure we didn't\n                    // break an internal invariant.\n                    debug_assert_ne!(THREAD_ID_DROPPED, id);\n                    (*self.pool.owner_val.get()).as_mut().unwrap_unchecked()\n                },\n            }",
      "path": [
        0,
        2,
        4,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}