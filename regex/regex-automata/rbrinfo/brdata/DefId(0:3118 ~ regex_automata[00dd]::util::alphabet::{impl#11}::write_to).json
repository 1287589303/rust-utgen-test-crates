{
  "name": "regex_automata::util::alphabet::{impl#11}::write_to",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:826:5:848:6",
  "doc": "/// Writes this byte set to the given byte buffer. If the given buffer is\n/// too small, then an error is returned. Upon success, the total number of\n/// bytes written is returned. The number of bytes written is guaranteed to\n/// be a multiple of 8.\n",
  "code": [
    "pub(crate) fn write_to<E: crate::util::wire::Endian>(",
    "    &self,",
    "    dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    use core::mem::size_of;",
    "",
    "    let nwrite = self.write_to_len();",
    "    if dst.len() < nwrite {",
    "        return Err(SerializeError::buffer_too_small(\"byte set\"));",
    "    }",
    "    let mut nw = 0;",
    "    E::write_u128(self.bits.0[0], &mut dst[nw..]);",
    "    nw += size_of::<u128>();",
    "    E::write_u128(self.bits.0[1], &mut dst[nw..]);",
    "    nw += size_of::<u128>();",
    "    assert_eq!(nwrite, nw, \"expected to write certain number of bytes\",);",
    "    assert_eq!(",
    "        nw % 8,",
    "        0,",
    "        \"expected to write multiple of 8 bytes for byte set\",",
    "    );",
    "    Ok(nw)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "true",
          "line": 833,
          "bound": null
        }
      ],
      "ret": "Err(SerializeError::buffer_too_small(\"byte set\"))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 833,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        }
      ],
      "ret": "Ok(nw)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        20,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 833,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        24
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 833,
          "bound": "dst.len() == nwrite"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}