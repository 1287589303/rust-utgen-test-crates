{
  "name": "regex_automata::util::search::{impl#0}::earliest",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:394:5:397:6",
  "doc": "/// Whether to execute an \"earliest\" search or not.\n///\n/// When running a non-overlapping search, an \"earliest\" search will return\n/// the match location as early as possible. For example, given a pattern\n/// of `foo[0-9]+` and a haystack of `foo12345`, a normal leftmost search\n/// will return `foo12345` as a match. But an \"earliest\" search for regex\n/// engines that support \"earliest\" semantics will return `foo1` as a\n/// match, since as soon as the first digit following `foo` is seen, it is\n/// known to have found a match.\n///\n/// Note that \"earliest\" semantics generally depend on the regex engine.\n/// Different regex engines may determine there is a match at different\n/// points. So there is no guarantee that \"earliest\" matches will always\n/// return the same offsets for all regex engines. The \"earliest\" notion\n/// is really about when the particular regex engine determines there is\n/// a match rather than a consistent semantic unto itself. This is often\n/// useful for implementing \"did a match occur or not\" predicates, but\n/// sometimes the offset is useful as well.\n///\n/// This is disabled by default.\n///\n/// # Example\n///\n/// This example shows the difference between \"earliest\" searching and\n/// normal searching.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Match, Input};\n///\n/// let re = PikeVM::new(r\"foo[0-9]+\")?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n///\n/// // A normal search implements greediness like you expect.\n/// let input = Input::new(\"foo12345\");\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..8)), caps.get_match());\n///\n/// // When 'earliest' is enabled and the regex engine supports\n/// // it, the search will bail once it knows a match has been\n/// // found.\n/// let input = Input::new(\"foo12345\").earliest(true);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..4)), caps.get_match());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn earliest(mut self, yes: bool) -> Input<'h> {",
    "    self.set_earliest(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}