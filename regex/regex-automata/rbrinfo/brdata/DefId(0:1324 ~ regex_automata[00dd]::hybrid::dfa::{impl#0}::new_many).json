{
  "name": "regex_automata::hybrid::dfa::{impl#0}::new_many",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:177:5:179:6",
  "doc": "/// Parse the given regular expressions using a default configuration and\n/// return the corresponding lazy multi-DFA.\n///\n/// If you want a non-default configuration, then use the [`Builder`] to\n/// set your own configuration.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{hybrid::dfa::DFA, HalfMatch, Input};\n///\n/// let dfa = DFA::new_many(&[\"[0-9]+\", \"[a-z]+\"])?;\n/// let mut cache = dfa.create_cache();\n///\n/// let expected = HalfMatch::must(1, 3);\n/// assert_eq!(\n///     Some(expected),\n///     dfa.try_search_fwd(&mut cache, &Input::new(\"foo12345bar\"))?,\n/// );\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<DFA, BuildError> {",
    "    DFA::builder().build_many(patterns)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}