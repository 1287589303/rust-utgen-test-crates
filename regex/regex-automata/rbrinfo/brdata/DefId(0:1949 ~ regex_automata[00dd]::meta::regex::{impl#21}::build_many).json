{
  "name": "regex_automata::meta::regex::{impl#21}::build_many",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3398:5:3442:6",
  "doc": "/// Builds a `Regex` from many pattern strings.\n///\n/// If there was a problem parsing any of the patterns or a problem turning\n/// them into a regex matcher, then an error is returned.\n///\n/// # Example: finding the pattern that caused an error\n///\n/// When a syntax error occurs, it is possible to ask which pattern\n/// caused the syntax error.\n///\n/// ```\n/// use regex_automata::{meta::Regex, PatternID};\n///\n/// let err = Regex::builder()\n///     .build_many(&[\"a\", \"b\", r\"\\p{Foo}\", \"c\"])\n///     .unwrap_err();\n/// assert_eq!(Some(PatternID::must(2)), err.pattern());\n/// ```\n///\n/// # Example: zero patterns is valid\n///\n/// Building a regex with zero patterns results in a regex that never\n/// matches anything. Because this routine is generic, passing an empty\n/// slice usually requires a turbo-fish (or something else to help type\n/// inference).\n///\n/// ```\n/// use regex_automata::{meta::Regex, util::syntax, Match};\n///\n/// let re = Regex::builder()\n///     .build_many::<&str>(&[])?;\n/// assert_eq!(None, re.find(\"\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_many<P: AsRef<str>>(",
    "    &self,",
    "    patterns: &[P],",
    ") -> Result<Regex, BuildError> {",
    "    use crate::util::primitives::IteratorIndexExt;",
    "    log! {",
    "        debug!(\"building meta regex with {} patterns:\", patterns.len());",
    "        for (pid, p) in patterns.iter().with_pattern_ids() {",
    "            let p = p.as_ref();",
    "            // We might split a grapheme with this truncation logic, but",
    "            // that's fine. We at least avoid splitting a codepoint.",
    "            let maxoff = p",
    "                .char_indices()",
    "                .map(|(i, ch)| i + ch.len_utf8())",
    "                .take(1000)",
    "                .last()",
    "                .unwrap_or(0);",
    "            if maxoff < p.len() {",
    "                debug!(\"{:?}: {}[... snip ...]\", pid, &p[..maxoff]);",
    "            } else {",
    "                debug!(\"{:?}: {}\", pid, p);",
    "            }",
    "        }",
    "    }",
    "    let (mut asts, mut hirs) = (vec![], vec![]);",
    "    for (pid, p) in patterns.iter().with_pattern_ids() {",
    "        let ast = self",
    "            .ast",
    "            .build()",
    "            .parse(p.as_ref())",
    "            .map_err(|err| BuildError::ast(pid, err))?;",
    "        asts.push(ast);",
    "    }",
    "    for ((pid, p), ast) in",
    "        patterns.iter().with_pattern_ids().zip(asts.iter())",
    "    {",
    "        let hir = self",
    "            .hir",
    "            .build()",
    "            .translate(p.as_ref(), ast)",
    "            .map_err(|err| BuildError::hir(pid, err))?;",
    "        hirs.push(hir);",
    "    }",
    "    self.build_many_from_hir(&hirs)",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 4,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "self\n                .ast\n                .build()\n                .parse(p.as_ref())\n                .map_err(|err| BuildError::ast(pid, err))?",
          "norm": null,
          "value": "Err/None",
          "line": 3424,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        24,
        25,
        66,
        67,
        68,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "self\n                .ast\n                .build()\n                .parse(p.as_ref())\n                .map_err(|err| BuildError::ast(pid, err))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3424,
          "bound": null
        },
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "true",
          "line": 3432,
          "bound": null
        },
        {
          "cond": "self\n                .hir\n                .build()\n                .translate(p.as_ref(), ast)\n                .map_err(|err| BuildError::hir(pid, err))?",
          "norm": null,
          "value": "Err/None",
          "line": 3434,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        29,
        30,
        9,
        10,
        11,
        13,
        15,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        63,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "self\n                .ast\n                .build()\n                .parse(p.as_ref())\n                .map_err(|err| BuildError::ast(pid, err))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3424,
          "bound": null
        },
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "true",
          "line": 3432,
          "bound": null
        },
        {
          "cond": "self\n                .hir\n                .build()\n                .translate(p.as_ref(), ast)\n                .map_err(|err| BuildError::hir(pid, err))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3434,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "false",
          "line": 3432,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        29,
        30,
        9,
        10,
        11,
        13,
        15,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        55,
        56,
        57,
        58,
        37,
        38,
        39,
        41,
        43,
        59,
        60,
        61,
        62,
        72
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "self\n                .ast\n                .build()\n                .parse(p.as_ref())\n                .map_err(|err| BuildError::ast(pid, err))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3424,
          "bound": null
        },
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "false",
          "line": 3432,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        29,
        30,
        9,
        10,
        11,
        13,
        15,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        59,
        60,
        61,
        62,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "true",
          "line": 3432,
          "bound": null
        },
        {
          "cond": "self\n                .hir\n                .build()\n                .translate(p.as_ref(), ast)\n                .map_err(|err| BuildError::hir(pid, err))?",
          "norm": null,
          "value": "Err/None",
          "line": 3434,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        63,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "true",
          "line": 3432,
          "bound": null
        },
        {
          "cond": "self\n                .hir\n                .build()\n                .translate(p.as_ref(), ast)\n                .map_err(|err| BuildError::hir(pid, err))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3434,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "false",
          "line": 3432,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        48,
        51,
        54,
        55,
        56,
        57,
        58,
        37,
        38,
        39,
        41,
        43,
        59,
        60,
        61,
        62,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(pid, p) in patterns.iter().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 3423,
          "bound": null
        },
        {
          "cond": "((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter())",
          "norm": null,
          "value": "false",
          "line": 3432,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        59,
        60,
        61,
        62,
        72
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}