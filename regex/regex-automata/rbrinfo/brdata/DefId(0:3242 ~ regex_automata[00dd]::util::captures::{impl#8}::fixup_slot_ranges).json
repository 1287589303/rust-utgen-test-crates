{
  "name": "regex_automata::util::captures::{impl#8}::fixup_slot_ranges",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": false,
  "loc": "regex-automata/src/util/captures.rs:2266:5:2291:6",
  "doc": "/// This corrects the slot ranges to account for the slots corresponding\n/// to the zeroth group of each pattern. That is, every slot range is\n/// offset by 'pattern_len() * 2', since each pattern uses two slots to\n/// represent the zeroth group.\n",
  "code": [
    "fn fixup_slot_ranges(&mut self) -> Result<(), GroupInfoError> {",
    "    use crate::util::primitives::IteratorIndexExt;",
    "    // Since we know number of patterns fits in PatternID and",
    "    // PatternID::MAX < isize::MAX, it follows that multiplying by 2 will",
    "    // never overflow usize.",
    "    let offset = self.pattern_len().checked_mul(2).unwrap();",
    "    for (pid, &mut (ref mut start, ref mut end)) in",
    "        self.slot_ranges.iter_mut().with_pattern_ids()",
    "    {",
    "        let group_len = 1 + ((end.as_usize() - start.as_usize()) / 2);",
    "        let new_end = match end.as_usize().checked_add(offset) {",
    "            Some(new_end) => new_end,",
    "            None => {",
    "                return Err(GroupInfoError::too_many_groups(",
    "                    pid, group_len,",
    "                ))",
    "            }",
    "        };",
    "        *end = SmallIndex::new(new_end).map_err(|_| {",
    "            GroupInfoError::too_many_groups(pid, group_len)",
    "        })?;",
    "        // Since start <= end, if end is valid then start must be too.",
    "        *start = SmallIndex::new(start.as_usize() + offset).unwrap();",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(pid, &mut (ref mut start, ref mut end)) in self.slot_ranges.iter_mut().with_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 2273,
          "bound": null
        },
        {
          "cond": "end.as_usize().checked_add(offset) matches Some(new_end)",
          "norm": null,
          "value": "true",
          "line": 2276,
          "bound": null
        },
        {
          "cond": "end.as_usize().checked_add(offset) matches Some(new_end)",
          "norm": null,
          "value": "true",
          "line": 2276,
          "bound": null
        },
        {
          "cond": "SmallIndex::new(new_end).map_err(|_| {\n                GroupInfoError::too_many_groups(pid, group_len)\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 2284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        28,
        29,
        30,
        32,
        34,
        35,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(pid, &mut (ref mut start, ref mut end)) in self.slot_ranges.iter_mut().with_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 2273,
          "bound": null
        },
        {
          "cond": "end.as_usize().checked_add(offset) matches Some(new_end)",
          "norm": null,
          "value": "true",
          "line": 2276,
          "bound": null
        },
        {
          "cond": "end.as_usize().checked_add(offset) matches Some(new_end)",
          "norm": null,
          "value": "true",
          "line": 2276,
          "bound": null
        },
        {
          "cond": "SmallIndex::new(new_end).map_err(|_| {\n                GroupInfoError::too_many_groups(pid, group_len)\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2284,
          "bound": null
        },
        {
          "cond": "(pid, &mut (ref mut start, ref mut end)) in self.slot_ranges.iter_mut().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 2273,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        8,
        9,
        10,
        12,
        14,
        44
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(pid, &mut (ref mut start, ref mut end)) in self.slot_ranges.iter_mut().with_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 2273,
          "bound": null
        },
        {
          "cond": "end.as_usize().checked_add(offset) matches None",
          "norm": null,
          "value": "true",
          "line": 2276,
          "bound": null
        }
      ],
      "ret": "Err(GroupInfoError::too_many_groups(\n                        pid, group_len,\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(pid, &mut (ref mut start, ref mut end)) in self.slot_ranges.iter_mut().with_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 2273,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        44
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}