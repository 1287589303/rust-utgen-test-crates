{
  "name": "regex_automata::util::lazy::{impl#1}::get",
  "mod_info": {
    "name": "util::lazy",
    "loc": "regex-automata/src/util/mod.rs:37:1:37:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/lazy.rs:78:5:80:6",
  "doc": "/// Return a reference to the lazily initialized value.\n///\n/// This routine may block if another thread is initializing a `T`.\n///\n/// Note that given a `x` which has type `Lazy`, this must be called via\n/// `Lazy::get(x)` and not `x.get()`. This routine is defined this way\n/// because `Lazy` impls `Deref` with a target of `T`.\n///\n/// # Panics\n///\n/// This panics if the `create` function inside this lazy value panics.\n/// If the panic occurred in another thread, then this routine _may_ also\n/// panic (but is not guaranteed to do so).\n",
  "code": [
    "pub fn get(this: &Lazy<T, F>) -> &T {",
    "    this.0.get()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "this.0.get()",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}