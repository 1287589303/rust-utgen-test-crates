{
  "name": "regex_automata::meta::strategy::copy_match_to_slots",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:1905:1:1914:2",
  "doc": "/// Copies the offsets in the given match to the corresponding positions in\n/// `slots`.\n///\n/// In effect, this sets the slots corresponding to the implicit group for the\n/// pattern in the given match. If the indices for the corresponding slots do\n/// not exist, then no slots are set.\n///\n/// This is useful when the caller provides slots (or captures), but you use a\n/// regex engine that doesn't operate on slots (like a lazy DFA). This function\n/// lets you map the match you get back to the slots provided by the caller.\n",
  "code": [
    "fn copy_match_to_slots(m: Match, slots: &mut [Option<NonMaxUsize>]) {",
    "    let slot_start = m.pattern().as_usize() * 2;",
    "    let slot_end = slot_start + 1;",
    "    if let Some(slot) = slots.get_mut(slot_start) {",
    "        *slot = NonMaxUsize::new(m.start());",
    "    }",
    "    if let Some(slot) = slots.get_mut(slot_end) {",
    "        *slot = NonMaxUsize::new(m.end());",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(slot) = slots.get_mut(slot_start)",
          "norm": null,
          "value": "true",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(slot_end)",
          "norm": null,
          "value": "true",
          "line": 1911,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        10,
        11,
        12,
        17,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(slot) = slots.get_mut(slot_start)",
          "norm": null,
          "value": "true",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(slot_end)",
          "norm": null,
          "value": "true",
          "line": 1911,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(slot) = slots.get_mut(slot_start)",
          "norm": null,
          "value": "true",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(slot_end)",
          "norm": null,
          "value": "true",
          "line": 1911,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        17,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(slot) = slots.get_mut(slot_start)",
          "norm": null,
          "value": "true",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(slot_end)",
          "norm": null,
          "value": "true",
          "line": 1911,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}