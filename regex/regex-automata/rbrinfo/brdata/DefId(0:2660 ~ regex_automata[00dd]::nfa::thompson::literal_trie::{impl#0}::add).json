{
  "name": "regex_automata::nfa::thompson::literal_trie::{impl#0}::add",
  "mod_info": {
    "name": "nfa::thompson::literal_trie",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:63:1:63:18"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/literal_trie.rs:110:5:118:6",
  "doc": "/// Add the given literal to this trie.\n///\n/// If the literal could not be added because the `StateID` space was\n/// exhausted, then an error is returned. If an error returns, the trie\n/// is in an unspecified state.\n",
  "code": [
    "pub(crate) fn add(&mut self, bytes: &[u8]) -> Result<(), BuildError> {",
    "    let mut prev = StateID::ZERO;",
    "    let mut it = bytes.iter().copied();",
    "    while let Some(b) = if self.rev { it.next_back() } else { it.next() } {",
    "        prev = self.get_or_add_state(prev, b)?;",
    "    }",
    "    self.states[prev].add_match();",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.rev",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        20,
        21,
        22,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.rev",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "self.get_or_add_state(prev, b)?",
          "norm": null,
          "value": "Err/None",
          "line": 114,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        18,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.rev",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "self.get_or_add_state(prev, b)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 114,
          "bound": null
        },
        {
          "cond": "self.rev",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        12,
        13,
        16,
        19,
        3,
        4,
        7,
        8,
        9,
        20,
        21,
        22,
        25
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.rev",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        20,
        21,
        22,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.rev",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "self.get_or_add_state(prev, b)?",
          "norm": null,
          "value": "Err/None",
          "line": 114,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        18,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.rev",
          "norm": null,
          "value": "false",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "self.get_or_add_state(prev, b)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 114,
          "bound": null
        },
        {
          "cond": "self.rev",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        },
        {
          "cond": "let Some(b) = if self.rev { it.next_back() } else { it.next() }",
          "norm": null,
          "value": "true",
          "line": 113,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        19,
        3,
        4,
        5,
        6,
        9,
        20,
        21,
        22,
        25
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}