{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::config",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:347:5:349:6",
  "doc": "/// Return a default configuration for an `NFA`.\n///\n/// This is a convenience routine to avoid needing to import the `Config`\n/// type when customizing the construction of an NFA.\n///\n/// # Example\n///\n/// This example shows how to build an NFA with a small size limit that\n/// results in a compilation error for any regex that tries to use more\n/// heap memory than the configured limit.\n///\n/// ```\n/// use regex_automata::nfa::thompson::{NFA, pikevm::PikeVM};\n///\n/// let result = PikeVM::builder()\n///     .thompson(NFA::config().nfa_size_limit(Some(1_000)))\n///     // Remember, \\w is Unicode-aware by default and thus huge.\n///     .build(r\"\\w+\");\n/// assert!(result.is_err());\n/// ```\n",
  "code": [
    "pub fn config() -> Config {",
    "    Config::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}