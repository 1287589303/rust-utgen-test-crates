{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#2}::always_match",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:494:5:497:6",
  "doc": "/// Create a new `PikeVM` that matches every input.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Match};\n///\n/// let re = PikeVM::always_match()?;\n/// let mut cache = re.create_cache();\n///\n/// let expected = Match::must(0, 0..0);\n/// assert_eq!(Some(expected), re.find_iter(&mut cache, \"\").next());\n/// assert_eq!(Some(expected), re.find_iter(&mut cache, \"foo\").next());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn always_match() -> Result<PikeVM, BuildError> {",
    "    let nfa = thompson::NFA::always_match();",
    "    PikeVM::new_from_nfa(nfa)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}