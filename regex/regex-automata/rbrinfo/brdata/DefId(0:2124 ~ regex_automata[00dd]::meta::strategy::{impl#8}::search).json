{
  "name": "regex_automata::meta::strategy::{impl#8}::search",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:1321:5:1361:6",
  "doc": "",
  "code": [
    "fn search(&self, cache: &mut Cache, input: &Input<'_>) -> Option<Match> {",
    "    if input.get_anchored().is_anchored() {",
    "        return self.core.search(cache, input);",
    "    }",
    "    match self.try_search_half_start(cache, input) {",
    "        Err(RetryError::Quadratic(_err)) => {",
    "            trace!(\"reverse suffix optimization failed: {}\", _err);",
    "            self.core.search(cache, input)",
    "        }",
    "        Err(RetryError::Fail(_err)) => {",
    "            trace!(\"reverse suffix reverse fast search failed: {}\", _err);",
    "            self.core.search_nofail(cache, input)",
    "        }",
    "        Ok(None) => None,",
    "        Ok(Some(hm_start)) => {",
    "            let fwdinput = input",
    "                .clone()",
    "                .anchored(Anchored::Pattern(hm_start.pattern()))",
    "                .span(hm_start.offset()..input.end());",
    "            match self.try_search_half_fwd(cache, &fwdinput) {",
    "                Err(_err) => {",
    "                    trace!(",
    "                        \"reverse suffix forward fast search failed: {}\",",
    "                        _err",
    "                    );",
    "                    self.core.search_nofail(cache, input)",
    "                }",
    "                Ok(None) => {",
    "                    unreachable!(",
    "                        \"suffix match plus reverse match implies \\",
    "\t\t     there must be a match\",",
    "                    )",
    "                }",
    "                Ok(Some(hm_end)) => Some(Match::new(",
    "                    hm_start.pattern(),",
    "                    hm_start.offset()..hm_end.offset(),",
    "                )),",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "true",
          "line": 1322,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Fail(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        8,
        10,
        16,
        17,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Ok(None) or Ok(Some(hm_start))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        8,
        9,
        14,
        15,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Ok(None) or Ok(Some(hm_start))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_fwd(cache, &fwdinput) matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 1340,
          "bound": null
        },
        {
          "cond": "self.try_search_half_fwd(cache, &fwdinput) matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        11,
        13,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        31,
        32,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Ok(None) or Ok(Some(hm_start))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_fwd(cache, &fwdinput) matches Ok(None) or Ok(Some(hm_end))",
          "norm": null,
          "value": "true",
          "line": 1340,
          "bound": null
        },
        {
          "cond": "self.try_search_half_fwd(cache, &fwdinput) matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": "Some(Match::new(\n                        hm_start.pattern(),\n                        hm_start.offset()..hm_end.offset(),\n                    ))",
      "path": [
        0,
        1,
        2,
        5,
        6,
        11,
        13,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        36,
        37,
        38,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Ok(None) or Ok(Some(hm_start))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Err(RetryError::Fail(_err)) or Err(RetryError::Quadratic(_err))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_fwd(cache, &fwdinput) matches Ok(None) or Ok(Some(hm_end))",
          "norm": null,
          "value": "true",
          "line": 1340,
          "bound": null
        },
        {
          "cond": "self.try_search_half_fwd(cache, &fwdinput) matches Ok(None) or Ok(Some(hm_end))",
          "norm": null,
          "value": "true",
          "line": 1340,
          "bound": null
        },
        {
          "cond": "self.try_search_half_fwd(cache, &fwdinput) matches Ok(None)",
          "norm": null,
          "value": "true",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        11,
        13,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        29,
        33,
        34,
        35,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "input.get_anchored().is_anchored()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Ok(None) or Ok(Some(hm_start))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Ok(None) or Ok(Some(hm_start))",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "self.try_search_half_start(cache, input) matches Ok(None)",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        6,
        11,
        12,
        18,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}