{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::new",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:226:5:228:6",
  "doc": "/// Parse the given regular expression using a default configuration and\n/// build an NFA from it.\n///\n/// If you want a non-default configuration, then use the NFA\n/// [`Compiler`] with a [`Config`].\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Match};\n///\n/// let re = PikeVM::new(r\"foo[0-9]+\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// let expected = Some(Match::must(0, 0..8));\n/// re.captures(&mut cache, b\"foo12345\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn new(pattern: &str) -> Result<NFA, BuildError> {",
    "    NFA::compiler().build(pattern)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}