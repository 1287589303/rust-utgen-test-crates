{
  "name": "regex_automata::meta::regex::{impl#11}::next",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2141:5:2154:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Captures> {",
    "    // Splitting 'self' apart seems necessary to appease borrowck.",
    "    let CapturesMatches { re, ref mut cache, ref mut caps, ref mut it } =",
    "        *self;",
    "    let _ = it.advance(|input| {",
    "        re.search_captures_with(cache, input, caps);",
    "        Ok(caps.get_match())",
    "    });",
    "    if caps.is_match() {",
    "        Some(caps.clone())",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "caps.is_match()",
          "norm": null,
          "value": "true",
          "line": 2149,
          "bound": null
        }
      ],
      "ret": "Some(caps.clone())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "caps.is_match()",
          "norm": null,
          "value": "false",
          "line": 2149,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}