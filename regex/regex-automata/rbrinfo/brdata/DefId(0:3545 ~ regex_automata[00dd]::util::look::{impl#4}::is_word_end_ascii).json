{
  "name": "regex_automata::util::look::{impl#4}::is_word_end_ascii",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1114:5:1119:6",
  "doc": "/// Returns true when [`Look::WordEndAscii`] is satisfied `at` the given\n/// position in `haystack`.\n///\n/// # Panics\n///\n/// This may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n",
  "code": [
    "pub fn is_word_end_ascii(&self, haystack: &[u8], at: usize) -> bool {",
    "    let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);",
    "    let word_after =",
    "        at < haystack.len() && utf8::is_word_byte(haystack[at]);",
    "    word_before && !word_after",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 1115,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 1115,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        12,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 1115,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 1117,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        9,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 1115,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 1117,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        9,
        12,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 1115,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        2,
        6,
        7,
        8,
        10,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 1115,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        2,
        6,
        7,
        8,
        10,
        11,
        12,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 1115,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 1117,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        2,
        6,
        7,
        9,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 1115,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 1117,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        2,
        6,
        7,
        9,
        12,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}