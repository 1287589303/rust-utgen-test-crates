{
  "name": "regex_automata::util::sparse_set::{impl#1}::resize",
  "mod_info": {
    "name": "util::sparse_set",
    "loc": "regex-automata/src/util/mod.rs:55:1:55:27"
  },
  "visible": true,
  "loc": "regex-automata/src/util/sparse_set.rs:129:5:138:6",
  "doc": "/// Resizes this sparse set to have the new capacity given.\n///\n/// This set is automatically cleared.\n///\n/// This panics if the capacity given is bigger than `StateID::LIMIT`.\n",
  "code": [
    "pub(crate) fn resize(&mut self, new_capacity: usize) {",
    "    assert!(",
    "        new_capacity <= StateID::LIMIT,",
    "        \"sparse set capacity cannot excced {:?}\",",
    "        StateID::LIMIT",
    "    );",
    "    self.clear();",
    "    self.dense.resize(new_capacity, StateID::ZERO);",
    "    self.sparse.resize(new_capacity, StateID::ZERO);",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "new_capacity <= StateID::LIMIT",
          "norm": "StateID::LIMIT >= new_capacity",
          "value": "true",
          "line": 131,
          "bound": "new_capacity == StateID::LIMIT"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "new_capacity <= StateID::LIMIT",
          "norm": "StateID::LIMIT >= new_capacity",
          "value": "false",
          "line": 131,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}