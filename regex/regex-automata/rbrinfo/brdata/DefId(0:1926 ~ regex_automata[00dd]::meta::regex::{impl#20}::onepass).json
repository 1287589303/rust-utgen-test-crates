{
  "name": "regex_automata::meta::regex::{impl#20}::onepass",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3016:5:3018:6",
  "doc": "/// Toggle whether a one-pass DFA should be available for use by the meta\n/// regex engine.\n///\n/// Enabling this does not necessarily mean that a one-pass DFA will\n/// definitely be used. It just means that it will be _available_ for\n/// use if the meta regex engine thinks it will be useful. (Indeed, a\n/// one-pass DFA can only be used when the regex is one-pass. See the\n/// [`dfa::onepass`](crate::dfa::onepass) module for more details.)\n///\n/// When the `dfa-onepass` crate feature is enabled, then this is enabled\n/// by default. Otherwise, if the crate feature is disabled, then this is\n/// always disabled, regardless of its setting by the caller.\n",
  "code": [
    "pub fn onepass(self, yes: bool) -> Config {",
    "    Config { onepass: Some(yes), ..self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Config { onepass: Some(yes), ..self }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}