{
  "name": "regex_automata::nfa::thompson::nfa::{impl#2}::set_captures",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1428:5:1436:6",
  "doc": "/// Set the capturing groups for this NFA.\n///\n/// The given slice should contain the capturing groups for each pattern,\n/// The capturing groups in turn should correspond to the total number of\n/// capturing groups in the pattern, including the anonymous first capture\n/// group for each pattern. If a capturing group does have a name, then it\n/// should be provided as a Arc<str>.\n///\n/// This returns an error if a corresponding `GroupInfo` could not be\n/// built.\n",
  "code": [
    "pub(super) fn set_captures(",
    "    &mut self,",
    "    captures: &[Vec<Option<Arc<str>>>],",
    ") -> Result<(), GroupInfoError> {",
    "    self.group_info = GroupInfo::new(",
    "        captures.iter().map(|x| x.iter().map(|y| y.as_ref())),",
    "    )?;",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "GroupInfo::new(\n            captures.iter().map(|x| x.iter().map(|y| y.as_ref())),\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1432,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "GroupInfo::new(\n            captures.iter().map(|x| x.iter().map(|y| y.as_ref())),\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1432,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        13,
        14,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}