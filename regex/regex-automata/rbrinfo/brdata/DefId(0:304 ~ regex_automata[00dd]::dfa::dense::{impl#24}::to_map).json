{
  "name": "regex_automata::dfa::dense::{impl#24}::to_map",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:4562:5:4572:6",
  "doc": "/// Converts these match states back into their map form. This is useful\n/// when shuffling states, as the normal MatchStates representation is not\n/// amenable to easy state swapping. But with this map, to swap id1 and\n/// id2, all you need to do is:\n///\n/// if let Some(pids) = map.remove(&id1) {\n///     map.insert(id2, pids);\n/// }\n///\n/// Once shuffling is done, use MatchStates::new to convert back.\n",
  "code": [
    "fn to_map(&self, dfa: &DFA<T>) -> BTreeMap<StateID, Vec<PatternID>> {",
    "    let mut map = BTreeMap::new();",
    "    for i in 0..self.len() {",
    "        let mut pids = vec![];",
    "        for j in 0..self.pattern_len(i) {",
    "            pids.push(self.pattern_id(i, j));",
    "        }",
    "        map.insert(self.match_state_id(dfa, i), pids);",
    "    }",
    "    map",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 2,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i in 0..self.len()",
          "norm": null,
          "value": "true",
          "line": 4564,
          "bound": null
        },
        {
          "cond": "j in 0..self.pattern_len(i)",
          "norm": null,
          "value": "true",
          "line": 4566,
          "bound": null
        },
        {
          "cond": "j in 0..self.pattern_len(i)",
          "norm": null,
          "value": "false",
          "line": 4566,
          "bound": null
        },
        {
          "cond": "i in 0..self.len()",
          "norm": null,
          "value": "false",
          "line": 4564,
          "bound": null
        }
      ],
      "ret": "map",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        14,
        15,
        16,
        18,
        20,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i in 0..self.len()",
          "norm": null,
          "value": "true",
          "line": 4564,
          "bound": null
        },
        {
          "cond": "j in 0..self.pattern_len(i)",
          "norm": null,
          "value": "false",
          "line": 4566,
          "bound": null
        },
        {
          "cond": "i in 0..self.len()",
          "norm": null,
          "value": "false",
          "line": 4564,
          "bound": null
        }
      ],
      "ret": "map",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "i in 0..self.len()",
          "norm": null,
          "value": "false",
          "line": 4564,
          "bound": null
        }
      ],
      "ret": "map",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}