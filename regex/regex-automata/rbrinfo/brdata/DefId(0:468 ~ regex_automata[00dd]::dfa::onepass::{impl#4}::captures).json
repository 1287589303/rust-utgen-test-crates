{
  "name": "regex_automata::dfa::onepass::{impl#4}::captures",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1765:5:1776:6",
  "doc": "/// Executes an anchored leftmost forward search and writes the spans\n/// of capturing groups that participated in a match into the provided\n/// [`Captures`] value. If no match was found, then [`Captures::is_match`]\n/// is guaranteed to return `false`.\n///\n/// The given `Input` is forcefully set to use [`Anchored::Yes`] if the\n/// given configuration was [`Anchored::No`] (which is the default).\n///\n/// # Panics\n///\n/// This routine panics if the search could not complete. This can occur\n/// in the following circumstances:\n///\n/// * When the provided `Input` configuration is not supported. For\n/// example, by providing an unsupported anchor mode. Concretely,\n/// this occurs when using [`Anchored::Pattern`] without enabling\n/// [`Config::starts_for_each_pattern`].\n///\n/// When a search panics, callers cannot know whether a match exists or\n/// not.\n///\n/// Use [`DFA::try_search`] if you want to handle these panics as error\n/// values instead.\n///\n/// # Example\n///\n/// This shows a simple example of a one-pass regex that extracts\n/// capturing group spans.\n///\n/// ```\n/// use regex_automata::{dfa::onepass::DFA, Match, Span};\n///\n/// let re = DFA::new(\n///     // Notice that we use ASCII here. The corresponding Unicode regex\n///     // is sadly not one-pass.\n///     \"(?P<first>[[:alpha:]]+)[[:space:]]+(?P<last>[[:alpha:]]+)\",\n/// )?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"Bruce Springsteen\", &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..17)), caps.get_match());\n/// assert_eq!(Some(Span::from(0..5)), caps.get_group(1));\n/// assert_eq!(Some(Span::from(6..17)), caps.get_group_by_name(\"last\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn captures<'h, I: Into<Input<'h>>>(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: I,",
    "    caps: &mut Captures,",
    ") {",
    "    let mut input = input.into();",
    "    if matches!(input.get_anchored(), Anchored::No) {",
    "        input.set_anchored(Anchored::Yes);",
    "    }",
    "    self.try_search(cache, &input, caps).unwrap();",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.get_anchored() matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "input.get_anchored() matches Anchored::No",
          "norm": null,
          "value": "false",
          "line": 1772,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.get_anchored() matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        },
        {
          "cond": "input.get_anchored() matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 1772,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}