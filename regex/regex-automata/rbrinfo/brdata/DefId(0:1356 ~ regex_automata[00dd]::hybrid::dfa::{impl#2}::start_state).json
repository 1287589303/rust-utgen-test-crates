{
  "name": "regex_automata::hybrid::dfa::{impl#2}::start_state",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:1554:5:1575:6",
  "doc": "/// Return the ID of the start state for this lazy DFA for the given\n/// starting configuration.\n///\n/// Unlike typical DFA implementations, the start state for DFAs in this\n/// crate is dependent on a few different factors:\n///\n/// * The [`Anchored`] mode of the search. Unanchored, anchored and\n/// anchored searches for a specific [`PatternID`] all use different start\n/// states.\n/// * Whether a \"look-behind\" byte exists. For example, the `^` anchor\n/// matches if and only if there is no look-behind byte.\n/// * The specific value of that look-behind byte. For example, a `(?m:^)`\n/// assertion only matches when there is either no look-behind byte, or\n/// when the look-behind byte is a line terminator.\n///\n/// The [starting configuration](start::Config) provides the above\n/// information.\n///\n/// This routine can be used for either forward or reverse searches.\n/// Although, as a convenience, if you have an [`Input`], then it\n/// may be more succinct to use [`DFA::start_state_forward`] or\n/// [`DFA::start_state_reverse`]. Note, for example, that the convenience\n/// routines return a [`MatchError`] on failure where as this routine\n/// returns a [`StartError`].\n///\n/// # Errors\n///\n/// This may return a [`StartError`] if the search needs to give up when\n/// determining the start state (for example, if it sees a \"quit\" byte\n/// or if the cache has become inefficient). This can also return an\n/// error if the given configuration contains an unsupported [`Anchored`]\n/// configuration.\n",
  "code": [
    "pub fn start_state(",
    "    &self,",
    "    cache: &mut Cache,",
    "    config: &start::Config,",
    ") -> Result<LazyStateID, StartError> {",
    "    let lazy = LazyRef::new(self, cache);",
    "    let anchored = config.get_anchored();",
    "    let start = match config.get_look_behind() {",
    "        None => Start::Text,",
    "        Some(byte) => {",
    "            if !self.quitset.is_empty() && self.quitset.contains(byte) {",
    "                return Err(StartError::quit(byte));",
    "            }",
    "            self.start_map.get(byte)",
    "        }",
    "    };",
    "    let start_id = lazy.get_cached_start_id(anchored, start)?;",
    "    if !start_id.is_unknown() {",
    "        return Ok(start_id);",
    "    }",
    "    Lazy::new(self, cache).cache_start_group(anchored, start)",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1570,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        9,
        15,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1570,
          "bound": null
        },
        {
          "cond": "start_id.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        9,
        15,
        16,
        17,
        18,
        19,
        22,
        25,
        26,
        28,
        29,
        32
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1570,
          "bound": null
        },
        {
          "cond": "start_id.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 1571,
          "bound": null
        }
      ],
      "ret": "Ok(start_id)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        9,
        15,
        16,
        17,
        18,
        19,
        22,
        25,
        27,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "self.quitset.contains(byte)",
          "norm": null,
          "value": "true",
          "line": 1564,
          "bound": null
        }
      ],
      "ret": "Err(StartError::quit(byte))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        10,
        11,
        12,
        13,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "self.quitset.contains(byte)",
          "norm": null,
          "value": "false",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1570,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "self.quitset.contains(byte)",
          "norm": null,
          "value": "false",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1570,
          "bound": null
        },
        {
          "cond": "start_id.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        25,
        26,
        28,
        29,
        32
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "self.quitset.contains(byte)",
          "norm": null,
          "value": "false",
          "line": 1564,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1570,
          "bound": null
        },
        {
          "cond": "start_id.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 1571,
          "bound": null
        }
      ],
      "ret": "Ok(start_id)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        25,
        27,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1570,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        17,
        18,
        19,
        21,
        23,
        24,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1570,
          "bound": null
        },
        {
          "cond": "start_id.is_unknown()",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        17,
        18,
        19,
        22,
        25,
        26,
        28,
        29,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1561,
          "bound": null
        },
        {
          "cond": "lazy.get_cached_start_id(anchored, start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1570,
          "bound": null
        },
        {
          "cond": "start_id.is_unknown()",
          "norm": null,
          "value": "false",
          "line": 1571,
          "bound": null
        }
      ],
      "ret": "Ok(start_id)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        17,
        18,
        19,
        22,
        25,
        27,
        30,
        31,
        32
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}