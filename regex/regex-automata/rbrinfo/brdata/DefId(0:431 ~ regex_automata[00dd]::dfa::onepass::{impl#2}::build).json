{
  "name": "regex_automata::dfa::onepass::{impl#2}::build",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:581:5:726:6",
  "doc": "/// Build the DFA from the NFA given to this builder. If the NFA is not\n/// one-pass, then return an error. An error may also be returned if a\n/// particular limit is exceeded. (Some limits, like the total heap memory\n/// used, are configurable. Others, like the total patterns or slots, are\n/// hard-coded based on representational limitations.)\n",
  "code": [
    "fn build(mut self) -> Result<DFA, BuildError> {",
    "    self.nfa.look_set_any().available().map_err(BuildError::word)?;",
    "    for look in self.nfa.look_set_any().iter() {",
    "        // This is a future incompatibility check where if we add any",
    "        // more look-around assertions, then the one-pass DFA either",
    "        // needs to reject them (what we do here) or it needs to have its",
    "        // Transition representation modified to be capable of storing the",
    "        // new assertions.",
    "        if look.as_repr() > Look::WordUnicodeNegate.as_repr() {",
    "            return Err(BuildError::unsupported_look(look));",
    "        }",
    "    }",
    "    if self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
    "    {",
    "        return Err(BuildError::too_many_patterns(",
    "            PatternEpsilons::PATTERN_ID_LIMIT,",
    "        ));",
    "    }",
    "    if self.nfa.group_info().explicit_slot_len() > Slots::LIMIT {",
    "        return Err(BuildError::not_one_pass(",
    "            \"too many explicit capturing groups (max is 16)\",",
    "        ));",
    "    }",
    "    assert_eq!(DEAD, self.add_empty_state()?);",
    "",
    "    // This is where the explicit slots start. We care about this because",
    "    // we only need to track explicit slots. The implicit slots---two for",
    "    // each pattern---are tracked as part of the search routine itself.",
    "    let explicit_slot_start = self.nfa.pattern_len() * 2;",
    "    self.add_start_state(None, self.nfa.start_anchored())?;",
    "    if self.config.get_starts_for_each_pattern() {",
    "        for pid in self.nfa.patterns() {",
    "            self.add_start_state(",
    "                Some(pid),",
    "                self.nfa.start_pattern(pid).unwrap(),",
    "            )?;",
    "        }",
    "    }",
    "    // NOTE: One wonders what the effects of treating 'uncompiled_nfa_ids'",
    "    // as a stack are. It is really an unordered *set* of NFA state IDs.",
    "    // If it, for example, in practice led to discovering whether a regex",
    "    // was or wasn't one-pass later than if we processed NFA state IDs in",
    "    // ascending order, then that would make this routine more costly in",
    "    // the somewhat common case of a regex that isn't one-pass.",
    "    while let Some(nfa_id) = self.uncompiled_nfa_ids.pop() {",
    "        let dfa_id = self.nfa_to_dfa_id[nfa_id];",
    "        // Once we see a match, we keep going, but don't add any new",
    "        // transitions. Normally we'd just stop, but we have to keep",
    "        // going in order to verify that our regex is actually one-pass.",
    "        self.matched = false;",
    "        // The NFA states we've already explored for this DFA state.",
    "        self.seen.clear();",
    "        // The NFA states to explore via epsilon transitions. If we ever",
    "        // try to push an NFA state that we've already seen, then the NFA",
    "        // is not one-pass because it implies there are multiple epsilon",
    "        // transition paths that lead to the same NFA state. In other",
    "        // words, there is ambiguity.",
    "        self.stack_push(nfa_id, Epsilons::empty())?;",
    "        while let Some((id, epsilons)) = self.stack.pop() {",
    "            match *self.nfa.state(id) {",
    "                thompson::State::ByteRange { ref trans } => {",
    "                    self.compile_transition(dfa_id, trans, epsilons)?;",
    "                }",
    "                thompson::State::Sparse(ref sparse) => {",
    "                    for trans in sparse.transitions.iter() {",
    "                        self.compile_transition(dfa_id, trans, epsilons)?;",
    "                    }",
    "                }",
    "                thompson::State::Dense(ref dense) => {",
    "                    for trans in dense.iter() {",
    "                        self.compile_transition(dfa_id, &trans, epsilons)?;",
    "                    }",
    "                }",
    "                thompson::State::Look { look, next } => {",
    "                    let looks = epsilons.looks().insert(look);",
    "                    self.stack_push(next, epsilons.set_looks(looks))?;",
    "                }",
    "                thompson::State::Union { ref alternates } => {",
    "                    for &sid in alternates.iter().rev() {",
    "                        self.stack_push(sid, epsilons)?;",
    "                    }",
    "                }",
    "                thompson::State::BinaryUnion { alt1, alt2 } => {",
    "                    self.stack_push(alt2, epsilons)?;",
    "                    self.stack_push(alt1, epsilons)?;",
    "                }",
    "                thompson::State::Capture { next, slot, .. } => {",
    "                    let slot = slot.as_usize();",
    "                    let epsilons = if slot < explicit_slot_start {",
    "                        // If this is an implicit slot, we don't care",
    "                        // about it, since we handle implicit slots in",
    "                        // the search routine. We can get away with that",
    "                        // because there are 2 implicit slots for every",
    "                        // pattern.",
    "                        epsilons",
    "                    } else {",
    "                        // Offset our explicit slots so that they start",
    "                        // at index 0.",
    "                        let offset = slot - explicit_slot_start;",
    "                        epsilons.set_slots(epsilons.slots().insert(offset))",
    "                    };",
    "                    self.stack_push(next, epsilons)?;",
    "                }",
    "                thompson::State::Fail => {",
    "                    continue;",
    "                }",
    "                thompson::State::Match { pattern_id } => {",
    "                    // If we found two different paths to a match state",
    "                    // for the same DFA state, then we have ambiguity.",
    "                    // Thus, it's not one-pass.",
    "                    if self.matched {",
    "                        return Err(BuildError::not_one_pass(",
    "                            \"multiple epsilon transitions to match state\",",
    "                        ));",
    "                    }",
    "                    self.matched = true;",
    "                    // Shove the matching pattern ID and the 'epsilons'",
    "                    // into the current DFA state's pattern epsilons. The",
    "                    // 'epsilons' includes the slots we need to capture",
    "                    // before reporting the match and also the conditional",
    "                    // epsilon transitions we need to check before we can",
    "                    // report a match.",
    "                    self.dfa.set_pattern_epsilons(",
    "                        dfa_id,",
    "                        PatternEpsilons::empty()",
    "                            .set_pattern_id(pattern_id)",
    "                            .set_epsilons(epsilons),",
    "                    );",
    "                    // N.B. It is tempting to just bail out here when",
    "                    // compiling a leftmost-first DFA, since we will never",
    "                    // compile any more transitions in that case. But we",
    "                    // actually need to keep going in order to verify that",
    "                    // we actually have a one-pass regex. e.g., We might",
    "                    // see more Match states (e.g., for other patterns)",
    "                    // that imply that we don't have a one-pass regex.",
    "                    // So instead, we mark that we've found a match and",
    "                    // continue on. When we go to compile a new DFA state,",
    "                    // we just skip that part. But otherwise check that the",
    "                    // one-pass property is upheld.",
    "                }",
    "            }",
    "        }",
    "    }",
    "    self.shuffle_states();",
    "    Ok(self.dfa)",
    "}"
  ],
  "size": {
    "chain": 170,
    "contra": 116,
    "min_set": 30
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Err/None",
          "line": 582,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        272,
        273,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "true",
          "line": 589,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::unsupported_look(look))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "true",
          "line": 593,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::too_many_patterns(\n                PatternEpsilons::PATTERN_ID_LIMIT,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        29,
        30,
        31,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "true",
          "line": 599,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                \"too many explicit capturing groups (max is 16)\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Err/None",
          "line": 604,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        42,
        44,
        45,
        270,
        271,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Err/None",
          "line": 610,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        56,
        58,
        59,
        267,
        268,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Err/None",
          "line": 613,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        77,
        79,
        80,
        265,
        266,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Err/None",
          "line": 638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        95,
        97,
        98,
        262,
        263,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "true",
          "line": 691,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                                \"multiple epsilon transitions to match state\",\n                            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        228,
        229,
        230,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "false",
          "line": 691,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        231,
        232,
        233,
        234,
        235,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        114,
        238,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        198,
        200,
        201,
        246,
        247,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 665,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        206,
        208,
        209,
        244,
        245,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 665,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        207,
        210,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        189,
        191,
        192,
        249,
        250,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 660,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        190,
        193,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Err/None",
          "line": 656,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        170,
        172,
        173,
        251,
        252,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 656,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        171,
        174,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 651,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        156,
        158,
        159,
        253,
        254,
        255,
        256,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 651,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        157,
        160,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 646,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        138,
        140,
        141,
        257,
        258,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 646,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        139,
        142,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 642,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        120,
        122,
        123,
        259,
        260,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 642,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        121,
        124,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Err/None",
          "line": 638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        95,
        97,
        98,
        262,
        263,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "true",
          "line": 691,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                                \"multiple epsilon transitions to match state\",\n                            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        228,
        229,
        230,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "false",
          "line": 691,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        231,
        232,
        233,
        234,
        235,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        114,
        238,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        198,
        200,
        201,
        246,
        247,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 665,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        206,
        208,
        209,
        244,
        245,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 665,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        207,
        210,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        189,
        191,
        192,
        249,
        250,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 660,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        190,
        193,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Err/None",
          "line": 656,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        170,
        172,
        173,
        251,
        252,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 656,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        171,
        174,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 651,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        156,
        158,
        159,
        253,
        254,
        255,
        256,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 651,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        157,
        160,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 646,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        138,
        140,
        141,
        257,
        258,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 646,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        139,
        142,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 642,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        120,
        122,
        123,
        259,
        260,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 642,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        121,
        124,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Err/None",
          "line": 638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        95,
        97,
        98,
        262,
        263,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "true",
          "line": 691,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                                \"multiple epsilon transitions to match state\",\n                            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        228,
        229,
        230,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "false",
          "line": 691,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        231,
        232,
        233,
        234,
        235,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        114,
        238,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        198,
        200,
        201,
        246,
        247,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 665,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        206,
        208,
        209,
        244,
        245,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 665,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        207,
        210,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        189,
        191,
        192,
        249,
        250,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 660,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        190,
        193,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Err/None",
          "line": 656,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        170,
        172,
        173,
        251,
        252,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 656,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        171,
        174,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 651,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        156,
        158,
        159,
        253,
        254,
        255,
        256,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 651,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        157,
        160,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 646,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        138,
        140,
        141,
        257,
        258,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 646,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        139,
        142,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 642,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        120,
        122,
        123,
        259,
        260,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 642,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        121,
        124,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "true",
          "line": 583,
          "bound": null
        },
        {
          "cond": "look.as_repr() > Look::WordUnicodeNegate.as_repr()",
          "norm": "Look::WordUnicodeNegate.as_repr() < look.as_repr()",
          "value": "false",
          "line": 589,
          "bound": "look.as_repr() == Look::WordUnicodeNegate.as_repr()"
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        26,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        48,
        325,
        331,
        332
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "true",
          "line": 593,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::too_many_patterns(\n                PatternEpsilons::PATTERN_ID_LIMIT,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        29,
        30,
        31,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "true",
          "line": 599,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                \"too many explicit capturing groups (max is 16)\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Err/None",
          "line": 604,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        42,
        44,
        45,
        270,
        271,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Err/None",
          "line": 610,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        56,
        58,
        59,
        267,
        268,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Err/None",
          "line": 613,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        77,
        79,
        80,
        265,
        266,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Err/None",
          "line": 638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        95,
        97,
        98,
        262,
        263,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "true",
          "line": 691,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                                \"multiple epsilon transitions to match state\",\n                            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        228,
        229,
        230,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "false",
          "line": 691,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        231,
        232,
        233,
        234,
        235,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        114,
        238,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        198,
        200,
        201,
        246,
        247,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 665,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        206,
        208,
        209,
        244,
        245,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 665,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        207,
        210,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        189,
        191,
        192,
        249,
        250,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 660,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        190,
        193,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Err/None",
          "line": 656,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        170,
        172,
        173,
        251,
        252,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 656,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        171,
        174,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 651,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        156,
        158,
        159,
        253,
        254,
        255,
        256,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 651,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        157,
        160,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 646,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        138,
        140,
        141,
        257,
        258,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 646,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        139,
        142,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 642,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        120,
        122,
        123,
        259,
        260,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "true",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add_start_state(\n                    Some(pid),\n                    self.nfa.start_pattern(pid).unwrap(),\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 613,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 642,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        70,
        72,
        73,
        74,
        75,
        78,
        81,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        121,
        124,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Err/None",
          "line": 638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        95,
        97,
        98,
        262,
        263,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 121,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "true",
          "line": 691,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                                \"multiple epsilon transitions to match state\",\n                            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        228,
        229,
        230,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 122,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "false",
          "line": 691,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        231,
        232,
        233,
        234,
        235,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 123,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        114,
        238,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 124,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 125,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 126,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 127,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 128,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        198,
        200,
        201,
        246,
        247,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 129,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 665,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        206,
        208,
        209,
        244,
        245,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 130,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 665,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        207,
        210,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 131,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        189,
        191,
        192,
        249,
        250,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 132,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 660,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        190,
        193,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 133,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 134,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Err/None",
          "line": 656,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        170,
        172,
        173,
        251,
        252,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 135,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 656,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        171,
        174,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 136,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 651,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        156,
        158,
        159,
        253,
        254,
        255,
        256,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 137,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 651,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        157,
        160,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 138,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 139,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 646,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        138,
        140,
        141,
        257,
        258,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 140,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 646,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        139,
        142,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 141,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 142,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 642,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        120,
        122,
        123,
        259,
        260,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 143,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 611,
          "bound": null
        },
        {
          "cond": "pid in self.nfa.patterns()",
          "norm": null,
          "value": "false",
          "line": 612,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 642,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        71,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        121,
        124,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 144,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 145,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Err/None",
          "line": 638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        95,
        97,
        98,
        262,
        263,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 146,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 147,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "true",
          "line": 691,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::not_one_pass(\n                                \"multiple epsilon transitions to match state\",\n                            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        228,
        229,
        230,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 148,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Match { pattern_id }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.matched",
          "norm": null,
          "value": "false",
          "line": 691,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        115,
        231,
        232,
        233,
        234,
        235,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 149,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Fail",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        114,
        238,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 150,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 151,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "true",
          "line": 669,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        213,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 152,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 682,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        223,
        225,
        226,
        242,
        243,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 153,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Capture { next, slot, .. }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "slot < explicit_slot_start",
          "norm": "explicit_slot_start > slot",
          "value": "false",
          "line": 669,
          "bound": "slot == explicit_slot_start"
        },
        {
          "cond": "self.stack_push(next, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 682,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        113,
        211,
        212,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        224,
        227,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 154,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 664,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        198,
        200,
        201,
        246,
        247,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 155,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 665,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        206,
        208,
        209,
        244,
        245,
        248,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 156,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::BinaryUnion { alt1, alt2 }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt2, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 664,
          "bound": null
        },
        {
          "cond": "self.stack_push(alt1, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 665,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        112,
        194,
        195,
        196,
        199,
        202,
        203,
        204,
        207,
        210,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 157,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        189,
        191,
        192,
        249,
        250,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 158,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "self.stack_push(sid, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 660,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        184,
        186,
        187,
        190,
        193,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 159,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "&sid in alternates.iter().rev()",
          "norm": null,
          "value": "false",
          "line": 659,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        111,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        183,
        185,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 160,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Err/None",
          "line": 656,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        170,
        172,
        173,
        251,
        252,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 161,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Look { look, next }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.stack_push(next, epsilons.set_looks(looks))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 656,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        110,
        163,
        164,
        165,
        166,
        167,
        168,
        171,
        174,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 162,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 651,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        156,
        158,
        159,
        253,
        254,
        255,
        256,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 163,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "true",
          "line": 650,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, &trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 651,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        151,
        153,
        154,
        157,
        160,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 164,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Dense(ref dense)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in dense.iter()",
          "norm": null,
          "value": "false",
          "line": 650,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        109,
        143,
        144,
        145,
        146,
        147,
        148,
        150,
        152,
        161,
        162,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 165,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 646,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        138,
        140,
        141,
        257,
        258,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 166,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 646,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        133,
        135,
        136,
        139,
        142,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 167,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 645,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        108,
        125,
        126,
        127,
        128,
        129,
        130,
        132,
        134,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 168,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Err/None",
          "line": 642,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        120,
        122,
        123,
        259,
        260,
        261,
        264,
        269,
        274,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 169,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.add_start_state(None, self.nfa.start_anchored())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 610,
          "bound": null
        },
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 611,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        },
        {
          "cond": "self.stack_push(nfa_id, Epsilons::empty())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 638,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "*self.nfa.state(id) matches thompson::State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 640,
          "bound": null
        },
        {
          "cond": "self.compile_transition(dfa_id, trans, epsilons)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 642,
          "bound": null
        },
        {
          "cond": "let Some((id, epsilons)) = self.stack.pop()",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(nfa_id) = self.uncompiled_nfa_ids.pop()",
          "norm": null,
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Ok(self.dfa)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        47,
        49,
        50,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        107,
        116,
        117,
        118,
        121,
        124,
        236,
        100,
        101,
        102,
        237,
        84,
        85,
        86,
        239,
        240,
        241,
        275
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 170,
      "conds": [
        {
          "cond": "self.nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 582,
          "bound": null
        },
        {
          "cond": "look in self.nfa.look_set_any().iter()",
          "norm": null,
          "value": "false",
          "line": 583,
          "bound": null
        },
        {
          "cond": "self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT",
          "norm": "PatternEpsilons::PATTERN_ID_LIMIT < self.nfa.pattern_len().as_u64()",
          "value": "false",
          "line": 593,
          "bound": "self.nfa.pattern_len().as_u64() == PatternEpsilons::PATTERN_ID_LIMIT"
        },
        {
          "cond": "self.nfa.group_info().explicit_slot_len() > Slots::LIMIT",
          "norm": "Slots::LIMIT < self.nfa.group_info().explicit_slot_len()",
          "value": "false",
          "line": 599,
          "bound": "self.nfa.group_info().explicit_slot_len() == Slots::LIMIT"
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 604,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        27,
        28,
        32,
        33,
        34,
        38,
        39,
        40,
        43,
        46,
        48,
        325,
        331,
        332
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}