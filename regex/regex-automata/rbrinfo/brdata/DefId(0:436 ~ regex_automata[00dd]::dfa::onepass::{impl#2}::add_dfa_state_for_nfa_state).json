{
  "name": "regex_automata::dfa::onepass::{impl#2}::add_dfa_state_for_nfa_state",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:836:5:855:6",
  "doc": "/// Add a new DFA state corresponding to the given NFA state. If adding a\n/// state would blow any limits (configured or hard-coded), then an error\n/// is returned. If a DFA state already exists for the given NFA state,\n/// then that DFA state's ID is returned and no new states are added.\n///\n/// It is not expected that this routine is called for every NFA state.\n/// Instead, an NFA state ID will usually correspond to the \"start\" state\n/// for a sub-graph of the NFA, where all states in the sub-graph are\n/// reachable via epsilon transitions (conditional or unconditional). That\n/// sub-graph of NFA states is ultimately what produces a single DFA state.\n",
  "code": [
    "fn add_dfa_state_for_nfa_state(",
    "    &mut self,",
    "    nfa_id: StateID,",
    ") -> Result<StateID, BuildError> {",
    "    // If we've already built a DFA state for the given NFA state, then",
    "    // just return that. We definitely do not want to have more than one",
    "    // DFA state in existence for the same NFA state, since all but one of",
    "    // them will likely become unreachable. And at least some of them are",
    "    // likely to wind up being incomplete.",
    "    let existing_dfa_id = self.nfa_to_dfa_id[nfa_id];",
    "    if existing_dfa_id != DEAD {",
    "        return Ok(existing_dfa_id);",
    "    }",
    "    // If we don't have any DFA state yet, add it and then add the given",
    "    // NFA state to the list of states to explore.",
    "    let dfa_id = self.add_empty_state()?;",
    "    self.nfa_to_dfa_id[nfa_id] = dfa_id;",
    "    self.uncompiled_nfa_ids.push(nfa_id);",
    "    Ok(dfa_id)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "existing_dfa_id != DEAD",
          "norm": "DEAD != existing_dfa_id",
          "value": "true",
          "line": 846,
          "bound": null
        }
      ],
      "ret": "Ok(existing_dfa_id)",
      "path": [
        0,
        1,
        2,
        3,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "existing_dfa_id != DEAD",
          "norm": "DEAD != existing_dfa_id",
          "value": "false",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Err/None",
          "line": 851,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        10,
        11,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "existing_dfa_id != DEAD",
          "norm": "DEAD != existing_dfa_id",
          "value": "false",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.add_empty_state()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 851,
          "bound": null
        }
      ],
      "ret": "Ok(dfa_id)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}