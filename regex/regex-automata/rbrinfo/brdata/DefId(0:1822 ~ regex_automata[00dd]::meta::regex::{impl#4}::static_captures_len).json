{
  "name": "regex_automata::meta::regex::{impl#4}::static_captures_len",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:1740:5:1746:6",
  "doc": "/// Returns the total number of capturing groups that appear in every\n/// possible match.\n///\n/// If the number of capture groups can vary depending on the match, then\n/// this returns `None`. That is, a value is only returned when the number\n/// of matching groups is invariant or \"static.\"\n///\n/// Note that like [`Regex::captures_len`], this **does** include the\n/// implicit capturing group corresponding to the entire match. Therefore,\n/// when a non-None value is returned, it is guaranteed to be at least `1`.\n/// Stated differently, a return value of `Some(0)` is impossible.\n///\n/// # Example\n///\n/// This shows a few cases where a static number of capture groups is\n/// available and a few cases where it is not.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let len = |pattern| {\n///     Regex::new(pattern).map(|re| re.static_captures_len())\n/// };\n///\n/// assert_eq!(Some(1), len(\"a\")?);\n/// assert_eq!(Some(2), len(\"(a)\")?);\n/// assert_eq!(Some(2), len(\"(a)|(b)\")?);\n/// assert_eq!(Some(3), len(\"(a)(b)|(c)(d)\")?);\n/// assert_eq!(None, len(\"(a)|b\")?);\n/// assert_eq!(None, len(\"a|(b)\")?);\n/// assert_eq!(None, len(\"(b)*\")?);\n/// assert_eq!(Some(2), len(\"(b)+\")?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: multiple patterns\n///\n/// This property extends to regexes with multiple patterns as well. In\n/// order for their to be a static number of capture groups in this case,\n/// every pattern must have the same static number.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let len = |patterns| {\n///     Regex::new_many(patterns).map(|re| re.static_captures_len())\n/// };\n///\n/// assert_eq!(Some(1), len(&[\"a\", \"b\"])?);\n/// assert_eq!(Some(2), len(&[\"(a)\", \"(b)\"])?);\n/// assert_eq!(Some(2), len(&[\"(a)|(b)\", \"(c)|(d)\"])?);\n/// assert_eq!(Some(3), len(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"])?);\n/// assert_eq!(None, len(&[\"(a)\", \"b\"])?);\n/// assert_eq!(None, len(&[\"a\", \"(b)\"])?);\n/// assert_eq!(None, len(&[\"(a)\", \"(b)*\"])?);\n/// assert_eq!(Some(2), len(&[\"(a)+\", \"(b)+\"])?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn static_captures_len(&self) -> Option<usize> {",
    "    self.imp",
    "        .info",
    "        .props_union()",
    "        .static_explicit_captures_len()",
    "        .map(|len| len.saturating_add(1))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}