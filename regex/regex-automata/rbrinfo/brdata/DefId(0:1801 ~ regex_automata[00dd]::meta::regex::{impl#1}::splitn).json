{
  "name": "regex_automata::meta::regex::{impl#1}::splitn",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:888:5:894:6",
  "doc": "/// Returns an iterator of at most `limit` spans of the haystack given,\n/// delimited by a match of the regex. (A `limit` of `0` will return no\n/// spans.) Namely, each element of the iterator corresponds to a part\n/// of the haystack that *isn't* matched by the regular expression. The\n/// remainder of the haystack that is not split will be the last element in\n/// the iterator.\n///\n/// # Example\n///\n/// Get the first two words in some haystack:\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"\\W+\").unwrap();\n/// let hay = \"Hey! How are you?\";\n/// let fields: Vec<&str> =\n///     re.splitn(hay, 3).map(|span| &hay[span]).collect();\n/// assert_eq!(fields, vec![\"Hey\", \"How\", \"are you?\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Examples: more cases\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" \")?;\n/// let hay = \"Mary had a little lamb\";\n/// let got: Vec<&str> = re.splitn(hay, 3).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"Mary\", \"had\", \"a little lamb\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"\";\n/// let got: Vec<&str> = re.splitn(hay, 3).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"lionXXtigerXleopard\";\n/// let got: Vec<&str> = re.splitn(hay, 3).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"\", \"tigerXleopard\"]);\n///\n/// let re = Regex::new(r\"::\")?;\n/// let hay = \"lion::tiger::leopard\";\n/// let got: Vec<&str> = re.splitn(hay, 2).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"tiger::leopard\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 1).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"abcXdef\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"abcdef\";\n/// let got: Vec<&str> = re.splitn(hay, 2).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"abcdef\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 0).map(|sp| &hay[sp]).collect();\n/// assert!(got.is_empty());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn splitn<'r, 'h, I: Into<Input<'h>>>(",
    "    &'r self,",
    "    input: I,",
    "    limit: usize,",
    ") -> SplitN<'r, 'h> {",
    "    SplitN { splits: self.split(input), limit }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SplitN { splits: self.split(input), limit }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}