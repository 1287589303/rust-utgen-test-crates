{
  "name": "regex_automata::dfa::dense::{impl#27}::sparse_transitions",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:4810:5:4812:6",
  "doc": "/// Return an iterator over a sparse representation of the transitions in\n/// this state. Only non-dead transitions are returned.\n///\n/// The \"sparse\" representation in this case corresponds to a sequence of\n/// triples. The first two elements of the triple comprise an inclusive\n/// byte range while the last element corresponds to the transition taken\n/// for all bytes in the range.\n///\n/// This is somewhat more condensed than the classical sparse\n/// representation (where you have an element for every non-dead\n/// transition), but in practice, checking if a byte is in a range is very\n/// cheap and using ranges tends to conserve quite a bit more space.\n",
  "code": [
    "pub(crate) fn sparse_transitions(&self) -> StateSparseTransitionIter<'_> {",
    "    StateSparseTransitionIter { dense: self.transitions(), cur: None }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "StateSparseTransitionIter { dense: self.transitions(), cur: None }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}