{
  "name": "regex_automata::util::captures::{impl#0}::get_group",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:454:5:467:6",
  "doc": "/// Returns the span of a capturing group match corresponding to the group\n/// index given, only if both the overall pattern matched and the capturing\n/// group participated in that match.\n///\n/// This returns `None` if `index` is invalid. `index` is valid if and only\n/// if it's less than [`Captures::group_len`] for the matching pattern.\n///\n/// This always returns `None` when `Captures` was created with\n/// [`Captures::empty`], even if a match was found. This also always\n/// returns `None` for any `index > 0` when `Captures` was created with\n/// [`Captures::matches`].\n///\n/// If this routine returns a non-`None` value, then `is_match` is\n/// guaranteed to return `true`, `pattern` is guaranteed to return a\n/// non-`None` value and `get_match` is guaranteed to return a non-`None`\n/// value.\n///\n/// By convention, the 0th capture group will always return the same\n/// span as the span returned by `get_match`. This is because the 0th\n/// capture group always corresponds to the entirety of the pattern's\n/// match. (It is similarly always unnamed because it is implicit.) This\n/// isn't necessarily true of all regex engines. For example, one can\n/// hand-compile a [`thompson::NFA`](crate::nfa::thompson::NFA) via a\n/// [`thompson::Builder`](crate::nfa::thompson::Builder), which isn't\n/// technically forced to make the 0th capturing group always correspond to\n/// the entire match.\n///\n/// # Example\n///\n/// This example shows how to get the capturing groups, by index, from a\n/// match:\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Span, Match};\n///\n/// let re = PikeVM::new(r\"^(?P<first>\\pL+)\\s+(?P<last>\\pL+)$\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"Bruce Springsteen\", &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..17)), caps.get_match());\n/// assert_eq!(Some(Span::from(0..5)), caps.get_group(1));\n/// assert_eq!(Some(Span::from(6..17)), caps.get_group(2));\n/// // Looking for a non-existent capturing group will return None:\n/// assert_eq!(None, caps.get_group(3));\n/// # // literals are too big for 32-bit usize: #1039\n/// # #[cfg(target_pointer_width = \"64\")]\n/// assert_eq!(None, caps.get_group(9944060567225171988));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn get_group(&self, index: usize) -> Option<Span> {",
    "    let pid = self.pattern()?;",
    "    // There's a little bit of work needed to map captures to slots in the",
    "    // fully general case. But in the overwhelming common case of a single",
    "    // pattern, we can just do some simple arithmetic.",
    "    let (slot_start, slot_end) = if self.group_info().pattern_len() == 1 {",
    "        (index.checked_mul(2)?, index.checked_mul(2)?.checked_add(1)?)",
    "    } else {",
    "        self.group_info().slots(pid, index)?",
    "    };",
    "    let start = self.slots.get(slot_start).copied()??;",
    "    let end = self.slots.get(slot_end).copied()??;",
    "    Some(Span { start: start.get(), end: end.get() })",
    "}"
  ],
  "size": {
    "chain": 15,
    "contra": 1,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Err/None",
          "line": 455,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Err/None",
          "line": 460,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        78,
        79,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Err/None",
          "line": 460,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        21,
        23,
        24,
        77,
        78,
        79,
        80,
        81
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?.checked_add(1)?",
          "norm": null,
          "value": "Err/None",
          "line": 460,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        22,
        25,
        26,
        28,
        30,
        31,
        77,
        78,
        79,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?.checked_add(1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Err/None",
          "line": 464,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        22,
        25,
        26,
        29,
        41,
        42,
        43,
        44,
        45,
        47,
        49,
        50,
        75,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?.checked_add(1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Err/None",
          "line": 464,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        22,
        25,
        26,
        29,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        53,
        55,
        56,
        75,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?.checked_add(1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()?",
          "norm": null,
          "value": "Err/None",
          "line": 465,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        22,
        25,
        26,
        29,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        54,
        57,
        58,
        59,
        60,
        62,
        64,
        65,
        74,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?.checked_add(1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 465,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()??",
          "norm": null,
          "value": "Err/None",
          "line": 465,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        22,
        25,
        26,
        29,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        54,
        57,
        58,
        59,
        60,
        63,
        66,
        68,
        70,
        71,
        74,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "false",
          "line": 459,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "index.checked_mul(2)?.checked_add(1)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 460,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 465,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 465,
          "bound": null
        }
      ],
      "ret": "Some(Span { start: start.get(), end: end.get() })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        22,
        25,
        26,
        29,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        54,
        57,
        58,
        59,
        60,
        63,
        66,
        69,
        72,
        73,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "self.group_info().slots(pid, index)?",
          "norm": null,
          "value": "Err/None",
          "line": 462,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        79,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "self.group_info().slots(pid, index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 462,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Err/None",
          "line": 464,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        47,
        49,
        50,
        75,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "self.group_info().slots(pid, index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 462,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Err/None",
          "line": 464,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        53,
        55,
        56,
        75,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "self.group_info().slots(pid, index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 462,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()?",
          "norm": null,
          "value": "Err/None",
          "line": 465,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        54,
        57,
        58,
        59,
        60,
        62,
        64,
        65,
        74,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "self.group_info().slots(pid, index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 462,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 465,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()??",
          "norm": null,
          "value": "Err/None",
          "line": 465,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        54,
        57,
        58,
        59,
        60,
        63,
        66,
        68,
        70,
        71,
        74,
        76,
        80,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 455,
          "bound": null
        },
        {
          "cond": "self.group_info().pattern_len() == 1",
          "norm": "1 == self.group_info().pattern_len()",
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "self.group_info().slots(pid, index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 462,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_start).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 464,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 465,
          "bound": null
        },
        {
          "cond": "self.slots.get(slot_end).copied()??",
          "norm": null,
          "value": "Ok/Some",
          "line": 465,
          "bound": null
        }
      ],
      "ret": "Some(Span { start: start.get(), end: end.get() })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        48,
        51,
        54,
        57,
        58,
        59,
        60,
        63,
        66,
        69,
        72,
        73,
        81
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}