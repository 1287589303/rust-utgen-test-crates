{
  "name": "regex_automata::nfa::thompson::compiler::{impl#3}::syntax",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:924:5:930:6",
  "doc": "/// Set the syntax configuration for this builder using\n/// [`syntax::Config`](crate::util::syntax::Config).\n///\n/// This permits setting things like case insensitivity, Unicode and multi\n/// line mode.\n///\n/// This syntax configuration only applies when an NFA is built directly\n/// from a pattern string. If an NFA is built from an HIR, then all syntax\n/// settings are ignored.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, util::syntax};\n///\n/// let syntax_config = syntax::Config::new().unicode(false);\n/// let nfa = NFA::compiler().syntax(syntax_config).build(r\"\\w\")?;\n/// // If Unicode were enabled, the number of states would be much bigger.\n/// assert!(nfa.states().len() < 15);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn syntax(",
    "    &mut self,",
    "    config: crate::util::syntax::Config,",
    ") -> &mut Compiler {",
    "    config.apply(&mut self.parser);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}