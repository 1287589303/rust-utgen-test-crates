{
  "name": "regex_automata::dfa::accel::{impl#2}::validate",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/accel.rs:334:5:339:6",
  "doc": "/// Validates that every accelerator in this collection can be successfully\n/// deserialized as a valid accelerator.\n",
  "code": [
    "pub fn validate(&self) -> Result<(), DeserializeError> {",
    "    for chunk in self.as_bytes()[ACCEL_TY_SIZE..].chunks(ACCEL_CAP) {",
    "        let _ = Accel::from_slice(chunk)?;",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "chunk in self.as_bytes()[ACCEL_TY_SIZE..].chunks(ACCEL_CAP)",
          "norm": null,
          "value": "true",
          "line": 335,
          "bound": null
        },
        {
          "cond": "Accel::from_slice(chunk)?",
          "norm": null,
          "value": "Err/None",
          "line": 336,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        15,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "chunk in self.as_bytes()[ACCEL_TY_SIZE..].chunks(ACCEL_CAP)",
          "norm": null,
          "value": "true",
          "line": 335,
          "bound": null
        },
        {
          "cond": "Accel::from_slice(chunk)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 336,
          "bound": null
        },
        {
          "cond": "chunk in self.as_bytes()[ACCEL_TY_SIZE..].chunks(ACCEL_CAP)",
          "norm": null,
          "value": "false",
          "line": 335,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        16,
        5,
        6,
        7,
        9,
        11,
        19
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "chunk in self.as_bytes()[ACCEL_TY_SIZE..].chunks(ACCEL_CAP)",
          "norm": null,
          "value": "false",
          "line": 335,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}