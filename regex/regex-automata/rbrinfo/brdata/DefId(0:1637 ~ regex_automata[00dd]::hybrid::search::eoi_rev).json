{
  "name": "regex_automata::hybrid::search::eoi_rev",
  "mod_info": {
    "name": "hybrid::search",
    "loc": "regex-automata/src/hybrid/mod.rs:144:1:144:12"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/search.rs:729:1:760:2",
  "doc": "",
  "code": [
    "fn eoi_rev(",
    "    dfa: &DFA,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    sid: &mut LazyStateID,",
    "    mat: &mut Option<HalfMatch>,",
    ") -> Result<(), MatchError> {",
    "    let sp = input.get_span();",
    "    if sp.start > 0 {",
    "        let byte = input.haystack()[sp.start - 1];",
    "        *sid = dfa",
    "            .next_state(cache, *sid, byte)",
    "            .map_err(|_| gave_up(sp.start))?;",
    "        if sid.is_match() {",
    "            let pattern = dfa.match_pattern(cache, *sid, 0);",
    "            *mat = Some(HalfMatch::new(pattern, sp.start));",
    "        } else if sid.is_quit() {",
    "            return Err(MatchError::quit(byte, sp.start - 1));",
    "        }",
    "    } else {",
    "        *sid =",
    "            dfa.next_eoi_state(cache, *sid).map_err(|_| gave_up(sp.start))?;",
    "        if sid.is_match() {",
    "            let pattern = dfa.match_pattern(cache, *sid, 0);",
    "            *mat = Some(HalfMatch::new(pattern, 0));",
    "        }",
    "        // N.B. We don't have to check 'is_quit' here because the EOI",
    "        // transition can never lead to a quit state.",
    "        debug_assert!(!sid.is_quit());",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "true",
          "line": 737,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, *sid, byte)\n            .map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Err/None",
          "line": 739,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        52,
        53,
        54,
        55,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "true",
          "line": 737,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, *sid, byte)\n            .map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 739,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 742,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        16,
        17,
        18,
        26,
        49,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "true",
          "line": 737,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, *sid, byte)\n            .map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 739,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 742,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 745,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::quit(byte, sp.start - 1))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        54,
        55,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "true",
          "line": 737,
          "bound": null
        },
        {
          "cond": "dfa\n            .next_state(cache, *sid, byte)\n            .map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 739,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 742,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 745,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        19,
        20,
        25,
        26,
        49,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "false",
          "line": 737,
          "bound": "sp.start == 0"
        },
        {
          "cond": "dfa.next_eoi_state(cache, *sid).map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Err/None",
          "line": 750,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        27,
        28,
        29,
        30,
        32,
        34,
        35,
        50,
        51,
        55,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "false",
          "line": 737,
          "bound": "sp.start == 0"
        },
        {
          "cond": "dfa.next_eoi_state(cache, *sid).map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 750,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 751,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 757,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        44,
        45,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "false",
          "line": 737,
          "bound": "sp.start == 0"
        },
        {
          "cond": "dfa.next_eoi_state(cache, *sid).map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 750,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "true",
          "line": 751,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 757,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        42,
        43,
        44,
        46,
        48,
        49,
        56
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "false",
          "line": 737,
          "bound": "sp.start == 0"
        },
        {
          "cond": "dfa.next_eoi_state(cache, *sid).map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 750,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 751,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "true",
          "line": 757,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        41,
        42,
        43,
        44,
        45,
        65
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "sp.start > 0",
          "norm": "0 < sp.start",
          "value": "false",
          "line": 737,
          "bound": "sp.start == 0"
        },
        {
          "cond": "dfa.next_eoi_state(cache, *sid).map_err(|_| gave_up(sp.start))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 750,
          "bound": null
        },
        {
          "cond": "sid.is_match()",
          "norm": null,
          "value": "false",
          "line": 751,
          "bound": null
        },
        {
          "cond": "sid.is_quit()",
          "norm": null,
          "value": "false",
          "line": 757,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        41,
        42,
        43,
        44,
        46,
        48,
        49,
        56
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}