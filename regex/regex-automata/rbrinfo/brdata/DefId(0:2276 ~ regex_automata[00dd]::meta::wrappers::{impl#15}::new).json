{
  "name": "regex_automata::meta::wrappers::{impl#15}::new",
  "mod_info": {
    "name": "meta::wrappers",
    "loc": "regex-automata/src/meta/mod.rs:62:1:62:14"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/wrappers.rs:1106:5:1146:6",
  "doc": "",
  "code": [
    "pub(crate) fn new(",
    "    info: &RegexInfo,",
    "    nfarev: &NFA,",
    ") -> Option<ReverseHybridEngine> {",
    "    #[cfg(feature = \"hybrid\")]",
    "    {",
    "        if !info.config().get_hybrid() {",
    "            return None;",
    "        }",
    "        // Since we only use this for reverse searches, we can hard-code",
    "        // a number of things like match semantics, prefilters, starts",
    "        // for each pattern and so on.",
    "        let dfa_config = hybrid::dfa::Config::new()",
    "            .match_kind(MatchKind::All)",
    "            .prefilter(None)",
    "            .starts_for_each_pattern(false)",
    "            .byte_classes(info.config().get_byte_classes())",
    "            .unicode_word_boundary(true)",
    "            .specialize_start_states(false)",
    "            .cache_capacity(info.config().get_hybrid_cache_capacity())",
    "            .skip_cache_capacity_check(false)",
    "            .minimum_cache_clear_count(Some(3))",
    "            .minimum_bytes_per_state(Some(10));",
    "        let result = hybrid::dfa::Builder::new()",
    "            .configure(dfa_config)",
    "            .build_from_nfa(nfarev.clone());",
    "        let rev = match result {",
    "            Ok(rev) => rev,",
    "            Err(_err) => {",
    "                debug!(\"lazy reverse DFA failed to build: {}\", _err);",
    "                return None;",
    "            }",
    "        };",
    "        debug!(\"lazy reverse DFA built\");",
    "        Some(ReverseHybridEngine(rev))",
    "    }",
    "    #[cfg(not(feature = \"hybrid\"))]",
    "    {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 1112,
          "bound": null
        },
        {
          "cond": "result matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 1132,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        35,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "true",
          "line": 1112,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 1132,
          "bound": null
        },
        {
          "cond": "result matches Ok(rev)",
          "norm": null,
          "value": "true",
          "line": 1132,
          "bound": null
        }
      ],
      "ret": "Some(ReverseHybridEngine(rev))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "info.config().get_hybrid()",
          "norm": null,
          "value": "false",
          "line": 1112,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}