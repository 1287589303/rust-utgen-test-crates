{
  "name": "regex_automata::hybrid::dfa::{impl#9}::build_many",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:4004:5:4020:6",
  "doc": "/// Build a lazy DFA from the given patterns.\n///\n/// When matches are returned, the pattern ID corresponds to the index of\n/// the pattern in the slice given.\n",
  "code": [
    "pub fn build_many<P: AsRef<str>>(",
    "    &self,",
    "    patterns: &[P],",
    ") -> Result<DFA, BuildError> {",
    "    let nfa = self",
    "        .thompson",
    "        .clone()",
    "        // We can always forcefully disable captures because DFAs do not",
    "        // support them.",
    "        .configure(",
    "            thompson::Config::new()",
    "                .which_captures(thompson::WhichCaptures::None),",
    "        )",
    "        .build_many(patterns)",
    "        .map_err(BuildError::nfa)?;",
    "    self.build_from_nfa(nfa)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self\n            .thompson\n            .clone()\n            // We can always forcefully disable captures because DFAs do not\n            // support them.\n            .configure(\n                thompson::Config::new()\n                    .which_captures(thompson::WhichCaptures::None),\n            )\n            .build_many(patterns)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Err/None",
          "line": 4008,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        18,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self\n            .thompson\n            .clone()\n            // We can always forcefully disable captures because DFAs do not\n            // support them.\n            .configure(\n                thompson::Config::new()\n                    .which_captures(thompson::WhichCaptures::None),\n            )\n            .build_many(patterns)\n            .map_err(BuildError::nfa)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4008,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        17,
        21
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}