{
  "name": "regex_automata::dfa::determinize::{impl#1}::maybe_add_state",
  "mod_info": {
    "name": "dfa::determinize",
    "loc": "regex-automata/src/dfa/mod.rs:350:1:350:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/determinize.rs:505:5:516:6",
  "doc": "/// Adds the given state to the DFA being built depending on whether it\n/// already exists in this determinizer's cache.\n///\n/// If it does exist, then the memory used by 'state' is put back into the\n/// determinizer and the previously created state's ID is returned. (Along\n/// with 'false', indicating that no new state was added.)\n///\n/// If it does not exist, then the state is added to the DFA being built\n/// and a fresh ID is allocated (if ID allocation fails, then an error is\n/// returned) and returned. (Along with 'true', indicating that a new state\n/// was added.)\n",
  "code": [
    "fn maybe_add_state(",
    "    &mut self,",
    "    builder: StateBuilderNFA,",
    ") -> Result<(StateID, bool), BuildError> {",
    "    if let Some(&cached_id) = self.cache.get(builder.as_bytes()) {",
    "        // Since we have a cached state, put the constructed state's",
    "        // memory back into our scratch space, so that it can be reused.",
    "        self.put_state_builder(builder);",
    "        return Ok((cached_id, false));",
    "    }",
    "    self.add_state(builder).map(|sid| (sid, true))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(&cached_id) = self.cache.get(builder.as_bytes())",
          "norm": null,
          "value": "true",
          "line": 509,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(&cached_id) = self.cache.get(builder.as_bytes())",
          "norm": null,
          "value": "true",
          "line": 509,
          "bound": null
        }
      ],
      "ret": "Ok((cached_id, false))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}