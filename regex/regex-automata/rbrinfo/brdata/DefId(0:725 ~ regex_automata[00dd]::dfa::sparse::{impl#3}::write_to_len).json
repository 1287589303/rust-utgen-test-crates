{
  "name": "regex_automata::dfa::sparse::{impl#3}::write_to_len",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:837:5:847:6",
  "doc": "/// Return the total number of bytes required to serialize this DFA.\n///\n/// This is useful for determining the size of the buffer required to pass\n/// to one of the serialization routines:\n///\n/// * [`DFA::write_to_little_endian`]\n/// * [`DFA::write_to_big_endian`]\n/// * [`DFA::write_to_native_endian`]\n///\n/// Passing a buffer smaller than the size returned by this method will\n/// result in a serialization error.\n///\n/// # Example\n///\n/// This example shows how to dynamically allocate enough room to serialize\n/// a sparse DFA.\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, sparse::DFA}, HalfMatch, Input};\n///\n/// // Compile our original DFA.\n/// let original_dfa = DFA::new(\"foo[0-9]+\")?;\n///\n/// let mut buf = vec![0; original_dfa.write_to_len()];\n/// let written = original_dfa.write_to_native_endian(&mut buf)?;\n/// let dfa: DFA<&[u8]> = DFA::from_bytes(&buf[..written])?.0;\n///\n/// let expected = Some(HalfMatch::must(0, 8));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"foo12345\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn write_to_len(&self) -> usize {",
    "    wire::write_label_len(LABEL)",
    "    + wire::write_endianness_check_len()",
    "    + wire::write_version_len()",
    "    + size_of::<u32>() // unused, intended for future flexibility",
    "    + self.flags.write_to_len()",
    "    + self.tt.write_to_len()",
    "    + self.st.write_to_len()",
    "    + self.special.write_to_len()",
    "    + self.quitset.write_to_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "wire::write_label_len(LABEL)\n        + wire::write_endianness_check_len()\n        + wire::write_version_len()\n        + size_of::<u32>() // unused, intended for future flexibility\n        + self.flags.write_to_len()\n        + self.tt.write_to_len()\n        + self.st.write_to_len()\n        + self.special.write_to_len()\n        + self.quitset.write_to_len()",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}