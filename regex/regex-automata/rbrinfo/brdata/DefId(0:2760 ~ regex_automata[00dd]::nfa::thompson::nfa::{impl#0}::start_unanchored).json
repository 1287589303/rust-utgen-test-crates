{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::start_unanchored",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:501:5:503:6",
  "doc": "/// Return the state identifier of the initial unanchored state of this\n/// NFA.\n///\n/// This is equivalent to the identifier returned by\n/// [`NFA::start_anchored`] when the NFA has no unanchored starting state.\n///\n/// The returned identifier is guaranteed to be a valid index into the\n/// slice returned by [`NFA::states`], and is also a valid argument to\n/// [`NFA::state`].\n///\n/// # Example\n///\n/// This example shows that the anchored and unanchored starting states\n/// are equivalent when an anchored NFA is built.\n///\n/// ```\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// let nfa = NFA::new(\"^a\")?;\n/// assert_eq!(nfa.start_anchored(), nfa.start_unanchored());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn start_unanchored(&self) -> StateID {",
    "    self.0.start_unanchored",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.start_unanchored",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}