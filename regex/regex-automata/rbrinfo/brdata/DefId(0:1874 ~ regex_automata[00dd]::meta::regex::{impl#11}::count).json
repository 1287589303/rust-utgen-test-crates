{
  "name": "regex_automata::meta::regex::{impl#11}::count",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:2157:5:2165:6",
  "doc": "",
  "code": [
    "fn count(self) -> usize {",
    "    let CapturesMatches { re, mut cache, it, .. } = self;",
    "    // This does the deref for PoolGuard once instead of every iter.",
    "    let cache = &mut *cache;",
    "    it.into_half_matches_iter(",
    "        |input| Ok(re.search_half_with(cache, input)),",
    "    )",
    "    .count()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}