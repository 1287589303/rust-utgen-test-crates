{
  "name": "regex_automata::dfa::dense::{impl#6}::alphabet_len",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:1681:5:1683:6",
  "doc": "/// Returns the total number of elements in the alphabet for this DFA.\n///\n/// That is, this returns the total number of transitions that each state\n/// in this DFA must have. Typically, a normal byte oriented DFA would\n/// always have an alphabet size of 256, corresponding to the number of\n/// unique values in a single byte. However, this implementation has two\n/// peculiarities that impact the alphabet length:\n///\n/// * Every state has a special \"EOI\" transition that is only followed\n/// after the end of some haystack is reached. This EOI transition is\n/// necessary to account for one byte of look-ahead when implementing\n/// things like `\\b` and `$`.\n/// * Bytes are grouped into equivalence classes such that no two bytes in\n/// the same class can distinguish a match from a non-match. For example,\n/// in the regex `^[a-z]+$`, the ASCII bytes `a-z` could all be in the\n/// same equivalence class. This leads to a massive space savings.\n///\n/// Note though that the alphabet length does _not_ necessarily equal the\n/// total stride space taken up by a single DFA state in the transition\n/// table. Namely, for performance reasons, the stride is always the\n/// smallest power of two that is greater than or equal to the alphabet\n/// length. For this reason, [`DFA::stride`] or [`DFA::stride2`] are\n/// often more useful. The alphabet length is typically useful only for\n/// informational purposes.\n",
  "code": [
    "pub fn alphabet_len(&self) -> usize {",
    "    self.tt.alphabet_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}