{
  "name": "regex_automata::util::iter::{impl#0}::into_half_matches_iter",
  "mod_info": {
    "name": "util::iter",
    "loc": "regex-automata/src/util/mod.rs:36:1:36:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/iter.rs:488:5:496:6",
  "doc": "/// Given a closure that executes a single search, return an iterator over\n/// all successive non-overlapping half matches.\n///\n/// The iterator returned yields result values. If the underlying regex\n/// engine is configured to never return an error, consider calling\n/// [`TryHalfMatchesIter::infallible`] to convert errors into panics.\n///\n/// # Example\n///\n/// This example shows how to use a `Searcher` to create a proper\n/// iterator over half matches.\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::dfa::DFA,\n///     util::iter::Searcher,\n///     HalfMatch, Input,\n/// };\n///\n/// let re = DFA::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")?;\n/// let mut cache = re.create_cache();\n///\n/// let input = Input::new(\"2010-03-14 2016-10-08 2020-10-22\");\n/// let mut it = Searcher::new(input).into_half_matches_iter(|input| {\n///     re.try_search_fwd(&mut cache, input)\n/// });\n///\n/// let expected = Some(Ok(HalfMatch::must(0, 10)));\n/// assert_eq!(expected, it.next());\n///\n/// let expected = Some(Ok(HalfMatch::must(0, 21)));\n/// assert_eq!(expected, it.next());\n///\n/// let expected = Some(Ok(HalfMatch::must(0, 32)));\n/// assert_eq!(expected, it.next());\n///\n/// let expected = None;\n/// assert_eq!(expected, it.next());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn into_half_matches_iter<F>(",
    "    self,",
    "    finder: F,",
    ") -> TryHalfMatchesIter<'h, F>",
    "where",
    "    F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,",
    "{",
    "    TryHalfMatchesIter { it: self, finder }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "TryHalfMatchesIter { it: self, finder }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}