{
  "name": "regex_automata::dfa::sparse::{impl#2}::start_kind",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:444:5:446:6",
  "doc": "/// Returns the starting state configuration for this DFA.\n///\n/// The default is [`StartKind::Both`], which means the DFA supports both\n/// unanchored and anchored searches. However, this can generally lead to\n/// bigger DFAs. Therefore, a DFA might be compiled with support for just\n/// unanchored or anchored searches. In that case, running a search with\n/// an unsupported configuration will panic.\n",
  "code": [
    "pub fn start_kind(&self) -> StartKind {",
    "    self.st.kind",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.st.kind",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}