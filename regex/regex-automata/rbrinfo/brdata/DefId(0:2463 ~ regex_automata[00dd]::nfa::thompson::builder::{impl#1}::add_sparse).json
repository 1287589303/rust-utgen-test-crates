{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_sparse",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:793:5:798:6",
  "doc": "/// Add a \"sparse\" NFA state.\n///\n/// A \"sparse\" NFA state contains zero or more outgoing transitions, where\n/// the transition to be followed (if any) is chosen based on whether the\n/// current input byte falls in the range of one such transition. The\n/// transitions given *must* be non-overlapping and in ascending order. (A\n/// \"sparse\" state with no transitions is equivalent to a \"fail\" state.)\n///\n/// A \"sparse\" state is like adding a \"union\" state and pointing it at a\n/// bunch of \"range\" states, except that the different alternates have\n/// equal priority.\n///\n/// Note that a \"sparse\" state is the only state that cannot be patched.\n/// This is because a \"sparse\" state has many transitions, each of which\n/// may point to a different NFA state. Moreover, adding more such\n/// transitions requires more than just an NFA state ID to point to. It\n/// also requires a byte range. The `patch` routine does not support the\n/// additional information required. Therefore, callers must ensure that\n/// all outgoing transitions for this state are included when `add_sparse`\n/// is called. There is no way to add more later.\n///\n/// # Errors\n///\n/// This returns an error if the state identifier space is exhausted, or if\n/// the configured heap size limit has been exceeded.\n///\n/// # Panics\n///\n/// This routine _may_ panic if the transitions given overlap or are not\n/// in ascending order.\n",
  "code": [
    "pub fn add_sparse(",
    "    &mut self,",
    "    transitions: Vec<Transition>,",
    ") -> Result<StateID, BuildError> {",
    "    self.add(State::Sparse { transitions })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}