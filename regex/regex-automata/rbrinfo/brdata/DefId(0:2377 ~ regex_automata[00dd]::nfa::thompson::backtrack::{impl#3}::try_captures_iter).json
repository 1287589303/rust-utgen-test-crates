{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#3}::try_captures_iter",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:1105:5:1113:6",
  "doc": "/// Returns an iterator over all non-overlapping `Captures` values. If no\n/// match exists, then the iterator yields no elements.\n///\n/// This yields the same matches as [`BoundedBacktracker::try_find_iter`],\n/// but it includes the spans of all capturing groups that participate in\n/// each match.\n///\n/// If the regex engine returns an error at any point, then the iterator\n/// will yield that error.\n///\n/// **Tip:** See [`util::iter::Searcher`](crate::util::iter::Searcher) for\n/// how to correctly iterate over all matches in a haystack while avoiding\n/// the creation of a new `Captures` value for every match. (Which you are\n/// forced to do with an `Iterator`.)\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::backtrack::BoundedBacktracker,\n///     Span,\n/// };\n///\n/// let re = BoundedBacktracker::new(\"foo(?P<numbers>[0-9]+)\")?;\n/// let mut cache = re.create_cache();\n///\n/// let text = \"foo1 foo12 foo123\";\n/// let mut spans = vec![];\n/// for result in re.try_captures_iter(&mut cache, text) {\n///     let caps = result?;\n///     // The unwrap is OK since 'numbers' matches if the pattern matches.\n///     spans.push(caps.get_group_by_name(\"numbers\").unwrap());\n/// }\n/// assert_eq!(spans, vec![\n///     Span::from(3..4),\n///     Span::from(8..10),\n///     Span::from(14..17),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn try_captures_iter<'r, 'c, 'h, I: Into<Input<'h>>>(",
    "    &'r self,",
    "    cache: &'c mut Cache,",
    "    input: I,",
    ") -> TryCapturesMatches<'r, 'c, 'h> {",
    "    let caps = self.create_captures();",
    "    let it = iter::Searcher::new(input.into());",
    "    TryCapturesMatches { re: self, cache, caps, it }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "TryCapturesMatches { re: self, cache, caps, it }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}