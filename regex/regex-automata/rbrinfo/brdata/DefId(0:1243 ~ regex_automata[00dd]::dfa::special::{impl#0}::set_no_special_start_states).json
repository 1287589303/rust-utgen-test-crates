{
  "name": "regex_automata::dfa::special::{impl#0}::set_no_special_start_states",
  "mod_info": {
    "name": "dfa::special",
    "loc": "regex-automata/src/dfa/mod.rs:358:1:358:13"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/special.rs:412:5:417:6",
  "doc": "/// Sets the maximum special state ID such that starting states are not\n/// considered \"special.\" This also marks the min/max starting states as\n/// DEAD such that 'is_start_state' always returns false, even if the state\n/// is actually a starting state.\n///\n/// This is useful when there is no prefilter set. It will avoid\n/// ping-ponging between the hot path in the DFA search code and the start\n/// state handling code, which is typically only useful for executing a\n/// prefilter.\n",
  "code": [
    "pub(crate) fn set_no_special_start_states(&mut self) {",
    "    use core::cmp::max;",
    "    self.max = max(self.quit_id, max(self.max_match, self.max_accel));",
    "    self.min_start = DEAD;",
    "    self.max_start = DEAD;",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}