{
  "name": "regex_automata::util::captures::{impl#7}::slot",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1904:5:1921:6",
  "doc": "/// Returns the starting slot corresponding to the given capturing group\n/// for the given pattern. The ending slot is always one more than the\n/// value returned.\n///\n/// If either the pattern ID or the capture index is invalid, then this\n/// returns None.\n///\n/// # Example\n///\n/// This example shows that the starting slots for the first capturing\n/// group of each pattern are distinct.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new_many(&[\"a\", \"b\"])?;\n/// assert_ne!(\n///     nfa.group_info().slot(PatternID::must(0), 0),\n///     nfa.group_info().slot(PatternID::must(1), 0),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {",
    "    if group_index >= self.group_len(pid) {",
    "        return None;",
    "    }",
    "    // At this point, we know that 'pid' refers to a real pattern and that",
    "    // 'group_index' refers to a real group. We therefore also know that",
    "    // the pattern and group can be combined to return a correct slot.",
    "    // That's why we don't need to use checked arithmetic below.",
    "    if group_index == 0 {",
    "        Some(pid.as_usize() * 2)",
    "    } else {",
    "        // As above, we don't need to check that our slot is less than the",
    "        // end of our range since we already know the group index is a",
    "        // valid index for the given pattern.",
    "        let (start, _) = self.0.slot_ranges[pid];",
    "        Some(start.as_usize() + ((group_index - 1) * 2))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "group_index >= self.group_len(pid)",
          "norm": null,
          "value": "true",
          "line": 1905,
          "bound": "group_index == self.group_len(pid)"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "group_index >= self.group_len(pid)",
          "norm": null,
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "group_index == 0",
          "norm": "0 == group_index",
          "value": "false",
          "line": 1912,
          "bound": null
        }
      ],
      "ret": "Some(pid.as_usize() * 2)",
      "path": [
        0,
        1,
        3,
        4,
        6,
        7,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "group_index >= self.group_len(pid)",
          "norm": null,
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "group_index == 0",
          "norm": "0 == group_index",
          "value": "true",
          "line": 1912,
          "bound": null
        }
      ],
      "ret": "Some(start.as_usize() + ((group_index - 1) * 2))",
      "path": [
        0,
        1,
        3,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}