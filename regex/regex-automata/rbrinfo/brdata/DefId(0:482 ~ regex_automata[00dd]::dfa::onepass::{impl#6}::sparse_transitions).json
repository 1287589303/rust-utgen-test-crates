{
  "name": "regex_automata::dfa::onepass::{impl#6}::sparse_transitions",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2280:5:2287:6",
  "doc": "/// Return an iterator of \"sparse\" transitions for the given state ID.\n/// \"sparse\" in this context means that consecutive transitions that are\n/// equivalent are returned as one group, and transitions to the DEAD state\n/// are ignored.\n///\n/// This winds up being useful for debug printing, since it's much terser\n/// to display runs of equivalent transitions than the transition for every\n/// possible byte value. Indeed, in practice, it's very common for runs\n/// of equivalent transitions to appear.\n",
  "code": [
    "fn sparse_transitions(&self, sid: StateID) -> SparseTransitionIter<'_> {",
    "    let start = sid.as_usize() << self.stride2();",
    "    let end = start + self.alphabet_len();",
    "    SparseTransitionIter {",
    "        it: self.table[start..end].iter().enumerate(),",
    "        cur: None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SparseTransitionIter {\n            it: self.table[start..end].iter().enumerate(),\n            cur: None,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}