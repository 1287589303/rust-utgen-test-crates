{
  "name": "regex_automata::dfa::sparse::{impl#1}::never_match",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:221:5:223:6",
  "doc": "/// Create a new sparse DFA that never matches any input.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, sparse}, Input};\n///\n/// let dfa = sparse::DFA::never_match()?;\n/// assert_eq!(None, dfa.try_search_fwd(&Input::new(\"\"))?);\n/// assert_eq!(None, dfa.try_search_fwd(&Input::new(\"foo\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn never_match() -> Result<DFA<Vec<u8>>, BuildError> {",
    "    dense::DFA::never_match()?.to_sparse()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dense::DFA::never_match()?",
          "norm": null,
          "value": "Err/None",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dense::DFA::never_match()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 222,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}