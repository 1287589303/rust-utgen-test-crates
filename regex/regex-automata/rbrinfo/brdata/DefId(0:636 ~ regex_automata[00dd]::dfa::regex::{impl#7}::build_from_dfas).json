{
  "name": "regex_automata::dfa::regex::{impl#7}::build_from_dfas",
  "mod_info": {
    "name": "dfa::regex",
    "loc": "regex-automata/src/dfa/mod.rs:341:1:341:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/regex.rs:819:5:825:6",
  "doc": "/// Build a regex from its component forward and reverse DFAs.\n///\n/// This is useful when deserializing a regex from some arbitrary\n/// memory region. This is also useful for building regexes from other\n/// types of DFAs.\n///\n/// If you're building the DFAs from scratch instead of building new DFAs\n/// from other DFAs, then you'll need to make sure that the reverse DFA is\n/// configured correctly to match the intended semantics. Namely:\n///\n/// * It should be anchored.\n/// * It should use [`MatchKind::All`] semantics.\n/// * It should match in reverse.\n/// * Otherwise, its configuration should match the forward DFA.\n///\n/// If these conditions aren't satisfied, then the behavior of searches is\n/// unspecified.\n///\n/// Note that when using this constructor, no configuration is applied.\n/// Since this routine provides the DFAs to the builder, there is no\n/// opportunity to apply other configuration options.\n///\n/// # Example\n///\n/// This example is a bit a contrived. The usual use of these methods\n/// would involve serializing `initial_re` somewhere and then deserializing\n/// it later to build a regex. But in this case, we do everything in\n/// memory.\n///\n/// ```\n/// use regex_automata::dfa::regex::Regex;\n///\n/// let initial_re = Regex::new(\"foo[0-9]+\")?;\n/// assert_eq!(true, initial_re.is_match(b\"foo123\"));\n///\n/// let (fwd, rev) = (initial_re.forward(), initial_re.reverse());\n/// let re = Regex::builder().build_from_dfas(fwd, rev);\n/// assert_eq!(true, re.is_match(b\"foo123\"));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// This example shows how to build a `Regex` that uses sparse DFAs instead\n/// of dense DFAs without using one of the convenience `build_sparse`\n/// routines:\n///\n/// ```\n/// use regex_automata::dfa::regex::Regex;\n///\n/// let initial_re = Regex::new(\"foo[0-9]+\")?;\n/// assert_eq!(true, initial_re.is_match(b\"foo123\"));\n///\n/// let fwd = initial_re.forward().to_sparse()?;\n/// let rev = initial_re.reverse().to_sparse()?;\n/// let re = Regex::builder().build_from_dfas(fwd, rev);\n/// assert_eq!(true, re.is_match(b\"foo123\"));\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_from_dfas<A: Automaton>(",
    "    &self,",
    "    forward: A,",
    "    reverse: A,",
    ") -> Regex<A> {",
    "    Regex { forward, reverse }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Regex { forward, reverse }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}