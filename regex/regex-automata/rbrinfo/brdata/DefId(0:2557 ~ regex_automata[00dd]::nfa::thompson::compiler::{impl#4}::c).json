{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::c",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:997:5:1011:6",
  "doc": "/// Compile an arbitrary HIR expression.\n",
  "code": [
    "fn c(&self, expr: &Hir) -> Result<ThompsonRef, BuildError> {",
    "    use regex_syntax::hir::{Class, HirKind::*};",
    "",
    "    match *expr.kind() {",
    "        Empty => self.c_empty(),",
    "        Literal(hir::Literal(ref bytes)) => self.c_literal(bytes),",
    "        Class(Class::Bytes(ref c)) => self.c_byte_class(c),",
    "        Class(Class::Unicode(ref c)) => self.c_unicode_class(c),",
    "        Look(ref look) => self.c_look(look),",
    "        Repetition(ref rep) => self.c_repetition(rep),",
    "        Capture(ref c) => self.c_cap(c.index, c.name.as_deref(), &c.sub),",
    "        Concat(ref es) => self.c_concat(es.iter().map(|e| self.c(e))),",
    "        Alternation(ref es) => self.c_alt_slice(es),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*expr.kind() matches Alternation(ref es)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        12,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*expr.kind() matches Concat(ref es)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Concat(ref es)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        28,
        29,
        30,
        31,
        32,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*expr.kind() matches Capture(ref c)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Capture(ref c)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        10,
        25,
        26,
        27,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*expr.kind() matches Repetition(ref rep)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Repetition(ref rep)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        23,
        24,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*expr.kind() matches Look(ref look)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Look(ref look)",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        8,
        21,
        22,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*expr.kind() matches Class(Class::Bytes(ref c)) or Class(Class::Unicode(ref c))",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Class(Class::Bytes(ref c))",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        6,
        17,
        18,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*expr.kind() matches Class(Class::Bytes(ref c)) or Class(Class::Unicode(ref c))",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Empty",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Class(Class::Unicode(ref c))",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        7,
        19,
        20,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*expr.kind() matches Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        15,
        16,
        35
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*expr.kind() matches Empty",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches Empty",
          "norm": null,
          "value": "true",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        13,
        14,
        35
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}