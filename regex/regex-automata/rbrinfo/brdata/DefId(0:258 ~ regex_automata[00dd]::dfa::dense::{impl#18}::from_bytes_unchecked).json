{
  "name": "regex_automata::dfa::dense::{impl#18}::from_bytes_unchecked",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:3964:5:4065:6",
  "doc": "/// Deserialize a table of start state IDs starting at the beginning of\n/// `slice`. Upon success, return the total number of bytes read along with\n/// the table of starting state IDs.\n///\n/// If there was a problem deserializing any part of the starting IDs,\n/// then this returns an error. Notably, if the given slice does not have\n/// the same alignment as `StateID`, then this will return an error (among\n/// other possible errors).\n///\n/// This is guaranteed to execute in constant time.\n///\n/// # Safety\n///\n/// This routine is not safe because it does not check the validity of the\n/// starting state IDs themselves. In particular, the number of starting\n/// IDs can be of variable length, so it's possible that checking their\n/// validity cannot be done in constant time. An invalid starting state\n/// ID is not safe because other code may rely on the starting IDs being\n/// correct (such as explicit bounds check elision). Therefore, an invalid\n/// start ID can lead to undefined behavior.\n///\n/// Callers that use this function must either pass on the safety invariant\n/// or guarantee that the bytes given contain valid starting state IDs.\n/// This guarantee is upheld by the bytes written by `write_to`.\n",
  "code": [
    "unsafe fn from_bytes_unchecked(",
    "    mut slice: &'a [u8],",
    ") -> Result<(StartTable<&'a [u32]>, usize), DeserializeError> {",
    "    let slice_start = slice.as_ptr().as_usize();",
    "",
    "    let (kind, nr) = StartKind::from_bytes(slice)?;",
    "    slice = &slice[nr..];",
    "",
    "    let (start_map, nr) = StartByteMap::from_bytes(slice)?;",
    "    slice = &slice[nr..];",
    "",
    "    let (stride, nr) =",
    "        wire::try_read_u32_as_usize(slice, \"start table stride\")?;",
    "    slice = &slice[nr..];",
    "    if stride != Start::len() {",
    "        return Err(DeserializeError::generic(",
    "            \"invalid starting table stride\",",
    "        ));",
    "    }",
    "",
    "    let (maybe_pattern_len, nr) =",
    "        wire::try_read_u32_as_usize(slice, \"start table patterns\")?;",
    "    slice = &slice[nr..];",
    "    let pattern_len = if maybe_pattern_len.as_u32() == u32::MAX {",
    "        None",
    "    } else {",
    "        Some(maybe_pattern_len)",
    "    };",
    "    if pattern_len.map_or(false, |len| len > PatternID::LIMIT) {",
    "        return Err(DeserializeError::generic(",
    "            \"invalid number of patterns\",",
    "        ));",
    "    }",
    "",
    "    let (universal_unanchored, nr) =",
    "        wire::try_read_u32(slice, \"universal unanchored start\")?;",
    "    slice = &slice[nr..];",
    "    let universal_start_unanchored = if universal_unanchored == u32::MAX {",
    "        None",
    "    } else {",
    "        Some(StateID::try_from(universal_unanchored).map_err(|e| {",
    "            DeserializeError::state_id_error(",
    "                e,",
    "                \"universal unanchored start\",",
    "            )",
    "        })?)",
    "    };",
    "",
    "    let (universal_anchored, nr) =",
    "        wire::try_read_u32(slice, \"universal anchored start\")?;",
    "    slice = &slice[nr..];",
    "    let universal_start_anchored = if universal_anchored == u32::MAX {",
    "        None",
    "    } else {",
    "        Some(StateID::try_from(universal_anchored).map_err(|e| {",
    "            DeserializeError::state_id_error(e, \"universal anchored start\")",
    "        })?)",
    "    };",
    "",
    "    let pattern_table_size = wire::mul(",
    "        stride,",
    "        pattern_len.unwrap_or(0),",
    "        \"invalid pattern length\",",
    "    )?;",
    "    // Our start states always start with a two stride of start states for",
    "    // the entire automaton. The first stride is for unanchored starting",
    "    // states and the second stride is for anchored starting states. What",
    "    // follows it are an optional set of start states for each pattern.",
    "    let start_state_len = wire::add(",
    "        wire::mul(2, stride, \"start state stride too big\")?,",
    "        pattern_table_size,",
    "        \"invalid 'any' pattern starts size\",",
    "    )?;",
    "    let table_bytes_len = wire::mul(",
    "        start_state_len,",
    "        StateID::SIZE,",
    "        \"pattern table bytes length\",",
    "    )?;",
    "    wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?;",
    "    wire::check_alignment::<StateID>(slice)?;",
    "    let table_bytes = &slice[..table_bytes_len];",
    "    slice = &slice[table_bytes_len..];",
    "    // SAFETY: Since StateID is always representable as a u32, all we need",
    "    // to do is ensure that we have the proper length and alignment. We've",
    "    // checked both above, so the cast below is safe.",
    "    //",
    "    // N.B. This is the only not-safe code in this function.",
    "    let table = core::slice::from_raw_parts(",
    "        table_bytes.as_ptr().cast::<u32>(),",
    "        start_state_len,",
    "    );",
    "    let st = StartTable {",
    "        table,",
    "        kind,",
    "        start_map,",
    "        stride,",
    "        pattern_len,",
    "        universal_start_unanchored,",
    "        universal_start_anchored,",
    "    };",
    "    Ok((st, slice.as_ptr().as_usize() - slice_start))",
    "}"
  ],
  "size": {
    "chain": 75,
    "contra": 0,
    "min_set": 17
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 3969,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 3972,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        14,
        16,
        17,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Err/None",
          "line": 3976,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        22,
        24,
        25,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "true",
          "line": 3978,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"invalid starting table stride\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        29,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Err/None",
          "line": 3985,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        34,
        36,
        37,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "true",
          "line": 3992,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"invalid number of patterns\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        44,
        45,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 3999,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        50,
        52,
        53,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4013,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        69,
        71,
        72,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 4018,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 4004,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4013,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        69,
        71,
        72,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 4018,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "true",
          "line": 3992,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"invalid number of patterns\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 3999,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        50,
        52,
        53,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4013,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        69,
        71,
        72,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 4018,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 4004,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4013,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        69,
        71,
        72,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 4018,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4033,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4032,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 4037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4042,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        124,
        126,
        127,
        136,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3969,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3972,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3976,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 3978,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3985,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 3987,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 3992,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3999,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 4001,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4004,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4013,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 4015,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4018,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4023,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4033,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4032,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4037,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4042,
          "bound": null
        },
        {
          "cond": "wire::check_alignment::<StateID>(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4043,
          "bound": null
        }
      ],
      "ret": "Ok((st, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        125,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        147
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}