{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#1}::build_from_nfa",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:299:5:305:6",
  "doc": "/// Build a `BoundedBacktracker` directly from its NFA.\n///\n/// Note that when using this method, any configuration that applies to the\n/// construction of the NFA itself will of course be ignored, since the NFA\n/// given here is already built.\n",
  "code": [
    "pub fn build_from_nfa(",
    "    &self,",
    "    nfa: NFA,",
    ") -> Result<BoundedBacktracker, BuildError> {",
    "    nfa.look_set_any().available().map_err(BuildError::word)?;",
    "    Ok(BoundedBacktracker { config: self.config.clone(), nfa })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Err/None",
          "line": 303,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "nfa.look_set_any().available().map_err(BuildError::word)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 303,
          "bound": null
        }
      ],
      "ret": "Ok(BoundedBacktracker { config: self.config.clone(), nfa })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}