{
  "name": "regex_automata::util::pool::inner::{impl#4}::get",
  "mod_info": {
    "name": "util::pool::inner",
    "loc": "regex-automata/src/util/pool.rs:235:1:793:2"
  },
  "visible": false,
  "loc": "regex-automata/src/util/pool.rs:510:9:534:10",
  "doc": "/// Get a value from the pool. This may block if another thread is also\n/// attempting to retrieve a value from the pool.\n",
  "code": [
    "pub(super) fn get(&self) -> PoolGuard<'_, T, F> {",
    "    // Our fast path checks if the caller is the thread that \"owns\"",
    "    // this pool. Or stated differently, whether it is the first thread",
    "    // that tried to extract a value from the pool. If it is, then we",
    "    // can return a T to the caller without going through a mutex.",
    "    //",
    "    // SAFETY: We must guarantee that only one thread gets access",
    "    // to this value. Since a thread is uniquely identified by the",
    "    // THREAD_ID thread local, it follows that if the caller's thread",
    "    // ID is equal to the owner, then only one thread may receive this",
    "    // value. This is also why we can get away with what looks like a",
    "    // racy load and a store. We know that if 'owner == caller', then",
    "    // only one thread can be here, so we don't need to worry about any",
    "    // other thread setting the owner to something else.",
    "    let caller = THREAD_ID.with(|id| *id);",
    "    let owner = self.owner.load(Ordering::Acquire);",
    "    if caller == owner {",
    "        // N.B. We could also do a CAS here instead of a load/store,",
    "        // but ad hoc benchmarking suggests it is slower. And a lot",
    "        // slower in the case where `get_slow` is common.",
    "        self.owner.store(THREAD_ID_INUSE, Ordering::Release);",
    "        return self.guard_owned(caller);",
    "    }",
    "    self.get_slow(caller, owner)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "caller == owner",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "caller == owner",
          "norm": null,
          "value": "false",
          "line": 526,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}