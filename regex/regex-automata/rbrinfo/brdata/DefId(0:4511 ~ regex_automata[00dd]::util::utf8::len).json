{
  "name": "regex_automata::util::utf8::len",
  "mod_info": {
    "name": "util::utf8",
    "loc": "regex-automata/src/util/mod.rs:57:1:57:21"
  },
  "visible": false,
  "loc": "regex-automata/src/util/utf8.rs:101:1:115:2",
  "doc": "/// Given a UTF-8 leading byte, this returns the total number of code units\n/// in the following encoded codepoint.\n///\n/// If the given byte is not a valid UTF-8 leading byte, then this returns\n/// `None`.\n",
  "code": [
    "fn len(byte: u8) -> Option<usize> {",
    "    if byte <= 0x7F {",
    "        return Some(1);",
    "    } else if byte & 0b1100_0000 == 0b1000_0000 {",
    "        return None;",
    "    } else if byte <= 0b1101_1111 {",
    "        Some(2)",
    "    } else if byte <= 0b1110_1111 {",
    "        Some(3)",
    "    } else if byte <= 0b1111_0111 {",
    "        Some(4)",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "true",
          "line": 102,
          "bound": "byte == 0x7F"
        }
      ],
      "ret": "Some(1)",
      "path": [
        0,
        1,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "byte & 0b1100_0000 == 0b1000_0000",
          "norm": "0b1000_0000 == byte & 0b1100_0000",
          "value": "false",
          "line": 104,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        3,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "byte & 0b1100_0000 == 0b1000_0000",
          "norm": "0b1000_0000 == byte & 0b1100_0000",
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "byte <= 0b1101_1111",
          "norm": "0b1101_1111 >= byte",
          "value": "true",
          "line": 106,
          "bound": "byte == 0b1101_1111"
        }
      ],
      "ret": "Some(2)",
      "path": [
        0,
        2,
        4,
        5,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "byte & 0b1100_0000 == 0b1000_0000",
          "norm": "0b1000_0000 == byte & 0b1100_0000",
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "byte <= 0b1101_1111",
          "norm": "0b1101_1111 >= byte",
          "value": "false",
          "line": 106,
          "bound": null
        },
        {
          "cond": "byte <= 0b1110_1111",
          "norm": "0b1110_1111 >= byte",
          "value": "true",
          "line": 108,
          "bound": "byte == 0b1110_1111"
        }
      ],
      "ret": "Some(3)",
      "path": [
        0,
        2,
        4,
        6,
        7,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "byte & 0b1100_0000 == 0b1000_0000",
          "norm": "0b1000_0000 == byte & 0b1100_0000",
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "byte <= 0b1101_1111",
          "norm": "0b1101_1111 >= byte",
          "value": "false",
          "line": 106,
          "bound": null
        },
        {
          "cond": "byte <= 0b1110_1111",
          "norm": "0b1110_1111 >= byte",
          "value": "false",
          "line": 108,
          "bound": null
        },
        {
          "cond": "byte <= 0b1111_0111",
          "norm": "0b1111_0111 >= byte",
          "value": "true",
          "line": 110,
          "bound": "byte == 0b1111_0111"
        }
      ],
      "ret": "Some(4)",
      "path": [
        0,
        2,
        4,
        6,
        8,
        9,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "byte & 0b1100_0000 == 0b1000_0000",
          "norm": "0b1000_0000 == byte & 0b1100_0000",
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "byte <= 0b1101_1111",
          "norm": "0b1101_1111 >= byte",
          "value": "false",
          "line": 106,
          "bound": null
        },
        {
          "cond": "byte <= 0b1110_1111",
          "norm": "0b1110_1111 >= byte",
          "value": "false",
          "line": 108,
          "bound": null
        },
        {
          "cond": "byte <= 0b1111_0111",
          "norm": "0b1111_0111 >= byte",
          "value": "false",
          "line": 110,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        4,
        6,
        8,
        10,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}