{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#2}::config",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:604:5:606:6",
  "doc": "/// Return a default configuration for a `BoundedBacktracker`.\n///\n/// This is a convenience routine to avoid needing to import the `Config`\n/// type when customizing the construction of a `BoundedBacktracker`.\n///\n/// # Example\n///\n/// This example shows how to disable UTF-8 mode. When UTF-8 mode is\n/// disabled, zero-width matches that split a codepoint are allowed.\n/// Otherwise they are never reported.\n///\n/// In the code below, notice that `\"\"` is permitted to match positions\n/// that split the encoding of a codepoint.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::{self, backtrack::BoundedBacktracker},\n///     Match,\n/// };\n///\n/// let re = BoundedBacktracker::builder()\n///     .thompson(thompson::Config::new().utf8(false))\n///     .build(r\"\")?;\n/// let mut cache = re.create_cache();\n///\n/// let haystack = \"aâ˜ƒz\";\n/// let mut it = re.try_find_iter(&mut cache, haystack);\n/// assert_eq!(Some(Ok(Match::must(0, 0..0))), it.next());\n/// assert_eq!(Some(Ok(Match::must(0, 1..1))), it.next());\n/// assert_eq!(Some(Ok(Match::must(0, 2..2))), it.next());\n/// assert_eq!(Some(Ok(Match::must(0, 3..3))), it.next());\n/// assert_eq!(Some(Ok(Match::must(0, 4..4))), it.next());\n/// assert_eq!(Some(Ok(Match::must(0, 5..5))), it.next());\n/// assert_eq!(None, it.next());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn config() -> Config {",
    "    Config::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}