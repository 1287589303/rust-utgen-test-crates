{
  "name": "regex_automata::hybrid::dfa::{impl#5}::save_state",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2566:5:2569:6",
  "doc": "/// Save the state corresponding to the ID given such that the state\n/// persists through a cache clearing.\n///\n/// While the state may persist, the ID may not. In order to discover the\n/// new state ID, one must call 'saved_state_id' after a cache clearing.\n",
  "code": [
    "fn save_state(&mut self, id: LazyStateID) {",
    "    let state = self.as_ref().get_cached_state(id).clone();",
    "    self.cache.state_saver = StateSaver::ToSave { id, state };",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}