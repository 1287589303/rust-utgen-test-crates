{
  "name": "regex_automata::dfa::automaton::Automaton::accelerator",
  "mod_info": {
    "name": "dfa::automaton",
    "loc": "regex-automata/src/dfa/mod.rs:348:1:348:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/automaton.rs:1143:5:1145:6",
  "doc": "/// Return a slice of bytes to accelerate for the given state, if possible.\n///\n/// If the given state has no accelerator, then an empty slice must be\n/// returned. If `Automaton::is_accel_state` returns true for the given ID,\n/// then this routine _must_ return a non-empty slice. But note that it is\n/// not required for an implementation of this trait to ever return `true`\n/// for `is_accel_state`, even if the state _could_ be accelerated. That\n/// is, acceleration is an optional optimization. But the return values of\n/// `is_accel_state` and `accelerator` must be in sync.\n///\n/// If the given ID is not a valid state ID for this automaton, then\n/// implementations may panic or produce incorrect results.\n///\n/// See [`Automaton::is_accel_state`] for more details on state\n/// acceleration.\n///\n/// By default, this method will always return an empty slice.\n///\n/// # Example\n///\n/// This example shows a contrived case in which we build a regex that we\n/// know is accelerated and extract the accelerator from a state.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{Automaton, dense},\n///     util::{primitives::StateID, syntax},\n/// };\n///\n/// let dfa = dense::Builder::new()\n///     // We disable Unicode everywhere and permit the regex to match\n///     // invalid UTF-8. e.g., [^abc] matches \\xFF, which is not valid\n///     // UTF-8. If we left Unicode enabled, [^abc] would match any UTF-8\n///     // encoding of any Unicode scalar value except for 'a', 'b' or 'c'.\n///     // That translates to a much more complicated DFA, and also\n///     // inhibits the 'accelerator' optimization that we are trying to\n///     // demonstrate in this example.\n///     .syntax(syntax::Config::new().unicode(false).utf8(false))\n///     .build(\"[^abc]+a\")?;\n///\n/// // Here we just pluck out the state that we know is accelerated.\n/// // While the stride calculations are something that can be relied\n/// // on by callers, the specific position of the accelerated state is\n/// // implementation defined.\n/// //\n/// // N.B. We get '3' by inspecting the state machine using 'regex-cli'.\n/// // e.g., try `regex-cli debug dense dfa -p '[^abc]+a' -BbUC`.\n/// let id = StateID::new(3 * dfa.stride()).unwrap();\n/// let accelerator = dfa.accelerator(id);\n/// // The `[^abc]+` sub-expression permits [a, b, c] to be accelerated.\n/// assert_eq!(accelerator, &[b'a', b'b', b'c']);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "fn accelerator(&self, _id: StateID) -> &[u8] {",
    "    &[]",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&[]",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}