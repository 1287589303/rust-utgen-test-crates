{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_match",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1105:5:1109:6",
  "doc": "/// Adds a \"match\" NFA state.\n///\n/// A \"match\" state has no outgoing transitions (just like a \"fail\"\n/// state), but it has special significance in that if a search enters\n/// this state, then a match has been found. The match state that is added\n/// automatically has the current pattern ID associated with it. This is\n/// used to report the matching pattern ID at search time.\n///\n/// # Errors\n///\n/// This returns an error if the state identifier space is exhausted, or if\n/// the configured heap size limit has been exceeded.\n///\n/// # Panics\n///\n/// This must be called after a `start_pattern` call but before the\n/// corresponding `finish_pattern` call. Otherwise, it panics.\n",
  "code": [
    "pub fn add_match(&mut self) -> Result<StateID, BuildError> {",
    "    let pattern_id = self.current_pattern_id();",
    "    let sid = self.add(State::Match { pattern_id })?;",
    "    Ok(sid)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.add(State::Match { pattern_id })?",
          "norm": null,
          "value": "Err/None",
          "line": 1107,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.add(State::Match { pattern_id })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1107,
          "bound": null
        }
      ],
      "ret": "Ok(sid)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}