{
  "name": "regex_automata::hybrid::dfa::{impl#6}::get_cached_start_id",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2681:5:2703:6",
  "doc": "/// Return the ID of the start state for the given configuration.\n///\n/// If the start state has not yet been computed, then this returns an\n/// unknown lazy state ID.\n",
  "code": [
    "fn get_cached_start_id(",
    "    &self,",
    "    anchored: Anchored,",
    "    start: Start,",
    ") -> Result<LazyStateID, StartError> {",
    "    let start_index = start.as_usize();",
    "    let index = match anchored {",
    "        Anchored::No => start_index,",
    "        Anchored::Yes => Start::len() + start_index,",
    "        Anchored::Pattern(pid) => {",
    "            if !self.dfa.get_config().get_starts_for_each_pattern() {",
    "                return Err(StartError::unsupported_anchored(anchored));",
    "            }",
    "            if pid.as_usize() >= self.dfa.pattern_len() {",
    "                return Ok(self.dead_id());",
    "            }",
    "            (2 * Start::len())",
    "                + (Start::len() * pid.as_usize())",
    "                + start_index",
    "        }",
    "    };",
    "    Ok(self.cache.starts[index])",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2687,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 2691,
          "bound": null
        },
        {
          "cond": "pid.as_usize() >= self.dfa.pattern_len()",
          "norm": null,
          "value": "true",
          "line": 2694,
          "bound": "pid.as_usize() == self.dfa.pattern_len()"
        }
      ],
      "ret": "Ok(self.dead_id())",
      "path": [
        0,
        1,
        5,
        10,
        11,
        12,
        15,
        16,
        17,
        18,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2687,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 2691,
          "bound": null
        },
        {
          "cond": "pid.as_usize() >= self.dfa.pattern_len()",
          "norm": null,
          "value": "false",
          "line": 2694,
          "bound": null
        }
      ],
      "ret": "Ok(self.cache.starts[index])",
      "path": [
        0,
        1,
        5,
        10,
        11,
        12,
        15,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2687,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 2691,
          "bound": null
        }
      ],
      "ret": "Err(StartError::unsupported_anchored(anchored))",
      "path": [
        0,
        1,
        5,
        10,
        11,
        13,
        14,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2687,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2687,
          "bound": null
        }
      ],
      "ret": "Ok(self.cache.starts[index])",
      "path": [
        0,
        1,
        4,
        7,
        8,
        9,
        27,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2687,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2687,
          "bound": null
        }
      ],
      "ret": "Ok(self.cache.starts[index])",
      "path": [
        0,
        1,
        3,
        6,
        27,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}