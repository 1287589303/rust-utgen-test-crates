{
  "name": "regex_automata::util::wire::check_alignment",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:320:1:329:2",
  "doc": "/// Checks that the given slice has an alignment that matches `T`.\n///\n/// This is useful for checking that a slice has an appropriate alignment\n/// before casting it to a &[T]. Note though that alignment is not itself\n/// sufficient to perform the cast for any `T`.\n",
  "code": [
    "pub(crate) fn check_alignment<T>(",
    "    slice: &[u8],",
    ") -> Result<(), DeserializeError> {",
    "    let alignment = core::mem::align_of::<T>();",
    "    let address = slice.as_ptr().as_usize();",
    "    if address % alignment == 0 {",
    "        return Ok(());",
    "    }",
    "    Err(DeserializeError::alignment_mismatch(alignment, address))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "address % alignment == 0",
          "norm": "0 == address % alignment",
          "value": "false",
          "line": 325,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "address % alignment == 0",
          "norm": "0 == address % alignment",
          "value": "true",
          "line": 325,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::alignment_mismatch(alignment, address))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}