{
  "name": "regex_automata::util::search::{impl#0}::set_range",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:467:5:486:6",
  "doc": "/// Set the span for this search configuration given any range.\n///\n/// This is like the [`Input::range`] method, except this mutates the\n/// span in place.\n///\n/// This routine does not panic if the range given is not a valid range for\n/// this search's haystack. If this search is run with an invalid range,\n/// then the most likely outcome is that the actual search execution will\n/// panic.\n///\n/// # Panics\n///\n/// This routine will panic if the given range could not be converted\n/// to a valid [`Range`]. For example, this would panic when given\n/// `0..=usize::MAX` since it cannot be represented using a half-open\n/// interval in terms of `usize`.\n///\n/// This also panics if the given span does not correspond to valid bounds\n/// in the haystack or the termination of a search.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let mut input = Input::new(\"foobar\");\n/// assert_eq!(0..6, input.get_range());\n/// input.set_range(2..=4);\n/// assert_eq!(2..5, input.get_range());\n/// ```\n",
  "code": [
    "pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {",
    "    use core::ops::Bound;",
    "",
    "    // It's a little weird to convert ranges into spans, and then spans",
    "    // back into ranges when we actually slice the haystack. Because",
    "    // of that process, we always represent everything as a half-open",
    "    // internal. Therefore, handling things like m..=n is a little awkward.",
    "    let start = match range.start_bound() {",
    "        Bound::Included(&i) => i,",
    "        // Can this case ever happen? Range syntax doesn't support it...",
    "        Bound::Excluded(&i) => i.checked_add(1).unwrap(),",
    "        Bound::Unbounded => 0,",
    "    };",
    "    let end = match range.end_bound() {",
    "        Bound::Included(&i) => i.checked_add(1).unwrap(),",
    "        Bound::Excluded(&i) => i,",
    "        Bound::Unbounded => self.haystack().len(),",
    "    };",
    "    self.set_span(Span { start, end });",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        10,
        11,
        15,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        10,
        11,
        14,
        19,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        10,
        11,
        13,
        16,
        17,
        18,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        8,
        9,
        10,
        11,
        15,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        8,
        9,
        10,
        11,
        14,
        19,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        8,
        9,
        10,
        11,
        13,
        16,
        17,
        18,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Unbounded",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        10,
        11,
        15,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Excluded(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        10,
        11,
        14,
        19,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.start_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "range.end_bound() matches Bound::Included(&i)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        6,
        10,
        11,
        13,
        16,
        17,
        18,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}