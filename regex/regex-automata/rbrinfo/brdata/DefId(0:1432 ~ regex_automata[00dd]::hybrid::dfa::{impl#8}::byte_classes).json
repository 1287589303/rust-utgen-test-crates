{
  "name": "regex_automata::hybrid::dfa::{impl#8}::byte_classes",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:3189:5:3192:6",
  "doc": "/// Whether to attempt to shrink the size of the lazy DFA's alphabet or\n/// not.\n///\n/// This option is enabled by default and should never be disabled unless\n/// one is debugging the lazy DFA.\n///\n/// When enabled, the lazy DFA will use a map from all possible bytes\n/// to their corresponding equivalence class. Each equivalence class\n/// represents a set of bytes that does not discriminate between a match\n/// and a non-match in the DFA. For example, the pattern `[ab]+` has at\n/// least two equivalence classes: a set containing `a` and `b` and a set\n/// containing every byte except for `a` and `b`. `a` and `b` are in the\n/// same equivalence classes because they never discriminate between a\n/// match and a non-match.\n///\n/// The advantage of this map is that the size of the transition table\n/// can be reduced drastically from `#states * 256 * sizeof(LazyStateID)`\n/// to `#states * k * sizeof(LazyStateID)` where `k` is the number of\n/// equivalence classes (rounded up to the nearest power of 2). As a\n/// result, total space usage can decrease substantially. Moreover, since a\n/// smaller alphabet is used, DFA compilation during search becomes faster\n/// as well since it will potentially be able to reuse a single transition\n/// for multiple bytes.\n///\n/// **WARNING:** This is only useful for debugging lazy DFAs. Disabling\n/// this does not yield any speed advantages. Namely, even when this is\n/// disabled, a byte class map is still used while searching. The only\n/// difference is that every byte will be forced into its own distinct\n/// equivalence class. This is useful for debugging the actual generated\n/// transitions because it lets one see the transitions defined on actual\n/// bytes instead of the equivalence classes.\n",
  "code": [
    "pub fn byte_classes(mut self, yes: bool) -> Config {",
    "    self.byte_classes = Some(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}