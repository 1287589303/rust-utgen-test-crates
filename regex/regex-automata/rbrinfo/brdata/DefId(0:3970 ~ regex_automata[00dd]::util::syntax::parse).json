{
  "name": "regex_automata::util::syntax::parse",
  "mod_info": {
    "name": "util::syntax",
    "loc": "regex-automata/src/util/mod.rs:45:1:45:16"
  },
  "visible": true,
  "loc": "regex-automata/src/util/syntax.rs:37:1:39:2",
  "doc": "/// A convenience routine for parsing a pattern into an HIR value with the\n/// default configuration.\n///\n/// # Example\n///\n/// This shows how to parse a pattern into an HIR value:\n///\n/// ```\n/// use regex_automata::util::syntax;\n///\n/// let hir = syntax::parse(r\"([a-z]+)|([0-9]+)\")?;\n/// assert_eq!(Some(1), hir.properties().static_explicit_captures_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn parse(pattern: &str) -> Result<Hir, Error> {",
    "    parse_with(pattern, &Config::default())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}