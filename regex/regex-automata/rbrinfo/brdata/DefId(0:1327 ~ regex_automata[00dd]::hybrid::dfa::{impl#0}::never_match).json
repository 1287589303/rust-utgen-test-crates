{
  "name": "regex_automata::hybrid::dfa::{impl#0}::never_match",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:219:5:222:6",
  "doc": "/// Create a new lazy DFA that never matches any input.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{hybrid::dfa::DFA, Input};\n///\n/// let dfa = DFA::never_match()?;\n/// let mut cache = dfa.create_cache();\n///\n/// assert_eq!(None, dfa.try_search_fwd(&mut cache, &Input::new(\"\"))?);\n/// assert_eq!(None, dfa.try_search_fwd(&mut cache, &Input::new(\"foo\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn never_match() -> Result<DFA, BuildError> {",
    "    let nfa = thompson::NFA::never_match();",
    "    Builder::new().build_from_nfa(nfa)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}