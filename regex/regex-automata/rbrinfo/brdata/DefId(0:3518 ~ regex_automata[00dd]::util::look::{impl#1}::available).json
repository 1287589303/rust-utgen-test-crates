{
  "name": "regex_automata::util::look::{impl#1}::available",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:493:5:498:6",
  "doc": "/// Checks that all assertions in this set can be matched.\n///\n/// Some assertions, such as Unicode word boundaries, require optional (but\n/// enabled by default) tables that may not be available. If there are\n/// assertions in this set that require tables that are not available, then\n/// this will return an error.\n///\n/// Specifically, this returns an error when the the\n/// `unicode-word-boundary` feature is _not_ enabled _and_ this set\n/// contains a Unicode word boundary assertion.\n///\n/// It can be useful to use this on the result of\n/// [`NFA::look_set_any`](crate::nfa::thompson::NFA::look_set_any)\n/// when building a matcher engine to ensure methods like\n/// [`LookMatcher::matches_set`] do not panic at search time.\n",
  "code": [
    "pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {",
    "    if self.contains_word_unicode() {",
    "        UnicodeWordBoundaryError::check()?;",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "UnicodeWordBoundaryError::check()?",
          "norm": null,
          "value": "Err/None",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.contains_word_unicode()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        },
        {
          "cond": "UnicodeWordBoundaryError::check()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 495,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.contains_word_unicode()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}