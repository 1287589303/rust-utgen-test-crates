{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#4}::search_slots_imp",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1139:5:1158:6",
  "doc": "/// This is the actual implementation of `search_slots_imp` that\n/// doesn't account for the special case when 1) the NFA has UTF-8 mode\n/// enabled, 2) the NFA can match the empty string and 3) the caller has\n/// provided an insufficient number of slots to record match offsets.\n",
  "code": [
    "fn search_slots_imp(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    slots: &mut [Option<NonMaxUsize>],",
    ") -> Option<HalfMatch> {",
    "    let utf8empty = self.get_nfa().has_empty() && self.get_nfa().is_utf8();",
    "    let hm = match self.search_imp(cache, input, slots) {",
    "        None => return None,",
    "        Some(hm) if !utf8empty => return Some(hm),",
    "        Some(hm) => hm,",
    "    };",
    "    empty::skip_splits_fwd(input, hm, hm.offset(), |input| {",
    "        Ok(self",
    "            .search_imp(cache, input, slots)",
    "            .map(|hm| (hm, hm.offset())))",
    "    })",
    "    // OK because the PikeVM never errors.",
    "    .unwrap()",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1145,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm) or Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        12,
        17,
        18,
        19,
        21
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1145,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm) or Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1148,
          "bound": null
        }
      ],
      "ret": "Some(hm)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        14,
        16,
        20,
        21
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "true",
          "line": 1145,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches None",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches None",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        10,
        13,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1145,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm) or Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        11,
        14,
        15,
        12,
        17,
        18,
        19,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1145,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm) or Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1148,
          "bound": null
        }
      ],
      "ret": "Some(hm)",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        11,
        14,
        16,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.get_nfa().has_empty()",
          "norm": null,
          "value": "false",
          "line": 1145,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches None",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        },
        {
          "cond": "self.search_imp(cache, input, slots) matches None",
          "norm": null,
          "value": "true",
          "line": 1146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        10,
        13,
        20,
        21
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}