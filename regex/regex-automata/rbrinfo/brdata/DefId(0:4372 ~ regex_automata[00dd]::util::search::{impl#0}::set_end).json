{
  "name": "regex_automata::util::search::{impl#0}::set_end",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:536:5:538:6",
  "doc": "/// Set the ending offset for the span for this search configuration.\n///\n/// This is a convenience routine for only mutating the end of a span\n/// without having to set the entire span.\n///\n/// # Panics\n///\n/// This panics if the span resulting from the new end position does not\n/// correspond to valid bounds in the haystack or the termination of a\n/// search.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let mut input = Input::new(\"foobar\");\n/// assert_eq!(0..6, input.get_range());\n/// input.set_end(5);\n/// assert_eq!(0..5, input.get_range());\n/// ```\n",
  "code": [
    "pub fn set_end(&mut self, end: usize) {",
    "    self.set_span(Span { end, ..self.get_span() });",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}