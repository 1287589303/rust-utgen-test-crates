{
  "name": "regex_automata::dfa::sparse::{impl#6}::start_state",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/sparse.rs:1197:5:1212:6",
  "doc": "",
  "code": [
    "fn start_state(",
    "    &self,",
    "    config: &start::Config,",
    ") -> Result<StateID, StartError> {",
    "    let anchored = config.get_anchored();",
    "    let start = match config.get_look_behind() {",
    "        None => Start::Text,",
    "        Some(byte) => {",
    "            if !self.quitset.is_empty() && self.quitset.contains(byte) {",
    "                return Err(StartError::quit(byte));",
    "            }",
    "            self.st.start_map.get(byte)",
    "        }",
    "    };",
    "    self.st.start(anchored, start)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1202,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1205,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        14,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1202,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1205,
          "bound": null
        },
        {
          "cond": "self.quitset.contains(byte)",
          "norm": null,
          "value": "true",
          "line": 1205,
          "bound": null
        }
      ],
      "ret": "Err(StartError::quit(byte))",
      "path": [
        0,
        1,
        2,
        5,
        7,
        9,
        10,
        11,
        12,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "config.get_look_behind() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 1202,
          "bound": null
        },
        {
          "cond": "self.quitset.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1205,
          "bound": null
        },
        {
          "cond": "self.quitset.contains(byte)",
          "norm": null,
          "value": "false",
          "line": 1205,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        7,
        9,
        10,
        13,
        14,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1202,
          "bound": null
        },
        {
          "cond": "config.get_look_behind() matches None",
          "norm": null,
          "value": "true",
          "line": 1202,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}