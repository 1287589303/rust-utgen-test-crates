{
  "name": "regex_automata::dfa::dense::{impl#4}::always_match",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:1506:5:1509:6",
  "doc": "/// Create a new DFA that matches every input.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense}, HalfMatch, Input};\n///\n/// let dfa = dense::DFA::always_match()?;\n///\n/// let expected = Some(HalfMatch::must(0, 0));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"\"))?);\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(\"foo\"))?);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn always_match() -> Result<OwnedDFA, BuildError> {",
    "    let nfa = thompson::NFA::always_match();",
    "    Builder::new().build_from_nfa(&nfa)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}