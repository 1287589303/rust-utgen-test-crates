{
  "name": "regex_automata::meta::strategy::{impl#3}::is_match_nofail",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:638:5:659:6",
  "doc": "",
  "code": [
    "fn is_match_nofail(&self, cache: &mut Cache, input: &Input<'_>) -> bool {",
    "    if let Some(ref e) = self.onepass.get(input) {",
    "        trace!(",
    "            \"using OnePass for is-match search at {:?}\",",
    "            input.get_span()",
    "        );",
    "        e.search_slots(&mut cache.onepass, input, &mut []).is_some()",
    "    } else if let Some(ref e) = self.backtrack.get(input) {",
    "        trace!(",
    "            \"using BoundedBacktracker for is-match search at {:?}\",",
    "            input.get_span()",
    "        );",
    "        e.is_match(&mut cache.backtrack, input)",
    "    } else {",
    "        trace!(",
    "            \"using PikeVM for is-match search at {:?}\",",
    "            input.get_span()",
    "        );",
    "        let e = self.pikevm.get();",
    "        e.is_match(&mut cache.pikevm, input)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(ref e) = self.onepass.get(input)",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(ref e) = self.backtrack.get(input)",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(ref e) = self.onepass.get(input)",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "let Some(ref e) = self.backtrack.get(input)",
          "norm": null,
          "value": "true",
          "line": 645,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(ref e) = self.onepass.get(input)",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        15
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}