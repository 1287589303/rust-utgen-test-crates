{
  "name": "regex_automata::dfa::sparse::{impl#18}::next",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:2275:5:2293:6",
  "doc": "/// Searches for the next transition given an input byte. If no such\n/// transition could be found, then a dead state is returned.\n///\n/// This is marked as inline to help dramatically boost sparse searching,\n/// which decodes each state it enters to follow the next transition.\n",
  "code": [
    "fn next(&self, input: u8) -> StateID {",
    "    // This straight linear search was observed to be much better than",
    "    // binary search on ASCII haystacks, likely because a binary search",
    "    // visits the ASCII case last but a linear search sees it first. A",
    "    // binary search does do a little better on non-ASCII haystacks, but",
    "    // not by much. There might be a better trade off lurking here.",
    "    for i in 0..(self.ntrans - 1) {",
    "        let (start, end) = self.range(i);",
    "        if start <= input && input <= end {",
    "            return self.next_at(i);",
    "        }",
    "        // We could bail early with an extra branch: if input < b1, then",
    "        // we know we'll never find a matching transition. Interestingly,",
    "        // this extra branch seems to not help performance, or will even",
    "        // hurt it. It's likely very dependent on the DFA itself and what",
    "        // is being searched.",
    "    }",
    "    DEAD",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i in 0..(self.ntrans - 1)",
          "norm": null,
          "value": "true",
          "line": 2281,
          "bound": null
        },
        {
          "cond": "start <= input",
          "norm": "input >= start",
          "value": "true",
          "line": 2283,
          "bound": "start == input"
        },
        {
          "cond": "input <= end",
          "norm": "end >= input",
          "value": "true",
          "line": 2283,
          "bound": "input == end"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i in 0..(self.ntrans - 1)",
          "norm": null,
          "value": "true",
          "line": 2281,
          "bound": null
        },
        {
          "cond": "start <= input",
          "norm": "input >= start",
          "value": "true",
          "line": 2283,
          "bound": "start == input"
        },
        {
          "cond": "input <= end",
          "norm": "end >= input",
          "value": "false",
          "line": 2283,
          "bound": null
        },
        {
          "cond": "i in 0..(self.ntrans - 1)",
          "norm": null,
          "value": "false",
          "line": 2281,
          "bound": null
        }
      ],
      "ret": "DEAD",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        16,
        3,
        4,
        5,
        7,
        9,
        17
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "i in 0..(self.ntrans - 1)",
          "norm": null,
          "value": "true",
          "line": 2281,
          "bound": null
        },
        {
          "cond": "start <= input",
          "norm": "input >= start",
          "value": "false",
          "line": 2283,
          "bound": null
        },
        {
          "cond": "i in 0..(self.ntrans - 1)",
          "norm": null,
          "value": "false",
          "line": 2281,
          "bound": null
        }
      ],
      "ret": "DEAD",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        15,
        16,
        3,
        4,
        5,
        7,
        9,
        17
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "i in 0..(self.ntrans - 1)",
          "norm": null,
          "value": "false",
          "line": 2281,
          "bound": null
        }
      ],
      "ret": "DEAD",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}