{
  "name": "regex_automata::hybrid::dfa::{impl#3}::search_total_len",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:2003:5:2005:6",
  "doc": "/// Returns the total number of bytes that have been searched since this\n/// cache was last cleared.\n///\n/// This is useful for determining the efficiency of the cache. For\n/// example, the lazy DFA uses this value in conjunction with the\n/// [`Config::minimum_bytes_per_state`] knob to help determine whether it\n/// should quit searching.\n///\n/// This always returns `0` if search progress isn't being tracked. Note\n/// that the lazy DFA search routines in this crate always track search\n/// progress.\n",
  "code": [
    "pub fn search_total_len(&self) -> usize {",
    "    self.bytes_searched + self.progress.as_ref().map_or(0, |p| p.len())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.bytes_searched + self.progress.as_ref().map_or(0, |p| p.len())",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}