{
  "name": "regex_automata::hybrid::dfa::{impl#5}::set_start_state",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2613:5:2635:6",
  "doc": "/// Set the start ID for the given pattern ID (if given) and starting\n/// configuration to the ID given.\n///\n/// This panics if 'id' is not valid or if a pattern ID is given and\n/// 'starts_for_each_pattern' is not enabled.\n",
  "code": [
    "fn set_start_state(",
    "    &mut self,",
    "    anchored: Anchored,",
    "    start: Start,",
    "    id: LazyStateID,",
    ") {",
    "    assert!(self.as_ref().is_valid(id));",
    "    let start_index = start.as_usize();",
    "    let index = match anchored {",
    "        Anchored::No => start_index,",
    "        Anchored::Yes => Start::len() + start_index,",
    "        Anchored::Pattern(pid) => {",
    "            assert!(",
    "                self.dfa.get_config().get_starts_for_each_pattern(),",
    "                \"attempted to search for a specific pattern \\",
    "                 without enabling starts_for_each_pattern\",",
    "            );",
    "            let pid = pid.as_usize();",
    "            (2 * Start::len()) + (Start::len() * pid) + start_index",
    "        }",
    "    };",
    "    self.cache.starts[index] = id;",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.as_ref().is_valid(id)",
          "norm": null,
          "value": "true",
          "line": 2619,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2621,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 2626,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        9,
        14,
        15,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.as_ref().is_valid(id)",
          "norm": null,
          "value": "true",
          "line": 2619,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2621,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 2626,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        9,
        14,
        15,
        17,
        18,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.as_ref().is_valid(id)",
          "norm": null,
          "value": "true",
          "line": 2619,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2621,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2621,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        8,
        11,
        12,
        13,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.as_ref().is_valid(id)",
          "norm": null,
          "value": "true",
          "line": 2619,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2621,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2621,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.as_ref().is_valid(id)",
          "norm": null,
          "value": "false",
          "line": 2619,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        28
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}