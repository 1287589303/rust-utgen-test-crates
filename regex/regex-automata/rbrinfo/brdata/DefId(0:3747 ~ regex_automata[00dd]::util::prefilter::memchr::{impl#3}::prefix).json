{
  "name": "regex_automata::util::prefilter::memchr::{impl#3}::prefix",
  "mod_info": {
    "name": "util::prefilter::memchr",
    "loc": "regex-automata/src/util/prefilter/mod.rs:38:1:38:12"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/memchr.rs:108:5:115:6",
  "doc": "",
  "code": [
    "fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span> {",
    "    let b = *haystack.get(span.start)?;",
    "    if self.0 == b || self.1 == b {",
    "        Some(Span { start: span.start, end: span.start + 1 })",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "haystack.get(span.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "haystack.get(span.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 109,
          "bound": null
        },
        {
          "cond": "self.0 == b",
          "norm": "b == self.0",
          "value": "true",
          "line": 110,
          "bound": null
        }
      ],
      "ret": "Some(Span { start: span.start, end: span.start + 1 })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "haystack.get(span.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 109,
          "bound": null
        },
        {
          "cond": "self.0 == b",
          "norm": "b == self.0",
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "self.1 == b",
          "norm": "b == self.1",
          "value": "true",
          "line": 110,
          "bound": null
        }
      ],
      "ret": "Some(Span { start: span.start, end: span.start + 1 })",
      "path": [
        0,
        1,
        2,
        5,
        9,
        10,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "haystack.get(span.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 109,
          "bound": null
        },
        {
          "cond": "self.0 == b",
          "norm": "b == self.0",
          "value": "false",
          "line": 110,
          "bound": null
        },
        {
          "cond": "self.1 == b",
          "norm": "b == self.1",
          "value": "false",
          "line": 110,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        9,
        11,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}