{
  "name": "regex_automata::util::alphabet::{impl#0}::u8",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:103:5:105:6",
  "doc": "/// Create a new haystack unit from a byte value.\n///\n/// All possible byte values are legal. However, when creating a haystack\n/// unit for a specific DFA, one should be careful to only construct units\n/// that are in that DFA's alphabet. Namely, one way to compact a DFA's\n/// in-memory representation is to collapse its transitions to a set of\n/// equivalence classes into a set of all possible byte values. If a DFA\n/// uses equivalence classes instead of byte values, then the byte given\n/// here should be the equivalence class.\n",
  "code": [
    "pub fn u8(byte: u8) -> Unit {",
    "    Unit(UnitKind::U8(byte))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Unit(UnitKind::U8(byte))",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}