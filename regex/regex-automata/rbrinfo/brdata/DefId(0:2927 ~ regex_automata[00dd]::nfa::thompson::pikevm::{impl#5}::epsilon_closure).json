{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#5}::epsilon_closure",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1611:5:1637:6",
  "doc": "/// Compute the epsilon closure of 'sid', writing the closure into 'next'\n/// while copying slot values from 'curr_slots' into corresponding states\n/// in 'next'. 'curr_slots' should be the slot values corresponding to\n/// 'sid'.\n///\n/// The given 'stack' is used to perform a depth first traversal of the\n/// NFA by recursively following all epsilon transitions out of 'sid'.\n/// Conditional epsilon transitions are followed if and only if they are\n/// satisfied for the position 'at' in the 'input' haystack.\n///\n/// While this routine may write to 'curr_slots', once it returns, any\n/// writes are undone and the original values (even if absent) are\n/// restored.\n",
  "code": [
    "fn epsilon_closure(",
    "    &self,",
    "    stack: &mut Vec<FollowEpsilon>,",
    "    curr_slots: &mut [Option<NonMaxUsize>],",
    "    next: &mut ActiveStates,",
    "    input: &Input<'_>,",
    "    at: usize,",
    "    sid: StateID,",
    ") {",
    "    instrument!(|c| {",
    "        c.record_closure(sid);",
    "        c.record_stack_push(sid);",
    "    });",
    "    stack.push(FollowEpsilon::Explore(sid));",
    "    while let Some(frame) = stack.pop() {",
    "        match frame {",
    "            FollowEpsilon::RestoreCapture { slot, offset: pos } => {",
    "                curr_slots[slot] = pos;",
    "            }",
    "            FollowEpsilon::Explore(sid) => {",
    "                self.epsilon_closure_explore(",
    "                    stack, curr_slots, next, input, at, sid,",
    "                );",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(frame) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1625,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        14
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(frame) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1625,
          "bound": null
        },
        {
          "cond": "frame matches FollowEpsilon::RestoreCapture { slot, offset: pos }",
          "norm": null,
          "value": "true",
          "line": 1626,
          "bound": null
        },
        {
          "cond": "frame matches FollowEpsilon::RestoreCapture { slot, offset: pos }",
          "norm": null,
          "value": "true",
          "line": 1626,
          "bound": null
        },
        {
          "cond": "let Some(frame) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1625,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        13,
        2,
        3,
        4,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(frame) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1625,
          "bound": null
        },
        {
          "cond": "frame matches FollowEpsilon::Explore(sid)",
          "norm": null,
          "value": "true",
          "line": 1626,
          "bound": null
        },
        {
          "cond": "let Some(frame) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1625,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        2,
        3,
        4,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}