{
  "name": "regex_automata::nfa::thompson::compiler::{impl#0}::shrink",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:302:5:305:6",
  "doc": "/// Apply best effort heuristics to shrink the NFA at the expense of more\n/// time/memory.\n///\n/// Generally speaking, if one is using an NFA to compile a DFA, then the\n/// extra time used to shrink the NFA will be more than made up for during\n/// DFA construction (potentially by a lot). In other words, enabling this\n/// can substantially decrease the overall amount of time it takes to build\n/// a DFA.\n///\n/// A reason to keep this disabled is if you want to compile an NFA and\n/// start using it as quickly as possible without needing to build a DFA,\n/// and you don't mind using a bit of extra memory for the NFA. e.g., for\n/// an NFA simulation or for a lazy DFA.\n///\n/// NFA shrinking is currently most useful when compiling a reverse\n/// NFA with large Unicode character classes. In particular, it trades\n/// additional CPU time during NFA compilation in favor of generating fewer\n/// NFA states.\n///\n/// This is disabled by default because it can increase compile times\n/// quite a bit if you aren't building a full DFA.\n///\n/// # Example\n///\n/// This example shows that NFA shrinking can lead to substantial space\n/// savings in some cases. Notice that, as noted above, we build a reverse\n/// DFA and use a pattern with a large Unicode character class.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::{NFA, WhichCaptures};\n///\n/// // Currently we have to disable captures when enabling reverse NFA.\n/// let config = NFA::config()\n///     .which_captures(WhichCaptures::None)\n///     .reverse(true);\n/// let not_shrunk = NFA::compiler()\n///     .configure(config.clone().shrink(false))\n///     .build(r\"\\w\")?;\n/// let shrunk = NFA::compiler()\n///     .configure(config.clone().shrink(true))\n///     .build(r\"\\w\")?;\n///\n/// // While a specific shrink factor is not guaranteed, the savings can be\n/// // considerable in some cases.\n/// assert!(shrunk.states().len() * 2 < not_shrunk.states().len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn shrink(mut self, yes: bool) -> Config {",
    "    self.shrink = Some(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}