{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::patterns",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:406:5:411:6",
  "doc": "/// Returns an iterator over all pattern identifiers in this NFA.\n///\n/// Pattern IDs are allocated in sequential order starting from zero,\n/// where the order corresponds to the order of patterns provided to the\n/// [`NFA::new_many`] constructor.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"])?;\n/// let pids: Vec<PatternID> = nfa.patterns().collect();\n/// assert_eq!(pids, vec![\n///     PatternID::must(0),\n///     PatternID::must(1),\n///     PatternID::must(2),\n/// ]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn patterns(&self) -> PatternIter<'_> {",
    "    PatternIter {",
    "        it: PatternID::iter(self.pattern_len()),",
    "        _marker: core::marker::PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "PatternIter {\n            it: PatternID::iter(self.pattern_len()),\n            _marker: core::marker::PhantomData,\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}