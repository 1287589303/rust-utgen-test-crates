{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::c_zero_or_one",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1309:5:1322:6",
  "doc": "/// Compile the given expression such that it may be matched zero or one\n/// times.\n///\n/// When `greedy` is true, then the preference is for the expression to\n/// match as much as possible. Otherwise, it will match as little as\n/// possible.\n",
  "code": [
    "fn c_zero_or_one(",
    "    &self,",
    "    expr: &Hir,",
    "    greedy: bool,",
    ") -> Result<ThompsonRef, BuildError> {",
    "    let union =",
    "        if greedy { self.add_union() } else { self.add_union_reverse() }?;",
    "    let compiled = self.c(expr)?;",
    "    let empty = self.add_empty()?;",
    "    self.patch(union, compiled.start)?;",
    "    self.patch(union, empty)?;",
    "    self.patch(compiled.end, empty)?;",
    "    Ok(ThompsonRef { start: union, end: empty })",
    "}"
  ],
  "size": {
    "chain": 14,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Err/None",
          "line": 1315,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        8,
        10,
        11,
        65,
        66,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Err/None",
          "line": 1316,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        12,
        13,
        14,
        16,
        18,
        19,
        62,
        63,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        24,
        26,
        27,
        59,
        60,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1318,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        32,
        34,
        35,
        57,
        58,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1318,
          "bound": null
        },
        {
          "cond": "self.patch(union, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1319,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        40,
        42,
        43,
        55,
        56,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1318,
          "bound": null
        },
        {
          "cond": "self.patch(union, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1319,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1320,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        53,
        54,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "true",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1318,
          "bound": null
        },
        {
          "cond": "self.patch(union, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1319,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1320,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: empty })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Err/None",
          "line": 1315,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        65,
        66,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Err/None",
          "line": 1316,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        16,
        18,
        19,
        62,
        63,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1317,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        24,
        26,
        27,
        59,
        60,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1318,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        32,
        34,
        35,
        57,
        58,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1318,
          "bound": null
        },
        {
          "cond": "self.patch(union, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1319,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        40,
        42,
        43,
        55,
        56,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1318,
          "bound": null
        },
        {
          "cond": "self.patch(union, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1319,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 1320,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        53,
        54,
        61,
        64,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "greedy",
          "norm": null,
          "value": "false",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "if greedy { self.add_union() } else { self.add_union_reverse() }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1315,
          "bound": null
        },
        {
          "cond": "self.c(expr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1316,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.patch(union, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1318,
          "bound": null
        },
        {
          "cond": "self.patch(union, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1319,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1320,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: union, end: empty })",
      "path": [
        0,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        17,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        68
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}