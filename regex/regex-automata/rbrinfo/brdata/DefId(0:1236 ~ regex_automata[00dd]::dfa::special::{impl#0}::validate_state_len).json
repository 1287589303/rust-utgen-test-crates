{
  "name": "regex_automata::dfa::special::{impl#0}::validate_state_len",
  "mod_info": {
    "name": "dfa::special",
    "loc": "regex-automata/src/dfa/mod.rs:358:1:358:13"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/special.rs:333:5:346:6",
  "doc": "/// Validate that the special state information is compatible with the\n/// given state len.\n",
  "code": [
    "pub(crate) fn validate_state_len(",
    "    &self,",
    "    len: usize,",
    "    stride2: usize,",
    ") -> Result<(), DeserializeError> {",
    "    // We assume that 'validate' has already passed, so we know that 'max'",
    "    // is truly the max. So all we need to check is that the max state ID",
    "    // is less than the state ID len. The max legal value here is len-1,",
    "    // which occurs when there are no non-special states.",
    "    if (self.max.as_usize() >> stride2) >= len {",
    "        err!(\"max should not be greater than or equal to state length\");",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(self.max.as_usize() >> stride2) >= len",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": "(self.max.as_usize() >> stride2) == len"
        }
      ],
      "ret": "Err(DeserializeError::generic($msg))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(self.max.as_usize() >> stride2) >= len",
          "norm": null,
          "value": "false",
          "line": 342,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}