{
  "name": "regex_automata::dfa::dense::{impl#14}::minimal",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:3432:5:3442:6",
  "doc": "/// Create a minimal transition table with just two states: a dead state\n/// and a quit state. The alphabet length and stride of the transition\n/// table is determined by the given set of equivalence classes.\n",
  "code": [
    "fn minimal(classes: ByteClasses) -> TransitionTable<Vec<u32>> {",
    "    let mut tt = TransitionTable {",
    "        table: vec![],",
    "        classes,",
    "        stride2: classes.stride2(),",
    "    };",
    "    // Two states, regardless of alphabet size, can always fit into u32.",
    "    tt.add_empty_state().unwrap(); // dead state",
    "    tt.add_empty_state().unwrap(); // quit state",
    "    tt",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "tt",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}