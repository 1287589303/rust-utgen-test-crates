{
  "name": "regex_automata::nfa::thompson::compiler::{impl#3}::build_many_from_hir",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:877:5:882:6",
  "doc": "/// Compile the given high level intermediate representations of regular\n/// expressions into a single NFA.\n///\n/// When matches are returned, the pattern ID corresponds to the index of\n/// the pattern in the slice given.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, pikevm::PikeVM}, Match};\n/// use regex_syntax::hir::{Hir, Class, ClassBytes, ClassBytesRange};\n///\n/// let hirs = &[\n///     Hir::class(Class::Bytes(ClassBytes::new(vec![\n///         ClassBytesRange::new(b'\\t', b'\\r'),\n///         ClassBytesRange::new(b' ', b' '),\n///     ]))),\n///     Hir::class(Class::Bytes(ClassBytes::new(vec![\n///         ClassBytesRange::new(b'0', b'9'),\n///         ClassBytesRange::new(b'A', b'Z'),\n///         ClassBytesRange::new(b'_', b'_'),\n///         ClassBytesRange::new(b'a', b'z'),\n///     ]))),\n/// ];\n///\n/// let config = NFA::config().nfa_size_limit(Some(1_000));\n/// let nfa = NFA::compiler().configure(config).build_many_from_hir(hirs)?;\n///\n/// let re = PikeVM::new_from_nfa(nfa)?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n/// let expected = Some(Match::must(1, 1..2));\n/// re.captures(&mut cache, \"!A! !A!\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_many_from_hir<H: Borrow<Hir>>(",
    "    &self,",
    "    exprs: &[H],",
    ") -> Result<NFA, BuildError> {",
    "    self.compile(exprs)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}