{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_capture_end",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:1058:5:1071:6",
  "doc": "/// Add a \"end capture\" NFA state.\n///\n/// A \"end capture\" NFA state corresponds to a state with exactly one\n/// outgoing unconditional epsilon transition to another state. Unlike\n/// \"empty\" states, a \"end capture\" state also carries with it an\n/// instruction for saving the current position of input to a particular\n/// location in memory. NFA simulations, like the Pike VM, may use this\n/// information to report the match locations of capturing groups in a\n///\n/// Callers may provide a \"dummy\" state ID (typically [`StateID::ZERO`]),\n/// and then change it later with [`patch`](Builder::patch).\n///\n/// Note that unlike `start_pattern`/`finish_pattern`, capturing start and\n/// end states may be interleaved. Indeed, it is typical for many \"start\n/// capture\" NFA states to appear before the first \"end capture\" state.\n///\n/// # Errors\n///\n/// This returns an error if the state identifier space is exhausted, or if\n/// the configured heap size limit has been exceeded or if the given\n/// capture index overflows `usize`.\n///\n/// While the above are the only conditions in which this routine can\n/// currently return an error, it is possible to call this method with an\n/// inputs that results in the final `build()` step failing to produce an\n/// NFA. For example, if one adds two distinct capturing groups with the\n/// same name, then that will result in `build()` failing with an error.\n///\n/// See the [`GroupInfo`](crate::util::captures::GroupInfo) type for\n/// more information on what qualifies as valid capturing groups.\n",
  "code": [
    "pub fn add_capture_end(",
    "    &mut self,",
    "    next: StateID,",
    "    group_index: u32,",
    ") -> Result<StateID, BuildError> {",
    "    let pid = self.current_pattern_id();",
    "    let group_index = match SmallIndex::try_from(group_index) {",
    "        Err(_) => {",
    "            return Err(BuildError::invalid_capture_index(group_index))",
    "        }",
    "        Ok(group_index) => group_index,",
    "    };",
    "    self.add(State::CaptureEnd { pattern_id: pid, group_index, next })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "SmallIndex::try_from(group_index) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 1064,
          "bound": null
        },
        {
          "cond": "SmallIndex::try_from(group_index) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 1064,
          "bound": null
        }
      ],
      "ret": "Err(BuildError::invalid_capture_index(group_index))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        8,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "SmallIndex::try_from(group_index) matches Ok(group_index)",
          "norm": null,
          "value": "true",
          "line": 1064,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}