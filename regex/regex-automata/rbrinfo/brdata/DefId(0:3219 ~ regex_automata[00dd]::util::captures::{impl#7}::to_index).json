{
  "name": "regex_automata::util::captures::{impl#7}::to_index",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1682:5:1685:6",
  "doc": "/// Return the capture group index corresponding to the given name in the\n/// given pattern. If no such capture group name exists in the given\n/// pattern, then this returns `None`.\n///\n/// If the given pattern ID is invalid, then this returns `None`.\n///\n/// This also returns `None` for all inputs if these captures are empty\n/// (e.g., built from an empty [`GroupInfo`]). To check whether captures\n/// are present for a specific pattern, use [`GroupInfo::group_len`].\n///\n/// # Example\n///\n/// This example shows how to find the capture index for the given pattern\n/// and group name.\n///\n/// Remember that capture indices are relative to the pattern, such that\n/// the same capture index value may refer to different capturing groups\n/// for distinct patterns.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let (pid0, pid1) = (PatternID::must(0), PatternID::must(1));\n///\n/// let nfa = NFA::new_many(&[\n///     r\"a(?P<quux>\\w+)z(?P<foo>\\s+)\",\n///     r\"a(?P<foo>\\d+)z\",\n/// ])?;\n/// let groups = nfa.group_info();\n/// assert_eq!(Some(2), groups.to_index(pid0, \"foo\"));\n/// // Recall that capture index 0 is always unnamed and refers to the\n/// // entire pattern. So the first capturing group present in the pattern\n/// // itself always starts at index 1.\n/// assert_eq!(Some(1), groups.to_index(pid1, \"foo\"));\n///\n/// // And if a name does not exist for a particular pattern, None is\n/// // returned.\n/// assert!(groups.to_index(pid0, \"quux\").is_some());\n/// assert!(groups.to_index(pid1, \"quux\").is_none());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {",
    "    let indices = self.0.name_to_index.get(pid.as_usize())?;",
    "    indices.get(name).cloned().map(|i| i.as_usize())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.0.name_to_index.get(pid.as_usize())?",
          "norm": null,
          "value": "Err/None",
          "line": 1683,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.0.name_to_index.get(pid.as_usize())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1683,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}