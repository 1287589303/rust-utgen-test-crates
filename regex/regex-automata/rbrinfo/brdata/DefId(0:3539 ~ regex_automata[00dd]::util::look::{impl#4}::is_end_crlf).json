{
  "name": "regex_automata::util::look::{impl#4}::is_end_crlf",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:970:5:975:6",
  "doc": "/// Returns true when [`Look::EndCRLF`] is satisfied `at` the given\n/// position in `haystack`.\n///\n/// # Panics\n///\n/// This may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n",
  "code": [
    "pub fn is_end_crlf(&self, haystack: &[u8], at: usize) -> bool {",
    "    self.is_end(haystack, at)",
    "        || haystack[at] == b'\\r'",
    "        || (haystack[at] == b'\\n'",
    "            && (at == 0 || haystack[at - 1] != b'\\r'))",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_end(haystack, at)",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        }
      ],
      "ret": "self.is_end(haystack, at)\n            || haystack[at] == b'\\r'\n            || (haystack[at] == b'\\n'\n                && (at == 0 || haystack[at - 1] != b'\\r'))",
      "path": [
        0,
        1,
        2,
        6,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_end(haystack, at)",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "false",
          "line": 972,
          "bound": null
        }
      ],
      "ret": "self.is_end(haystack, at)\n            || haystack[at] == b'\\r'\n            || (haystack[at] == b'\\n'\n                && (at == 0 || haystack[at - 1] != b'\\r'))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_end(haystack, at)",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\n'",
          "norm": "b'\\n' == haystack[at]",
          "value": "false",
          "line": 973,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "false",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "(at == 0 || haystack[at - 1] != b'\\r')",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        11,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.is_end(haystack, at)",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\n'",
          "norm": "b'\\n' == haystack[at]",
          "value": "false",
          "line": 973,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "haystack[at - 1] != b'\\r'",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.is_end(haystack, at)",
          "norm": null,
          "value": "false",
          "line": 971,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "true",
          "line": 972,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\n'",
          "norm": "b'\\n' == haystack[at]",
          "value": "true",
          "line": 973,
          "bound": null
        }
      ],
      "ret": "(haystack[at] == b'\\n'\n                && (at == 0 || haystack[at - 1] != b'\\r'))",
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        10,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}