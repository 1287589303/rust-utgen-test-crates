{
  "name": "regex_automata::util::search::{impl#0}::set_span",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:424:5:434:6",
  "doc": "/// Set the span for this search configuration.\n///\n/// This is like the [`Input::span`] method, except this mutates the\n/// span in place.\n///\n/// This routine is generic over how a span is provided. While\n/// a [`Span`] may be given directly, one may also provide a\n/// `std::ops::Range<usize>`.\n///\n/// # Panics\n///\n/// This panics if the given span does not correspond to valid bounds in\n/// the haystack or the termination of a search.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let mut input = Input::new(\"foobar\");\n/// assert_eq!(0..6, input.get_range());\n/// input.set_span(2..4);\n/// assert_eq!(2..4, input.get_range());\n/// ```\n",
  "code": [
    "pub fn set_span<S: Into<Span>>(&mut self, span: S) {",
    "    let span = span.into();",
    "    assert!(",
    "        span.end <= self.haystack.len()",
    "            && span.start <= span.end.wrapping_add(1),",
    "        \"invalid span {:?} for haystack of length {}\",",
    "        span,",
    "        self.haystack.len(),",
    "    );",
    "    self.span = span;",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "span.end <= self.haystack.len()",
          "norm": "self.haystack.len() >= span.end",
          "value": "true",
          "line": 427,
          "bound": "span.end == self.haystack.len()"
        },
        {
          "cond": "span.start <= span.end.wrapping_add(1)",
          "norm": "span.end.wrapping_add(1) >= span.start",
          "value": "true",
          "line": 428,
          "bound": "span.start == span.end.wrapping_add(1)"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "span.end <= self.haystack.len()",
          "norm": "self.haystack.len() >= span.end",
          "value": "true",
          "line": 427,
          "bound": "span.end == self.haystack.len()"
        },
        {
          "cond": "span.start <= span.end.wrapping_add(1)",
          "norm": "span.end.wrapping_add(1) >= span.start",
          "value": "false",
          "line": 428,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        10,
        11,
        12,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "span.end <= self.haystack.len()",
          "norm": "self.haystack.len() >= span.end",
          "value": "false",
          "line": 427,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}