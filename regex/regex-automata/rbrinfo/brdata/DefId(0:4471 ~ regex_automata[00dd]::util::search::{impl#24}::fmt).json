{
  "name": "regex_automata::util::search::{impl#24}::fmt",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1901:5:1932:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
    "    match *self.kind() {",
    "        MatchErrorKind::Quit { byte, offset } => write!(",
    "            f,",
    "            \"quit search after observing byte {:?} at offset {}\",",
    "            DebugByte(byte),",
    "            offset,",
    "        ),",
    "        MatchErrorKind::GaveUp { offset } => {",
    "            write!(f, \"gave up searching at offset {}\", offset)",
    "        }",
    "        MatchErrorKind::HaystackTooLong { len } => {",
    "            write!(f, \"haystack of length {} is too long\", len)",
    "        }",
    "        MatchErrorKind::UnsupportedAnchored { mode: Anchored::Yes } => {",
    "            write!(f, \"anchored searches are not supported or enabled\")",
    "        }",
    "        MatchErrorKind::UnsupportedAnchored { mode: Anchored::No } => {",
    "            write!(f, \"unanchored searches are not supported or enabled\")",
    "        }",
    "        MatchErrorKind::UnsupportedAnchored {",
    "            mode: Anchored::Pattern(pid),",
    "        } => {",
    "            write!(",
    "                f,",
    "                \"anchored searches for a specific pattern ({}) are \\",
    "                 not supported or enabled\",",
    "                pid.as_usize(),",
    "            )",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self.kind() matches MatchErrorKind::UnsupportedAnchored {\n                mode: Anchored::Pattern(pid),\n            } or MatchErrorKind::UnsupportedAnchored { mode: Anchored::No } or MatchErrorKind::UnsupportedAnchored { mode: Anchored::Yes }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::HaystackTooLong { len }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        9,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self.kind() matches MatchErrorKind::UnsupportedAnchored {\n                mode: Anchored::Pattern(pid),\n            } or MatchErrorKind::UnsupportedAnchored { mode: Anchored::No } or MatchErrorKind::UnsupportedAnchored { mode: Anchored::Yes }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::GaveUp { offset }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::UnsupportedAnchored { mode: Anchored::Yes }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        23,
        24,
        25,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self.kind() matches MatchErrorKind::UnsupportedAnchored {\n                mode: Anchored::Pattern(pid),\n            } or MatchErrorKind::UnsupportedAnchored { mode: Anchored::No } or MatchErrorKind::UnsupportedAnchored { mode: Anchored::Yes }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::Quit { byte, offset }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::UnsupportedAnchored { mode: Anchored::No }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        8,
        26,
        27,
        28,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self.kind() matches MatchErrorKind::HaystackTooLong { len }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::HaystackTooLong { len }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        21,
        22,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self.kind() matches MatchErrorKind::GaveUp { offset }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::GaveUp { offset }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        15,
        16,
        17,
        18,
        33
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self.kind() matches MatchErrorKind::Quit { byte, offset }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        },
        {
          "cond": "*self.kind() matches MatchErrorKind::Quit { byte, offset }",
          "norm": null,
          "value": "true",
          "line": 1902,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        10,
        11,
        12,
        13,
        14,
        33
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}