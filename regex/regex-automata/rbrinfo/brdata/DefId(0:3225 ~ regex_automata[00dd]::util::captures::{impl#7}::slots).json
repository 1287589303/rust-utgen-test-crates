{
  "name": "regex_automata::util::captures::{impl#7}::slots",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1869:5:1878:6",
  "doc": "/// Returns the starting and ending slot corresponding to the given\n/// capturing group for the given pattern. The ending slot is always one\n/// more than the starting slot returned.\n///\n/// Note that this is like [`GroupInfo::slot`], except that it also returns\n/// the ending slot value for convenience.\n///\n/// If either the pattern ID or the capture index is invalid, then this\n/// returns None.\n///\n/// # Example\n///\n/// This example shows that the starting slots for the first capturing\n/// group of each pattern are distinct.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new_many(&[\"a\", \"b\"])?;\n/// assert_ne!(\n///     nfa.group_info().slots(PatternID::must(0), 0),\n///     nfa.group_info().slots(PatternID::must(1), 0),\n/// );\n///\n/// // Also, the start and end slot values are never equivalent.\n/// let (start, end) = nfa.group_info().slots(PatternID::ZERO, 0).unwrap();\n/// assert_ne!(start, end);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn slots(",
    "    &self,",
    "    pid: PatternID,",
    "    group_index: usize,",
    ") -> Option<(usize, usize)> {",
    "    // Since 'slot' only even returns valid starting slots, we know that",
    "    // there must also be an end slot and that end slot is always one more",
    "    // than the start slot.",
    "    self.slot(pid, group_index).map(|start| (start, start + 1))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}