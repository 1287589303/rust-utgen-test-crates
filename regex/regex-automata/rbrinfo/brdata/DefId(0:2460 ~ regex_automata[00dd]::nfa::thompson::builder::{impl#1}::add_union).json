{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::add_union",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:713:5:718:6",
  "doc": "/// Add a \"union\" NFA state.\n///\n/// A \"union\" NFA state that contains zero or more unconditional epsilon\n/// transitions to other NFA states. The order of these transitions\n/// reflects a priority order where earlier transitions are preferred over\n/// later transitions.\n///\n/// Callers may provide an empty set of alternates to this method call, and\n/// then later add transitions via `patch`. At final build time, a \"union\"\n/// state with no alternates is converted to a \"fail\" state, and a \"union\"\n/// state with exactly one alternate is treated as if it were an \"empty\"\n/// state.\n///\n/// # Errors\n///\n/// This returns an error if the state identifier space is exhausted, or if\n/// the configured heap size limit has been exceeded.\n",
  "code": [
    "pub fn add_union(",
    "    &mut self,",
    "    alternates: Vec<StateID>,",
    ") -> Result<StateID, BuildError> {",
    "    self.add(State::Union { alternates })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}