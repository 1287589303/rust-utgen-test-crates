{
  "name": "regex_automata::dfa::accel::{impl#2}::write_to",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/accel.rs:308:5:330:6",
  "doc": "/// Writes these accelerators to the given byte buffer using the indicated\n/// endianness. If the given buffer is too small, then an error is\n/// returned. Upon success, the total number of bytes written is returned.\n/// The number of bytes written is guaranteed to be a multiple of 8.\n",
  "code": [
    "pub fn write_to<E: Endian>(",
    "    &self,",
    "    dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    let nwrite = self.write_to_len();",
    "    assert_eq!(",
    "        nwrite % ACCEL_TY_SIZE,",
    "        0,",
    "        \"expected accelerator bytes written to be a multiple of {}\",",
    "        ACCEL_TY_SIZE,",
    "    );",
    "    if dst.len() < nwrite {",
    "        return Err(SerializeError::buffer_too_small(\"accelerators\"));",
    "    }",
    "",
    "    // The number of accelerators can never exceed AccelTy::MAX.",
    "    E::write_u32(AccelTy::try_from(self.len()).unwrap(), dst);",
    "    // The actual accelerators are just raw bytes and thus their endianness",
    "    // is irrelevant. So we can copy them as bytes.",
    "    dst[ACCEL_TY_SIZE..nwrite]",
    "        .copy_from_slice(&self.as_bytes()[ACCEL_TY_SIZE..nwrite]);",
    "    Ok(nwrite)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "true",
          "line": 319,
          "bound": null
        }
      ],
      "ret": "Err(SerializeError::buffer_too_small(\"accelerators\"))",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        9,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": "dst.len() == nwrite"
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        3,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}