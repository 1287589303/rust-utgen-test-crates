{
  "name": "regex_automata::util::wire::read_endianness_check",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:497:1:506:2",
  "doc": "/// Reads the endianness check from the beginning of the given slice and\n/// confirms that the endianness of the serialized object matches the expected\n/// endianness. If the slice is too small or if the endianness check fails,\n/// this returns an error.\n///\n/// Upon success, the total number of bytes read is returned.\n",
  "code": [
    "pub(crate) fn read_endianness_check(",
    "    slice: &[u8],",
    ") -> Result<usize, DeserializeError> {",
    "    let (n, nr) = try_read_u32(slice, \"endianness check\")?;",
    "    assert_eq!(nr, write_endianness_check_len());",
    "    if n != 0xFEFF {",
    "        return Err(DeserializeError::endian_mismatch(0xFEFF, n));",
    "    }",
    "    Ok(nr)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "try_read_u32(slice, \"endianness check\")?",
          "norm": null,
          "value": "Err/None",
          "line": 500,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "try_read_u32(slice, \"endianness check\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 500,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "n != 0xFEFF",
          "norm": "0xFEFF != n",
          "value": "true",
          "line": 502,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::endian_mismatch(0xFEFF, n))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "try_read_u32(slice, \"endianness check\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 500,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "n != 0xFEFF",
          "norm": "0xFEFF != n",
          "value": "false",
          "line": 502,
          "bound": null
        }
      ],
      "ret": "Ok(nr)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "try_read_u32(slice, \"endianness check\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 500,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        10,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}