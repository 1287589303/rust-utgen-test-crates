{
  "name": "regex_automata::util::captures::{impl#7}::slot_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:2067:5:2069:6",
  "doc": "/// Returns the total number of slots in this `GroupInfo` across all\n/// patterns.\n///\n/// The total number of slots is always twice the total number of capturing\n/// groups, including both implicit and explicit groups.\n///\n/// # Example\n///\n/// This example shows the relationship between the number of capturing\n/// groups and slots.\n///\n/// ```\n/// use regex_automata::util::captures::GroupInfo;\n///\n/// // There are 11 total groups here.\n/// let info = GroupInfo::new(vec![\n///     vec![None, Some(\"foo\")],\n///     vec![None],\n///     vec![None, None, None, Some(\"bar\"), None],\n///     vec![None, None, Some(\"foo\")],\n/// ])?;\n/// // 2 slots per group gives us 11*2=22 slots.\n/// assert_eq!(22, info.slot_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn slot_len(&self) -> usize {",
    "    self.0.small_slot_len().as_usize()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}