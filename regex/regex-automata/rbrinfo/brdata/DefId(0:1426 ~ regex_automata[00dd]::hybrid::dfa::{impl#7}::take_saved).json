{
  "name": "regex_automata::hybrid::dfa::{impl#7}::take_saved",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2841:5:2846:6",
  "doc": "/// Replace this state saver with an empty saver, and if this saver is a\n/// saved state (or a request to save a state), return that state's ID.\n///\n/// The idea here is that a request to save a state isn't necessarily\n/// honored because it might not be needed. e.g., Some higher level code\n/// might request a state to be saved on the off chance that the cache gets\n/// cleared when a new state is added at a lower level. But if that new\n/// state is never added, then the cache is never cleared and the state and\n/// its ID remain unchanged.\n",
  "code": [
    "fn take_saved(&mut self) -> Option<LazyStateID> {",
    "    match core::mem::replace(self, StateSaver::None) {",
    "        StateSaver::None => None,",
    "        StateSaver::Saved(id) | StateSaver::ToSave { id, .. } => Some(id),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "core::mem::replace(self, StateSaver::None) matches StateSaver::Saved(id)",
          "norm": null,
          "value": "true",
          "line": 2842,
          "bound": null
        },
        {
          "cond": "core::mem::replace(self, StateSaver::None) matches StateSaver::Saved(id)",
          "norm": null,
          "value": "true",
          "line": 2842,
          "bound": null
        }
      ],
      "ret": "Some(id)",
      "path": [
        0,
        1,
        4,
        8,
        7,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "core::mem::replace(self, StateSaver::None) matches StateSaver::ToSave { id, .. }",
          "norm": null,
          "value": "true",
          "line": 2842,
          "bound": null
        }
      ],
      "ret": "Some(id)",
      "path": [
        0,
        1,
        5,
        7,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "core::mem::replace(self, StateSaver::None) matches StateSaver::None",
          "norm": null,
          "value": "true",
          "line": 2842,
          "bound": null
        },
        {
          "cond": "core::mem::replace(self, StateSaver::None) matches StateSaver::None",
          "norm": null,
          "value": "true",
          "line": 2842,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        6,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}