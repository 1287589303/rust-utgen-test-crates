{
  "name": "regex_automata::dfa::onepass::{impl#6}::start_pattern",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2238:5:2251:6",
  "doc": "/// Returns the anchored start state for matching the given pattern. If\n/// 'starts_for_each_pattern'\n/// was not enabled, then this returns an error. If the given pattern is\n/// not in this DFA, then `Ok(None)` is returned.\n",
  "code": [
    "fn start_pattern(&self, pid: PatternID) -> Result<StateID, MatchError> {",
    "    if !self.config.get_starts_for_each_pattern() {",
    "        return Err(MatchError::unsupported_anchored(Anchored::Pattern(",
    "            pid,",
    "        )));",
    "    }",
    "    // 'starts' always has non-zero length. The first entry is always the",
    "    // anchored starting state for all patterns, and the following entries",
    "    // are optional and correspond to the anchored starting states for",
    "    // patterns at pid+1. Thus, starts.len()-1 corresponds to the total",
    "    // number of patterns that one can explicitly search for. (And it may",
    "    // be zero.)",
    "    Ok(self.starts.get(pid.one_more()).copied().unwrap_or(DEAD))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 2239,
          "bound": null
        }
      ],
      "ret": "Ok(self.starts.get(pid.one_more()).copied().unwrap_or(DEAD))",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.config.get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 2239,
          "bound": null
        }
      ],
      "ret": "Err(MatchError::unsupported_anchored(Anchored::Pattern(\n                pid,\n            )))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}