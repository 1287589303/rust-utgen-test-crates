{
  "name": "regex_automata::dfa::accel::{impl#5}::as_accel_tys",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/accel.rs:496:5:504:6",
  "doc": "/// Returns the accelerator bytes as an array of AccelTys.\n",
  "code": [
    "fn as_accel_tys(&self) -> [AccelTy; 2] {",
    "    assert_eq!(ACCEL_CAP, 8);",
    "    // These unwraps are OK since ACCEL_CAP is set to 8.",
    "    let first =",
    "        AccelTy::from_ne_bytes(self.bytes[0..4].try_into().unwrap());",
    "    let second =",
    "        AccelTy::from_ne_bytes(self.bytes[4..8].try_into().unwrap());",
    "    [first, second]",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "[first, second]",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}