{
  "name": "regex_automata::dfa::accel::{impl#2}::get",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/accel.rs:289:5:297:6",
  "doc": "/// Return the accelerator in this sequence at index `i`. If no such\n/// accelerator exists, then this returns None.\n///\n/// See the docs for `needles` on the significance of the index.\n",
  "code": [
    "fn get(&self, i: usize) -> Option<Accel> {",
    "    if i >= self.len() {",
    "        return None;",
    "    }",
    "    let offset = ACCEL_TY_SIZE + i * ACCEL_CAP;",
    "    let accel = Accel::from_slice(&self.as_bytes()[offset..])",
    "        .expect(\"Accels must contain valid accelerators\");",
    "    Some(accel)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i >= self.len()",
          "norm": null,
          "value": "true",
          "line": 290,
          "bound": "i == self.len()"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i >= self.len()",
          "norm": null,
          "value": "false",
          "line": 290,
          "bound": null
        }
      ],
      "ret": "Some(accel)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}