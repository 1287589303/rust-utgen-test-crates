{
  "name": "regex_automata::dfa::remapper::{impl#0}::new",
  "mod_info": {
    "name": "dfa::remapper",
    "loc": "regex-automata/src/dfa/mod.rs:354:1:354:14"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/remapper.rs:91:5:95:6",
  "doc": "/// Create a new remapper from the given remappable implementation. The\n/// remapper can then be used to swap states. The remappable value given\n/// here must the same one given to `swap` and `remap`.\n",
  "code": [
    "pub(super) fn new(r: &impl Remappable) -> Remapper {",
    "    let idxmap = IndexMapper { stride2: r.stride2() };",
    "    let map = (0..r.state_len()).map(|i| idxmap.to_state_id(i)).collect();",
    "    Remapper { map, idxmap }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Remapper { map, idxmap }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}