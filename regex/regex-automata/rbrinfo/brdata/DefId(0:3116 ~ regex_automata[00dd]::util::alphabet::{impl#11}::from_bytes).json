{
  "name": "regex_automata::util::alphabet::{impl#11}::from_bytes",
  "mod_info": {
    "name": "util::alphabet",
    "loc": "regex-automata/src/util/mod.rs:30:1:30:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/alphabet.rs:808:5:820:6",
  "doc": "/// Deserializes a byte set from the given slice. If the slice is of\n/// incorrect length or is otherwise malformed, then an error is returned.\n/// Upon success, the number of bytes read along with the set are returned.\n/// The number of bytes read is always a multiple of 8.\n",
  "code": [
    "pub(crate) fn from_bytes(",
    "    slice: &[u8],",
    ") -> Result<(ByteSet, usize), DeserializeError> {",
    "    use core::mem::size_of;",
    "",
    "    wire::check_slice_len(slice, 2 * size_of::<u128>(), \"byte set\")?;",
    "    let mut nread = 0;",
    "    let (low, nr) = wire::try_read_u128(slice, \"byte set low bucket\")?;",
    "    nread += nr;",
    "    let (high, nr) = wire::try_read_u128(slice, \"byte set high bucket\")?;",
    "    nread += nr;",
    "    Ok((ByteSet { bits: BitSet([low, high]) }, nread))",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, 2 * size_of::<u128>(), \"byte set\")?",
          "norm": null,
          "value": "Err/None",
          "line": 813,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, 2 * size_of::<u128>(), \"byte set\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 813,
          "bound": null
        },
        {
          "cond": "wire::try_read_u128(slice, \"byte set low bucket\")?",
          "norm": null,
          "value": "Err/None",
          "line": 815,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        13,
        15,
        16,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, 2 * size_of::<u128>(), \"byte set\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 813,
          "bound": null
        },
        {
          "cond": "wire::try_read_u128(slice, \"byte set low bucket\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 815,
          "bound": null
        },
        {
          "cond": "wire::try_read_u128(slice, \"byte set high bucket\")?",
          "norm": null,
          "value": "Err/None",
          "line": 817,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        19,
        21,
        23,
        24,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "wire::check_slice_len(slice, 2 * size_of::<u128>(), \"byte set\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 813,
          "bound": null
        },
        {
          "cond": "wire::try_read_u128(slice, \"byte set low bucket\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 815,
          "bound": null
        },
        {
          "cond": "wire::try_read_u128(slice, \"byte set high bucket\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 817,
          "bound": null
        }
      ],
      "ret": "Ok((ByteSet { bits: BitSet([low, high]) }, nread))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        19,
        22,
        25,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}