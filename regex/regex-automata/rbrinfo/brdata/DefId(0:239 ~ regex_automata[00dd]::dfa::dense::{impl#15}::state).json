{
  "name": "regex_automata::dfa::dense::{impl#15}::state",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:3655:5:3664:6",
  "doc": "/// Return the state for the given ID. If the given ID is not valid, then\n/// this panics.\n",
  "code": [
    "fn state(&self, id: StateID) -> State<'_> {",
    "    assert!(self.is_valid(id));",
    "",
    "    let i = id.as_usize();",
    "    State {",
    "        id,",
    "        stride2: self.stride2,",
    "        transitions: &self.table()[i..i + self.alphabet_len()],",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_valid(id)",
          "norm": null,
          "value": "true",
          "line": 3656,
          "bound": null
        }
      ],
      "ret": "State {\n            id,\n            stride2: self.stride2,\n            transitions: &self.table()[i..i + self.alphabet_len()],\n        }",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_valid(id)",
          "norm": null,
          "value": "false",
          "line": 3656,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}