{
  "name": "regex_automata::meta::strategy::{impl#7}::try_search_half_start",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:1211:5:1242:6",
  "doc": "",
  "code": [
    "fn try_search_half_start(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    ") -> Result<Option<HalfMatch>, RetryError> {",
    "    let mut span = input.get_span();",
    "    let mut min_start = 0;",
    "    loop {",
    "        let litmatch = match self.pre.find(input.haystack(), span) {",
    "            None => return Ok(None),",
    "            Some(span) => span,",
    "        };",
    "        trace!(\"reverse suffix scan found suffix match at {:?}\", litmatch);",
    "        let revinput = input",
    "            .clone()",
    "            .anchored(Anchored::Yes)",
    "            .span(input.start()..litmatch.end);",
    "        match self",
    "            .try_search_half_rev_limited(cache, &revinput, min_start)?",
    "        {",
    "            None => {",
    "                if span.start >= span.end {",
    "                    break;",
    "                }",
    "                span.start = litmatch.start.checked_add(1).unwrap();",
    "            }",
    "            Some(hm) => return Ok(Some(hm)),",
    "        }",
    "        min_start = litmatch.end;",
    "    }",
    "    Ok(None)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pre.find(input.haystack(), span) matches Some(span)",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1228,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        19,
        20,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pre.find(input.haystack(), span) matches Some(span)",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1228,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)?",
          "norm": null,
          "value": "Err/None",
          "line": 1228,
          "bound": null
        }
      ],
      "ret": "Ok(Some(hm))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        23,
        29,
        30,
        31
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.pre.find(input.haystack(), span) matches Some(span)",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1228,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1228,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)? matches None",
          "norm": null,
          "value": "true",
          "line": 1228,
          "bound": null
        },
        {
          "cond": "span.start >= span.end",
          "norm": "span.end <= span.start",
          "value": "true",
          "line": 1232,
          "bound": "span.start == span.end"
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        22,
        24,
        25,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.pre.find(input.haystack(), span) matches Some(span)",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1228,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1228,
          "bound": null
        },
        {
          "cond": "self\n                .try_search_half_rev_limited(cache, &revinput, min_start)? matches None",
          "norm": null,
          "value": "true",
          "line": 1228,
          "bound": null
        },
        {
          "cond": "span.start >= span.end",
          "norm": "span.end <= span.start",
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        },
        {
          "cond": "self.pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        22,
        24,
        26,
        27,
        28,
        2,
        3,
        4,
        5,
        7,
        9,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        },
        {
          "cond": "self.pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1219,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}