{
  "name": "regex_automata::util::search::{impl#18}::next_back",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:1392:5:1403:6",
  "doc": "",
  "code": [
    "fn next_back(&mut self) -> Option<PatternID> {",
    "    while let Some((index, &yes)) = self.it.next_back() {",
    "        if yes {",
    "            // Only valid 'PatternID' values can be inserted into the set",
    "            // and construction of the set panics if the capacity would",
    "            // permit storing invalid pattern IDs. Thus, 'yes' is only true",
    "            // precisely when 'index' corresponds to a valid 'PatternID'.",
    "            return Some(PatternID::new_unchecked(index));",
    "        }",
    "    }",
    "    None",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some((index, &yes)) = self.it.next_back()",
          "norm": null,
          "value": "true",
          "line": 1393,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        9,
        10
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some((index, &yes)) = self.it.next_back()",
          "norm": null,
          "value": "true",
          "line": 1393,
          "bound": null
        },
        {
          "cond": "yes",
          "norm": null,
          "value": "true",
          "line": 1394,
          "bound": null
        }
      ],
      "ret": "Some(PatternID::new_unchecked(index))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some((index, &yes)) = self.it.next_back()",
          "norm": null,
          "value": "true",
          "line": 1393,
          "bound": null
        },
        {
          "cond": "yes",
          "norm": null,
          "value": "false",
          "line": 1394,
          "bound": null
        },
        {
          "cond": "let Some((index, &yes)) = self.it.next_back()",
          "norm": null,
          "value": "true",
          "line": 1393,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        1,
        2,
        3,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}