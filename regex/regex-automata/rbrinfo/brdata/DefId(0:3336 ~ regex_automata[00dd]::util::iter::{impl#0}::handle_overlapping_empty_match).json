{
  "name": "regex_automata::util::iter::{impl#0}::handle_overlapping_empty_match",
  "mod_info": {
    "name": "util::iter",
    "loc": "regex-automata/src/util/mod.rs:36:1:36:14"
  },
  "visible": false,
  "loc": "regex-automata/src/util/iter.rs:669:5:680:6",
  "doc": "/// Handles the special case of an empty match by ensuring that 1) the\n/// iterator always advances and 2) empty matches never overlap with other\n/// matches.\n///\n/// (1) is necessary because we principally make progress by setting the\n/// starting location of the next search to the ending location of the last\n/// match. But if a match is empty, then this results in a search that does\n/// not advance and thus does not terminate.\n///\n/// (2) is not strictly necessary, but makes intuitive sense and matches\n/// the presiding behavior of most general purpose regex engines. The\n/// \"intuitive sense\" here is that we want to report NON-overlapping\n/// matches. So for example, given the regex 'a|(?:)' against the haystack\n/// 'a', without the special handling, you'd get the matches [0, 1) and [1,\n/// 1), where the latter overlaps with the end bounds of the former.\n///\n/// Note that we mark this cold and forcefully prevent inlining because\n/// handling empty matches like this is extremely rare and does require\n/// quite a bit of code, comparatively. Keeping this code out of the main\n/// iterator function keeps it smaller and more amenable to inlining\n/// itself.\n",
  "code": [
    "fn handle_overlapping_empty_match<F>(",
    "    &mut self,",
    "    m: Match,",
    "    mut finder: F,",
    ") -> Result<Option<Match>, MatchError>",
    "where",
    "    F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,",
    "{",
    "    assert!(m.is_empty());",
    "    self.input.set_start(self.input.start().checked_add(1).unwrap());",
    "    finder(&self.input)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "m.is_empty()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "m.is_empty()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}