{
  "name": "regex_automata::dfa::onepass::{impl#3}::config",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/onepass.rs:1309:5:1311:6",
  "doc": "/// Return a default configuration for a DFA.\n///\n/// This is a convenience routine to avoid needing to import the `Config`\n/// type when customizing the construction of a DFA.\n///\n/// # Example\n///\n/// This example shows how to change the match semantics of this DFA from\n/// its default \"leftmost first\" to \"all.\" When using \"all,\" non-greediness\n/// doesn't apply and neither does preference order matching. Instead, the\n/// longest match possible is always returned. (Although, by construction,\n/// it's impossible for a one-pass DFA to have a different answer for\n/// \"preference order\" vs \"longest match.\")\n///\n/// ```\n/// use regex_automata::{dfa::onepass::DFA, Match, MatchKind};\n///\n/// let re = DFA::builder()\n///     .configure(DFA::config().match_kind(MatchKind::All))\n///     .build(r\"(abc)+?\")?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n///\n/// re.captures(&mut cache, \"abcabc\", &mut caps);\n/// // Normally, the non-greedy repetition would give us a 0..3 match.\n/// assert_eq!(Some(Match::must(0, 0..6)), caps.get_match());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn config() -> Config {",
    "    Config::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}