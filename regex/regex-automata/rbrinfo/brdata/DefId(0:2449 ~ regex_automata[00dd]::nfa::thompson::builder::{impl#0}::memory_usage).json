{
  "name": "regex_automata::nfa::thompson::builder::{impl#0}::memory_usage",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:149:5:168:6",
  "doc": "/// Returns the heap memory usage, in bytes, of this state.\n",
  "code": [
    "fn memory_usage(&self) -> usize {",
    "    match *self {",
    "        State::Empty { .. }",
    "        | State::ByteRange { .. }",
    "        | State::Look { .. }",
    "        | State::CaptureStart { .. }",
    "        | State::CaptureEnd { .. }",
    "        | State::Fail",
    "        | State::Match { .. } => 0,",
    "        State::Sparse { ref transitions } => {",
    "            transitions.len() * mem::size_of::<Transition>()",
    "        }",
    "        State::Union { ref alternates } => {",
    "            alternates.len() * mem::size_of::<StateID>()",
    "        }",
    "        State::UnionReverse { ref alternates } => {",
    "            alternates.len() * mem::size_of::<StateID>()",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { .. } or State::Empty { .. } or State::Look { .. } or State::CaptureEnd { .. } or State::Match { .. } or State::Fail or State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { .. } or State::Empty { .. } or State::Look { .. } or State::CaptureEnd { .. } or State::Match { .. } or State::Fail or State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches State::UnionReverse { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "alternates.len() * mem::size_of::<StateID>()",
      "path": [
        0,
        4,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::Union { ref alternates }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "alternates.len() * mem::size_of::<StateID>()",
      "path": [
        0,
        3,
        11,
        12,
        13,
        14,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches State::CaptureEnd { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { .. } or State::Empty { .. } or State::Look { .. } or State::CaptureEnd { .. } or State::Match { .. } or State::Fail or State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { .. } or State::Empty { .. } or State::Look { .. } or State::CaptureEnd { .. } or State::Match { .. } or State::Fail or State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches State::Look { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { .. } or State::Empty { .. } or State::Look { .. } or State::CaptureEnd { .. } or State::Match { .. } or State::Fail or State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self matches State::Sparse { ref transitions }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::Sparse { ref transitions }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "transitions.len() * mem::size_of::<Transition>()",
      "path": [
        0,
        2,
        7,
        8,
        9,
        10,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self matches State::ByteRange { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { .. } or State::Empty { .. } or State::Look { .. } or State::CaptureEnd { .. } or State::Match { .. } or State::Fail or State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self matches State::Empty { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        },
        {
          "cond": "*self matches State::ByteRange { .. } or State::Empty { .. } or State::Look { .. } or State::CaptureEnd { .. } or State::Match { .. } or State::Fail or State::CaptureStart { .. }",
          "norm": null,
          "value": "true",
          "line": 150,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}