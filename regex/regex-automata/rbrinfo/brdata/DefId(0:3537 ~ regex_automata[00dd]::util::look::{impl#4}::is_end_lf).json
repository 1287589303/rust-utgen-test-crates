{
  "name": "regex_automata::util::look::{impl#4}::is_end_lf",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:943:5:945:6",
  "doc": "/// Returns true when [`Look::EndLF`] is satisfied `at` the given position\n/// in `haystack`.\n///\n/// # Panics\n///\n/// This may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n",
  "code": [
    "pub fn is_end_lf(&self, haystack: &[u8], at: usize) -> bool {",
    "    self.is_end(haystack, at) || haystack[at] == self.lineterm.0",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_end(haystack, at)",
          "norm": null,
          "value": "true",
          "line": 944,
          "bound": null
        }
      ],
      "ret": "self.is_end(haystack, at) || haystack[at] == self.lineterm.0",
      "path": [
        0,
        1,
        2,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_end(haystack, at)",
          "norm": null,
          "value": "false",
          "line": 944,
          "bound": null
        }
      ],
      "ret": "haystack[at] == self.lineterm.0",
      "path": [
        0,
        1,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}