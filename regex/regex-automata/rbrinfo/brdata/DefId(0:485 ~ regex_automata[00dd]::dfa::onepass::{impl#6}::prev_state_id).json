{
  "name": "regex_automata::dfa::onepass::{impl#6}::prev_state_id",
  "mod_info": {
    "name": "dfa::onepass",
    "loc": "regex-automata/src/dfa/mod.rs:339:1:339:17"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/onepass.rs:2306:5:2314:6",
  "doc": "/// Returns the state ID prior to the one given. This returns None if the\n/// given ID is the first DFA state.\n",
  "code": [
    "fn prev_state_id(&self, id: StateID) -> Option<StateID> {",
    "    if id == DEAD {",
    "        None",
    "    } else {",
    "        // CORRECTNESS: Since 'id' is not the first state, subtracting 1",
    "        // is always valid.",
    "        Some(StateID::new_unchecked(id.as_usize().checked_sub(1).unwrap()))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "id == DEAD",
          "norm": "DEAD == id",
          "value": "true",
          "line": 2307,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "id == DEAD",
          "norm": "DEAD == id",
          "value": "false",
          "line": 2307,
          "bound": null
        }
      ],
      "ret": "Some(StateID::new_unchecked(id.as_usize().checked_sub(1).unwrap()))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}