{
  "name": "regex_automata::util::prefilter::memmem::{impl#1}::prefix",
  "mod_info": {
    "name": "util::prefilter::memmem",
    "loc": "regex-automata/src/util/prefilter/mod.rs:39:1:39:12"
  },
  "visible": true,
  "loc": "regex-automata/src/util/prefilter/memmem.rs:51:5:65:6",
  "doc": "",
  "code": [
    "fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span> {",
    "    #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]",
    "    {",
    "        unreachable!()",
    "    }",
    "    #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]",
    "    {",
    "        let needle = self.finder.needle();",
    "        if haystack[span].starts_with(needle) {",
    "            Some(Span { end: span.start + needle.len(), ..span })",
    "        } else {",
    "            None",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "haystack[span].starts_with(needle)",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        }
      ],
      "ret": "Some(Span { end: span.start + needle.len(), ..span })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "haystack[span].starts_with(needle)",
          "norm": null,
          "value": "false",
          "line": 59,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}