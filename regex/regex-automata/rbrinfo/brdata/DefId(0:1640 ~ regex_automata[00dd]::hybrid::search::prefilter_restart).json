{
  "name": "regex_automata::hybrid::search::prefilter_restart",
  "mod_info": {
    "name": "hybrid::search",
    "loc": "regex-automata/src/hybrid/mod.rs:144:1:144:12"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/search.rs:787:1:796:2",
  "doc": "/// Re-compute the starting state that a DFA should be in after finding a\n/// prefilter candidate match at the position `at`.\n///\n/// It is always correct to call this, but not always necessary. Namely,\n/// whenever the DFA has a universal start state, the DFA can remain in the\n/// start state that it was in when it ran the prefilter. Why? Because in that\n/// case, there is only one start state.\n///\n/// When does a DFA have a universal start state? In precisely cases where\n/// it has no look-around assertions in its prefix. So for example, `\\bfoo`\n/// does not have a universal start state because the start state depends on\n/// whether the byte immediately before the start position is a word byte or\n/// not. However, `foo\\b` does have a universal start state because the word\n/// boundary does not appear in the pattern's prefix.\n///\n/// So... most cases don't need this, but when a pattern doesn't have a\n/// universal start state, then after a prefilter candidate has been found, the\n/// current state *must* be re-litigated as if computing the start state at the\n/// beginning of the search because it might change. That is, not all start\n/// states are created equal.\n///\n/// Why avoid it? Because while it's not super expensive, it isn't a trivial\n/// operation to compute the start state. It is much better to avoid it and\n/// just state in the current state if you know it to be correct.\n",
  "code": [
    "fn prefilter_restart(",
    "    dfa: &DFA,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    at: usize,",
    ") -> Result<LazyStateID, MatchError> {",
    "    let mut input = input.clone();",
    "    input.set_start(at);",
    "    init_fwd(dfa, cache, &input)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}