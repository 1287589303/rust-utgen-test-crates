{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::c_alt_slice",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1048:5:1073:6",
  "doc": "/// Compile an alternation of the given HIR values.\n///\n/// This is like 'c_alt_iter', but it accepts a slice of HIR values instead\n/// of an iterator of compiled NFA subgraphs. The point of accepting a\n/// slice here is that it opens up some optimization opportunities. For\n/// example, if all of the HIR values are literals, then this routine might\n/// re-shuffle them to make NFA epsilon closures substantially faster.\n",
  "code": [
    "fn c_alt_slice(&self, exprs: &[Hir]) -> Result<ThompsonRef, BuildError> {",
    "    // self.c_alt_iter(exprs.iter().map(|e| self.c(e)))",
    "    let literal_count = exprs",
    "        .iter()",
    "        .filter(|e| {",
    "            matches!(*e.kind(), hir::HirKind::Literal(hir::Literal(_)))",
    "        })",
    "        .count();",
    "    if literal_count <= 1 || literal_count < exprs.len() {",
    "        return self.c_alt_iter(exprs.iter().map(|e| self.c(e)));",
    "    }",
    "",
    "    let mut trie = if self.is_reverse() {",
    "        LiteralTrie::reverse()",
    "    } else {",
    "        LiteralTrie::forward()",
    "    };",
    "    for expr in exprs.iter() {",
    "        let literal = match *expr.kind() {",
    "            hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes,",
    "            _ => unreachable!(),",
    "        };",
    "        trie.add(literal)?;",
    "    }",
    "    trie.compile(&mut self.builder.borrow_mut())",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 2,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "true",
          "line": 1056,
          "bound": "literal_count == 1"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        9,
        10,
        11,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "true",
          "line": 1056,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "true",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "true",
          "line": 1065,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 1068,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "false",
          "line": 1067,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "true",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "true",
          "line": 1065,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "trie.add(literal)?",
          "norm": null,
          "value": "Err/None",
          "line": 1070,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        28,
        29,
        30,
        31,
        33,
        35,
        36,
        43,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "true",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "true",
          "line": 1065,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "trie.add(literal)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1070,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "false",
          "line": 1065,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        28,
        29,
        30,
        31,
        34,
        37,
        19,
        20,
        21,
        23,
        25,
        38,
        39,
        40,
        41,
        42,
        47
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "true",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "false",
          "line": 1065,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        38,
        39,
        40,
        41,
        42,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "false",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "true",
          "line": 1065,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 1068,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "false",
          "line": 1067,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        54,
        55
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "false",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "true",
          "line": 1065,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "trie.add(literal)?",
          "norm": null,
          "value": "Err/None",
          "line": 1070,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        28,
        29,
        30,
        31,
        33,
        35,
        36,
        43,
        44,
        45,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "false",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "true",
          "line": 1065,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches hir::HirKind::Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 1066,
          "bound": null
        },
        {
          "cond": "trie.add(literal)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1070,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "false",
          "line": 1065,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        28,
        29,
        30,
        31,
        34,
        37,
        19,
        20,
        21,
        23,
        25,
        38,
        39,
        40,
        41,
        42,
        47
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "literal_count <= 1",
          "norm": "1 >= literal_count",
          "value": "false",
          "line": 1056,
          "bound": null
        },
        {
          "cond": "literal_count < exprs.len()",
          "norm": "exprs.len() > literal_count",
          "value": "false",
          "line": 1056,
          "bound": "literal_count == exprs.len()"
        },
        {
          "cond": "self.is_reverse()",
          "norm": null,
          "value": "false",
          "line": 1060,
          "bound": null
        },
        {
          "cond": "expr in exprs.iter()",
          "norm": null,
          "value": "false",
          "line": 1065,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        38,
        39,
        40,
        41,
        42,
        47
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}