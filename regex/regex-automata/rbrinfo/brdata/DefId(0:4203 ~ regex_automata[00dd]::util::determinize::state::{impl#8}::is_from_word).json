{
  "name": "regex_automata::util::determinize::state::{impl#8}::is_from_word",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:422:5:424:6",
  "doc": "/// Returns true if and only if this state is marked as having been created\n/// from a transition over a word byte. This is useful for checking whether\n/// a word boundary assertion is true or not, which requires look-behind\n/// (whether the current state came from a word byte or not) and look-ahead\n/// (whether the transition byte is a word byte or not).\n///\n/// Since states with this set are distinct from states that don't have\n/// this set (even if they are otherwise equivalent), callers should not\n/// set this assertion unless the underlying NFA has at least one word\n/// boundary assertion somewhere. Otherwise, a superfluous number of states\n/// may be created.\n",
  "code": [
    "fn is_from_word(&self) -> bool {",
    "    self.0[0] & (1 << 2) > 0",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0[0] & (1 << 2) > 0",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}