{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::never_match",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:318:5:324:6",
  "doc": "/// Returns an NFA that never matches at any position.\n///\n/// This is a convenience routine for creating an NFA with zero patterns.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::nfa::thompson::{NFA, pikevm::PikeVM};\n///\n/// let re = PikeVM::new_from_nfa(NFA::never_match())?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, b\"\", &mut caps);\n/// assert!(!caps.is_match());\n/// re.captures(&mut cache, b\"foo\", &mut caps);\n/// assert!(!caps.is_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn never_match() -> NFA {",
    "    // This always succeeds because it only requires one NFA state, which",
    "    // will never exhaust any (default) limits.",
    "    let mut builder = Builder::new();",
    "    let sid = builder.add_fail().unwrap();",
    "    builder.build(sid, sid).unwrap()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}