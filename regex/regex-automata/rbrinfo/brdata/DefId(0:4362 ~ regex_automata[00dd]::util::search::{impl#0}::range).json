{
  "name": "regex_automata::util::search::{impl#0}::range",
  "mod_info": {
    "name": "util::search",
    "loc": "regex-automata/src/util/mod.rs:53:1:53:23"
  },
  "visible": true,
  "loc": "regex-automata/src/util/search.rs:244:5:247:6",
  "doc": "/// Like `Input::span`, but accepts any range instead.\n///\n/// This routine does not panic if the range given is not a valid range for\n/// this search's haystack. If this search is run with an invalid range,\n/// then the most likely outcome is that the actual search execution will\n/// panic.\n///\n/// The default range is the entire haystack.\n///\n/// Note that [`Input::span`] overrides this method and vice versa.\n///\n/// # Panics\n///\n/// This routine will panic if the given range could not be converted\n/// to a valid [`Range`]. For example, this would panic when given\n/// `0..=usize::MAX` since it cannot be represented using a half-open\n/// interval in terms of `usize`.\n///\n/// This also panics if the given range does not correspond to valid bounds\n/// in the haystack or the termination of a search.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let input = Input::new(\"foobar\");\n/// assert_eq!(0..6, input.get_range());\n///\n/// let input = Input::new(\"foobar\").range(2..=4);\n/// assert_eq!(2..5, input.get_range());\n/// ```\n",
  "code": [
    "pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {",
    "    self.set_range(range);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}