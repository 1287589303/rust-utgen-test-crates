{
  "name": "regex_automata::dfa::dense::{impl#0}::byte_classes",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:508:5:511:6",
  "doc": "/// Whether to attempt to shrink the size of the DFA's alphabet or not.\n///\n/// This option is enabled by default and should never be disabled unless\n/// one is debugging a generated DFA.\n///\n/// When enabled, the DFA will use a map from all possible bytes to their\n/// corresponding equivalence class. Each equivalence class represents a\n/// set of bytes that does not discriminate between a match and a non-match\n/// in the DFA. For example, the pattern `[ab]+` has at least two\n/// equivalence classes: a set containing `a` and `b` and a set containing\n/// every byte except for `a` and `b`. `a` and `b` are in the same\n/// equivalence class because they never discriminate between a match and a\n/// non-match.\n///\n/// The advantage of this map is that the size of the transition table\n/// can be reduced drastically from `#states * 256 * sizeof(StateID)` to\n/// `#states * k * sizeof(StateID)` where `k` is the number of equivalence\n/// classes (rounded up to the nearest power of 2). As a result, total\n/// space usage can decrease substantially. Moreover, since a smaller\n/// alphabet is used, DFA compilation becomes faster as well.\n///\n/// **WARNING:** This is only useful for debugging DFAs. Disabling this\n/// does not yield any speed advantages. Namely, even when this is\n/// disabled, a byte class map is still used while searching. The only\n/// difference is that every byte will be forced into its own distinct\n/// equivalence class. This is useful for debugging the actual generated\n/// transitions because it lets one see the transitions defined on actual\n/// bytes instead of the equivalence classes.\n",
  "code": [
    "pub fn byte_classes(mut self, yes: bool) -> Config {",
    "    self.byte_classes = Some(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}