{
  "name": "regex_automata::hybrid::dfa::{impl#5}::cache_start_group",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2162:5:2186:6",
  "doc": "/// Compute and cache the starting state for the given pattern ID (if\n/// present) and the starting configuration.\n///\n/// This panics if a pattern ID is given and the DFA isn't configured to\n/// build anchored start states for each pattern.\n///\n/// This will never return an unknown lazy state ID.\n///\n/// If caching this state would otherwise result in a cache that has been\n/// cleared too many times, then an error is returned.\n",
  "code": [
    "fn cache_start_group(",
    "    &mut self,",
    "    anchored: Anchored,",
    "    start: Start,",
    ") -> Result<LazyStateID, StartError> {",
    "    let nfa_start_id = match anchored {",
    "        Anchored::No => self.dfa.get_nfa().start_unanchored(),",
    "        Anchored::Yes => self.dfa.get_nfa().start_anchored(),",
    "        Anchored::Pattern(pid) => {",
    "            if !self.dfa.get_config().get_starts_for_each_pattern() {",
    "                return Err(StartError::unsupported_anchored(anchored));",
    "            }",
    "            match self.dfa.get_nfa().start_pattern(pid) {",
    "                None => return Ok(self.as_ref().dead_id()),",
    "                Some(sid) => sid,",
    "            }",
    "        }",
    "    };",
    "",
    "    let id = self",
    "        .cache_start_one(nfa_start_id, start)",
    "        .map_err(StartError::cache)?;",
    "    self.set_start_state(anchored, start, id);",
    "    Ok(id)",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 2171,
          "bound": null
        },
        {
          "cond": "self.dfa.get_nfa().start_pattern(pid) matches Some(sid)",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self\n            .cache_start_one(nfa_start_id, start)\n            .map_err(StartError::cache)?",
          "norm": null,
          "value": "Err/None",
          "line": 2181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        11,
        12,
        13,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        35,
        36
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 2171,
          "bound": null
        },
        {
          "cond": "self.dfa.get_nfa().start_pattern(pid) matches Some(sid)",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self\n            .cache_start_one(nfa_start_id, start)\n            .map_err(StartError::cache)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2181,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        4,
        11,
        12,
        13,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        30,
        33,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "true",
          "line": 2171,
          "bound": null
        },
        {
          "cond": "self.dfa.get_nfa().start_pattern(pid) matches None",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.dfa.get_nfa().start_pattern(pid) matches None",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        }
      ],
      "ret": "Ok(self.as_ref().dead_id())",
      "path": [
        0,
        4,
        11,
        12,
        13,
        16,
        17,
        19,
        21,
        22,
        23,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "anchored matches Anchored::Pattern(pid)",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self.dfa.get_config().get_starts_for_each_pattern()",
          "norm": null,
          "value": "false",
          "line": 2171,
          "bound": null
        }
      ],
      "ret": "Err(StartError::unsupported_anchored(anchored))",
      "path": [
        0,
        4,
        11,
        12,
        14,
        15,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self\n            .cache_start_one(nfa_start_id, start)\n            .map_err(StartError::cache)?",
          "norm": null,
          "value": "Err/None",
          "line": 2181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        8,
        9,
        10,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        35,
        36
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::Yes",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self\n            .cache_start_one(nfa_start_id, start)\n            .map_err(StartError::cache)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2181,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        3,
        8,
        9,
        10,
        24,
        25,
        26,
        27,
        30,
        33,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self\n            .cache_start_one(nfa_start_id, start)\n            .map_err(StartError::cache)?",
          "norm": null,
          "value": "Err/None",
          "line": 2181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5,
        6,
        7,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "anchored matches Anchored::No",
          "norm": null,
          "value": "true",
          "line": 2167,
          "bound": null
        },
        {
          "cond": "self\n            .cache_start_one(nfa_start_id, start)\n            .map_err(StartError::cache)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2181,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        2,
        5,
        6,
        7,
        24,
        25,
        26,
        27,
        30,
        33,
        36
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}