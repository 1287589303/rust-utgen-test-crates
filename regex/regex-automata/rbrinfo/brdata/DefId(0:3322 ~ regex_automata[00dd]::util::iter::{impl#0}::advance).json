{
  "name": "regex_automata::util::iter::{impl#0}::advance",
  "mod_info": {
    "name": "util::iter",
    "loc": "regex-automata/src/util/mod.rs:36:1:36:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/iter.rs:376:5:388:6",
  "doc": "/// Return the next match for an infallible search if one exists, and\n/// advance to the next position.\n///\n/// The search is advanced even in the presence of empty matches by\n/// forbidding empty matches from overlapping with any other match.\n///\n/// This is like `try_advance`, except errors are converted into panics.\n///\n/// # Panics\n///\n/// If the given closure returns an error, then this panics. This is useful\n/// when you know your underlying regex engine has been configured to not\n/// return an error.\n///\n/// # Example\n///\n/// This example shows how to use a `Searcher` to iterate over all matches\n/// when using a regex based on lazy DFAs:\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::regex::Regex,\n///     util::iter::Searcher,\n///     Match, Input,\n/// };\n///\n/// let re = Regex::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")?;\n/// let mut cache = re.create_cache();\n///\n/// let input = Input::new(\"2010-03-14 2016-10-08 2020-10-22\");\n/// let mut it = Searcher::new(input);\n///\n/// let expected = Some(Match::must(0, 0..10));\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 11..21));\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 22..32));\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = None;\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// This example shows the same as above, but with the PikeVM. This example\n/// is useful because it shows how to use this API even when the regex\n/// engine doesn't directly return a `Match`.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::iter::Searcher,\n///     Match, Input,\n/// };\n///\n/// let re = PikeVM::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// let input = Input::new(\"2010-03-14 2016-10-08 2020-10-22\");\n/// let mut it = Searcher::new(input);\n///\n/// let expected = Some(Match::must(0, 0..10));\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// // Note that if we wanted to extract capturing group spans, we could\n/// // do that here with 'caps'.\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 11..21));\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 22..32));\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// assert_eq!(expected, got);\n///\n/// let expected = None;\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn advance<F>(&mut self, finder: F) -> Option<Match>",
    "where",
    "    F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,",
    "{",
    "    match self.try_advance(finder) {",
    "        Ok(m) => m,",
    "        Err(err) => panic!(",
    "            \"unexpected regex find error: {}\\n\\",
    "             to handle find errors, use 'try' or 'search' methods\",",
    "            err,",
    "        ),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.try_advance(finder) matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 380,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        10,
        11,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.try_advance(finder) matches Ok(m)",
          "norm": null,
          "value": "true",
          "line": 380,
          "bound": null
        },
        {
          "cond": "self.try_advance(finder) matches Ok(m)",
          "norm": null,
          "value": "true",
          "line": 380,
          "bound": null
        }
      ],
      "ret": "m",
      "path": [
        0,
        1,
        3,
        5,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}