{
  "name": "regex_automata::hybrid::dfa::{impl#5}::reset_cache",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": false,
  "loc": "regex-automata/src/hybrid/dfa.rs:2424:5:2433:6",
  "doc": "/// Clears _and_ resets the cache. Resetting the cache means that no\n/// states are persisted and the clear count is reset to 0. No heap memory\n/// is released.\n///\n/// Note that the caller may reset a cache with a different DFA than what\n/// it was created from. In which case, the cache can now be used with the\n/// new DFA (and not the old DFA).\n",
  "code": [
    "fn reset_cache(&mut self) {",
    "    self.cache.state_saver = StateSaver::none();",
    "    self.clear_cache();",
    "    // If a new DFA is used, it might have a different number of NFA",
    "    // states, so we need to make sure our sparse sets have the appropriate",
    "    // size.",
    "    self.cache.sparses.resize(self.dfa.get_nfa().states().len());",
    "    self.cache.clear_count = 0;",
    "    self.cache.progress = None;",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}