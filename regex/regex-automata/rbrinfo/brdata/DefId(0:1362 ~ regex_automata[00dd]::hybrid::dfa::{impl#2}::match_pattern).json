{
  "name": "regex_automata::hybrid::dfa::{impl#2}::match_pattern",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:1741:5:1758:6",
  "doc": "/// Returns the pattern ID corresponding to the given match index in the\n/// given state.\n///\n/// See [`DFA::match_len`] for an example of how to use this method\n/// correctly. Note that if you know your lazy DFA is configured with a\n/// single pattern, then this routine is never necessary since it will\n/// always return a pattern ID of `0` for an index of `0` when `id`\n/// corresponds to a match state.\n///\n/// Typically, this routine is used when implementing an overlapping\n/// search, as the example for `DFA::match_len` does.\n///\n/// # Panics\n///\n/// If the state ID is not a match state or if the match index is out\n/// of bounds for the given state, then this routine may either panic\n/// or produce an incorrect result. If the state ID is correct and the\n/// match index is correct, then this routine always produces a valid\n/// `PatternID`.\n",
  "code": [
    "pub fn match_pattern(",
    "    &self,",
    "    cache: &Cache,",
    "    id: LazyStateID,",
    "    match_index: usize,",
    ") -> PatternID {",
    "    // This is an optimization for the very common case of a DFA with a",
    "    // single pattern. This conditional avoids a somewhat more costly path",
    "    // that finds the pattern ID from the corresponding `State`, which",
    "    // requires a bit of slicing/pointer-chasing. This optimization tends",
    "    // to only matter when matches are frequent.",
    "    if self.pattern_len() == 1 {",
    "        return PatternID::ZERO;",
    "    }",
    "    LazyRef::new(self, cache)",
    "        .get_cached_state(id)",
    "        .match_pattern(match_index)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pattern_len() == 1",
          "norm": "1 == self.pattern_len()",
          "value": "false",
          "line": 1752,
          "bound": null
        }
      ],
      "ret": "PatternID::ZERO",
      "path": [
        0,
        1,
        2,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pattern_len() == 1",
          "norm": "1 == self.pattern_len()",
          "value": "true",
          "line": 1752,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}