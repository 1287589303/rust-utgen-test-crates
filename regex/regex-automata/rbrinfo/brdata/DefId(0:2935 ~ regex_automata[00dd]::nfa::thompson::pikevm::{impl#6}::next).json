{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#6}::next",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1810:5:1820:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Match> {",
    "    // Splitting 'self' apart seems necessary to appease borrowck.",
    "    let FindMatches { re, ref mut cache, ref mut caps, ref mut it } =",
    "        *self;",
    "    // 'advance' converts errors into panics, which is OK here because",
    "    // the PikeVM can never return an error.",
    "    it.advance(|input| {",
    "        re.search(cache, input, caps);",
    "        Ok(caps.get_match())",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}