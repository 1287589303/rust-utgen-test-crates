{
  "name": "regex_automata::util::captures::{impl#0}::get_match",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:398:5:400:6",
  "doc": "/// Returns the pattern ID and the span of the match, if one occurred.\n///\n/// This always returns `None` when `Captures` was created with\n/// [`Captures::empty`], even if a match was found.\n///\n/// If this routine returns a non-`None` value, then `is_match` is\n/// guaranteed to return `true` and `pattern` is also guaranteed to return\n/// a non-`None` value.\n///\n/// # Example\n///\n/// This example shows how to get the full match from a search:\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Match};\n///\n/// let re = PikeVM::new_many(&[r\"[a-z]+\", r\"[A-Z]+\"])?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"ABC\", &mut caps);\n/// assert_eq!(Some(Match::must(1, 0..3)), caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn get_match(&self) -> Option<Match> {",
    "    Some(Match::new(self.pattern()?, self.get_group(0)?))",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Err/None",
          "line": 399,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 399,
          "bound": null
        },
        {
          "cond": "self.get_group(0)?",
          "norm": null,
          "value": "Err/None",
          "line": 399,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        13,
        14,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 399,
          "bound": null
        },
        {
          "cond": "self.get_group(0)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 399,
          "bound": null
        }
      ],
      "ret": "Some(Match::new(self.pattern()?, self.get_group(0)?))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        15,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}