{
  "name": "regex_automata::meta::regex::{impl#0}::builder",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:447:5:449:6",
  "doc": "/// Return a builder for configuring the construction of a `Regex`.\n///\n/// This is a convenience routine to avoid needing to import the\n/// [`Builder`] type in common cases.\n///\n/// # Example: change the line terminator\n///\n/// This example shows how to enable multi-line mode by default and change\n/// the line terminator to the NUL byte:\n///\n/// ```\n/// use regex_automata::{meta::Regex, util::syntax, Match};\n///\n/// let re = Regex::builder()\n///     .syntax(syntax::Config::new().multi_line(true))\n///     .configure(Regex::config().line_terminator(b'\\x00'))\n///     .build(r\"^foo$\")?;\n/// let hay = \"\\x00foo\\x00\";\n/// assert_eq!(Some(Match::must(0, 1..4)), re.find(hay));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn builder() -> Builder {",
    "    Builder::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}