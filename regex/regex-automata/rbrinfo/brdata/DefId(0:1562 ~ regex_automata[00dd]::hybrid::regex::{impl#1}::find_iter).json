{
  "name": "regex_automata::hybrid::regex::{impl#1}::find_iter",
  "mod_info": {
    "name": "hybrid::regex",
    "loc": "regex-automata/src/hybrid/mod.rs:143:1:143:15"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/regex.rs:399:5:406:6",
  "doc": "/// Returns an iterator over all non-overlapping leftmost matches in the\n/// given bytes. If no match exists, then the iterator yields no elements.\n///\n/// # Panics\n///\n/// This routine panics if the search could not complete. This can occur\n/// in a number of circumstances:\n///\n/// * The configuration of the lazy DFA may permit it to \"quit\" the search.\n/// For example, setting quit bytes or enabling heuristic support for\n/// Unicode word boundaries. The default configuration does not enable any\n/// option that could result in the lazy DFA quitting.\n/// * The configuration of the lazy DFA may also permit it to \"give up\"\n/// on a search if it makes ineffective use of its transition table\n/// cache. The default configuration does not enable this by default,\n/// although it is typically a good idea to.\n/// * When the provided `Input` configuration is not supported. For\n/// example, by providing an unsupported anchor mode.\n///\n/// When a search panics, callers cannot know whether a match exists or\n/// not.\n///\n/// The above conditions also apply to the iterator returned as well. For\n/// example, if the lazy DFA gives up or quits during a search using this\n/// method, then a panic will occur during iteration.\n///\n/// Use [`Regex::try_search`] with [`util::iter::Searcher`](iter::Searcher)\n/// if you want to handle these error conditions.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{hybrid::regex::Regex, Match};\n///\n/// let re = Regex::new(\"foo[0-9]+\")?;\n/// let mut cache = re.create_cache();\n///\n/// let text = \"foo1 foo12 foo123\";\n/// let matches: Vec<Match> = re.find_iter(&mut cache, text).collect();\n/// assert_eq!(matches, vec![\n///     Match::must(0, 0..4),\n///     Match::must(0, 5..10),\n///     Match::must(0, 11..17),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn find_iter<'r, 'c, 'h, I: Into<Input<'h>>>(",
    "    &'r self,",
    "    cache: &'c mut Cache,",
    "    input: I,",
    ") -> FindMatches<'r, 'c, 'h> {",
    "    let it = iter::Searcher::new(input.into());",
    "    FindMatches { re: self, cache, it }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "FindMatches { re: self, cache, it }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}