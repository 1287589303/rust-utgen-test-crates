{
  "name": "regex_automata::dfa::dense::{impl#0}::dfa_size_limit",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:850:5:853:6",
  "doc": "/// Set a size limit on the total heap used by a DFA.\n///\n/// This size limit is expressed in bytes and is applied during\n/// determinization of an NFA into a DFA. If the DFA's heap usage, and only\n/// the DFA, exceeds this configured limit, then determinization is stopped\n/// and an error is returned.\n///\n/// This limit does not apply to auxiliary storage used during\n/// determinization that isn't part of the generated DFA.\n///\n/// This limit is only applied during determinization. Currently, there is\n/// no way to post-pone this check to after minimization if minimization\n/// was enabled.\n///\n/// The total limit on heap used during determinization is the sum of the\n/// DFA and determinization size limits.\n///\n/// The default is no limit.\n///\n/// # Example\n///\n/// This example shows a DFA that fails to build because of a configured\n/// size limit. This particular example also serves as a cautionary tale\n/// demonstrating just how big DFAs with large Unicode character classes\n/// can get.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{dfa::{dense, Automaton}, Input};\n///\n/// // 6MB isn't enough!\n/// dense::Builder::new()\n///     .configure(dense::Config::new().dfa_size_limit(Some(6_000_000)))\n///     .build(r\"\\w{20}\")\n///     .unwrap_err();\n///\n/// // ... but 7MB probably is!\n/// // (Note that DFA sizes aren't necessarily stable between releases.)\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new().dfa_size_limit(Some(7_000_000)))\n///     .build(r\"\\w{20}\")?;\n/// let haystack = \"A\".repeat(20).into_bytes();\n/// assert!(dfa.try_search_fwd(&Input::new(&haystack))?.is_some());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// While one needs a little more than 6MB to represent `\\w{20}`, it\n/// turns out that you only need a little more than 6KB to represent\n/// `(?-u:\\w{20})`. So only use Unicode if you need it!\n///\n/// As with [`Config::determinize_size_limit`], the size of a DFA is\n/// influenced by other factors, such as what start state configurations\n/// to support. For example, if you only need unanchored searches and not\n/// anchored searches, then configuring the DFA to only support unanchored\n/// searches can reduce its size. By default, DFAs support both unanchored\n/// and anchored searches.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{dfa::{dense, Automaton, StartKind}, Input};\n///\n/// // 3MB isn't enough!\n/// dense::Builder::new()\n///     .configure(dense::Config::new()\n///         .dfa_size_limit(Some(3_000_000))\n///         .start_kind(StartKind::Unanchored)\n///     )\n///     .build(r\"\\w{20}\")\n///     .unwrap_err();\n///\n/// // ... but 4MB probably is!\n/// // (Note that DFA sizes aren't necessarily stable between releases.)\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new()\n///         .dfa_size_limit(Some(4_000_000))\n///         .start_kind(StartKind::Unanchored)\n///     )\n///     .build(r\"\\w{20}\")?;\n/// let haystack = \"A\".repeat(20).into_bytes();\n/// assert!(dfa.try_search_fwd(&Input::new(&haystack))?.is_some());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {",
    "    self.dfa_size_limit = Some(bytes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}