{
  "name": "regex_automata::dfa::regex::{impl#7}::build_many",
  "mod_info": {
    "name": "dfa::regex",
    "loc": "regex-automata/src/dfa/mod.rs:341:1:341:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/regex.rs:730:5:748:6",
  "doc": "/// Build a regex from the given patterns.\n",
  "code": [
    "pub fn build_many<P: AsRef<str>>(",
    "    &self,",
    "    patterns: &[P],",
    ") -> Result<Regex, BuildError> {",
    "    let forward = self.dfa.build_many(patterns)?;",
    "    let reverse = self",
    "        .dfa",
    "        .clone()",
    "        .configure(",
    "            dense::Config::new()",
    "                .prefilter(None)",
    "                .specialize_start_states(false)",
    "                .start_kind(StartKind::Anchored)",
    "                .match_kind(MatchKind::All),",
    "        )",
    "        .thompson(crate::nfa::thompson::Config::new().reverse(true))",
    "        .build_many(patterns)?;",
    "    Ok(self.build_from_dfas(forward, reverse))",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.dfa.build_many(patterns)?",
          "norm": null,
          "value": "Err/None",
          "line": 734,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        37,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.dfa.build_many(patterns)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 734,
          "bound": null
        },
        {
          "cond": "self\n            .dfa\n            .clone()\n            .configure(\n                dense::Config::new()\n                    .prefilter(None)\n                    .specialize_start_states(false)\n                    .start_kind(StartKind::Anchored)\n                    .match_kind(MatchKind::All),\n            )\n            .thompson(crate::nfa::thompson::Config::new().reverse(true))\n            .build_many(patterns)?",
          "norm": null,
          "value": "Err/None",
          "line": 735,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        26,
        34,
        35,
        36,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.dfa.build_many(patterns)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 734,
          "bound": null
        },
        {
          "cond": "self\n            .dfa\n            .clone()\n            .configure(\n                dense::Config::new()\n                    .prefilter(None)\n                    .specialize_start_states(false)\n                    .start_kind(StartKind::Anchored)\n                    .match_kind(MatchKind::All),\n            )\n            .thompson(crate::nfa::thompson::Config::new().reverse(true))\n            .build_many(patterns)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 735,
          "bound": null
        }
      ],
      "ret": "Ok(self.build_from_dfas(forward, reverse))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        40
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}