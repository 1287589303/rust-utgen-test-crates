{
  "name": "regex_automata::nfa::thompson::compiler::{impl#4}::c_byte_class",
  "mod_info": {
    "name": "nfa::thompson::compiler",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:60:1:60:14"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/compiler.rs:1344:5:1358:6",
  "doc": "/// Compile the given byte oriented character class.\n///\n/// This uses \"sparse\" states to represent an alternation between ranges in\n/// this character class. We can use \"sparse\" states instead of stitching\n/// together a \"union\" state because all ranges in a character class have\n/// equal priority *and* are non-overlapping (thus, only one can match, so\n/// there's never a question of priority in the first place). This saves a\n/// fair bit of overhead when traversing an NFA.\n///\n/// This routine compiles an empty character class into a \"fail\" state.\n",
  "code": [
    "fn c_byte_class(",
    "    &self,",
    "    cls: &hir::ClassBytes,",
    ") -> Result<ThompsonRef, BuildError> {",
    "    let end = self.add_empty()?;",
    "    let mut trans = Vec::with_capacity(cls.ranges().len());",
    "    for r in cls.iter() {",
    "        trans.push(Transition {",
    "            start: r.start(),",
    "            end: r.end(),",
    "            next: end,",
    "        });",
    "    }",
    "    Ok(ThompsonRef { start: self.add_sparse(trans)?, end })",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 1348,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1350,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1350,
          "bound": null
        },
        {
          "cond": "self.add_sparse(trans)?",
          "norm": null,
          "value": "Err/None",
          "line": 1357,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        14,
        15,
        16,
        18,
        20,
        24,
        25,
        27,
        29,
        30,
        33,
        34,
        35,
        38
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 1350,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1350,
          "bound": null
        },
        {
          "cond": "self.add_sparse(trans)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1357,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: self.add_sparse(trans)?, end })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        14,
        15,
        16,
        18,
        20,
        24,
        25,
        28,
        31,
        32,
        38
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1350,
          "bound": null
        },
        {
          "cond": "self.add_sparse(trans)?",
          "norm": null,
          "value": "Err/None",
          "line": 1357,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        24,
        25,
        27,
        29,
        30,
        33,
        34,
        35,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 1350,
          "bound": null
        },
        {
          "cond": "self.add_sparse(trans)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1357,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: self.add_sparse(trans)?, end })",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        24,
        25,
        28,
        31,
        32,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}