{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#3}::try_find",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:939:5:977:6",
  "doc": "/// Executes a leftmost forward search and returns a `Match` if one exists.\n///\n/// This routine only includes the overall match span. To get\n/// access to the individual spans of each capturing group, use\n/// [`BoundedBacktracker::try_captures`].\n///\n/// # Errors\n///\n/// This routine only errors if the search could not complete. For this\n/// backtracking regex engine, this only occurs when the haystack length\n/// exceeds [`BoundedBacktracker::max_haystack_len`].\n///\n/// When a search cannot complete, callers cannot know whether a match\n/// exists or not.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::backtrack::BoundedBacktracker,\n///     Match,\n/// };\n///\n/// let re = BoundedBacktracker::new(\"foo[0-9]+\")?;\n/// let mut cache = re.create_cache();\n/// let expected = Match::must(0, 0..8);\n/// assert_eq!(Some(expected), re.try_find(&mut cache, \"foo12345\")?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn try_find<'h, I: Into<Input<'h>>>(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: I,",
    ") -> Result<Option<Match>, MatchError> {",
    "    let input = input.into();",
    "    if self.get_nfa().pattern_len() == 1 {",
    "        let mut slots = [None, None];",
    "        let pid = match self.try_search_slots(cache, &input, &mut slots)? {",
    "            None => return Ok(None),",
    "            Some(pid) => pid,",
    "        };",
    "        let start = match slots[0] {",
    "            None => return Ok(None),",
    "            Some(s) => s.get(),",
    "        };",
    "        let end = match slots[1] {",
    "            None => return Ok(None),",
    "            Some(s) => s.get(),",
    "        };",
    "        return Ok(Some(Match::new(pid, Span { start, end })));",
    "    }",
    "    let ginfo = self.get_nfa().group_info();",
    "    let slots_len = ginfo.implicit_slot_len();",
    "    let mut slots = vec![None; slots_len];",
    "    let pid = match self.try_search_slots(cache, &input, &mut slots)? {",
    "        None => return Ok(None),",
    "        Some(pid) => pid,",
    "    };",
    "    let start = match slots[pid.as_usize() * 2] {",
    "        None => return Ok(None),",
    "        Some(s) => s.get(),",
    "    };",
    "    let end = match slots[pid.as_usize() * 2 + 1] {",
    "        None => return Ok(None),",
    "        Some(s) => s.get(),",
    "    };",
    "    Ok(Some(Match::new(pid, Span { start, end })))",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "false",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        75,
        76,
        77,
        78,
        79,
        80
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "false",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "slots[0] matches Some(s)",
          "norm": null,
          "value": "true",
          "line": 951,
          "bound": null
        },
        {
          "cond": "slots[1] matches Some(s)",
          "norm": null,
          "value": "true",
          "line": 955,
          "bound": null
        }
      ],
      "ret": "Ok(Some(Match::new(pid, Span { start, end })))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        14,
        16,
        17,
        20,
        22,
        23,
        26,
        28,
        29,
        73,
        74,
        78,
        79,
        80
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "false",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "slots[0] matches Some(s)",
          "norm": null,
          "value": "true",
          "line": 951,
          "bound": null
        },
        {
          "cond": "slots[1] matches None",
          "norm": null,
          "value": "true",
          "line": 955,
          "bound": null
        },
        {
          "cond": "slots[1] matches None",
          "norm": null,
          "value": "true",
          "line": 955,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        14,
        16,
        17,
        20,
        22,
        23,
        25,
        27,
        73,
        74,
        78,
        79,
        80
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "false",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "slots[0] matches None",
          "norm": null,
          "value": "true",
          "line": 951,
          "bound": null
        },
        {
          "cond": "slots[0] matches None",
          "norm": null,
          "value": "true",
          "line": 951,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        14,
        16,
        17,
        19,
        21,
        74,
        78,
        79,
        80
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "false",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 947,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        13,
        15,
        76,
        77,
        78,
        79,
        80
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "true",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        68,
        69,
        70,
        71,
        72,
        79,
        80
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "true",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "slots[pid.as_usize() * 2] matches Some(s)",
          "norm": null,
          "value": "true",
          "line": 968,
          "bound": null
        },
        {
          "cond": "pid.as_usize() * 2 + 1",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        }
      ],
      "ret": "Ok(Some(Match::new(pid, Span { start, end })))",
      "path": [
        0,
        1,
        2,
        3,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        45,
        47,
        48,
        49,
        50,
        53,
        55,
        56,
        57,
        58,
        59,
        62,
        64,
        65,
        66,
        80
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "true",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "slots[pid.as_usize() * 2] matches Some(s)",
          "norm": null,
          "value": "true",
          "line": 968,
          "bound": null
        },
        {
          "cond": "pid.as_usize() * 2 + 1",
          "norm": null,
          "value": "false",
          "line": 972,
          "bound": null
        },
        {
          "cond": "slots[pid.as_usize() * 2 + 1] matches None",
          "norm": null,
          "value": "true",
          "line": 972,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        45,
        47,
        48,
        49,
        50,
        53,
        55,
        56,
        57,
        58,
        59,
        61,
        63,
        67,
        71,
        72,
        79,
        80
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "true",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches Some(pid)",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "slots[pid.as_usize() * 2] matches None",
          "norm": null,
          "value": "true",
          "line": 968,
          "bound": null
        },
        {
          "cond": "slots[pid.as_usize() * 2] matches None",
          "norm": null,
          "value": "true",
          "line": 968,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        45,
        47,
        48,
        49,
        50,
        52,
        54,
        67,
        71,
        72,
        79,
        80
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.get_nfa().pattern_len() == 1",
          "norm": "1 == self.get_nfa().pattern_len()",
          "value": "true",
          "line": 945,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        },
        {
          "cond": "self.try_search_slots(cache, &input, &mut slots)? matches None",
          "norm": null,
          "value": "true",
          "line": 964,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        40,
        44,
        46,
        69,
        70,
        71,
        72,
        79,
        80
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}