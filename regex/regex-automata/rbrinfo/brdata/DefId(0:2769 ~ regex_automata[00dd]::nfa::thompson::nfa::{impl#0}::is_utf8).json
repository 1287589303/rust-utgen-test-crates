{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::is_utf8",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:882:5:884:6",
  "doc": "/// Whether UTF-8 mode is enabled for this NFA or not.\n///\n/// When UTF-8 mode is enabled, all matches reported by a regex engine\n/// derived from this NFA are guaranteed to correspond to spans of valid\n/// UTF-8. This includes zero-width matches. For example, the regex engine\n/// must guarantee that the empty regex will not match at the positions\n/// between code units in the UTF-8 encoding of a single codepoint.\n///\n/// See [`Config::utf8`] for more information.\n///\n/// This is enabled by default.\n///\n/// # Example\n///\n/// This example shows how UTF-8 mode can impact the match spans that may\n/// be reported in certain cases.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::{self, pikevm::PikeVM},\n///     Match, Input,\n/// };\n///\n/// let re = PikeVM::new(\"\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// // UTF-8 mode is enabled by default.\n/// let mut input = Input::new(\"â˜ƒ\");\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..0)), caps.get_match());\n///\n/// // Even though an empty regex matches at 1..1, our next match is\n/// // 3..3 because 1..1 and 2..2 split the snowman codepoint (which is\n/// // three bytes long).\n/// input.set_start(1);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 3..3)), caps.get_match());\n///\n/// // But if we disable UTF-8, then we'll get matches at 1..1 and 2..2:\n/// let re = PikeVM::builder()\n///     .thompson(thompson::Config::new().utf8(false))\n///     .build(\"\")?;\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 1..1)), caps.get_match());\n///\n/// input.set_start(2);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 2..2)), caps.get_match());\n///\n/// input.set_start(3);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 3..3)), caps.get_match());\n///\n/// input.set_start(4);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(None, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn is_utf8(&self) -> bool {",
    "    self.0.utf8",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.utf8",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}