{
  "name": "regex_automata::nfa::thompson::builder::{impl#1}::finish_pattern",
  "mod_info": {
    "name": "nfa::thompson::builder",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:58:1:58:13"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/builder.rs:653:5:661:6",
  "doc": "/// Finish the assembly of a pattern in this NFA.\n///\n/// Upon success, this returns the identifier for the new pattern.\n/// Identifiers start at `0` and are incremented by 1 for each new\n/// pattern. This is the same identifier returned by the corresponding\n/// `start_pattern` call.\n///\n/// Note that `start_pattern` and `finish_pattern` pairs cannot be\n/// interleaved or nested. A correct `finish_pattern` call _always_\n/// corresponds to the most recently called `start_pattern` routine.\n///\n/// # Errors\n///\n/// This currently never returns an error, but this is subject to change.\n///\n/// # Panics\n///\n/// If this is called without a corresponding `start_pattern` call, then\n/// this panics.\n",
  "code": [
    "pub fn finish_pattern(",
    "    &mut self,",
    "    start_id: StateID,",
    ") -> Result<PatternID, BuildError> {",
    "    let pid = self.current_pattern_id();",
    "    self.start_pattern[pid] = start_id;",
    "    self.pattern_id = None;",
    "    Ok(pid)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Ok(pid)",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}