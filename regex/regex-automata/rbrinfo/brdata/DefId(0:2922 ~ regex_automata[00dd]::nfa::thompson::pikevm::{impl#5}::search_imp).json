{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#5}::search_imp",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:1224:5:1383:6",
  "doc": "/// The implementation of standard leftmost search.\n///\n/// Capturing group spans are written to `slots`, but only if requested.\n/// `slots` can be any length. Any slot in the NFA that is activated but\n/// which is out of bounds for the given `slots` is ignored.\n",
  "code": [
    "fn search_imp(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    slots: &mut [Option<NonMaxUsize>],",
    ") -> Option<HalfMatch> {",
    "    cache.setup_search(slots.len());",
    "    if input.is_done() {",
    "        return None;",
    "    }",
    "    // Why do we even care about this? Well, in our 'Captures'",
    "    // representation, we use usize::MAX as a sentinel to indicate \"no",
    "    // match.\" This isn't problematic so long as our haystack doesn't have",
    "    // a maximal length. Byte slices are guaranteed by Rust to have a",
    "    // length that fits into isize, and so this assert should always pass.",
    "    // But we put it here to make our assumption explicit.",
    "    assert!(",
    "        input.haystack().len() < core::usize::MAX,",
    "        \"byte slice lengths must be less than usize MAX\",",
    "    );",
    "    instrument!(|c| c.reset(&self.nfa));",
    "",
    "    // Whether we want to visit all match states instead of emulating the",
    "    // 'leftmost' semantics of typical backtracking regex engines.",
    "    let allmatches =",
    "        self.config.get_match_kind().continue_past_first_match();",
    "    let (anchored, start_id) = match self.start_config(input) {",
    "        None => return None,",
    "        Some(config) => config,",
    "    };",
    "",
    "    let pre =",
    "        if anchored { None } else { self.get_config().get_prefilter() };",
    "    let Cache { ref mut stack, ref mut curr, ref mut next } = cache;",
    "    let mut hm = None;",
    "    // Yes, our search doesn't end at input.end(), but includes it. This",
    "    // is necessary because matches are delayed by one byte, just like",
    "    // how the DFA engines work. The delay is used to handle look-behind",
    "    // assertions. In the case of the PikeVM, the delay is implemented",
    "    // by not considering a match to exist until it is visited in",
    "    // 'steps'. Technically, we know a match exists in the previous",
    "    // iteration via 'epsilon_closure'. (It's the same thing in NFA-to-DFA",
    "    // determinization. We don't mark a DFA state as a match state if it",
    "    // contains an NFA match state, but rather, whether the DFA state was",
    "    // generated by a transition from a DFA state that contains an NFA",
    "    // match state.)",
    "    let mut at = input.start();",
    "    while at <= input.end() {",
    "        // If we have no states left to visit, then there are some cases",
    "        // where we know we can quit early or even skip ahead.",
    "        if curr.set.is_empty() {",
    "            // We have a match and we haven't been instructed to continue",
    "            // on even after finding a match, so we can quit.",
    "            if hm.is_some() && !allmatches {",
    "                break;",
    "            }",
    "            // If we're running an anchored search and we've advanced",
    "            // beyond the start position with no other states to try, then",
    "            // we will never observe a match and thus can stop.",
    "            if anchored && at > input.start() {",
    "                break;",
    "            }",
    "            // If there no states left to explore at this position and we",
    "            // know we can't terminate early, then we are effectively at",
    "            // the starting state of the NFA. If we fell through here,",
    "            // we'd end up adding our '(?s-u:.)*?' prefix and it would be",
    "            // the only thing in 'curr'. So we might as well just skip",
    "            // ahead until we find something that we know might advance us",
    "            // forward.",
    "            if let Some(ref pre) = pre {",
    "                let span = Span::from(at..input.end());",
    "                match pre.find(input.haystack(), span) {",
    "                    None => break,",
    "                    Some(ref span) => at = span.start,",
    "                }",
    "            }",
    "        }",
    "        // Instead of using the NFA's unanchored start state, we actually",
    "        // always use its anchored starting state. As a result, when doing",
    "        // an unanchored search, we need to simulate our own '(?s-u:.)*?'",
    "        // prefix, to permit a match to appear anywhere.",
    "        //",
    "        // Now, we don't *have* to do things this way. We could use the",
    "        // NFA's unanchored starting state and do one 'epsilon_closure'",
    "        // call from that starting state before the main loop here. And",
    "        // that is just as correct. However, it turns out to be slower",
    "        // than our approach here because it slightly increases the cost",
    "        // of processing each byte by requiring us to visit more NFA",
    "        // states to deal with the additional NFA states in the unanchored",
    "        // prefix. By simulating it explicitly here, we lower those costs",
    "        // substantially. The cost is itself small, but it adds up for",
    "        // large haystacks.",
    "        //",
    "        // In order to simulate the '(?s-u:.)*?' prefix---which is not",
    "        // greedy---we are careful not to perform an epsilon closure on",
    "        // the start state if we already have a match. Namely, if we",
    "        // did otherwise, we would never reach a terminating condition",
    "        // because there would always be additional states to process.",
    "        // In effect, the exclusion of running 'epsilon_closure' when",
    "        // we have a match corresponds to the \"dead\" states we have in",
    "        // our DFA regex engines. Namely, in a DFA, match states merely",
    "        // instruct the search execution to record the current offset as",
    "        // the most recently seen match. It is the dead state that actually",
    "        // indicates when to stop the search (other than EOF or quit",
    "        // states).",
    "        //",
    "        // However, when 'allmatches' is true, the caller has asked us to",
    "        // leave in every possible match state. This tends not to make a",
    "        // whole lot of sense in unanchored searches, because it means the",
    "        // search really cannot terminate until EOF. And often, in that",
    "        // case, you wind up skipping over a bunch of matches and are left",
    "        // with the \"last\" match. Arguably, it just doesn't make a lot of",
    "        // sense to run a 'leftmost' search (which is what this routine is)",
    "        // with 'allmatches' set to true. But the DFAs support it and this",
    "        // matches their behavior. (Generally, 'allmatches' is useful for",
    "        // overlapping searches or leftmost anchored searches to find the",
    "        // longest possible match by ignoring match priority.)",
    "        //",
    "        // Additionally, when we're running an anchored search, this",
    "        // epsilon closure should only be computed at the beginning of the",
    "        // search. If we re-computed it at every position, we would be",
    "        // simulating an unanchored search when we were tasked to perform",
    "        // an anchored search.",
    "        if (!hm.is_some() || allmatches)",
    "            && (!anchored || at == input.start())",
    "        {",
    "            // Since we are adding to the 'curr' active states and since",
    "            // this is for the start ID, we use a slots slice that is",
    "            // guaranteed to have the right length but where every element",
    "            // is absent. This is exactly what we want, because this",
    "            // epsilon closure is responsible for simulating an unanchored",
    "            // '(?s:.)*?' prefix. It is specifically outside of any",
    "            // capturing groups, and thus, using slots that are always",
    "            // absent is correct.",
    "            //",
    "            // Note though that we can't just use '&mut []' here, since",
    "            // this epsilon closure may traverse through 'Captures' epsilon",
    "            // transitions, and thus must be able to write offsets to the",
    "            // slots given which are later copied to slot values in 'curr'.",
    "            let slots = next.slot_table.all_absent();",
    "            self.epsilon_closure(stack, slots, curr, input, at, start_id);",
    "        }",
    "        if let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
    "        {",
    "            hm = Some(HalfMatch::new(pid, at));",
    "        }",
    "        // Unless the caller asked us to return early, we need to mush on",
    "        // to see if we can extend our match. (But note that 'nexts' will",
    "        // quit right after seeing a match when match_kind==LeftmostFirst,",
    "        // as is consistent with leftmost-first match priority.)",
    "        if input.get_earliest() && hm.is_some() {",
    "            break;",
    "        }",
    "        core::mem::swap(curr, next);",
    "        next.set.clear();",
    "        at += 1;",
    "    }",
    "    instrument!(|c| c.eprint(&self.nfa));",
    "    hm",
    "}"
  ],
  "size": {
    "chain": 775,
    "contra": 504,
    "min_set": 13
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "true",
          "line": 1231,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        37,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 121,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 122,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 123,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 124,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 125,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 126,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 127,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 128,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 129,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 130,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 131,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 132,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 133,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 134,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 135,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 136,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 137,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 138,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 139,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 140,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 141,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 142,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 143,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 144,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 145,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 146,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 147,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 148,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 149,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 150,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 151,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 152,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 153,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 154,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 155,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 156,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 157,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 158,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 159,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 160,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 161,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 162,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 163,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 164,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 165,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 166,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 167,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 168,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 169,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 170,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 171,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 172,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 173,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 174,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        37,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 175,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 176,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 177,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 178,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 179,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 180,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 181,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 182,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 183,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 184,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 185,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 186,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 187,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 188,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 189,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 190,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 191,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 192,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 193,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 194,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 195,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 196,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 197,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 198,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 199,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 200,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 201,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 202,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 203,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 204,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 205,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 206,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 207,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 208,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 209,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 210,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 211,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 212,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 213,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 214,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 215,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 216,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 217,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 218,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 219,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 220,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 221,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 222,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 223,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 224,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 225,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 226,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 227,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 228,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 229,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 230,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 231,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 232,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 233,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 234,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 235,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 236,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 237,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 238,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 239,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 240,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 241,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 242,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 243,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 244,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 245,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 246,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 247,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 248,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 249,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 250,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 251,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 252,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 253,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 254,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 255,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 256,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 257,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 258,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 259,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 260,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 261,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 262,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 263,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 264,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 265,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 266,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 267,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 268,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 269,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 270,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 271,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 272,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 273,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 274,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 275,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 276,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 277,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 278,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 279,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 280,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 281,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 282,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 283,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 284,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 285,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 286,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 287,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 288,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 289,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 290,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 291,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 292,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 293,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 294,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 295,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 296,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 297,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 298,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 299,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 300,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 301,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 302,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 303,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 304,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 305,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 306,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 307,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 308,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 309,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 310,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 311,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 312,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 313,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 314,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 315,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 316,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 317,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 318,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 319,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 320,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 321,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 322,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 323,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 324,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 325,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 326,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 327,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 328,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 329,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 330,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 331,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 332,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 333,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 334,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 335,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 336,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 337,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 338,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 339,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 340,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 341,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 342,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 343,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 344,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 345,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 346,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 347,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 348,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 349,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 350,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 351,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 352,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 353,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 354,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 355,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 356,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 357,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 358,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 359,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 360,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 361,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 362,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 363,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 364,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 365,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 366,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 367,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 368,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 369,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 370,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 371,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 372,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 373,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 374,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 375,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 376,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 377,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 378,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 379,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 380,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 381,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 382,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 383,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 384,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 385,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 386,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 387,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        18,
        22,
        23,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 388,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        37,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 389,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 390,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 391,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 392,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 393,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 394,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 395,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 396,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 397,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 398,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 399,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 400,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 401,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 402,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 403,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 404,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 405,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 406,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 407,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 408,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 409,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 410,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 411,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 412,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 413,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 414,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 415,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 416,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 417,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 418,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 419,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 420,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 421,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 422,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 423,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 424,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 425,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 426,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 427,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 428,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 429,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 430,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 431,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 432,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 433,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 434,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 435,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 436,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 437,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 438,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 439,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 440,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 441,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 442,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 443,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 444,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 445,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 446,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 447,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 448,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 449,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 450,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 451,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 452,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 453,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 454,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 455,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 456,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 457,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 458,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 459,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 460,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 461,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 462,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 463,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 464,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 465,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 466,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 467,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 468,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 469,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 470,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 471,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 472,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 473,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 474,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 475,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 476,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 477,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 478,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 479,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 480,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 481,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 482,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 483,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 484,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 485,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 486,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 487,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 488,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 489,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 490,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 491,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 492,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 493,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 494,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 495,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 496,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 497,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 498,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 499,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 500,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 501,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 502,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 503,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 504,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 505,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 506,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 507,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 508,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 509,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 510,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 511,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 512,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 513,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 514,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 515,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 516,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 517,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 518,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 519,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 520,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 521,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 522,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 523,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 524,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 525,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 526,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 527,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 528,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 529,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 530,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 531,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 532,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 533,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 534,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 535,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 536,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 537,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 538,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 539,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 540,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 541,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 542,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 543,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 544,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 545,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 546,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 547,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 548,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 549,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 550,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 551,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 552,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 553,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 554,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 555,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 556,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 557,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 558,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 559,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 560,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        37,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 561,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 562,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 563,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 564,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 565,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 566,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 567,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 568,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 569,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 570,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 571,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 572,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 573,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 574,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 575,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 576,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 577,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 578,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 579,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 580,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 581,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 582,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 583,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 584,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 585,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 586,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 587,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 588,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 589,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 590,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 591,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 592,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 593,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 594,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 595,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 596,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 597,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 598,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 599,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 600,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 601,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 602,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 603,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 604,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 605,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 606,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 607,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 608,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 609,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 610,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 611,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 612,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 613,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 614,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 615,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 616,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 617,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 618,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 619,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 620,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 621,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 622,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 623,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 624,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 625,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 626,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 627,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 628,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 629,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 630,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 631,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 632,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 633,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 634,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 635,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 636,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 637,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 638,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 639,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 640,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 641,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 642,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 643,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 644,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 645,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "at > input.start()",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": "at == input.start()"
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 646,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 647,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 648,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 649,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 650,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 651,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 652,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 653,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 654,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 655,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 656,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 657,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 658,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 659,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 660,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 661,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 662,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 663,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 664,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 665,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 666,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 667,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 668,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 669,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 670,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 671,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 672,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 673,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 674,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 675,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 676,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 677,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 678,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 679,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 680,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 681,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 682,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 683,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 684,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 685,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 686,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 687,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        40,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 688,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 689,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 690,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 691,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 692,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 693,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 694,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 695,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 696,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 697,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 698,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 699,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 700,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 701,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 702,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 703,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 704,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 705,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 706,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 707,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 708,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 709,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 710,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 711,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 712,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 713,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 714,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 715,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 716,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 717,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 718,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 719,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 720,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 721,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 722,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 723,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 724,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 725,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 726,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 727,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 728,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 729,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches Some(ref span)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        49,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 730,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1277,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1283,
          "bound": null
        },
        {
          "cond": "let Some(ref pre) = pre",
          "norm": null,
          "value": "true",
          "line": 1293,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "pre.find(input.haystack(), span) matches None",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 731,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 732,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 733,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 734,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 735,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 736,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 737,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 738,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 739,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 740,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 741,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 742,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 743,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 744,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 745,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 746,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 747,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 748,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 749,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 750,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 751,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 752,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 753,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 754,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "allmatches",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        54,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 755,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 756,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 757,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 758,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 759,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 760,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 761,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 762,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 763,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 764,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 765,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 766,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "true",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "at == input.start()",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        57,
        58,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 767,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 768,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 769,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        70,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 770,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        75,
        84,
        85
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 771,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "true",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        73,
        74,
        76,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 772,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "true",
          "line": 1271,
          "bound": "at == input.end()"
        },
        {
          "cond": "curr.set.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1274,
          "bound": null
        },
        {
          "cond": "hm.is_some()",
          "norm": null,
          "value": "false",
          "line": 1347,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1348,
          "bound": null
        },
        {
          "cond": "let Some(pid) = self.nexts(stack, curr, next, input, at, slots)",
          "norm": null,
          "value": "true",
          "line": 1366,
          "bound": null
        },
        {
          "cond": "input.get_earliest()",
          "norm": null,
          "value": "false",
          "line": 1374,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        51,
        52,
        53,
        55,
        56,
        60,
        61,
        62,
        65,
        66,
        67,
        68,
        69,
        71,
        72,
        77,
        78,
        79,
        80,
        81,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 773,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches Some(config)",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "anchored",
          "norm": null,
          "value": "false",
          "line": 1256,
          "bound": null
        },
        {
          "cond": "at <= input.end()",
          "norm": null,
          "value": "false",
          "line": 1271,
          "bound": null
        }
      ],
      "ret": "hm",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        82,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 774,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "true",
          "line": 1241,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches None",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        },
        {
          "cond": "self.start_config(input) matches None",
          "norm": null,
          "value": "true",
          "line": 1250,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        15,
        17,
        85
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 775,
      "conds": [
        {
          "cond": "input.is_done()",
          "norm": null,
          "value": "false",
          "line": 1231,
          "bound": null
        },
        {
          "cond": "input.haystack().len() < core::usize::MAX",
          "norm": "core::usize::MAX > input.haystack().len()",
          "value": "false",
          "line": 1241,
          "bound": "input.haystack().len() == core::usize::MAX"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        9,
        10,
        86
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}