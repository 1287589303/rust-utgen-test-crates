{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#2}::builder",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:640:5:642:6",
  "doc": "/// Return a builder for configuring the construction of a\n/// `BoundedBacktracker`.\n///\n/// This is a convenience routine to avoid needing to import the\n/// [`Builder`] type in common cases.\n///\n/// # Example\n///\n/// This example shows how to use the builder to disable UTF-8 mode\n/// everywhere.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     nfa::thompson::{self, backtrack::BoundedBacktracker},\n///     util::syntax,\n///     Match,\n/// };\n///\n/// let re = BoundedBacktracker::builder()\n///     .syntax(syntax::Config::new().utf8(false))\n///     .thompson(thompson::Config::new().utf8(false))\n///     .build(r\"foo(?-u:[^b])ar.*\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// let haystack = b\"\\xFEfoo\\xFFarzz\\xE2\\x98\\xFF\\n\";\n/// let expected = Some(Match::must(0, 1..9));\n/// re.try_captures(&mut cache, haystack, &mut caps)?;\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn builder() -> Builder {",
    "    Builder::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}