{
  "name": "regex_automata::util::iter::{impl#0}::try_advance_half",
  "mod_info": {
    "name": "util::iter",
    "loc": "regex-automata/src/util/mod.rs:36:1:36:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/iter.rs:396:5:416:6",
  "doc": "/// Return the next half match for a fallible search if one exists, and\n/// advance to the next position.\n///\n/// This is like `advance_half`, except it permits callers to handle errors\n/// during iteration.\n",
  "code": [
    "pub fn try_advance_half<F>(",
    "    &mut self,",
    "    mut finder: F,",
    ") -> Result<Option<HalfMatch>, MatchError>",
    "where",
    "    F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,",
    "{",
    "    let mut m = match finder(&self.input)? {",
    "        None => return Ok(None),",
    "        Some(m) => m,",
    "    };",
    "    if Some(m.offset()) == self.last_match_end {",
    "        m = match self.handle_overlapping_empty_half_match(m, finder)? {",
    "            None => return Ok(None),",
    "            Some(m) => m,",
    "        };",
    "    }",
    "    self.input.set_start(m.offset());",
    "    self.last_match_end = Some(m.offset());",
    "    Ok(Some(m))",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 4,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Err/None",
          "line": 403,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        36,
        37,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 403,
          "bound": null
        },
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Err/None",
          "line": 403,
          "bound": null
        },
        {
          "cond": "Some(m.offset()) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 407,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_half_match(m, finder)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        22,
        33,
        34,
        35,
        39,
        40
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 403,
          "bound": null
        },
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Err/None",
          "line": 403,
          "bound": null
        },
        {
          "cond": "Some(m.offset()) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 407,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_half_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_half_match(m, finder)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Ok(Some(m))",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        25,
        27,
        29,
        30,
        31,
        32,
        40
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 403,
          "bound": null
        },
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Err/None",
          "line": 403,
          "bound": null
        },
        {
          "cond": "Some(m.offset()) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 407,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_half_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_half_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_half_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        26,
        34,
        35,
        39,
        40
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 403,
          "bound": null
        },
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Err/None",
          "line": 403,
          "bound": null
        },
        {
          "cond": "Some(m.offset()) == self.last_match_end",
          "norm": null,
          "value": "false",
          "line": 407,
          "bound": null
        }
      ],
      "ret": "Ok(Some(m))",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        28,
        29,
        30,
        31,
        32,
        40
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 403,
          "bound": null
        },
        {
          "cond": "finder(&self.input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 403,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 403,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        9,
        11,
        37,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}