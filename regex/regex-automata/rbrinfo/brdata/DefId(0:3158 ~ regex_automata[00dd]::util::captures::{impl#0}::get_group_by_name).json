{
  "name": "regex_automata::util::captures::{impl#0}::get_group_by_name",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:507:5:510:6",
  "doc": "/// Returns the span of a capturing group match corresponding to the group\n/// name given, only if both the overall pattern matched and the capturing\n/// group participated in that match.\n///\n/// This returns `None` if `name` does not correspond to a valid capturing\n/// group for the pattern that matched.\n///\n/// This always returns `None` when `Captures` was created with\n/// [`Captures::empty`], even if a match was found. This also always\n/// returns `None` for any `index > 0` when `Captures` was created with\n/// [`Captures::matches`].\n///\n/// If this routine returns a non-`None` value, then `is_match` is\n/// guaranteed to return `true`, `pattern` is guaranteed to return a\n/// non-`None` value and `get_match` is guaranteed to return a non-`None`\n/// value.\n///\n/// # Example\n///\n/// This example shows how to get the capturing groups, by name, from a\n/// match:\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Span, Match};\n///\n/// let re = PikeVM::new(r\"^(?P<first>\\pL+)\\s+(?P<last>\\pL+)$\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"Bruce Springsteen\", &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..17)), caps.get_match());\n/// assert_eq!(Some(Span::from(0..5)), caps.get_group_by_name(\"first\"));\n/// assert_eq!(Some(Span::from(6..17)), caps.get_group_by_name(\"last\"));\n/// // Looking for a non-existent capturing group will return None:\n/// assert_eq!(None, caps.get_group_by_name(\"middle\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn get_group_by_name(&self, name: &str) -> Option<Span> {",
    "    let index = self.group_info().to_index(self.pattern()?, name)?;",
    "    self.get_group(index)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Err/None",
          "line": 508,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 508,
          "bound": null
        },
        {
          "cond": "self.group_info().to_index(self.pattern()?, name)?",
          "norm": null,
          "value": "Err/None",
          "line": 508,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        12,
        14,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.pattern()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 508,
          "bound": null
        },
        {
          "cond": "self.group_info().to_index(self.pattern()?, name)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 508,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        13,
        16,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}