{
  "name": "regex_automata::dfa::sparse::{impl#11}::from_bytes_unchecked",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1854:5:1949:6",
  "doc": "",
  "code": [
    "unsafe fn from_bytes_unchecked(",
    "    mut slice: &'a [u8],",
    ") -> Result<(StartTable<&'a [u8]>, usize), DeserializeError> {",
    "    let slice_start = slice.as_ptr().as_usize();",
    "",
    "    let (kind, nr) = StartKind::from_bytes(slice)?;",
    "    slice = &slice[nr..];",
    "",
    "    let (start_map, nr) = StartByteMap::from_bytes(slice)?;",
    "    slice = &slice[nr..];",
    "",
    "    let (stride, nr) =",
    "        wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?;",
    "    slice = &slice[nr..];",
    "    if stride != Start::len() {",
    "        return Err(DeserializeError::generic(",
    "            \"invalid sparse starting table stride\",",
    "        ));",
    "    }",
    "",
    "    let (maybe_pattern_len, nr) =",
    "        wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?;",
    "    slice = &slice[nr..];",
    "    let pattern_len = if maybe_pattern_len.as_u32() == u32::MAX {",
    "        None",
    "    } else {",
    "        Some(maybe_pattern_len)",
    "    };",
    "    if pattern_len.map_or(false, |len| len > PatternID::LIMIT) {",
    "        return Err(DeserializeError::generic(",
    "            \"sparse invalid number of patterns\",",
    "        ));",
    "    }",
    "",
    "    let (universal_unanchored, nr) =",
    "        wire::try_read_u32(slice, \"universal unanchored start\")?;",
    "    slice = &slice[nr..];",
    "    let universal_start_unanchored = if universal_unanchored == u32::MAX {",
    "        None",
    "    } else {",
    "        Some(StateID::try_from(universal_unanchored).map_err(|e| {",
    "            DeserializeError::state_id_error(",
    "                e,",
    "                \"universal unanchored start\",",
    "            )",
    "        })?)",
    "    };",
    "",
    "    let (universal_anchored, nr) =",
    "        wire::try_read_u32(slice, \"universal anchored start\")?;",
    "    slice = &slice[nr..];",
    "    let universal_start_anchored = if universal_anchored == u32::MAX {",
    "        None",
    "    } else {",
    "        Some(StateID::try_from(universal_anchored).map_err(|e| {",
    "            DeserializeError::state_id_error(e, \"universal anchored start\")",
    "        })?)",
    "    };",
    "",
    "    let pattern_table_size = wire::mul(",
    "        stride,",
    "        pattern_len.unwrap_or(0),",
    "        \"sparse invalid pattern length\",",
    "    )?;",
    "    // Our start states always start with a single stride of start states",
    "    // for the entire automaton which permit it to match any pattern. What",
    "    // follows it are an optional set of start states for each pattern.",
    "    let start_state_len = wire::add(",
    "        wire::mul(2, stride, \"start state stride too big\")?,",
    "        pattern_table_size,",
    "        \"sparse invalid 'any' pattern starts size\",",
    "    )?;",
    "    let table_bytes_len = wire::mul(",
    "        start_state_len,",
    "        StateID::SIZE,",
    "        \"sparse pattern table bytes length\",",
    "    )?;",
    "    wire::check_slice_len(",
    "        slice,",
    "        table_bytes_len,",
    "        \"sparse start ID table\",",
    "    )?;",
    "    let table = &slice[..table_bytes_len];",
    "    slice = &slice[table_bytes_len..];",
    "",
    "    let sl = StartTable {",
    "        table,",
    "        kind,",
    "        start_map,",
    "        stride,",
    "        pattern_len,",
    "        universal_start_unanchored,",
    "        universal_start_anchored,",
    "    };",
    "    Ok((sl, slice.as_ptr().as_usize() - slice_start))",
    "}"
  ],
  "size": {
    "chain": 67,
    "contra": 0,
    "min_set": 16
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 1859,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Err/None",
          "line": 1862,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        14,
        16,
        17,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1866,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        22,
        24,
        25,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "true",
          "line": 1868,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"invalid sparse starting table stride\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        28,
        29,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1875,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        34,
        36,
        37,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "true",
          "line": 1882,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"sparse invalid number of patterns\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        44,
        45,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1889,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        50,
        52,
        53,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1903,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        69,
        71,
        72,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1908,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1894,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1903,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        69,
        71,
        72,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1908,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        40,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "true",
          "line": 1882,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"sparse invalid number of patterns\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1889,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        50,
        52,
        53,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1903,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        69,
        71,
        72,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1908,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "true",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        55,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1894,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        61,
        63,
        64,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1903,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        69,
        71,
        72,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "true",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        74,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1908,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        80,
        82,
        83,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1913,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        89,
        91,
        92,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Err/None",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        96,
        98,
        99,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1921,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        103,
        105,
        106,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1926,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        110,
        112,
        113,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        117,
        119,
        120,
        126,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "StartKind::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1859,
          "bound": null
        },
        {
          "cond": "StartByteMap::from_bytes(slice)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1862,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table stride\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1866,
          "bound": null
        },
        {
          "cond": "stride != Start::len()",
          "norm": "Start::len() != stride",
          "value": "false",
          "line": 1868,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32_as_usize(slice, \"sparse start table patterns\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1875,
          "bound": null
        },
        {
          "cond": "maybe_pattern_len.as_u32() == u32::MAX",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "pattern_len.map_or(false, |len| len > PatternID::LIMIT)",
          "norm": null,
          "value": "false",
          "line": 1882,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal unanchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1889,
          "bound": null
        },
        {
          "cond": "universal_unanchored == u32::MAX",
          "norm": "u32::MAX == universal_unanchored",
          "value": "false",
          "line": 1891,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_unanchored).map_err(|e| {\n                DeserializeError::state_id_error(\n                    e,\n                    \"universal unanchored start\",\n                )\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "wire::try_read_u32(slice, \"universal anchored start\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1903,
          "bound": null
        },
        {
          "cond": "universal_anchored == u32::MAX",
          "norm": "u32::MAX == universal_anchored",
          "value": "false",
          "line": 1905,
          "bound": null
        },
        {
          "cond": "StateID::try_from(universal_anchored).map_err(|e| {\n                DeserializeError::state_id_error(e, \"universal anchored start\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"sparse invalid pattern length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1913,
          "bound": null
        },
        {
          "cond": "wire::mul(2, stride, \"start state stride too big\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"sparse invalid 'any' pattern starts size\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"sparse pattern table bytes length\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1926,
          "bound": null
        },
        {
          "cond": "wire::check_slice_len(\n            slice,\n            table_bytes_len,\n            \"sparse start ID table\",\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1931,
          "bound": null
        }
      ],
      "ret": "Ok((sl, slice.as_ptr().as_usize() - slice_start))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        23,
        26,
        27,
        30,
        31,
        32,
        35,
        38,
        39,
        41,
        42,
        43,
        46,
        47,
        48,
        51,
        54,
        56,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        70,
        73,
        75,
        76,
        77,
        78,
        81,
        84,
        85,
        86,
        87,
        90,
        93,
        94,
        97,
        100,
        101,
        104,
        107,
        108,
        111,
        114,
        115,
        118,
        121,
        122,
        123,
        124,
        125,
        137
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}