{
  "name": "regex_automata::dfa::dense::{impl#34}::fmt",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:5121:5:5164:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    match self.kind() {",
    "        BuildErrorKind::NFA(_) => write!(f, \"error building NFA\"),",
    "        BuildErrorKind::Unsupported(ref msg) => {",
    "            write!(f, \"unsupported regex feature for DFAs: {}\", msg)",
    "        }",
    "        BuildErrorKind::TooManyStates => write!(",
    "            f,",
    "            \"number of DFA states exceeds limit of {}\",",
    "            StateID::LIMIT,",
    "        ),",
    "        BuildErrorKind::TooManyStartStates => {",
    "            let stride = Start::len();",
    "            // The start table has `stride` entries for starting states for",
    "            // the entire DFA, and then `stride` entries for each pattern",
    "            // if start states for each pattern are enabled (which is the",
    "            // only way this error can occur). Thus, the total number of",
    "            // patterns that can fit in the table is `stride` less than",
    "            // what we can allocate.",
    "            let max = usize::try_from(core::isize::MAX).unwrap();",
    "            let limit = (max - stride) / stride;",
    "            write!(",
    "                f,",
    "                \"compiling DFA with start states exceeds pattern \\",
    "                 pattern limit of {}\",",
    "                limit,",
    "            )",
    "        }",
    "        BuildErrorKind::TooManyMatchPatternIDs => write!(",
    "            f,",
    "            \"compiling DFA with total patterns in all match states \\",
    "             exceeds limit of {}\",",
    "            PatternID::LIMIT,",
    "        ),",
    "        BuildErrorKind::DFAExceededSizeLimit { limit } => write!(",
    "            f,",
    "            \"DFA exceeded size limit of {:?} during determinization\",",
    "            limit,",
    "        ),",
    "        BuildErrorKind::DeterminizeExceededSizeLimit { limit } => {",
    "            write!(f, \"determinization exceeded size limit of {:?}\", limit)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::DeterminizeExceededSizeLimit { limit }",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        38,
        39,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::DFAExceededSizeLimit { limit }",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::DFAExceededSizeLimit { limit }",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        8,
        34,
        35,
        36,
        37,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyMatchPatternIDs",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyMatchPatternIDs",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        30,
        31,
        32,
        33,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyStartStates",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyStartStates",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyStates",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::TooManyStates",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        17,
        18,
        19,
        20,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::Unsupported(ref msg)",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::Unsupported(ref msg)",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        13,
        14,
        15,
        16,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.kind() matches BuildErrorKind::NFA(_)",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        },
        {
          "cond": "self.kind() matches BuildErrorKind::NFA(_)",
          "norm": null,
          "value": "true",
          "line": 5122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        10,
        11,
        12,
        41
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}