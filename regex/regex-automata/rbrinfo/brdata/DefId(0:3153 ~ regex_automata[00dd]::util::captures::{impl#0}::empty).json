{
  "name": "regex_automata::util::captures::{impl#0}::empty",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:301:5:303:6",
  "doc": "/// Create new storage for only tracking which pattern matched. No offsets\n/// are stored at all.\n///\n/// It is unspecified behavior to use the returned `Captures` value in a\n/// search with a `GroupInfo` other than the one that is provided to this\n/// constructor.\n///\n/// # Example\n///\n/// This example shows that only the pattern that matched can be accessed\n/// from a `Captures` value created via this constructor.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::captures::Captures,\n///     PatternID,\n/// };\n///\n/// let re = PikeVM::new_many(&[r\"[a-z]+\", r\"[A-Z]+\"])?;\n/// let mut cache = re.create_cache();\n/// let mut caps = Captures::empty(re.get_nfa().group_info().clone());\n///\n/// re.captures(&mut cache, \"aABCz\", &mut caps);\n/// assert!(caps.is_match());\n/// assert_eq!(Some(PatternID::must(0)), caps.pattern());\n/// // We didn't ask for any offsets, so they aren't available.\n/// assert_eq!(None, caps.get_match());\n///\n/// re.captures(&mut cache, &\"aABCz\"[1..], &mut caps);\n/// assert!(caps.is_match());\n/// assert_eq!(Some(PatternID::must(1)), caps.pattern());\n/// // We didn't ask for any offsets, so they aren't available.\n/// assert_eq!(None, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn empty(group_info: GroupInfo) -> Captures {",
    "    Captures { group_info, pid: None, slots: vec![] }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Captures { group_info, pid: None, slots: vec![] }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}