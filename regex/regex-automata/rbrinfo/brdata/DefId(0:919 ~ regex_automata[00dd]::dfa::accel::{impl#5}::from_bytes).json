{
  "name": "regex_automata::dfa::accel::{impl#5}::from_bytes",
  "mod_info": {
    "name": "dfa::accel",
    "loc": "regex-automata/src/dfa/mod.rs:346:1:346:22"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/accel.rs:425:5:432:6",
  "doc": "/// Returns a verified accelerator derived from raw bytes.\n///\n/// If the given bytes are invalid, then this returns an error.\n",
  "code": [
    "fn from_bytes(bytes: [u8; 4]) -> Result<Accel, DeserializeError> {",
    "    if usize::from(bytes[0]) >= ACCEL_LEN {",
    "        return Err(DeserializeError::generic(",
    "            \"accelerator bytes cannot have length more than 3\",",
    "        ));",
    "    }",
    "    Ok(Accel::from_bytes_unchecked(bytes))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "usize::from(bytes[0]) >= ACCEL_LEN",
          "norm": "ACCEL_LEN <= usize::from(bytes[0])",
          "value": "true",
          "line": 426,
          "bound": "usize::from(bytes[0]) == ACCEL_LEN"
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"accelerator bytes cannot have length more than 3\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "usize::from(bytes[0]) >= ACCEL_LEN",
          "norm": "ACCEL_LEN <= usize::from(bytes[0])",
          "value": "false",
          "line": 426,
          "bound": null
        }
      ],
      "ret": "Ok(Accel::from_bytes_unchecked(bytes))",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}