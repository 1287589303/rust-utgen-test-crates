{
  "name": "regex_automata::meta::strategy::{impl#0}::new",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:195:5:202:6",
  "doc": "",
  "code": [
    "fn new(pre: P) -> Arc<dyn Strategy> {",
    "    // The only thing we support when we use prefilters directly as a",
    "    // strategy is the start and end of the overall match for a single",
    "    // pattern. In other words, exactly one implicit capturing group. Which",
    "    // is exactly what we use here for a GroupInfo.",
    "    let group_info = GroupInfo::new([[None::<&str>]]).unwrap();",
    "    Arc::new(Pre { pre, group_info })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Arc::new(Pre { pre, group_info })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}