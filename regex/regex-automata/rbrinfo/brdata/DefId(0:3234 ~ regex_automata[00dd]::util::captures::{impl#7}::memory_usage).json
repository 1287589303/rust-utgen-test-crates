{
  "name": "regex_automata::util::captures::{impl#7}::memory_usage",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:2144:5:2152:6",
  "doc": "/// Returns the memory usage, in bytes, of this `GroupInfo`.\n///\n/// This does **not** include the stack size used up by this `GroupInfo`.\n/// To compute that, use `std::mem::size_of::<GroupInfo>()`.\n",
  "code": [
    "pub fn memory_usage(&self) -> usize {",
    "    use core::mem::size_of as s;",
    "",
    "    s::<GroupInfoInner>()",
    "        + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()",
    "        + self.0.name_to_index.len() * s::<CaptureNameMap>()",
    "        + self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()",
    "        + self.0.memory_extra",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "s::<GroupInfoInner>()\n            + self.0.slot_ranges.len() * s::<(SmallIndex, SmallIndex)>()\n            + self.0.name_to_index.len() * s::<CaptureNameMap>()\n            + self.0.index_to_name.len() * s::<Vec<Option<Arc<str>>>>()\n            + self.0.memory_extra",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}