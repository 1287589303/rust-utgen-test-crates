{
  "name": "regex_automata::dfa::sparse::{impl#8}::validate",
  "mod_info": {
    "name": "dfa::sparse",
    "loc": "regex-automata/src/dfa/mod.rs:343:1:343:16"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/sparse.rs:1387:5:1466:6",
  "doc": "/// Validates that every state ID in this transition table is valid.\n///\n/// That is, every state ID can be used to correctly index a state in this\n/// table.\n",
  "code": [
    "fn validate(&self, sp: &Special) -> Result<Seen, DeserializeError> {",
    "    let mut verified = Seen::new();",
    "    // We need to make sure that we decode the correct number of states.",
    "    // Otherwise, an empty set of transitions would validate even if the",
    "    // recorded state length is non-empty.",
    "    let mut len = 0;",
    "    // We can't use the self.states() iterator because it assumes the state",
    "    // encodings are valid. It could panic if they aren't.",
    "    let mut id = DEAD;",
    "    while id.as_usize() < self.sparse().len() {",
    "        // Before we even decode the state, we check that the ID itself",
    "        // is well formed. That is, if it's a special state then it must",
    "        // actually be a quit, dead, accel, match or start state.",
    "        if sp.is_special_state(id) {",
    "            let is_actually_special = sp.is_dead_state(id)",
    "                || sp.is_quit_state(id)",
    "                || sp.is_match_state(id)",
    "                || sp.is_start_state(id)",
    "                || sp.is_accel_state(id);",
    "            if !is_actually_special {",
    "                // This is kind of a cryptic error message...",
    "                return Err(DeserializeError::generic(",
    "                    \"found sparse state tagged as special but \\",
    "                     wasn't actually special\",",
    "                ));",
    "            }",
    "        }",
    "        let state = self.try_state(sp, id)?;",
    "        verified.insert(id);",
    "        // The next ID should be the offset immediately following `state`.",
    "        id = StateID::new(wire::add(",
    "            id.as_usize(),",
    "            state.write_to_len(),",
    "            \"next state ID offset\",",
    "        )?)",
    "        .map_err(|err| {",
    "            DeserializeError::state_id_error(err, \"next state ID offset\")",
    "        })?;",
    "        len += 1;",
    "    }",
    "    // Now that we've checked that all top-level states are correct and",
    "    // importantly, collected a set of valid state IDs, we have all the",
    "    // information we need to check that all transitions are correct too.",
    "    //",
    "    // Note that we can't use `valid_ids` to iterate because it will",
    "    // be empty in no-std no-alloc contexts. (And yes, that means our",
    "    // verification isn't quite as good.) We can use `self.states()`",
    "    // though at least, since we know that all states can at least be",
    "    // decoded and traversed correctly.",
    "    for state in self.states() {",
    "        // Check that all transitions in this state are correct.",
    "        for i in 0..state.ntrans {",
    "            let to = state.next_at(i);",
    "            // For no-alloc, we just check that the state can decode. It is",
    "            // technically possible that the state ID could still point to",
    "            // a non-existent state even if it decodes (fuzzing proved this",
    "            // to be true), but it shouldn't result in any memory unsafety",
    "            // or panics in non-debug mode.",
    "            #[cfg(not(feature = \"alloc\"))]",
    "            {",
    "                let _ = self.try_state(sp, to)?;",
    "            }",
    "            #[cfg(feature = \"alloc\")]",
    "            {",
    "                if !verified.contains(&to) {",
    "                    return Err(DeserializeError::generic(",
    "                        \"found transition that points to a \\",
    "                         non-existent state\",",
    "                    ));",
    "                }",
    "            }",
    "        }",
    "    }",
    "    if len != self.state_len {",
    "        return Err(DeserializeError::generic(",
    "            \"mismatching sparse state length\",",
    "        ));",
    "    }",
    "    Ok(verified)",
    "}"
  ],
  "size": {
    "chain": 72,
    "contra": 46,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Err/None",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        33,
        35,
        36,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        51,
        53,
        54,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "false",
          "line": 1451,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                            \"found transition that points to a \\\n                             non-existent state\",\n                        ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        77,
        78,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "true",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "false",
          "line": 1406,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                        \"found sparse state tagged as special but \\\n                         wasn't actually special\",\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        21,
        24,
        25,
        26,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Err/None",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        33,
        35,
        36,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        51,
        53,
        54,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "false",
          "line": 1451,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                            \"found transition that points to a \\\n                             non-existent state\",\n                        ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        77,
        78,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "true",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "false",
          "line": 1406,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                        \"found sparse state tagged as special but \\\n                         wasn't actually special\",\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        21,
        24,
        25,
        26,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Err/None",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        33,
        35,
        36,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        51,
        53,
        54,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "false",
          "line": 1451,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                            \"found transition that points to a \\\n                             non-existent state\",\n                        ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        77,
        78,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "true",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "false",
          "line": 1406,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                        \"found sparse state tagged as special but \\\n                         wasn't actually special\",\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        17,
        21,
        24,
        25,
        26,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Err/None",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        33,
        35,
        36,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        51,
        53,
        54,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "false",
          "line": 1451,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                            \"found transition that points to a \\\n                             non-existent state\",\n                        ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        77,
        78,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "true",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "false",
          "line": 1406,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                        \"found sparse state tagged as special but \\\n                         wasn't actually special\",\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        24,
        25,
        26,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Err/None",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        33,
        35,
        36,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        51,
        53,
        54,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "false",
          "line": 1451,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                            \"found transition that points to a \\\n                             non-existent state\",\n                        ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        77,
        78,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "true",
          "line": 1406,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "true",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "sp.is_dead_state(id)",
          "norm": null,
          "value": "false",
          "line": 1401,
          "bound": null
        },
        {
          "cond": "sp.is_quit_state(id)",
          "norm": null,
          "value": "false",
          "line": 1402,
          "bound": null
        },
        {
          "cond": "sp.is_match_state(id)",
          "norm": null,
          "value": "false",
          "line": 1403,
          "bound": null
        },
        {
          "cond": "sp.is_start_state(id)",
          "norm": null,
          "value": "false",
          "line": 1404,
          "bound": null
        },
        {
          "cond": "is_actually_special",
          "norm": null,
          "value": "false",
          "line": 1406,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                        \"found sparse state tagged as special but \\\n                         wasn't actually special\",\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        15,
        16,
        18,
        19,
        22,
        23,
        24,
        25,
        26,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Err/None",
          "line": 1414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        33,
        35,
        36,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        51,
        53,
        54,
        84,
        85,
        86,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "false",
          "line": 1451,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                            \"found transition that points to a \\\n                             non-existent state\",\n                        ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        77,
        78,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "true",
          "line": 1396,
          "bound": null
        },
        {
          "cond": "sp.is_special_state(id)",
          "norm": null,
          "value": "false",
          "line": 1400,
          "bound": null
        },
        {
          "cond": "self.try_state(sp, id)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "StateID::new(wire::add(\n                id.as_usize(),\n                state.write_to_len(),\n                \"next state ID offset\",\n            )?)\n            .map_err(|err| {\n                DeserializeError::state_id_error(err, \"next state ID offset\")\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        28,
        29,
        30,
        31,
        34,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        52,
        55,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "true",
          "line": 1451,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        76,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "verified.contains(&to)",
          "norm": null,
          "value": "false",
          "line": 1451,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                            \"found transition that points to a \\\n                             non-existent state\",\n                        ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        72,
        74,
        75,
        77,
        78,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "true",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "i in 0..state.ntrans",
          "norm": null,
          "value": "false",
          "line": 1438,
          "bound": null
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "true",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::generic(\n                \"mismatching sparse state length\",\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        79,
        81,
        87,
        88,
        89
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "id.as_usize() < self.sparse().len()",
          "norm": null,
          "value": "false",
          "line": 1396,
          "bound": "id.as_usize() == self.sparse().len()"
        },
        {
          "cond": "state in self.states()",
          "norm": null,
          "value": "false",
          "line": 1436,
          "bound": null
        },
        {
          "cond": "len != self.state_len",
          "norm": null,
          "value": "false",
          "line": 1460,
          "bound": null
        }
      ],
      "ret": "Ok(verified)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56,
        57,
        58,
        59,
        60,
        61,
        63,
        65,
        80,
        82,
        83,
        89
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}