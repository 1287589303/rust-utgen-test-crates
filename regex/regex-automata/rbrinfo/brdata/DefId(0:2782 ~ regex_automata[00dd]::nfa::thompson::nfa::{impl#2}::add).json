{
  "name": "regex_automata::nfa::thompson::nfa::{impl#2}::add",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": false,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:1355:5:1384:6",
  "doc": "/// Add the given state to this NFA after allocating a fresh identifier for\n/// it.\n///\n/// This panics if too many states are added such that a fresh identifier\n/// could not be created. (Currently, the only caller of this routine is\n/// a `Builder`, and it upholds this invariant.)\n",
  "code": [
    "pub(super) fn add(&mut self, state: State) -> StateID {",
    "    match state {",
    "        State::ByteRange { ref trans } => {",
    "            self.byte_class_set.set_range(trans.start, trans.end);",
    "        }",
    "        State::Sparse(ref sparse) => {",
    "            for trans in sparse.transitions.iter() {",
    "                self.byte_class_set.set_range(trans.start, trans.end);",
    "            }",
    "        }",
    "        State::Dense { .. } => unreachable!(),",
    "        State::Look { look, .. } => {",
    "            self.look_matcher",
    "                .add_to_byteset(look, &mut self.byte_class_set);",
    "            self.look_set_any = self.look_set_any.insert(look);",
    "        }",
    "        State::Capture { .. } => {",
    "            self.has_capture = true;",
    "        }",
    "        State::Union { .. }",
    "        | State::BinaryUnion { .. }",
    "        | State::Fail",
    "        | State::Match { .. } => {}",
    "    }",
    "",
    "    let id = StateID::new(self.states.len()).unwrap();",
    "    self.memory_extra += state.memory_usage();",
    "    self.states.push(state);",
    "    id",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 1,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "state matches State::Match { .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        7,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "state matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        7,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "state matches State::Capture { .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "state matches State::Capture { .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        6,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "state matches State::BinaryUnion { .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        7,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "state matches State::Union { .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        7,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "state matches State::Look { look, .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "state matches State::Look { look, .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        5,
        22,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "state matches State::Dense { .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "state matches State::Dense { .. }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        21,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "state matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "state matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "true",
          "line": 1361,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 1361,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        3,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        20,
        13,
        14,
        15,
        17,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "state matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "state matches State::Sparse(ref sparse)",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "trans in sparse.transitions.iter()",
          "norm": null,
          "value": "false",
          "line": 1361,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        3,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "state matches State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        },
        {
          "cond": "state matches State::ByteRange { ref trans }",
          "norm": null,
          "value": "true",
          "line": 1356,
          "bound": null
        }
      ],
      "ret": "id",
      "path": [
        0,
        2,
        8,
        9,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}