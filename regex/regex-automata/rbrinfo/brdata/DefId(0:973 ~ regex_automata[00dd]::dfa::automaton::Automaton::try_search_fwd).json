{
  "name": "regex_automata::dfa::automaton::Automaton::try_search_fwd",
  "mod_info": {
    "name": "dfa::automaton",
    "loc": "regex-automata/src/dfa/mod.rs:348:1:348:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/automaton.rs:1297:5:1325:6",
  "doc": "/// Executes a forward search and returns the end position of the leftmost\n/// match that is found. If no match exists, then `None` is returned.\n///\n/// In particular, this method continues searching even after it enters\n/// a match state. The search only terminates once it has reached the\n/// end of the input or when it has entered a dead or quit state. Upon\n/// termination, the position of the last byte seen while still in a match\n/// state is returned.\n///\n/// # Errors\n///\n/// This routine errors if the search could not complete. This can occur\n/// in a number of circumstances:\n///\n/// * The configuration of the DFA may permit it to \"quit\" the search.\n/// For example, setting quit bytes or enabling heuristic support for\n/// Unicode word boundaries. The default configuration does not enable any\n/// option that could result in the DFA quitting.\n/// * When the provided `Input` configuration is not supported. For\n/// example, by providing an unsupported anchor mode.\n///\n/// When a search returns an error, callers cannot know whether a match\n/// exists or not.\n///\n/// # Notes for implementors\n///\n/// Implementors of this trait are not required to implement any particular\n/// match semantics (such as leftmost-first), which are instead manifest in\n/// the DFA's transitions. But this search routine should behave as a\n/// general \"leftmost\" search.\n///\n/// In particular, this method must continue searching even after it enters\n/// a match state. The search should only terminate once it has reached\n/// the end of the input or when it has entered a dead or quit state. Upon\n/// termination, the position of the last byte seen while still in a match\n/// state is returned.\n///\n/// Since this trait provides an implementation for this method by default,\n/// it's unlikely that one will need to implement this.\n///\n/// # Example\n///\n/// This example shows how to use this method with a\n/// [`dense::DFA`](crate::dfa::dense::DFA).\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense}, HalfMatch, Input};\n///\n/// let dfa = dense::DFA::new(\"foo[0-9]+\")?;\n/// let expected = Some(HalfMatch::must(0, 8));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(b\"foo12345\"))?);\n///\n/// // Even though a match is found after reading the first byte (`a`),\n/// // the leftmost first match semantics demand that we find the earliest\n/// // match that prefers earlier parts of the pattern over latter parts.\n/// let dfa = dense::DFA::new(\"abc|a\")?;\n/// let expected = Some(HalfMatch::must(0, 3));\n/// assert_eq!(expected, dfa.try_search_fwd(&Input::new(b\"abc\"))?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: specific pattern search\n///\n/// This example shows how to build a multi-DFA that permits searching for\n/// specific patterns.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     dfa::{Automaton, dense},\n///     Anchored, HalfMatch, PatternID, Input,\n/// };\n///\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new().starts_for_each_pattern(true))\n///     .build_many(&[\"[a-z0-9]{6}\", \"[a-z][a-z0-9]{5}\"])?;\n/// let haystack = \"foo123\".as_bytes();\n///\n/// // Since we are using the default leftmost-first match and both\n/// // patterns match at the same starting position, only the first pattern\n/// // will be returned in this case when doing a search for any of the\n/// // patterns.\n/// let expected = Some(HalfMatch::must(0, 6));\n/// let got = dfa.try_search_fwd(&Input::new(haystack))?;\n/// assert_eq!(expected, got);\n///\n/// // But if we want to check whether some other pattern matches, then we\n/// // can provide its pattern ID.\n/// let input = Input::new(haystack)\n///     .anchored(Anchored::Pattern(PatternID::must(1)));\n/// let expected = Some(HalfMatch::must(1, 6));\n/// let got = dfa.try_search_fwd(&input)?;\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: specifying the bounds of a search\n///\n/// This example shows how providing the bounds of a search can produce\n/// different results than simply sub-slicing the haystack.\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense}, HalfMatch, Input};\n///\n/// // N.B. We disable Unicode here so that we use a simple ASCII word\n/// // boundary. Alternatively, we could enable heuristic support for\n/// // Unicode word boundaries.\n/// let dfa = dense::DFA::new(r\"(?-u)\\b[0-9]{3}\\b\")?;\n/// let haystack = \"foo123bar\".as_bytes();\n///\n/// // Since we sub-slice the haystack, the search doesn't know about the\n/// // larger context and assumes that `123` is surrounded by word\n/// // boundaries. And of course, the match position is reported relative\n/// // to the sub-slice as well, which means we get `3` instead of `6`.\n/// let input = Input::new(&haystack[3..6]);\n/// let expected = Some(HalfMatch::must(0, 3));\n/// let got = dfa.try_search_fwd(&input)?;\n/// assert_eq!(expected, got);\n///\n/// // But if we provide the bounds of the search within the context of the\n/// // entire haystack, then the search can take the surrounding context\n/// // into account. (And if we did find a match, it would be reported\n/// // as a valid offset into `haystack` instead of its sub-slice.)\n/// let input = Input::new(haystack).range(3..6);\n/// let expected = None;\n/// let got = dfa.try_search_fwd(&input)?;\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "fn try_search_fwd(",
    "    &self,",
    "    input: &Input<'_>,",
    ") -> Result<Option<HalfMatch>, MatchError> {",
    "    let utf8empty = self.has_empty() && self.is_utf8();",
    "    let hm = match search::find_fwd(&self, input)? {",
    "        None => return Ok(None),",
    "        Some(hm) if !utf8empty => return Ok(Some(hm)),",
    "        Some(hm) => hm,",
    "    };",
    "    // We get to this point when we know our DFA can match the empty string",
    "    // AND when UTF-8 mode is enabled. In this case, we skip any matches",
    "    // whose offset splits a codepoint. Such a match is necessarily a",
    "    // zero-width match, because UTF-8 mode requires the underlying NFA",
    "    // to be built such that all non-empty matches span valid UTF-8.",
    "    // Therefore, any match that ends in the middle of a codepoint cannot",
    "    // be part of a span of valid UTF-8 and thus must be an empty match.",
    "    // In such cases, we skip it, so as not to report matches that split a",
    "    // codepoint.",
    "    //",
    "    // Note that this is not a checked assumption. Callers *can* provide an",
    "    // NFA with UTF-8 mode enabled but produces non-empty matches that span",
    "    // invalid UTF-8. But doing so is documented to result in unspecified",
    "    // behavior.",
    "    empty::skip_splits_fwd(input, hm, hm.offset(), |input| {",
    "        let got = search::find_fwd(&self, input)?;",
    "        Ok(got.map(|hm| (hm, hm.offset())))",
    "    })",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 4,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "true",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 1302,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "true",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)? matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1304,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        10,
        15,
        18,
        19,
        16,
        21,
        22,
        23,
        27
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "true",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)? matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1304,
          "bound": null
        }
      ],
      "ret": "Ok(Some(hm))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        10,
        15,
        18,
        20,
        25,
        26,
        27
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "true",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)? matches None",
          "norm": null,
          "value": "true",
          "line": 1302,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        10,
        14,
        17,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "false",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 1302,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        11,
        12,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "false",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)? matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "true",
          "line": 1304,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        10,
        15,
        18,
        19,
        16,
        21,
        22,
        23,
        27
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "false",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)? matches Some(hm)",
          "norm": null,
          "value": "true",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "utf8empty",
          "norm": null,
          "value": "false",
          "line": 1304,
          "bound": null
        }
      ],
      "ret": "Ok(Some(hm))",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        10,
        15,
        18,
        20,
        25,
        26,
        27
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.has_empty()",
          "norm": null,
          "value": "false",
          "line": 1301,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "search::find_fwd(&self, input)? matches None",
          "norm": null,
          "value": "true",
          "line": 1302,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        10,
        14,
        17,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}