{
  "name": "regex_automata::nfa::thompson::backtrack::{impl#2}::reset_cache",
  "mod_info": {
    "name": "nfa::thompson::backtrack",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:57:1:57:19"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/backtrack.rs:709:5:711:6",
  "doc": "/// Reset the given cache such that it can be used for searching with the\n/// this `BoundedBacktracker` (and only this `BoundedBacktracker`).\n///\n/// A cache reset permits reusing memory already allocated in this cache\n/// with a different `BoundedBacktracker`.\n///\n/// # Example\n///\n/// This shows how to re-purpose a cache for use with a different\n/// `BoundedBacktracker`.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     nfa::thompson::backtrack::BoundedBacktracker,\n///     Match,\n/// };\n///\n/// let re1 = BoundedBacktracker::new(r\"\\w\")?;\n/// let re2 = BoundedBacktracker::new(r\"\\W\")?;\n///\n/// let mut cache = re1.create_cache();\n/// assert_eq!(\n///     Some(Ok(Match::must(0, 0..2))),\n///     re1.try_find_iter(&mut cache, \"Δ\").next(),\n/// );\n///\n/// // Using 'cache' with re2 is not allowed. It may result in panics or\n/// // incorrect results. In order to re-purpose the cache, we must reset\n/// // it with the BoundedBacktracker we'd like to use it with.\n/// //\n/// // Similarly, after this reset, using the cache with 're1' is also not\n/// // allowed.\n/// cache.reset(&re2);\n/// assert_eq!(\n///     Some(Ok(Match::must(0, 0..3))),\n///     re2.try_find_iter(&mut cache, \"☃\").next(),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn reset_cache(&self, cache: &mut Cache) {",
    "    cache.reset(self);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}