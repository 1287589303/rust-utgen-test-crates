{
  "name": "regex_automata::util::wire::write_endianness_check",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:515:1:524:2",
  "doc": "/// Writes 0xFEFF as an integer using the given endianness.\n///\n/// This is useful for writing into the header of a serialized object. It can\n/// be read during deserialization as a sanity check to ensure the proper\n/// endianness is used.\n///\n/// Upon success, the total number of bytes written is returned.\n",
  "code": [
    "pub(crate) fn write_endianness_check<E: Endian>(",
    "    dst: &mut [u8],",
    ") -> Result<usize, SerializeError> {",
    "    let nwrite = write_endianness_check_len();",
    "    if dst.len() < nwrite {",
    "        return Err(SerializeError::buffer_too_small(\"endianness check\"));",
    "    }",
    "    E::write_u32(0xFEFF, dst);",
    "    Ok(nwrite)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "true",
          "line": 519,
          "bound": null
        }
      ],
      "ret": "Err(SerializeError::buffer_too_small(\"endianness check\"))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dst.len() < nwrite",
          "norm": null,
          "value": "false",
          "line": 519,
          "bound": "dst.len() == nwrite"
        }
      ],
      "ret": "Ok(nwrite)",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}