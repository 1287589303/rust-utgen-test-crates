{
  "name": "regex_automata::dfa::determinize::{impl#0}::run",
  "mod_info": {
    "name": "dfa::determinize",
    "loc": "regex-automata/src/dfa/mod.rs:350:1:350:17"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/determinize.rs:45:5:77:6",
  "doc": "/// Run determinization on the given NFA and write the resulting DFA into\n/// the one given. The DFA given should be initialized but otherwise empty.\n/// \"Initialized\" means that it is setup to handle the NFA's byte classes,\n/// number of patterns and whether to build start states for each pattern.\n",
  "code": [
    "pub fn run(",
    "    &self,",
    "    nfa: &thompson::NFA,",
    "    dfa: &mut dense::OwnedDFA,",
    ") -> Result<(), BuildError> {",
    "    let dead = State::dead();",
    "    let quit = State::dead();",
    "    let mut cache = StateMap::default();",
    "    // We only insert the dead state here since its representation is",
    "    // identical to the quit state. And we never want anything pointing",
    "    // to the quit state other than specific transitions derived from the",
    "    // determinizer's configured \"quit\" bytes.",
    "    //",
    "    // We do put the quit state into 'builder_states' below. This ensures",
    "    // that a proper DFA state ID is allocated for it, and that no other",
    "    // DFA state uses the \"location after the DEAD state.\" That is, it",
    "    // is assumed that the quit state is always the state immediately",
    "    // following the DEAD state.",
    "    cache.insert(dead.clone(), DEAD);",
    "",
    "    let runner = Runner {",
    "        config: self.clone(),",
    "        nfa,",
    "        dfa,",
    "        builder_states: alloc::vec![dead, quit],",
    "        cache,",
    "        memory_usage_state: 0,",
    "        sparses: SparseSets::new(nfa.states().len()),",
    "        stack: alloc::vec![],",
    "        scratch_state_builder: StateBuilderEmpty::new(),",
    "    };",
    "    runner.run()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}