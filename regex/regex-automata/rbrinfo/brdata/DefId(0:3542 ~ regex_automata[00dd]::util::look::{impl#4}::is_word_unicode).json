{
  "name": "regex_automata::util::look::{impl#4}::is_word_unicode",
  "mod_info": {
    "name": "util::look",
    "loc": "regex-automata/src/util/mod.rs:38:1:38:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/look.rs:1018:5:1026:6",
  "doc": "/// Returns true when [`Look::WordUnicode`] is satisfied `at` the given\n/// position in `haystack`.\n///\n/// # Panics\n///\n/// This may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n///\n/// # Errors\n///\n/// This returns an error when Unicode word boundary tables\n/// are not available. Specifically, this only occurs when the\n/// `unicode-word-boundary` feature is not enabled.\n",
  "code": [
    "pub fn is_word_unicode(",
    "    &self,",
    "    haystack: &[u8],",
    "    at: usize,",
    ") -> Result<bool, UnicodeWordBoundaryError> {",
    "    let word_before = is_word_char::rev(haystack, at)?;",
    "    let word_after = is_word_char::fwd(haystack, at)?;",
    "    Ok(word_before != word_after)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "is_word_char::rev(haystack, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "is_word_char::rev(haystack, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "is_word_char::fwd(haystack, at)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "is_word_char::rev(haystack, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "is_word_char::fwd(haystack, at)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(word_before != word_after)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        12,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}