{
  "name": "regex_automata::meta::regex::{impl#21}::build_from_hir",
  "mod_info": {
    "name": "meta::regex",
    "loc": "regex-automata/src/meta/mod.rs:57:1:57:11"
  },
  "visible": true,
  "loc": "regex-automata/src/meta/regex.rs:3482:5:3484:6",
  "doc": "/// Builds a `Regex` directly from an `Hir` expression.\n///\n/// This is useful if you needed to parse a pattern string into an `Hir`\n/// for other reasons (such as analysis or transformations). This routine\n/// permits building a `Regex` directly from the `Hir` expression instead\n/// of first converting the `Hir` back to a pattern string.\n///\n/// When using this method, any options set via [`Builder::syntax`] are\n/// ignored. Namely, the syntax options only apply when parsing a pattern\n/// string, which isn't relevant here.\n///\n/// If there was a problem building the underlying regex matcher for the\n/// given `Hir`, then an error is returned.\n///\n/// # Example\n///\n/// This example shows how one can hand-construct an `Hir` expression and\n/// build a regex from it without doing any parsing at all.\n///\n/// ```\n/// use {\n///     regex_automata::{meta::Regex, Match},\n///     regex_syntax::hir::{Hir, Look},\n/// };\n///\n/// // (?Rm)^foo$\n/// let hir = Hir::concat(vec![\n///     Hir::look(Look::StartCRLF),\n///     Hir::literal(\"foo\".as_bytes()),\n///     Hir::look(Look::EndCRLF),\n/// ]);\n/// let re = Regex::builder()\n///     .build_from_hir(&hir)?;\n/// let hay = \"\\r\\nfoo\\r\\n\";\n/// assert_eq!(Some(Match::must(0, 2..5)), re.find(hay));\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn build_from_hir(&self, hir: &Hir) -> Result<Regex, BuildError> {",
    "    self.build_many_from_hir(&[hir])",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}