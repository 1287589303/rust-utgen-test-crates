{
  "name": "regex_automata::meta::strategy::{impl#3}::try_search_mayfail",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:550:5:564:6",
  "doc": "",
  "code": [
    "fn try_search_mayfail(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    ") -> Option<Result<Option<Match>, RetryFailError>> {",
    "    if let Some(e) = self.dfa.get(input) {",
    "        trace!(\"using full DFA for search at {:?}\", input.get_span());",
    "        Some(e.try_search(input))",
    "    } else if let Some(e) = self.hybrid.get(input) {",
    "        trace!(\"using lazy DFA for search at {:?}\", input.get_span());",
    "        Some(e.try_search(&mut cache.hybrid, input))",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 555,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 558,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        5,
        6,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 555,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 558,
          "bound": null
        }
      ],
      "ret": "Some(e.try_search(&mut cache.hybrid, input))",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        9,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 555,
          "bound": null
        }
      ],
      "ret": "Some(e.try_search(input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        12
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}