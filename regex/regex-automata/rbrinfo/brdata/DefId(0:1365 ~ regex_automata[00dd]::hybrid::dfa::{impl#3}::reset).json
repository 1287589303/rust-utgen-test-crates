{
  "name": "regex_automata::hybrid::dfa::{impl#3}::reset",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:1940:5:1942:6",
  "doc": "/// Reset this cache such that it can be used for searching with the given\n/// lazy DFA (and only that DFA).\n///\n/// A cache reset permits reusing memory already allocated in this cache\n/// with a different lazy DFA.\n///\n/// Resetting a cache sets its \"clear count\" to 0. This is relevant if the\n/// lazy DFA has been configured to \"give up\" after it has cleared the\n/// cache a certain number of times.\n///\n/// Any lazy state ID generated by the cache prior to resetting it is\n/// invalid after the reset.\n///\n/// # Example\n///\n/// This shows how to re-purpose a cache for use with a different DFA.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{hybrid::dfa::DFA, HalfMatch, Input};\n///\n/// let dfa1 = DFA::new(r\"\\w\")?;\n/// let dfa2 = DFA::new(r\"\\W\")?;\n///\n/// let mut cache = dfa1.create_cache();\n/// assert_eq!(\n///     Some(HalfMatch::must(0, 2)),\n///     dfa1.try_search_fwd(&mut cache, &Input::new(\"Δ\"))?,\n/// );\n///\n/// // Using 'cache' with dfa2 is not allowed. It may result in panics or\n/// // incorrect results. In order to re-purpose the cache, we must reset\n/// // it with the DFA we'd like to use it with.\n/// //\n/// // Similarly, after this reset, using the cache with 'dfa1' is also not\n/// // allowed.\n/// cache.reset(&dfa2);\n/// assert_eq!(\n///     Some(HalfMatch::must(0, 3)),\n///     dfa2.try_search_fwd(&mut cache, &Input::new(\"☃\"))?,\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn reset(&mut self, dfa: &DFA) {",
    "    Lazy::new(dfa, self).reset_cache()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}