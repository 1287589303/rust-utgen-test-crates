{
  "name": "regex_automata::hybrid::dfa::{impl#0}::pattern_len",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:385:5:387:6",
  "doc": "/// Returns the total number of patterns compiled into this lazy DFA.\n///\n/// In the case of a DFA that contains no patterns, this returns `0`.\n///\n/// # Example\n///\n/// This example shows the pattern length for a DFA that never matches:\n///\n/// ```\n/// use regex_automata::hybrid::dfa::DFA;\n///\n/// let dfa = DFA::never_match()?;\n/// assert_eq!(dfa.pattern_len(), 0);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// And another example for a DFA that matches at every position:\n///\n/// ```\n/// use regex_automata::hybrid::dfa::DFA;\n///\n/// let dfa = DFA::always_match()?;\n/// assert_eq!(dfa.pattern_len(), 1);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// And finally, a DFA that was constructed from multiple patterns:\n///\n/// ```\n/// use regex_automata::hybrid::dfa::DFA;\n///\n/// let dfa = DFA::new_many(&[\"[0-9]+\", \"[a-z]+\", \"[A-Z]+\"])?;\n/// assert_eq!(dfa.pattern_len(), 3);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn pattern_len(&self) -> usize {",
    "    self.nfa.pattern_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}