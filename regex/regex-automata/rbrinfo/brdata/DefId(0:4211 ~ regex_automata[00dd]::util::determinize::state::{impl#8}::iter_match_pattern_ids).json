{
  "name": "regex_automata::util::determinize::state::{impl#8}::iter_match_pattern_ids",
  "mod_info": {
    "name": "util::determinize::state",
    "loc": "regex-automata/src/util/determinize/mod.rs:57:1:57:11"
  },
  "visible": false,
  "loc": "regex-automata/src/util/determinize/state.rs:499:5:520:6",
  "doc": "/// Calls the given function on every pattern ID in this state.\n",
  "code": [
    "fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, mut f: F) {",
    "    if !self.is_match() {",
    "        return;",
    "    }",
    "    // As an optimization for a very common case, when this is a match",
    "    // state for an NFA with only one pattern, we don't actually write the",
    "    // pattern ID to the state representation. Instead, we know it must",
    "    // be there since it is the only possible choice.",
    "    if !self.has_pattern_ids() {",
    "        f(PatternID::ZERO);",
    "        return;",
    "    }",
    "    let mut pids = &self.0[13..self.pattern_offset_end()];",
    "    while !pids.is_empty() {",
    "        let pid = wire::read_u32(pids);",
    "        pids = &pids[PatternID::SIZE..];",
    "        // This is OK since we only ever serialize valid PatternIDs to",
    "        // states. And since pattern IDs can never exceed a usize, the",
    "        // unwrap is OK.",
    "        f(PatternID::new_unchecked(usize::try_from(pid).unwrap()));",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_match()",
          "norm": null,
          "value": "true",
          "line": 500,
          "bound": null
        },
        {
          "cond": "self.has_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        },
        {
          "cond": "pids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_match()",
          "norm": null,
          "value": "true",
          "line": 500,
          "bound": null
        },
        {
          "cond": "self.has_pattern_ids()",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        },
        {
          "cond": "pids.is_empty()",
          "norm": null,
          "value": "false",
          "line": 512,
          "bound": null
        },
        {
          "cond": "pids.is_empty()",
          "norm": null,
          "value": "true",
          "line": 512,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        10,
        11,
        12,
        13,
        22
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_match()",
          "norm": null,
          "value": "true",
          "line": 500,
          "bound": null
        },
        {
          "cond": "self.has_pattern_ids()",
          "norm": null,
          "value": "false",
          "line": 507,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.is_match()",
          "norm": null,
          "value": "false",
          "line": 500,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}