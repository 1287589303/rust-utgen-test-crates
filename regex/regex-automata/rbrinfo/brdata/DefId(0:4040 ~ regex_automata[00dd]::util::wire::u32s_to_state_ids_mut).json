{
  "name": "regex_automata::util::wire::u32s_to_state_ids_mut",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:285:1:297:2",
  "doc": "/// Safely converts a `&mut [u32]` to `&mut [StateID]` with zero cost.\n",
  "code": [
    "pub(crate) fn u32s_to_state_ids_mut(slice: &mut [u32]) -> &mut [StateID] {",
    "    // SAFETY: This is safe because StateID is defined to have the same memory",
    "    // representation as a u32 (it is repr(transparent)). While not every u32",
    "    // is a \"valid\" StateID, callers are not permitted to rely on the validity",
    "    // of StateIDs for memory safety. It can only lead to logical errors. (This",
    "    // is why StateID::new_unchecked is safe.)",
    "    unsafe {",
    "        core::slice::from_raw_parts_mut(",
    "            slice.as_mut_ptr().cast::<StateID>(),",
    "            slice.len(),",
    "        )",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe {\n        core::slice::from_raw_parts_mut(\n            slice.as_mut_ptr().cast::<StateID>(),\n            slice.len(),\n        )\n    }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}