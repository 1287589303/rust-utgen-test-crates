{
  "name": "regex_automata::util::wire::try_read_state_id",
  "mod_info": {
    "name": "util::wire",
    "loc": "regex-automata/src/util/mod.rs:46:1:46:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/wire.rs:621:1:629:2",
  "doc": "/// Attempts to read a state ID from the given slice. If the slice has an\n/// insufficient number of bytes or if the state ID exceeds the limit for\n/// the current target, then this returns an error.\n///\n/// Upon success, this also returns the number of bytes read.\n",
  "code": [
    "pub(crate) fn try_read_state_id(",
    "    slice: &[u8],",
    "    what: &'static str,",
    ") -> Result<(StateID, usize), DeserializeError> {",
    "    if slice.len() < StateID::SIZE {",
    "        return Err(DeserializeError::buffer_too_small(what));",
    "    }",
    "    read_state_id(slice, what)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "slice.len() < StateID::SIZE",
          "norm": "StateID::SIZE > slice.len()",
          "value": "true",
          "line": 625,
          "bound": null
        }
      ],
      "ret": "Err(DeserializeError::buffer_too_small(what))",
      "path": [
        0,
        1,
        2,
        3,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "slice.len() < StateID::SIZE",
          "norm": "StateID::SIZE > slice.len()",
          "value": "false",
          "line": 625,
          "bound": "slice.len() == StateID::SIZE"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}