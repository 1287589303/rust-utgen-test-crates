{
  "name": "regex_automata::dfa::dense::{impl#14}::swap",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": false,
  "loc": "regex-automata/src/dfa/dense.rs:3514:5:3523:6",
  "doc": "/// Swap the two states given in this transition table.\n///\n/// This routine does not do anything to check the correctness of this\n/// swap. Callers must ensure that other states pointing to id1 and id2 are\n/// updated appropriately.\n///\n/// Both id1 and id2 must point to valid states, otherwise this panics.\n",
  "code": [
    "fn swap(&mut self, id1: StateID, id2: StateID) {",
    "    assert!(self.is_valid(id1), \"invalid 'id1' state: {:?}\", id1);",
    "    assert!(self.is_valid(id2), \"invalid 'id2' state: {:?}\", id2);",
    "    // We only need to swap the parts of the state that are used. So if the",
    "    // stride is 64, but the alphabet length is only 33, then we save a lot",
    "    // of work.",
    "    for b in 0..self.classes.alphabet_len() {",
    "        self.table.swap(id1.as_usize() + b, id2.as_usize() + b);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_valid(id1)",
          "norm": null,
          "value": "true",
          "line": 3515,
          "bound": null
        },
        {
          "cond": "self.is_valid(id2)",
          "norm": null,
          "value": "true",
          "line": 3516,
          "bound": null
        },
        {
          "cond": "b in 0..self.classes.alphabet_len()",
          "norm": null,
          "value": "true",
          "line": 3520,
          "bound": null
        },
        {
          "cond": "b in 0..self.classes.alphabet_len()",
          "norm": null,
          "value": "false",
          "line": 3520,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        13,
        14,
        15,
        17,
        19
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_valid(id1)",
          "norm": null,
          "value": "true",
          "line": 3515,
          "bound": null
        },
        {
          "cond": "self.is_valid(id2)",
          "norm": null,
          "value": "true",
          "line": 3516,
          "bound": null
        },
        {
          "cond": "b in 0..self.classes.alphabet_len()",
          "norm": null,
          "value": "false",
          "line": 3520,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_valid(id1)",
          "norm": null,
          "value": "true",
          "line": 3515,
          "bound": null
        },
        {
          "cond": "self.is_valid(id2)",
          "norm": null,
          "value": "false",
          "line": 3516,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        8,
        9,
        10,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.is_valid(id1)",
          "norm": null,
          "value": "false",
          "line": 3515,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}