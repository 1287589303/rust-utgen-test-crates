{
  "name": "regex_automata::util::captures::{impl#7}::group_len",
  "mod_info": {
    "name": "util::captures",
    "loc": "regex-automata/src/util/mod.rs:32:1:32:18"
  },
  "visible": true,
  "loc": "regex-automata/src/util/captures.rs:1989:5:1991:6",
  "doc": "/// Return the number of capture groups in a pattern.\n///\n/// If the pattern ID is invalid, then this returns `0`.\n///\n/// # Example\n///\n/// This example shows how the values returned by this routine may vary\n/// for different patterns and NFA configurations.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, WhichCaptures}, PatternID};\n///\n/// let nfa = NFA::new(r\"(a)(b)(c)\")?;\n/// // There are 3 explicit groups in the pattern's concrete syntax and\n/// // 1 unnamed and implicit group spanning the entire pattern.\n/// assert_eq!(4, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// let nfa = NFA::new(r\"abc\")?;\n/// // There is just the unnamed implicit group.\n/// assert_eq!(1, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build(r\"abc\")?;\n/// // We disabled capturing groups, so there are none.\n/// assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build(r\"(a)(b)(c)\")?;\n/// // We disabled capturing groups, so there are none, even if there are\n/// // explicit groups in the concrete syntax.\n/// assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn group_len(&self, pid: PatternID) -> usize {",
    "    self.0.group_len(pid)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}