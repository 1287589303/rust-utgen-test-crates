{
  "name": "regex_automata::util::iter::{impl#0}::try_advance",
  "mod_info": {
    "name": "util::iter",
    "loc": "regex-automata/src/util/mod.rs:36:1:36:14"
  },
  "visible": true,
  "loc": "regex-automata/src/util/iter.rs:424:5:444:6",
  "doc": "/// Return the next match for a fallible search if one exists, and advance\n/// to the next position.\n///\n/// This is like `advance`, except it permits callers to handle errors\n/// during iteration.\n",
  "code": [
    "pub fn try_advance<F>(",
    "    &mut self,",
    "    mut finder: F,",
    ") -> Result<Option<Match>, MatchError>",
    "where",
    "    F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,",
    "{",
    "    let mut m = match finder(&self.input)? {",
    "        None => return Ok(None),",
    "        Some(m) => m,",
    "    };",
    "    if m.is_empty() && Some(m.end()) == self.last_match_end {",
    "        m = match self.handle_overlapping_empty_match(m, finder)? {",
    "            None => return Ok(None),",
    "            Some(m) => m,",
    "        };",
    "    }",
    "    self.input.set_start(m.end());",
    "    self.last_match_end = Some(m.end());",
    "    Ok(Some(m))",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "finder(&self.input)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        40,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "m.is_empty()",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "Some(m.end()) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_match(m, finder)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 436,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        37,
        38,
        39,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "m.is_empty()",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "Some(m.end()) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 436,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_match(m, finder)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 436,
          "bound": null
        }
      ],
      "ret": "Ok(Some(m))",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        27,
        29,
        33,
        34,
        35,
        36,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "m.is_empty()",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "Some(m.end()) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 436,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 436,
          "bound": null
        },
        {
          "cond": "self.handle_overlapping_empty_match(m, finder)? matches None",
          "norm": null,
          "value": "true",
          "line": 436,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        22,
        26,
        28,
        38,
        39,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "m.is_empty()",
          "norm": null,
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "Some(m.end()) == self.last_match_end",
          "norm": null,
          "value": "false",
          "line": 435,
          "bound": null
        }
      ],
      "ret": "Ok(Some(m))",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        16,
        30,
        32,
        33,
        34,
        35,
        36,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "m.is_empty()",
          "norm": null,
          "value": "false",
          "line": 435,
          "bound": null
        }
      ],
      "ret": "Ok(Some(m))",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        31,
        32,
        33,
        34,
        35,
        36,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        },
        {
          "cond": "finder(&self.input)? matches None",
          "norm": null,
          "value": "true",
          "line": 431,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        5,
        9,
        11,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}