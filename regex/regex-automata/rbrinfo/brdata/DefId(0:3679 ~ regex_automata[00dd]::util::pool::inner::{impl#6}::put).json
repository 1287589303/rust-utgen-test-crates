{
  "name": "regex_automata::util::pool::inner::{impl#6}::put",
  "mod_info": {
    "name": "util::pool::inner",
    "loc": "regex-automata/src/util/pool.rs:235:1:793:2"
  },
  "visible": false,
  "loc": "regex-automata/src/util/pool.rs:729:9:737:10",
  "doc": "/// Consumes this guard and puts it back into the pool.\n",
  "code": [
    "pub(super) fn put(this: PoolGuard<'_, T, F>) {",
    "    // Since this is effectively consuming the guard and putting the",
    "    // value back into the pool, there's no reason to run its Drop",
    "    // impl after doing this. I don't believe there is a correctness",
    "    // problem with doing so, but there's definitely a perf problem",
    "    // by redoing this work. So we avoid it.",
    "    let mut this = core::mem::ManuallyDrop::new(this);",
    "    this.put_imp();",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}