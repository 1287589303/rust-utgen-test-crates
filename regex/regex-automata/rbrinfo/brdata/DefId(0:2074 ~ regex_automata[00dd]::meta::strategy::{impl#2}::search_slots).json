{
  "name": "regex_automata::meta::strategy::{impl#2}::search_slots",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:413:5:427:6",
  "doc": "",
  "code": [
    "fn search_slots(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    "    slots: &mut [Option<NonMaxUsize>],",
    ") -> Option<PatternID> {",
    "    let m = self.search(cache, input)?;",
    "    if let Some(slot) = slots.get_mut(0) {",
    "        *slot = NonMaxUsize::new(m.start());",
    "    }",
    "    if let Some(slot) = slots.get_mut(1) {",
    "        *slot = NonMaxUsize::new(m.end());",
    "    }",
    "    Some(m.pattern())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.search(cache, input)?",
          "norm": null,
          "value": "Err/None",
          "line": 419,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.search(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 419,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(0)",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(1)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        }
      ],
      "ret": "Some(m.pattern())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        13,
        14,
        15,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.search(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 419,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(0)",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(1)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        }
      ],
      "ret": "Some(m.pattern())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.search(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 419,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(0)",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(1)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        }
      ],
      "ret": "Some(m.pattern())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.search(cache, input)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 419,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(0)",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "let Some(slot) = slots.get_mut(1)",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        }
      ],
      "ret": "Some(m.pattern())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}