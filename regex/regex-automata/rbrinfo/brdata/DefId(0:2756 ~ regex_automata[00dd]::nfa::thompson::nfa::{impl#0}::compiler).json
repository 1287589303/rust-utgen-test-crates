{
  "name": "regex_automata::nfa::thompson::nfa::{impl#0}::compiler",
  "mod_info": {
    "name": "nfa::thompson::nfa",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:66:1:66:9"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/nfa.rs:381:5:383:6",
  "doc": "/// Return a compiler for configuring the construction of an `NFA`.\n///\n/// This is a convenience routine to avoid needing to import the\n/// [`Compiler`] type in common cases.\n///\n/// # Example\n///\n/// This example shows how to build an NFA that is permitted match invalid\n/// UTF-8. Without the additional syntax configuration here, compilation of\n/// `(?-u:.)` would fail because it is permitted to match invalid UTF-8.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::syntax,\n///     Match,\n/// };\n///\n/// let re = PikeVM::builder()\n///     .syntax(syntax::Config::new().utf8(false))\n///     .build(r\"[a-z]+(?-u:.)\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// let expected = Some(Match::must(0, 1..5));\n/// re.captures(&mut cache, b\"\\xFFabc\\xFF\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn compiler() -> Compiler {",
    "    Compiler::new()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}