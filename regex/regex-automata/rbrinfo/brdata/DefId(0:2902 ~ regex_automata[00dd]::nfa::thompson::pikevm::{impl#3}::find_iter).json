{
  "name": "regex_automata::nfa::thompson::pikevm::{impl#3}::find_iter",
  "mod_info": {
    "name": "nfa::thompson::pikevm",
    "loc": "regex-automata/src/nfa/thompson/mod.rs:68:1:68:16"
  },
  "visible": true,
  "loc": "regex-automata/src/nfa/thompson/pikevm.rs:889:5:897:6",
  "doc": "/// Returns an iterator over all non-overlapping leftmost matches in the\n/// given bytes. If no match exists, then the iterator yields no elements.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Match};\n///\n/// let re = PikeVM::new(\"foo[0-9]+\")?;\n/// let mut cache = re.create_cache();\n///\n/// let text = \"foo1 foo12 foo123\";\n/// let matches: Vec<Match> = re.find_iter(&mut cache, text).collect();\n/// assert_eq!(matches, vec![\n///     Match::must(0, 0..4),\n///     Match::must(0, 5..10),\n///     Match::must(0, 11..17),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn find_iter<'r, 'c, 'h, I: Into<Input<'h>>>(",
    "    &'r self,",
    "    cache: &'c mut Cache,",
    "    input: I,",
    ") -> FindMatches<'r, 'c, 'h> {",
    "    let caps = Captures::matches(self.get_nfa().group_info().clone());",
    "    let it = iter::Searcher::new(input.into());",
    "    FindMatches { re: self, cache, caps, it }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "FindMatches { re: self, cache, caps, it }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}