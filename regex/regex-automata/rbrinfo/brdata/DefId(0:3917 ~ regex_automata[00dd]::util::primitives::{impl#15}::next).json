{
  "name": "regex_automata::util::primitives::{impl#15}::next",
  "mod_info": {
    "name": "util::primitives",
    "loc": "regex-automata/src/util/mod.rs:42:1:42:20"
  },
  "visible": true,
  "loc": "regex-automata/src/util/primitives.rs:409:5:418:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<SmallIndex> {",
    "    if self.rng.start >= self.rng.end {",
    "        return None;",
    "    }",
    "    let next_id = self.rng.start + 1;",
    "    let id = core::mem::replace(&mut self.rng.start, next_id);",
    "    // new_unchecked is OK since we asserted that the number of",
    "    // elements in this iterator will fit in an ID at construction.",
    "    Some(SmallIndex::new_unchecked(id))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.rng.start >= self.rng.end",
          "norm": "self.rng.end <= self.rng.start",
          "value": "true",
          "line": 410,
          "bound": "self.rng.start == self.rng.end"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.rng.start >= self.rng.end",
          "norm": "self.rng.end <= self.rng.start",
          "value": "false",
          "line": 410,
          "bound": null
        }
      ],
      "ret": "Some(SmallIndex::new_unchecked(id))",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}