{
  "name": "regex_automata::meta::strategy::{impl#4}::search_half",
  "mod_info": {
    "name": "meta::strategy",
    "loc": "regex-automata/src/meta/mod.rs:61:1:61:14"
  },
  "visible": false,
  "loc": "regex-automata/src/meta/strategy.rs:733:5:762:6",
  "doc": "",
  "code": [
    "fn search_half(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    ") -> Option<HalfMatch> {",
    "    // The main difference with 'search' is that if we're using a DFA, we",
    "    // can use a single forward scan without needing to run the reverse",
    "    // DFA.",
    "    if let Some(e) = self.dfa.get(input) {",
    "        trace!(\"using full DFA for half search at {:?}\", input.get_span());",
    "        match e.try_search_half_fwd(input) {",
    "            Ok(x) => x,",
    "            Err(_err) => {",
    "                trace!(\"full DFA half search failed: {}\", _err);",
    "                self.search_half_nofail(cache, input)",
    "            }",
    "        }",
    "    } else if let Some(e) = self.hybrid.get(input) {",
    "        trace!(\"using lazy DFA for half search at {:?}\", input.get_span());",
    "        match e.try_search_half_fwd(&mut cache.hybrid, input) {",
    "            Ok(x) => x,",
    "            Err(_err) => {",
    "                trace!(\"lazy DFA half search failed: {}\", _err);",
    "                self.search_half_nofail(cache, input)",
    "            }",
    "        }",
    "    } else {",
    "        self.search_half_nofail(cache, input)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 750,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        12,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 750,
          "bound": null
        },
        {
          "cond": "e.try_search_half_fwd(&mut cache.hybrid, input) matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 752,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        18,
        20,
        21,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        },
        {
          "cond": "let Some(e) = self.hybrid.get(input)",
          "norm": null,
          "value": "true",
          "line": 750,
          "bound": null
        },
        {
          "cond": "e.try_search_half_fwd(&mut cache.hybrid, input) matches Ok(x)",
          "norm": null,
          "value": "true",
          "line": 752,
          "bound": null
        },
        {
          "cond": "e.try_search_half_fwd(&mut cache.hybrid, input) matches Ok(x)",
          "norm": null,
          "value": "true",
          "line": 752,
          "bound": null
        }
      ],
      "ret": "x",
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        17,
        19,
        21,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        },
        {
          "cond": "e.try_search_half_fwd(input) matches Err(_err)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        10,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(e) = self.dfa.get(input)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        },
        {
          "cond": "e.try_search_half_fwd(input) matches Ok(x)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        },
        {
          "cond": "e.try_search_half_fwd(input) matches Ok(x)",
          "norm": null,
          "value": "true",
          "line": 743,
          "bound": null
        }
      ],
      "ret": "x",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        10,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}