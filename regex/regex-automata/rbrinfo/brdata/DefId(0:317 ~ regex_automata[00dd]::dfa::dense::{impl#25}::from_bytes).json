{
  "name": "regex_automata::dfa::dense::{impl#25}::from_bytes",
  "mod_info": {
    "name": "dfa::dense",
    "loc": "regex-automata/src/dfa/mod.rs:337:1:337:15"
  },
  "visible": true,
  "loc": "regex-automata/src/dfa/dense.rs:4705:5:4715:6",
  "doc": "/// Deserializes the flags from the given slice. On success, this also\n/// returns the number of bytes read from the slice.\n",
  "code": [
    "pub(crate) fn from_bytes(",
    "    slice: &[u8],",
    ") -> Result<(Flags, usize), DeserializeError> {",
    "    let (bits, nread) = wire::try_read_u32(slice, \"flag bitset\")?;",
    "    let flags = Flags {",
    "        has_empty: bits & (1 << 0) != 0,",
    "        is_utf8: bits & (1 << 1) != 0,",
    "        is_always_start_anchored: bits & (1 << 2) != 0,",
    "    };",
    "    Ok((flags, nread))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "wire::try_read_u32(slice, \"flag bitset\")?",
          "norm": null,
          "value": "Err/None",
          "line": 4708,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "wire::try_read_u32(slice, \"flag bitset\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 4708,
          "bound": null
        }
      ],
      "ret": "Ok((flags, nread))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}