{
  "name": "regex_automata::hybrid::dfa::{impl#2}::start_state_reverse",
  "mod_info": {
    "name": "hybrid::dfa",
    "loc": "regex-automata/src/hybrid/mod.rs:140:1:140:13"
  },
  "visible": true,
  "loc": "regex-automata/src/hybrid/dfa.rs:1630:5:1646:6",
  "doc": "/// Return the ID of the start state for this lazy DFA when executing a\n/// reverse search.\n///\n/// This is a convenience routine for calling [`DFA::start_state`] that\n/// converts the given [`Input`] to a [start configuration](start::Config).\n/// Additionally, if an error occurs, it is converted from a [`StartError`]\n/// to a [`MatchError`] using the offset information in the given\n/// [`Input`].\n///\n/// # Errors\n///\n/// This may return a [`MatchError`] if the search needs to give up when\n/// determining the start state (for example, if it sees a \"quit\" byte or\n/// if the cache has become inefficient). This can also return an error if\n/// the given `Input` contains an unsupported [`Anchored`] configuration.\n",
  "code": [
    "pub fn start_state_reverse(",
    "    &self,",
    "    cache: &mut Cache,",
    "    input: &Input<'_>,",
    ") -> Result<LazyStateID, MatchError> {",
    "    let config = start::Config::from_input_reverse(input);",
    "    self.start_state(cache, &config).map_err(|err| match err {",
    "        StartError::Cache { .. } => MatchError::gave_up(input.end()),",
    "        StartError::Quit { byte } => {",
    "            let offset = input.end();",
    "            MatchError::quit(byte, offset)",
    "        }",
    "        StartError::UnsupportedAnchored { mode } => {",
    "            MatchError::unsupported_anchored(mode)",
    "        }",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}